# evolution/algorithm.py

import time
from typing import List, Set, Tuple

from build.lib.fandango.language.grammar import DerivationTree
from fandango.constraints.base import Constraint
from fandango.language.grammar import (
    Grammar,
    Node,
)
from fandango.language.parse import parse_file


class FANDANGO:
    def __init__(
            self,
            grammar: Grammar,
            constraints: List[Constraint],
            population_size: int = 100,
            max_generations: int = 1000,
            elitism_rate: float = 0.1,
            crossover_rate: float = 0.8,
            mutation_rate: float = 0.2,
            verbose: bool = False,
    ):
        """
        Initialize the FANDANGO genetic algorithm. The algorithm will evolve a population of individuals
        that are generated by the given grammar, and will evaluate them against the given constraints.

        :param grammar: The grammar used to generate individuals.
        :param constraints: The constraints used to evaluate individuals.
        :param population_size: The size of the population.
        :param max_generations: The maximum number of generations to run the algorithm.
        :param elitism_rate: The rate of individuals that will be preserved in the next generation.
        :param crossover_rate: The rate of individuals that will undergo crossover.
        :param mutation_rate: The rate of individuals that will undergo mutation.
        :param verbose: Whether to print information about the evolution process.
        """
        self.grammar = grammar
        self.constraints = constraints
        self.population_size = population_size
        self.mutation_rate = mutation_rate
        self.crossover_rate = crossover_rate
        self.max_generations = max_generations
        self.elitism_rate = elitism_rate

        # Initialize population
        self.population = self.generate_random_initial_population()

        # Evaluate population
        self.fitness_cache = {}
        self.evaluation = self.evaluate_population()
        self.fitness = sum(fitness for fitness, _ in self.evaluation) / len(self.evaluation)

        self.verbose = verbose
        self.mutations_made = 0
        self.crossovers_made = 0

        self.solution = None
        self.time_taken = None

    def evolve(self) -> List[DerivationTree]:
        """
        Run the genetic algorithm to evolve the population over multiple generations.

        :return: The best solution found by the algorithm.
        """
        valid_solutions = set()
        start_time = time.time()

        for generation in range(1, self.max_generations + 1):
            if self.fitness >= 0.95:
                return self.population

    def generate_random_initial_population(self) -> List[DerivationTree]:
        """
        Generate the initial population of individuals.

        :return: A list of individuals.
        """
        return [self.grammar.fuzz() for _ in range(self.population_size)]

    def generate_coverage_initial_population(self) -> List[DerivationTree]:
        """
        Generate the initial population of individuals that maximize the coverage of the grammar.

        :return: A list of individuals.
        """
        pass

    def evaluate_population(self) -> Tuple[List[Node], Set[Node]]:
        """
        Evaluate the fitness of each individual in the population.

        :return: A list of tuples, each containing an individual, its fitness, and its validity.
        """
        pass


if __name__ == "__main__":
    grammar_, constraints_ = parse_file("../../evaluation/experiments/int/int.fan")

    fandango = FANDANGO(grammar_, constraints_, verbose=True)
    fandango.evolve()

    print(fandango.population)
