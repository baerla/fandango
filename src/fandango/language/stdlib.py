#!/usr/bin/env python3
# Fandango standard library

import string

stdlib = """# Standard library for Fandango
# This file is generated by src/fandango/language/stdlib.py
# Do not edit this file directly.

# We define each element as <_element> and then alias it to <element>.
# This is to allow users to override the aliased element.
# For example, if a user wants to override the definition of <digit>,
# they can do so by redefining <digit>, leaving <_digit> unchanged.

# We define each element using all alternatives to avoid biasing the grammar.
"""

def make_def(symbol: str, chars: str, force_binary=False) -> str:
    expansions = []
    for c in chars:
        if c in string.printable and not force_binary:
            expansions.append(repr(c))
        else:
            # Declare these as binary to force latin-1 encoding
            expansions.append(f"b'\\x{ord(c):02x}'")
    return make_rule(symbol, expansions)

def make_rule(symbol: str, expansions: list[str]) -> str:
    return (f"<_{symbol}> ::= " + " | ".join(expansions) + ";\n" +
            f"<{symbol}> ::= <_{symbol}>;\n\n")

def make_header(title: str) -> str:
    return f"\n# {title}\n"

def make_comment(comment: str) -> str:
    return f"# {comment}\n"

stdlib += make_header("Printable characters")
stdlib += make_def("printable", string.printable)
stdlib += make_def("whitespace", string.whitespace)
stdlib += make_def("digit", string.digits)
stdlib += make_def("hexdigit", string.hexdigits)
stdlib += make_def("octdigit", string.octdigits)
stdlib += make_def("ascii_letter", string.ascii_letters)
stdlib += make_def("ascii_lowercase_letter", string.ascii_lowercase)
stdlib += make_def("ascii_uppercase_letter", string.ascii_uppercase)
stdlib += make_def("punctuation", string.punctuation)
stdlib += make_def("alphanum", string.ascii_letters + string.digits)
stdlib += make_def("alphanum_", string.ascii_letters + string.digits + "_")

stdlib += make_header("ASCII control characters")
ASCII_CONTROL = ['NUL', 'SOH', 'STX', 'ETX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'HT', 'LF', 'VT', 'FF', 'CR', 'SO', 'SI', 'DLE', 'DC1', 'DC2', 'DC3', 'DC4', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', 'FS', 'GS', 'RS', 'US', 'SP']
for i in range(len(ASCII_CONTROL)):
    stdlib += make_def(ASCII_CONTROL[i], chr(i), force_binary=True)
stdlib += make_def('DEL', chr(127), force_binary=True)

stdlib += make_header("Bits")
stdlib += make_rule("bit", ['0', '1'])

stdlib += make_header("Bytes")
stdlib += make_def("byte", "".join(chr(c) for c in range(256)), force_binary=True)
stdlib += make_def("char", "".join(chr(c) for c in range(256)), force_binary=False)

stdlib += make_header("More data types")
stdlib += make_comment("This just specifies the length; interpretation is up to the user")
stdlib += make_rule("int8", ['<byte>'])
stdlib += make_rule("int16", ['<byte><byte>'])
stdlib += make_rule("int32", ['<byte>{4}'])
stdlib += make_rule("int64", ['<byte>{8}'])
stdlib += make_rule("float32", ['<byte>{4}'])
stdlib += make_rule("float64", ['<byte>{8}'])


stdlib += make_header("UUIDs")
stdlib += make_rule("uuid", ["<hexdigit>{8} '-' <hexdigit>{4} '-' <hexdigit>{4}'-' <hexdigit>{4} '-' <hexdigit>{12}"])


stdlib += make_header("ISO 8601 date and time")
stdlib += make_rule("iso8601date",
                    ["<iso8601year> '-' <iso8601month> ('-' <iso8601day>)?",
                     "<iso8601year><iso8601month><iso8601day>"])
stdlib += make_rule("iso8601year", ["('+'|'-')? <digit>{4}"])
stdlib += make_rule("iso8601month",
                    [f"'{month:02d}'" for month in range(1, 13)])
stdlib += make_rule("iso8601day",
                    [f"'{day:02d}'" for day in range(1, 32)])

stdlib += make_rule("iso8601weekdate",
                    ["<iso8601year> '-'? 'W' <iso8601week> ('-' <iso8601weekday>)?"])
stdlib += make_rule("iso8601week",
                    [f"'{week:02d}'" for week in range(1, 54)])
stdlib += make_rule("iso8601weekday",
                    [f"'{weekday:1d}'" for weekday in range(1, 8)])
stdlib += make_rule("iso8601ordinaldate",
                    ["<iso8601year> '-'? <iso8601ordinalday>)?"])
stdlib += make_rule("iso8601ordinalday",
                    [f"'{day:03d}'" for day in range(1, 357)])

stdlib += make_rule("iso8601time",
                    ["'T'? <iso8601hour> (':'? <iso8601minute> (':'? <iso8601second> (('.' | ',') <iso8601fraction>)? )? )? <iso8601timezone>?"])
stdlib += make_rule("iso8601hour",
                    [f"'{hour:02d}'" for hour in range(0, 24)])
stdlib += make_rule("iso8601minute",
                    [f"'{minute:02d}'" for minute in range(0, 60)])
stdlib += make_rule("iso8601second",
                    [f"'{second:02d}'" for second in range(0, 61)])
stdlib += make_rule("iso8601fraction", ["<digit>+"])

stdlib += make_rule("iso8601timezone", ["'Z'",
                                        "'+' <iso8601hour> (':'? <iso8601minute>)?",
                                        "'-' <iso8601hour> (':'? <iso8601minute>)?"])

stdlib += make_header("Fandango dancer")
stdlib += make_comment("We use this to test UTF-8 compatibility")
stdlib += make_rule("fandango_dancer", ["'ðŸ’ƒ'"])

if __name__ == "__main__":
    print(stdlib)   # Output the standard library