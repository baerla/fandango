# Generated from language/FandangoParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        119,
        2751,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        2,
        113,
        7,
        113,
        2,
        114,
        7,
        114,
        2,
        115,
        7,
        115,
        2,
        116,
        7,
        116,
        2,
        117,
        7,
        117,
        2,
        118,
        7,
        118,
        2,
        119,
        7,
        119,
        2,
        120,
        7,
        120,
        2,
        121,
        7,
        121,
        2,
        122,
        7,
        122,
        2,
        123,
        7,
        123,
        2,
        124,
        7,
        124,
        2,
        125,
        7,
        125,
        2,
        126,
        7,
        126,
        2,
        127,
        7,
        127,
        2,
        128,
        7,
        128,
        2,
        129,
        7,
        129,
        2,
        130,
        7,
        130,
        2,
        131,
        7,
        131,
        2,
        132,
        7,
        132,
        2,
        133,
        7,
        133,
        2,
        134,
        7,
        134,
        2,
        135,
        7,
        135,
        2,
        136,
        7,
        136,
        2,
        137,
        7,
        137,
        2,
        138,
        7,
        138,
        2,
        139,
        7,
        139,
        2,
        140,
        7,
        140,
        2,
        141,
        7,
        141,
        2,
        142,
        7,
        142,
        2,
        143,
        7,
        143,
        2,
        144,
        7,
        144,
        2,
        145,
        7,
        145,
        2,
        146,
        7,
        146,
        2,
        147,
        7,
        147,
        2,
        148,
        7,
        148,
        2,
        149,
        7,
        149,
        2,
        150,
        7,
        150,
        2,
        151,
        7,
        151,
        2,
        152,
        7,
        152,
        2,
        153,
        7,
        153,
        2,
        154,
        7,
        154,
        2,
        155,
        7,
        155,
        2,
        156,
        7,
        156,
        2,
        157,
        7,
        157,
        2,
        158,
        7,
        158,
        2,
        159,
        7,
        159,
        2,
        160,
        7,
        160,
        2,
        161,
        7,
        161,
        2,
        162,
        7,
        162,
        2,
        163,
        7,
        163,
        2,
        164,
        7,
        164,
        2,
        165,
        7,
        165,
        2,
        166,
        7,
        166,
        2,
        167,
        7,
        167,
        2,
        168,
        7,
        168,
        2,
        169,
        7,
        169,
        2,
        170,
        7,
        170,
        2,
        171,
        7,
        171,
        2,
        172,
        7,
        172,
        2,
        173,
        7,
        173,
        2,
        174,
        7,
        174,
        2,
        175,
        7,
        175,
        2,
        176,
        7,
        176,
        2,
        177,
        7,
        177,
        2,
        178,
        7,
        178,
        2,
        179,
        7,
        179,
        2,
        180,
        7,
        180,
        2,
        181,
        7,
        181,
        2,
        182,
        7,
        182,
        2,
        183,
        7,
        183,
        2,
        184,
        7,
        184,
        2,
        185,
        7,
        185,
        2,
        186,
        7,
        186,
        2,
        187,
        7,
        187,
        2,
        188,
        7,
        188,
        2,
        189,
        7,
        189,
        2,
        190,
        7,
        190,
        2,
        191,
        7,
        191,
        2,
        192,
        7,
        192,
        2,
        193,
        7,
        193,
        2,
        194,
        7,
        194,
        2,
        195,
        7,
        195,
        2,
        196,
        7,
        196,
        2,
        197,
        7,
        197,
        2,
        198,
        7,
        198,
        2,
        199,
        7,
        199,
        2,
        200,
        7,
        200,
        2,
        201,
        7,
        201,
        2,
        202,
        7,
        202,
        2,
        203,
        7,
        203,
        2,
        204,
        7,
        204,
        2,
        205,
        7,
        205,
        2,
        206,
        7,
        206,
        2,
        207,
        7,
        207,
        2,
        208,
        7,
        208,
        2,
        209,
        7,
        209,
        2,
        210,
        7,
        210,
        2,
        211,
        7,
        211,
        2,
        212,
        7,
        212,
        2,
        213,
        7,
        213,
        2,
        214,
        7,
        214,
        2,
        215,
        7,
        215,
        2,
        216,
        7,
        216,
        2,
        217,
        7,
        217,
        2,
        218,
        7,
        218,
        2,
        219,
        7,
        219,
        2,
        220,
        7,
        220,
        2,
        221,
        7,
        221,
        2,
        222,
        7,
        222,
        2,
        223,
        7,
        223,
        2,
        224,
        7,
        224,
        2,
        225,
        7,
        225,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        5,
        1,
        457,
        8,
        1,
        10,
        1,
        12,
        1,
        460,
        9,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        464,
        8,
        1,
        10,
        1,
        12,
        1,
        467,
        9,
        1,
        5,
        1,
        469,
        8,
        1,
        10,
        1,
        12,
        1,
        472,
        9,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        477,
        8,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        484,
        8,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        493,
        8,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        503,
        8,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        507,
        8,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        512,
        8,
        4,
        10,
        4,
        12,
        4,
        515,
        9,
        4,
        1,
        5,
        1,
        5,
        5,
        5,
        519,
        8,
        5,
        10,
        5,
        12,
        5,
        522,
        9,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        529,
        8,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        548,
        8,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        552,
        8,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        556,
        8,
        10,
        1,
        11,
        5,
        11,
        559,
        8,
        11,
        10,
        11,
        12,
        11,
        562,
        9,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        3,
        11,
        573,
        8,
        11,
        1,
        11,
        5,
        11,
        576,
        8,
        11,
        10,
        11,
        12,
        11,
        579,
        9,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        3,
        12,
        597,
        8,
        12,
        1,
        12,
        5,
        12,
        600,
        8,
        12,
        10,
        12,
        12,
        12,
        603,
        9,
        12,
        1,
        13,
        1,
        13,
        3,
        13,
        607,
        8,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        3,
        14,
        614,
        8,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        621,
        8,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        628,
        8,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        634,
        8,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        640,
        8,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        5,
        16,
        646,
        8,
        16,
        10,
        16,
        12,
        16,
        649,
        9,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        656,
        8,
        16,
        1,
        16,
        5,
        16,
        659,
        8,
        16,
        10,
        16,
        12,
        16,
        662,
        9,
        16,
        1,
        17,
        5,
        17,
        665,
        8,
        17,
        10,
        17,
        12,
        17,
        668,
        9,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        685,
        8,
        17,
        1,
        17,
        5,
        17,
        688,
        8,
        17,
        10,
        17,
        12,
        17,
        691,
        9,
        17,
        1,
        18,
        5,
        18,
        694,
        8,
        18,
        10,
        18,
        12,
        18,
        697,
        9,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        5,
        18,
        702,
        8,
        18,
        10,
        18,
        12,
        18,
        705,
        9,
        18,
        1,
        18,
        5,
        18,
        708,
        8,
        18,
        10,
        18,
        12,
        18,
        711,
        9,
        18,
        1,
        19,
        5,
        19,
        714,
        8,
        19,
        10,
        19,
        12,
        19,
        717,
        9,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        5,
        19,
        722,
        8,
        19,
        10,
        19,
        12,
        19,
        725,
        9,
        19,
        1,
        19,
        5,
        19,
        728,
        8,
        19,
        10,
        19,
        12,
        19,
        731,
        9,
        19,
        1,
        20,
        5,
        20,
        734,
        8,
        20,
        10,
        20,
        12,
        20,
        737,
        9,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        745,
        8,
        20,
        1,
        20,
        5,
        20,
        748,
        8,
        20,
        10,
        20,
        12,
        20,
        751,
        9,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        765,
        8,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        772,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        5,
        24,
        783,
        8,
        24,
        10,
        24,
        12,
        24,
        786,
        9,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        799,
        8,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        3,
        26,
        806,
        8,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        5,
        27,
        811,
        8,
        27,
        10,
        27,
        12,
        27,
        814,
        9,
        27,
        1,
        27,
        3,
        27,
        817,
        8,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        823,
        8,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        5,
        29,
        828,
        8,
        29,
        10,
        29,
        12,
        29,
        831,
        9,
        29,
        1,
        29,
        3,
        29,
        834,
        8,
        29,
        1,
        30,
        1,
        30,
        3,
        30,
        838,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        842,
        8,
        30,
        1,
        30,
        3,
        30,
        845,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        849,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        853,
        8,
        30,
        3,
        30,
        855,
        8,
        30,
        1,
        31,
        1,
        31,
        3,
        31,
        859,
        8,
        31,
        1,
        32,
        5,
        32,
        862,
        8,
        32,
        10,
        32,
        12,
        32,
        865,
        9,
        32,
        1,
        32,
        1,
        32,
        5,
        32,
        869,
        8,
        32,
        10,
        32,
        12,
        32,
        872,
        9,
        32,
        1,
        33,
        3,
        33,
        875,
        8,
        33,
        1,
        33,
        3,
        33,
        878,
        8,
        33,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        5,
        35,
        884,
        8,
        35,
        10,
        35,
        12,
        35,
        887,
        9,
        35,
        1,
        35,
        3,
        35,
        890,
        8,
        35,
        1,
        36,
        1,
        36,
        3,
        36,
        894,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        5,
        36,
        900,
        8,
        36,
        10,
        36,
        12,
        36,
        903,
        9,
        36,
        1,
        36,
        3,
        36,
        906,
        8,
        36,
        1,
        37,
        1,
        37,
        4,
        37,
        910,
        8,
        37,
        11,
        37,
        12,
        37,
        911,
        1,
        38,
        1,
        38,
        3,
        38,
        916,
        8,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        3,
        39,
        923,
        8,
        39,
        1,
        40,
        1,
        40,
        1,
        40,
        5,
        40,
        928,
        8,
        40,
        10,
        40,
        12,
        40,
        931,
        9,
        40,
        1,
        40,
        3,
        40,
        934,
        8,
        40,
        1,
        40,
        4,
        40,
        937,
        8,
        40,
        11,
        40,
        12,
        40,
        938,
        1,
        40,
        5,
        40,
        942,
        8,
        40,
        10,
        40,
        12,
        40,
        945,
        9,
        40,
        1,
        40,
        3,
        40,
        948,
        8,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        3,
        41,
        964,
        8,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        3,
        42,
        974,
        8,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        981,
        8,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        988,
        8,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        994,
        8,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        4,
        43,
        999,
        8,
        43,
        11,
        43,
        12,
        43,
        1000,
        1,
        43,
        1,
        43,
        3,
        43,
        1005,
        8,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        1011,
        8,
        43,
        3,
        43,
        1013,
        8,
        43,
        1,
        44,
        1,
        44,
        3,
        44,
        1017,
        8,
        44,
        1,
        45,
        1,
        45,
        1,
        46,
        1,
        46,
        3,
        46,
        1023,
        8,
        46,
        1,
        47,
        1,
        47,
        1,
        47,
        1,
        47,
        3,
        47,
        1029,
        8,
        47,
        1,
        47,
        3,
        47,
        1032,
        8,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        5,
        48,
        1038,
        8,
        48,
        10,
        48,
        12,
        48,
        1041,
        9,
        48,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        5,
        49,
        1047,
        8,
        49,
        10,
        49,
        12,
        49,
        1050,
        9,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        51,
        1,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        1061,
        8,
        52,
        1,
        53,
        1,
        53,
        3,
        53,
        1065,
        8,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        5,
        55,
        1072,
        8,
        55,
        10,
        55,
        12,
        55,
        1075,
        9,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        4,
        55,
        1083,
        8,
        55,
        11,
        55,
        12,
        55,
        1084,
        1,
        55,
        1,
        55,
        3,
        55,
        1089,
        8,
        55,
        1,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        1094,
        8,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        1100,
        8,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        5,
        57,
        1105,
        8,
        57,
        10,
        57,
        12,
        57,
        1108,
        9,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        1113,
        8,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        5,
        59,
        1118,
        8,
        59,
        10,
        59,
        12,
        59,
        1121,
        9,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        3,
        60,
        1126,
        8,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        5,
        61,
        1134,
        8,
        61,
        10,
        61,
        12,
        61,
        1137,
        9,
        61,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1145,
        8,
        62,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        4,
        63,
        1151,
        8,
        63,
        11,
        63,
        12,
        63,
        1152,
        1,
        64,
        3,
        64,
        1156,
        8,
        64,
        1,
        64,
        1,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        3,
        65,
        1163,
        8,
        65,
        1,
        65,
        1,
        65,
        3,
        65,
        1167,
        8,
        65,
        1,
        65,
        3,
        65,
        1170,
        8,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        66,
        3,
        66,
        1176,
        8,
        66,
        1,
        66,
        1,
        66,
        1,
        67,
        3,
        67,
        1181,
        8,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1186,
        8,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1190,
        8,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1195,
        8,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1199,
        8,
        67,
        1,
        67,
        1,
        67,
        1,
        68,
        1,
        68,
        1,
        69,
        1,
        69,
        5,
        69,
        1207,
        8,
        69,
        10,
        69,
        12,
        69,
        1210,
        9,
        69,
        1,
        69,
        5,
        69,
        1213,
        8,
        69,
        10,
        69,
        12,
        69,
        1216,
        9,
        69,
        1,
        69,
        3,
        69,
        1219,
        8,
        69,
        1,
        69,
        1,
        69,
        5,
        69,
        1223,
        8,
        69,
        10,
        69,
        12,
        69,
        1226,
        9,
        69,
        1,
        69,
        3,
        69,
        1229,
        8,
        69,
        1,
        69,
        4,
        69,
        1232,
        8,
        69,
        11,
        69,
        12,
        69,
        1233,
        1,
        69,
        5,
        69,
        1237,
        8,
        69,
        10,
        69,
        12,
        69,
        1240,
        9,
        69,
        1,
        69,
        3,
        69,
        1243,
        8,
        69,
        1,
        69,
        4,
        69,
        1246,
        8,
        69,
        11,
        69,
        12,
        69,
        1247,
        1,
        69,
        3,
        69,
        1251,
        8,
        69,
        1,
        69,
        3,
        69,
        1254,
        8,
        69,
        1,
        70,
        4,
        70,
        1257,
        8,
        70,
        11,
        70,
        12,
        70,
        1258,
        1,
        70,
        1,
        70,
        3,
        70,
        1263,
        8,
        70,
        1,
        71,
        5,
        71,
        1266,
        8,
        71,
        10,
        71,
        12,
        71,
        1269,
        9,
        71,
        1,
        71,
        4,
        71,
        1272,
        8,
        71,
        11,
        71,
        12,
        71,
        1273,
        1,
        71,
        1,
        71,
        3,
        71,
        1278,
        8,
        71,
        1,
        72,
        1,
        72,
        1,
        72,
        5,
        72,
        1283,
        8,
        72,
        10,
        72,
        12,
        72,
        1286,
        9,
        72,
        1,
        72,
        3,
        72,
        1289,
        8,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        5,
        72,
        1294,
        8,
        72,
        10,
        72,
        12,
        72,
        1297,
        9,
        72,
        1,
        72,
        3,
        72,
        1300,
        8,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        4,
        72,
        1305,
        8,
        72,
        11,
        72,
        12,
        72,
        1306,
        1,
        72,
        3,
        72,
        1310,
        8,
        72,
        1,
        72,
        3,
        72,
        1313,
        8,
        72,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        74,
        3,
        74,
        1322,
        8,
        74,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        75,
        3,
        75,
        1328,
        8,
        75,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        3,
        76,
        1337,
        8,
        76,
        1,
        77,
        1,
        77,
        3,
        77,
        1341,
        8,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        3,
        77,
        1347,
        8,
        77,
        3,
        77,
        1349,
        8,
        77,
        1,
        78,
        1,
        78,
        3,
        78,
        1353,
        8,
        78,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        3,
        83,
        1378,
        8,
        83,
        3,
        83,
        1380,
        8,
        83,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        3,
        84,
        1393,
        8,
        84,
        3,
        84,
        1395,
        8,
        84,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        3,
        86,
        1406,
        8,
        86,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        3,
        87,
        1415,
        8,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        3,
        87,
        1425,
        8,
        87,
        3,
        87,
        1427,
        8,
        87,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        5,
        88,
        1434,
        8,
        88,
        10,
        88,
        12,
        88,
        1437,
        9,
        88,
        1,
        88,
        3,
        88,
        1440,
        8,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        5,
        88,
        1450,
        8,
        88,
        10,
        88,
        12,
        88,
        1453,
        9,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        5,
        88,
        1464,
        8,
        88,
        10,
        88,
        12,
        88,
        1467,
        9,
        88,
        1,
        88,
        3,
        88,
        1470,
        8,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        5,
        88,
        1481,
        8,
        88,
        10,
        88,
        12,
        88,
        1484,
        9,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        3,
        88,
        1489,
        8,
        88,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        3,
        89,
        1496,
        8,
        89,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        4,
        90,
        1507,
        8,
        90,
        11,
        90,
        12,
        90,
        1508,
        1,
        90,
        3,
        90,
        1512,
        8,
        90,
        1,
        90,
        3,
        90,
        1515,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        4,
        90,
        1521,
        8,
        90,
        11,
        90,
        12,
        90,
        1522,
        1,
        90,
        3,
        90,
        1526,
        8,
        90,
        1,
        90,
        3,
        90,
        1529,
        8,
        90,
        3,
        90,
        1531,
        8,
        90,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        91,
        3,
        91,
        1537,
        8,
        91,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        91,
        3,
        91,
        1545,
        8,
        91,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        3,
        92,
        1552,
        8,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        4,
        94,
        1567,
        8,
        94,
        11,
        94,
        12,
        94,
        1568,
        1,
        94,
        1,
        94,
        1,
        95,
        1,
        95,
        1,
        95,
        3,
        95,
        1576,
        8,
        95,
        1,
        95,
        3,
        95,
        1579,
        8,
        95,
        1,
        96,
        1,
        96,
        1,
        96,
        3,
        96,
        1584,
        8,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        98,
        1,
        98,
        3,
        98,
        1594,
        8,
        98,
        1,
        99,
        1,
        99,
        3,
        99,
        1598,
        8,
        99,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        5,
        101,
        1607,
        8,
        101,
        10,
        101,
        12,
        101,
        1610,
        9,
        101,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        3,
        102,
        1620,
        8,
        102,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        3,
        103,
        1628,
        8,
        103,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        3,
        104,
        1636,
        8,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1646,
        8,
        105,
        1,
        106,
        1,
        106,
        1,
        106,
        3,
        106,
        1651,
        8,
        106,
        1,
        107,
        1,
        107,
        1,
        107,
        3,
        107,
        1656,
        8,
        107,
        1,
        108,
        1,
        108,
        1,
        109,
        1,
        109,
        1,
        110,
        1,
        110,
        1,
        111,
        1,
        111,
        1,
        112,
        1,
        112,
        1,
        113,
        1,
        113,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        5,
        115,
        1680,
        8,
        115,
        10,
        115,
        12,
        115,
        1683,
        9,
        115,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        117,
        1,
        117,
        3,
        117,
        1691,
        8,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        3,
        117,
        1696,
        8,
        117,
        1,
        117,
        3,
        117,
        1699,
        8,
        117,
        1,
        118,
        1,
        118,
        1,
        118,
        3,
        118,
        1704,
        8,
        118,
        1,
        119,
        1,
        119,
        1,
        119,
        5,
        119,
        1709,
        8,
        119,
        10,
        119,
        12,
        119,
        1712,
        9,
        119,
        1,
        119,
        3,
        119,
        1715,
        8,
        119,
        1,
        120,
        1,
        120,
        3,
        120,
        1719,
        8,
        120,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        3,
        121,
        1725,
        8,
        121,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        3,
        122,
        1732,
        8,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        3,
        122,
        1741,
        8,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        3,
        122,
        1748,
        8,
        122,
        1,
        122,
        1,
        122,
        3,
        122,
        1752,
        8,
        122,
        1,
        123,
        1,
        123,
        1,
        123,
        5,
        123,
        1757,
        8,
        123,
        10,
        123,
        12,
        123,
        1760,
        9,
        123,
        1,
        124,
        1,
        124,
        3,
        124,
        1764,
        8,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        1780,
        8,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        1788,
        8,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        1798,
        8,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        1802,
        8,
        126,
        1,
        127,
        1,
        127,
        1,
        127,
        5,
        127,
        1807,
        8,
        127,
        10,
        127,
        12,
        127,
        1810,
        9,
        127,
        1,
        128,
        1,
        128,
        1,
        128,
        5,
        128,
        1815,
        8,
        128,
        10,
        128,
        12,
        128,
        1818,
        9,
        128,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        1827,
        8,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        132,
        1,
        132,
        1,
        132,
        5,
        132,
        1839,
        8,
        132,
        10,
        132,
        12,
        132,
        1842,
        9,
        132,
        1,
        132,
        3,
        132,
        1845,
        8,
        132,
        1,
        133,
        1,
        133,
        3,
        133,
        1849,
        8,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        3,
        133,
        1855,
        8,
        133,
        1,
        134,
        1,
        134,
        1,
        134,
        1,
        135,
        1,
        135,
        1,
        135,
        5,
        135,
        1863,
        8,
        135,
        10,
        135,
        12,
        135,
        1866,
        9,
        135,
        1,
        135,
        3,
        135,
        1869,
        8,
        135,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        3,
        136,
        1879,
        8,
        136,
        1,
        137,
        1,
        137,
        1,
        137,
        1,
        137,
        1,
        137,
        3,
        137,
        1886,
        8,
        137,
        3,
        137,
        1888,
        8,
        137,
        1,
        138,
        1,
        138,
        1,
        138,
        5,
        138,
        1893,
        8,
        138,
        10,
        138,
        12,
        138,
        1896,
        9,
        138,
        1,
        138,
        3,
        138,
        1899,
        8,
        138,
        1,
        139,
        1,
        139,
        1,
        139,
        3,
        139,
        1904,
        8,
        139,
        1,
        140,
        1,
        140,
        1,
        140,
        5,
        140,
        1909,
        8,
        140,
        10,
        140,
        12,
        140,
        1912,
        9,
        140,
        1,
        140,
        3,
        140,
        1915,
        8,
        140,
        1,
        141,
        1,
        141,
        1,
        141,
        3,
        141,
        1920,
        8,
        141,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        143,
        1,
        143,
        3,
        143,
        1928,
        8,
        143,
        1,
        144,
        1,
        144,
        1,
        144,
        5,
        144,
        1933,
        8,
        144,
        10,
        144,
        12,
        144,
        1936,
        9,
        144,
        1,
        145,
        1,
        145,
        1,
        145,
        5,
        145,
        1941,
        8,
        145,
        10,
        145,
        12,
        145,
        1944,
        9,
        145,
        1,
        146,
        1,
        146,
        1,
        146,
        3,
        146,
        1949,
        8,
        146,
        1,
        147,
        1,
        147,
        5,
        147,
        1953,
        8,
        147,
        10,
        147,
        12,
        147,
        1956,
        9,
        147,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        3,
        148,
        1968,
        8,
        148,
        1,
        149,
        1,
        149,
        1,
        149,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        156,
        1,
        156,
        1,
        156,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        5,
        159,
        2008,
        8,
        159,
        10,
        159,
        12,
        159,
        2011,
        9,
        159,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        5,
        160,
        2019,
        8,
        160,
        10,
        160,
        12,
        160,
        2022,
        9,
        160,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        5,
        161,
        2030,
        8,
        161,
        10,
        161,
        12,
        161,
        2033,
        9,
        161,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        5,
        162,
        2044,
        8,
        162,
        10,
        162,
        12,
        162,
        2047,
        9,
        162,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        5,
        163,
        2058,
        8,
        163,
        10,
        163,
        12,
        163,
        2061,
        9,
        163,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        5,
        164,
        2081,
        8,
        164,
        10,
        164,
        12,
        164,
        2084,
        9,
        164,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        3,
        165,
        2093,
        8,
        165,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        3,
        166,
        2100,
        8,
        166,
        1,
        167,
        1,
        167,
        1,
        167,
        3,
        167,
        2105,
        8,
        167,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        3,
        168,
        2118,
        8,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        5,
        168,
        2126,
        8,
        168,
        10,
        168,
        12,
        168,
        2129,
        9,
        168,
        1,
        169,
        1,
        169,
        3,
        169,
        2133,
        8,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        3,
        169,
        2138,
        8,
        169,
        5,
        169,
        2140,
        8,
        169,
        10,
        169,
        12,
        169,
        2143,
        9,
        169,
        1,
        169,
        3,
        169,
        2146,
        8,
        169,
        1,
        170,
        3,
        170,
        2149,
        8,
        170,
        1,
        170,
        1,
        170,
        3,
        170,
        2153,
        8,
        170,
        1,
        170,
        1,
        170,
        3,
        170,
        2157,
        8,
        170,
        3,
        170,
        2159,
        8,
        170,
        1,
        170,
        3,
        170,
        2162,
        8,
        170,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        3,
        171,
        2174,
        8,
        171,
        1,
        171,
        1,
        171,
        3,
        171,
        2178,
        8,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        3,
        171,
        2184,
        8,
        171,
        1,
        171,
        3,
        171,
        2187,
        8,
        171,
        1,
        172,
        1,
        172,
        1,
        172,
        3,
        172,
        2192,
        8,
        172,
        1,
        172,
        1,
        172,
        1,
        173,
        1,
        173,
        3,
        173,
        2198,
        8,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        174,
        1,
        174,
        1,
        175,
        1,
        175,
        5,
        175,
        2207,
        8,
        175,
        10,
        175,
        12,
        175,
        2210,
        9,
        175,
        1,
        175,
        5,
        175,
        2213,
        8,
        175,
        10,
        175,
        12,
        175,
        2216,
        9,
        175,
        1,
        175,
        3,
        175,
        2219,
        8,
        175,
        1,
        175,
        1,
        175,
        5,
        175,
        2223,
        8,
        175,
        10,
        175,
        12,
        175,
        2226,
        9,
        175,
        1,
        175,
        3,
        175,
        2229,
        8,
        175,
        1,
        175,
        4,
        175,
        2232,
        8,
        175,
        11,
        175,
        12,
        175,
        2233,
        1,
        175,
        5,
        175,
        2237,
        8,
        175,
        10,
        175,
        12,
        175,
        2240,
        9,
        175,
        1,
        175,
        3,
        175,
        2243,
        8,
        175,
        1,
        175,
        4,
        175,
        2246,
        8,
        175,
        11,
        175,
        12,
        175,
        2247,
        1,
        175,
        3,
        175,
        2251,
        8,
        175,
        1,
        175,
        3,
        175,
        2254,
        8,
        175,
        1,
        176,
        4,
        176,
        2257,
        8,
        176,
        11,
        176,
        12,
        176,
        2258,
        1,
        176,
        1,
        176,
        3,
        176,
        2263,
        8,
        176,
        1,
        177,
        5,
        177,
        2266,
        8,
        177,
        10,
        177,
        12,
        177,
        2269,
        9,
        177,
        1,
        177,
        4,
        177,
        2272,
        8,
        177,
        11,
        177,
        12,
        177,
        2273,
        1,
        177,
        1,
        177,
        3,
        177,
        2278,
        8,
        177,
        1,
        178,
        1,
        178,
        1,
        178,
        5,
        178,
        2283,
        8,
        178,
        10,
        178,
        12,
        178,
        2286,
        9,
        178,
        1,
        178,
        3,
        178,
        2289,
        8,
        178,
        1,
        178,
        1,
        178,
        1,
        178,
        4,
        178,
        2294,
        8,
        178,
        11,
        178,
        12,
        178,
        2295,
        1,
        178,
        3,
        178,
        2299,
        8,
        178,
        1,
        178,
        3,
        178,
        2302,
        8,
        178,
        1,
        179,
        1,
        179,
        1,
        179,
        1,
        180,
        1,
        180,
        3,
        180,
        2309,
        8,
        180,
        1,
        181,
        1,
        181,
        1,
        181,
        3,
        181,
        2314,
        8,
        181,
        1,
        182,
        1,
        182,
        3,
        182,
        2318,
        8,
        182,
        1,
        182,
        3,
        182,
        2321,
        8,
        182,
        1,
        183,
        1,
        183,
        1,
        184,
        1,
        184,
        3,
        184,
        2327,
        8,
        184,
        1,
        185,
        1,
        185,
        1,
        185,
        3,
        185,
        2332,
        8,
        185,
        1,
        185,
        3,
        185,
        2335,
        8,
        185,
        1,
        185,
        3,
        185,
        2338,
        8,
        185,
        1,
        185,
        3,
        185,
        2341,
        8,
        185,
        1,
        185,
        1,
        185,
        1,
        186,
        1,
        186,
        1,
        186,
        3,
        186,
        2348,
        8,
        186,
        1,
        187,
        1,
        187,
        5,
        187,
        2352,
        8,
        187,
        10,
        187,
        12,
        187,
        2355,
        9,
        187,
        1,
        188,
        1,
        188,
        3,
        188,
        2359,
        8,
        188,
        1,
        189,
        1,
        189,
        5,
        189,
        2363,
        8,
        189,
        10,
        189,
        12,
        189,
        2366,
        9,
        189,
        1,
        189,
        1,
        189,
        1,
        190,
        1,
        190,
        1,
        191,
        1,
        191,
        4,
        191,
        2374,
        8,
        191,
        11,
        191,
        12,
        191,
        2375,
        1,
        192,
        1,
        192,
        3,
        192,
        2380,
        8,
        192,
        1,
        192,
        1,
        192,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        3,
        193,
        2389,
        8,
        193,
        1,
        193,
        1,
        193,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        195,
        1,
        195,
        3,
        195,
        2399,
        8,
        195,
        1,
        195,
        1,
        195,
        1,
        196,
        1,
        196,
        1,
        196,
        5,
        196,
        2406,
        8,
        196,
        10,
        196,
        12,
        196,
        2409,
        9,
        196,
        1,
        196,
        3,
        196,
        2412,
        8,
        196,
        1,
        197,
        1,
        197,
        1,
        197,
        3,
        197,
        2417,
        8,
        197,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        199,
        4,
        199,
        2424,
        8,
        199,
        11,
        199,
        12,
        199,
        2425,
        1,
        200,
        3,
        200,
        2429,
        8,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        5,
        200,
        2437,
        8,
        200,
        10,
        200,
        12,
        200,
        2440,
        9,
        200,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        203,
        1,
        203,
        1,
        203,
        3,
        203,
        2455,
        8,
        203,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        205,
        1,
        205,
        3,
        205,
        2467,
        8,
        205,
        1,
        206,
        1,
        206,
        1,
        206,
        5,
        206,
        2472,
        8,
        206,
        10,
        206,
        12,
        206,
        2475,
        9,
        206,
        1,
        206,
        1,
        206,
        3,
        206,
        2479,
        8,
        206,
        1,
        206,
        3,
        206,
        2482,
        8,
        206,
        1,
        207,
        1,
        207,
        1,
        207,
        3,
        207,
        2487,
        8,
        207,
        1,
        208,
        1,
        208,
        1,
        208,
        5,
        208,
        2492,
        8,
        208,
        10,
        208,
        12,
        208,
        2495,
        9,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        5,
        208,
        2501,
        8,
        208,
        10,
        208,
        12,
        208,
        2504,
        9,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        5,
        208,
        2509,
        8,
        208,
        10,
        208,
        12,
        208,
        2512,
        9,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        5,
        208,
        2517,
        8,
        208,
        10,
        208,
        12,
        208,
        2520,
        9,
        208,
        3,
        208,
        2522,
        8,
        208,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        210,
        3,
        210,
        2531,
        8,
        210,
        1,
        211,
        1,
        211,
        1,
        211,
        1,
        211,
        1,
        211,
        3,
        211,
        2538,
        8,
        211,
        1,
        212,
        1,
        212,
        1,
        212,
        5,
        212,
        2543,
        8,
        212,
        10,
        212,
        12,
        212,
        2546,
        9,
        212,
        1,
        212,
        3,
        212,
        2549,
        8,
        212,
        1,
        213,
        1,
        213,
        1,
        213,
        5,
        213,
        2554,
        8,
        213,
        10,
        213,
        12,
        213,
        2557,
        9,
        213,
        1,
        213,
        3,
        213,
        2560,
        8,
        213,
        1,
        214,
        1,
        214,
        1,
        214,
        4,
        214,
        2565,
        8,
        214,
        11,
        214,
        12,
        214,
        2566,
        1,
        214,
        3,
        214,
        2570,
        8,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        3,
        214,
        2575,
        8,
        214,
        1,
        215,
        1,
        215,
        1,
        215,
        3,
        215,
        2580,
        8,
        215,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        3,
        216,
        2592,
        8,
        216,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        3,
        217,
        2601,
        8,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        3,
        217,
        2606,
        8,
        217,
        1,
        217,
        3,
        217,
        2609,
        8,
        217,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        3,
        218,
        2617,
        8,
        218,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        3,
        219,
        2628,
        8,
        219,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        3,
        220,
        2646,
        8,
        220,
        1,
        220,
        5,
        220,
        2649,
        8,
        220,
        10,
        220,
        12,
        220,
        2652,
        9,
        220,
        1,
        221,
        1,
        221,
        1,
        221,
        5,
        221,
        2657,
        8,
        221,
        10,
        221,
        12,
        221,
        2660,
        9,
        221,
        1,
        221,
        3,
        221,
        2663,
        8,
        221,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        3,
        222,
        2675,
        8,
        222,
        1,
        223,
        1,
        223,
        1,
        223,
        3,
        223,
        2680,
        8,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        3,
        223,
        2685,
        8,
        223,
        1,
        223,
        3,
        223,
        2688,
        8,
        223,
        1,
        224,
        1,
        224,
        1,
        224,
        5,
        224,
        2693,
        8,
        224,
        10,
        224,
        12,
        224,
        2696,
        9,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        5,
        224,
        2708,
        8,
        224,
        10,
        224,
        12,
        224,
        2711,
        9,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        5,
        224,
        2720,
        8,
        224,
        10,
        224,
        12,
        224,
        2723,
        9,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        5,
        224,
        2742,
        8,
        224,
        10,
        224,
        12,
        224,
        2745,
        9,
        224,
        3,
        224,
        2747,
        8,
        224,
        1,
        225,
        1,
        225,
        1,
        225,
        0,
        12,
        24,
        48,
        122,
        230,
        318,
        320,
        322,
        324,
        326,
        328,
        336,
        440,
        226,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        234,
        236,
        238,
        240,
        242,
        244,
        246,
        248,
        250,
        252,
        254,
        256,
        258,
        260,
        262,
        264,
        266,
        268,
        270,
        272,
        274,
        276,
        278,
        280,
        282,
        284,
        286,
        288,
        290,
        292,
        294,
        296,
        298,
        300,
        302,
        304,
        306,
        308,
        310,
        312,
        314,
        316,
        318,
        320,
        322,
        324,
        326,
        328,
        330,
        332,
        334,
        336,
        338,
        340,
        342,
        344,
        346,
        348,
        350,
        352,
        354,
        356,
        358,
        360,
        362,
        364,
        366,
        368,
        370,
        372,
        374,
        376,
        378,
        380,
        382,
        384,
        386,
        388,
        390,
        392,
        394,
        396,
        398,
        400,
        402,
        404,
        406,
        408,
        410,
        412,
        414,
        416,
        418,
        420,
        422,
        424,
        426,
        428,
        430,
        432,
        434,
        436,
        438,
        440,
        442,
        444,
        446,
        448,
        450,
        0,
        4,
        2,
        1,
        72,
        72,
        114,
        114,
        1,
        0,
        90,
        96,
        1,
        0,
        99,
        111,
        2,
        0,
        64,
        64,
        66,
        66,
        2982,
        0,
        452,
        1,
        0,
        0,
        0,
        2,
        458,
        1,
        0,
        0,
        0,
        4,
        476,
        1,
        0,
        0,
        0,
        6,
        506,
        1,
        0,
        0,
        0,
        8,
        508,
        1,
        0,
        0,
        0,
        10,
        516,
        1,
        0,
        0,
        0,
        12,
        528,
        1,
        0,
        0,
        0,
        14,
        530,
        1,
        0,
        0,
        0,
        16,
        533,
        1,
        0,
        0,
        0,
        18,
        536,
        1,
        0,
        0,
        0,
        20,
        555,
        1,
        0,
        0,
        0,
        22,
        560,
        1,
        0,
        0,
        0,
        24,
        580,
        1,
        0,
        0,
        0,
        26,
        604,
        1,
        0,
        0,
        0,
        28,
        639,
        1,
        0,
        0,
        0,
        30,
        641,
        1,
        0,
        0,
        0,
        32,
        647,
        1,
        0,
        0,
        0,
        34,
        666,
        1,
        0,
        0,
        0,
        36,
        695,
        1,
        0,
        0,
        0,
        38,
        715,
        1,
        0,
        0,
        0,
        40,
        735,
        1,
        0,
        0,
        0,
        42,
        752,
        1,
        0,
        0,
        0,
        44,
        764,
        1,
        0,
        0,
        0,
        46,
        771,
        1,
        0,
        0,
        0,
        48,
        773,
        1,
        0,
        0,
        0,
        50,
        798,
        1,
        0,
        0,
        0,
        52,
        805,
        1,
        0,
        0,
        0,
        54,
        807,
        1,
        0,
        0,
        0,
        56,
        818,
        1,
        0,
        0,
        0,
        58,
        824,
        1,
        0,
        0,
        0,
        60,
        854,
        1,
        0,
        0,
        0,
        62,
        858,
        1,
        0,
        0,
        0,
        64,
        863,
        1,
        0,
        0,
        0,
        66,
        874,
        1,
        0,
        0,
        0,
        68,
        879,
        1,
        0,
        0,
        0,
        70,
        881,
        1,
        0,
        0,
        0,
        72,
        891,
        1,
        0,
        0,
        0,
        74,
        909,
        1,
        0,
        0,
        0,
        76,
        915,
        1,
        0,
        0,
        0,
        78,
        922,
        1,
        0,
        0,
        0,
        80,
        924,
        1,
        0,
        0,
        0,
        82,
        963,
        1,
        0,
        0,
        0,
        84,
        973,
        1,
        0,
        0,
        0,
        86,
        1012,
        1,
        0,
        0,
        0,
        88,
        1016,
        1,
        0,
        0,
        0,
        90,
        1018,
        1,
        0,
        0,
        0,
        92,
        1020,
        1,
        0,
        0,
        0,
        94,
        1031,
        1,
        0,
        0,
        0,
        96,
        1033,
        1,
        0,
        0,
        0,
        98,
        1042,
        1,
        0,
        0,
        0,
        100,
        1051,
        1,
        0,
        0,
        0,
        102,
        1054,
        1,
        0,
        0,
        0,
        104,
        1056,
        1,
        0,
        0,
        0,
        106,
        1064,
        1,
        0,
        0,
        0,
        108,
        1066,
        1,
        0,
        0,
        0,
        110,
        1088,
        1,
        0,
        0,
        0,
        112,
        1099,
        1,
        0,
        0,
        0,
        114,
        1101,
        1,
        0,
        0,
        0,
        116,
        1109,
        1,
        0,
        0,
        0,
        118,
        1114,
        1,
        0,
        0,
        0,
        120,
        1122,
        1,
        0,
        0,
        0,
        122,
        1127,
        1,
        0,
        0,
        0,
        124,
        1144,
        1,
        0,
        0,
        0,
        126,
        1150,
        1,
        0,
        0,
        0,
        128,
        1155,
        1,
        0,
        0,
        0,
        130,
        1159,
        1,
        0,
        0,
        0,
        132,
        1175,
        1,
        0,
        0,
        0,
        134,
        1180,
        1,
        0,
        0,
        0,
        136,
        1202,
        1,
        0,
        0,
        0,
        138,
        1253,
        1,
        0,
        0,
        0,
        140,
        1256,
        1,
        0,
        0,
        0,
        142,
        1267,
        1,
        0,
        0,
        0,
        144,
        1312,
        1,
        0,
        0,
        0,
        146,
        1314,
        1,
        0,
        0,
        0,
        148,
        1321,
        1,
        0,
        0,
        0,
        150,
        1327,
        1,
        0,
        0,
        0,
        152,
        1336,
        1,
        0,
        0,
        0,
        154,
        1348,
        1,
        0,
        0,
        0,
        156,
        1350,
        1,
        0,
        0,
        0,
        158,
        1354,
        1,
        0,
        0,
        0,
        160,
        1357,
        1,
        0,
        0,
        0,
        162,
        1360,
        1,
        0,
        0,
        0,
        164,
        1363,
        1,
        0,
        0,
        0,
        166,
        1379,
        1,
        0,
        0,
        0,
        168,
        1394,
        1,
        0,
        0,
        0,
        170,
        1396,
        1,
        0,
        0,
        0,
        172,
        1400,
        1,
        0,
        0,
        0,
        174,
        1426,
        1,
        0,
        0,
        0,
        176,
        1488,
        1,
        0,
        0,
        0,
        178,
        1495,
        1,
        0,
        0,
        0,
        180,
        1530,
        1,
        0,
        0,
        0,
        182,
        1544,
        1,
        0,
        0,
        0,
        184,
        1546,
        1,
        0,
        0,
        0,
        186,
        1556,
        1,
        0,
        0,
        0,
        188,
        1560,
        1,
        0,
        0,
        0,
        190,
        1578,
        1,
        0,
        0,
        0,
        192,
        1580,
        1,
        0,
        0,
        0,
        194,
        1588,
        1,
        0,
        0,
        0,
        196,
        1593,
        1,
        0,
        0,
        0,
        198,
        1597,
        1,
        0,
        0,
        0,
        200,
        1599,
        1,
        0,
        0,
        0,
        202,
        1603,
        1,
        0,
        0,
        0,
        204,
        1619,
        1,
        0,
        0,
        0,
        206,
        1627,
        1,
        0,
        0,
        0,
        208,
        1635,
        1,
        0,
        0,
        0,
        210,
        1645,
        1,
        0,
        0,
        0,
        212,
        1650,
        1,
        0,
        0,
        0,
        214,
        1655,
        1,
        0,
        0,
        0,
        216,
        1657,
        1,
        0,
        0,
        0,
        218,
        1659,
        1,
        0,
        0,
        0,
        220,
        1661,
        1,
        0,
        0,
        0,
        222,
        1663,
        1,
        0,
        0,
        0,
        224,
        1665,
        1,
        0,
        0,
        0,
        226,
        1667,
        1,
        0,
        0,
        0,
        228,
        1669,
        1,
        0,
        0,
        0,
        230,
        1673,
        1,
        0,
        0,
        0,
        232,
        1684,
        1,
        0,
        0,
        0,
        234,
        1698,
        1,
        0,
        0,
        0,
        236,
        1700,
        1,
        0,
        0,
        0,
        238,
        1705,
        1,
        0,
        0,
        0,
        240,
        1718,
        1,
        0,
        0,
        0,
        242,
        1724,
        1,
        0,
        0,
        0,
        244,
        1751,
        1,
        0,
        0,
        0,
        246,
        1753,
        1,
        0,
        0,
        0,
        248,
        1763,
        1,
        0,
        0,
        0,
        250,
        1768,
        1,
        0,
        0,
        0,
        252,
        1801,
        1,
        0,
        0,
        0,
        254,
        1803,
        1,
        0,
        0,
        0,
        256,
        1811,
        1,
        0,
        0,
        0,
        258,
        1819,
        1,
        0,
        0,
        0,
        260,
        1823,
        1,
        0,
        0,
        0,
        262,
        1831,
        1,
        0,
        0,
        0,
        264,
        1835,
        1,
        0,
        0,
        0,
        266,
        1854,
        1,
        0,
        0,
        0,
        268,
        1856,
        1,
        0,
        0,
        0,
        270,
        1859,
        1,
        0,
        0,
        0,
        272,
        1878,
        1,
        0,
        0,
        0,
        274,
        1887,
        1,
        0,
        0,
        0,
        276,
        1889,
        1,
        0,
        0,
        0,
        278,
        1903,
        1,
        0,
        0,
        0,
        280,
        1905,
        1,
        0,
        0,
        0,
        282,
        1919,
        1,
        0,
        0,
        0,
        284,
        1921,
        1,
        0,
        0,
        0,
        286,
        1927,
        1,
        0,
        0,
        0,
        288,
        1929,
        1,
        0,
        0,
        0,
        290,
        1937,
        1,
        0,
        0,
        0,
        292,
        1948,
        1,
        0,
        0,
        0,
        294,
        1950,
        1,
        0,
        0,
        0,
        296,
        1967,
        1,
        0,
        0,
        0,
        298,
        1969,
        1,
        0,
        0,
        0,
        300,
        1972,
        1,
        0,
        0,
        0,
        302,
        1975,
        1,
        0,
        0,
        0,
        304,
        1978,
        1,
        0,
        0,
        0,
        306,
        1981,
        1,
        0,
        0,
        0,
        308,
        1984,
        1,
        0,
        0,
        0,
        310,
        1987,
        1,
        0,
        0,
        0,
        312,
        1991,
        1,
        0,
        0,
        0,
        314,
        1994,
        1,
        0,
        0,
        0,
        316,
        1998,
        1,
        0,
        0,
        0,
        318,
        2001,
        1,
        0,
        0,
        0,
        320,
        2012,
        1,
        0,
        0,
        0,
        322,
        2023,
        1,
        0,
        0,
        0,
        324,
        2034,
        1,
        0,
        0,
        0,
        326,
        2048,
        1,
        0,
        0,
        0,
        328,
        2062,
        1,
        0,
        0,
        0,
        330,
        2092,
        1,
        0,
        0,
        0,
        332,
        2099,
        1,
        0,
        0,
        0,
        334,
        2104,
        1,
        0,
        0,
        0,
        336,
        2106,
        1,
        0,
        0,
        0,
        338,
        2132,
        1,
        0,
        0,
        0,
        340,
        2161,
        1,
        0,
        0,
        0,
        342,
        2186,
        1,
        0,
        0,
        0,
        344,
        2188,
        1,
        0,
        0,
        0,
        346,
        2195,
        1,
        0,
        0,
        0,
        348,
        2202,
        1,
        0,
        0,
        0,
        350,
        2253,
        1,
        0,
        0,
        0,
        352,
        2256,
        1,
        0,
        0,
        0,
        354,
        2267,
        1,
        0,
        0,
        0,
        356,
        2301,
        1,
        0,
        0,
        0,
        358,
        2303,
        1,
        0,
        0,
        0,
        360,
        2306,
        1,
        0,
        0,
        0,
        362,
        2310,
        1,
        0,
        0,
        0,
        364,
        2315,
        1,
        0,
        0,
        0,
        366,
        2322,
        1,
        0,
        0,
        0,
        368,
        2326,
        1,
        0,
        0,
        0,
        370,
        2328,
        1,
        0,
        0,
        0,
        372,
        2347,
        1,
        0,
        0,
        0,
        374,
        2349,
        1,
        0,
        0,
        0,
        376,
        2358,
        1,
        0,
        0,
        0,
        378,
        2360,
        1,
        0,
        0,
        0,
        380,
        2369,
        1,
        0,
        0,
        0,
        382,
        2373,
        1,
        0,
        0,
        0,
        384,
        2377,
        1,
        0,
        0,
        0,
        386,
        2383,
        1,
        0,
        0,
        0,
        388,
        2392,
        1,
        0,
        0,
        0,
        390,
        2396,
        1,
        0,
        0,
        0,
        392,
        2402,
        1,
        0,
        0,
        0,
        394,
        2416,
        1,
        0,
        0,
        0,
        396,
        2418,
        1,
        0,
        0,
        0,
        398,
        2423,
        1,
        0,
        0,
        0,
        400,
        2428,
        1,
        0,
        0,
        0,
        402,
        2441,
        1,
        0,
        0,
        0,
        404,
        2446,
        1,
        0,
        0,
        0,
        406,
        2451,
        1,
        0,
        0,
        0,
        408,
        2459,
        1,
        0,
        0,
        0,
        410,
        2464,
        1,
        0,
        0,
        0,
        412,
        2481,
        1,
        0,
        0,
        0,
        414,
        2486,
        1,
        0,
        0,
        0,
        416,
        2521,
        1,
        0,
        0,
        0,
        418,
        2523,
        1,
        0,
        0,
        0,
        420,
        2530,
        1,
        0,
        0,
        0,
        422,
        2537,
        1,
        0,
        0,
        0,
        424,
        2539,
        1,
        0,
        0,
        0,
        426,
        2550,
        1,
        0,
        0,
        0,
        428,
        2574,
        1,
        0,
        0,
        0,
        430,
        2579,
        1,
        0,
        0,
        0,
        432,
        2591,
        1,
        0,
        0,
        0,
        434,
        2608,
        1,
        0,
        0,
        0,
        436,
        2616,
        1,
        0,
        0,
        0,
        438,
        2627,
        1,
        0,
        0,
        0,
        440,
        2629,
        1,
        0,
        0,
        0,
        442,
        2653,
        1,
        0,
        0,
        0,
        444,
        2674,
        1,
        0,
        0,
        0,
        446,
        2687,
        1,
        0,
        0,
        0,
        448,
        2746,
        1,
        0,
        0,
        0,
        450,
        2748,
        1,
        0,
        0,
        0,
        452,
        453,
        3,
        2,
        1,
        0,
        453,
        454,
        5,
        0,
        0,
        1,
        454,
        1,
        1,
        0,
        0,
        0,
        455,
        457,
        5,
        114,
        0,
        0,
        456,
        455,
        1,
        0,
        0,
        0,
        457,
        460,
        1,
        0,
        0,
        0,
        458,
        456,
        1,
        0,
        0,
        0,
        458,
        459,
        1,
        0,
        0,
        0,
        459,
        470,
        1,
        0,
        0,
        0,
        460,
        458,
        1,
        0,
        0,
        0,
        461,
        465,
        3,
        4,
        2,
        0,
        462,
        464,
        5,
        114,
        0,
        0,
        463,
        462,
        1,
        0,
        0,
        0,
        464,
        467,
        1,
        0,
        0,
        0,
        465,
        463,
        1,
        0,
        0,
        0,
        465,
        466,
        1,
        0,
        0,
        0,
        466,
        469,
        1,
        0,
        0,
        0,
        467,
        465,
        1,
        0,
        0,
        0,
        468,
        461,
        1,
        0,
        0,
        0,
        469,
        472,
        1,
        0,
        0,
        0,
        470,
        468,
        1,
        0,
        0,
        0,
        470,
        471,
        1,
        0,
        0,
        0,
        471,
        3,
        1,
        0,
        0,
        0,
        472,
        470,
        1,
        0,
        0,
        0,
        473,
        477,
        3,
        6,
        3,
        0,
        474,
        477,
        3,
        28,
        14,
        0,
        475,
        477,
        3,
        62,
        31,
        0,
        476,
        473,
        1,
        0,
        0,
        0,
        476,
        474,
        1,
        0,
        0,
        0,
        476,
        475,
        1,
        0,
        0,
        0,
        477,
        5,
        1,
        0,
        0,
        0,
        478,
        479,
        5,
        8,
        0,
        0,
        479,
        480,
        5,
        61,
        0,
        0,
        480,
        483,
        3,
        8,
        4,
        0,
        481,
        482,
        5,
        112,
        0,
        0,
        482,
        484,
        3,
        272,
        136,
        0,
        483,
        481,
        1,
        0,
        0,
        0,
        483,
        484,
        1,
        0,
        0,
        0,
        484,
        485,
        1,
        0,
        0,
        0,
        485,
        486,
        7,
        0,
        0,
        0,
        486,
        507,
        1,
        0,
        0,
        0,
        487,
        488,
        5,
        8,
        0,
        0,
        488,
        489,
        5,
        61,
        0,
        0,
        489,
        492,
        3,
        8,
        4,
        0,
        490,
        491,
        5,
        74,
        0,
        0,
        491,
        493,
        3,
        272,
        136,
        0,
        492,
        490,
        1,
        0,
        0,
        0,
        492,
        493,
        1,
        0,
        0,
        0,
        493,
        494,
        1,
        0,
        0,
        0,
        494,
        495,
        7,
        0,
        0,
        0,
        495,
        507,
        1,
        0,
        0,
        0,
        496,
        497,
        5,
        8,
        0,
        0,
        497,
        498,
        5,
        61,
        0,
        0,
        498,
        502,
        3,
        8,
        4,
        0,
        499,
        500,
        5,
        71,
        0,
        0,
        500,
        501,
        5,
        71,
        0,
        0,
        501,
        503,
        3,
        272,
        136,
        0,
        502,
        499,
        1,
        0,
        0,
        0,
        502,
        503,
        1,
        0,
        0,
        0,
        503,
        504,
        1,
        0,
        0,
        0,
        504,
        505,
        7,
        0,
        0,
        0,
        505,
        507,
        1,
        0,
        0,
        0,
        506,
        478,
        1,
        0,
        0,
        0,
        506,
        487,
        1,
        0,
        0,
        0,
        506,
        496,
        1,
        0,
        0,
        0,
        507,
        7,
        1,
        0,
        0,
        0,
        508,
        513,
        3,
        10,
        5,
        0,
        509,
        510,
        5,
        77,
        0,
        0,
        510,
        512,
        3,
        10,
        5,
        0,
        511,
        509,
        1,
        0,
        0,
        0,
        512,
        515,
        1,
        0,
        0,
        0,
        513,
        511,
        1,
        0,
        0,
        0,
        513,
        514,
        1,
        0,
        0,
        0,
        514,
        9,
        1,
        0,
        0,
        0,
        515,
        513,
        1,
        0,
        0,
        0,
        516,
        520,
        3,
        12,
        6,
        0,
        517,
        519,
        3,
        12,
        6,
        0,
        518,
        517,
        1,
        0,
        0,
        0,
        519,
        522,
        1,
        0,
        0,
        0,
        520,
        518,
        1,
        0,
        0,
        0,
        520,
        521,
        1,
        0,
        0,
        0,
        521,
        11,
        1,
        0,
        0,
        0,
        522,
        520,
        1,
        0,
        0,
        0,
        523,
        529,
        3,
        22,
        11,
        0,
        524,
        529,
        3,
        14,
        7,
        0,
        525,
        529,
        3,
        16,
        8,
        0,
        526,
        529,
        3,
        18,
        9,
        0,
        527,
        529,
        3,
        20,
        10,
        0,
        528,
        523,
        1,
        0,
        0,
        0,
        528,
        524,
        1,
        0,
        0,
        0,
        528,
        525,
        1,
        0,
        0,
        0,
        528,
        526,
        1,
        0,
        0,
        0,
        528,
        527,
        1,
        0,
        0,
        0,
        529,
        13,
        1,
        0,
        0,
        0,
        530,
        531,
        3,
        22,
        11,
        0,
        531,
        532,
        5,
        67,
        0,
        0,
        532,
        15,
        1,
        0,
        0,
        0,
        533,
        534,
        3,
        22,
        11,
        0,
        534,
        535,
        5,
        82,
        0,
        0,
        535,
        17,
        1,
        0,
        0,
        0,
        536,
        537,
        3,
        22,
        11,
        0,
        537,
        538,
        5,
        62,
        0,
        0,
        538,
        19,
        1,
        0,
        0,
        0,
        539,
        540,
        3,
        22,
        11,
        0,
        540,
        541,
        5,
        88,
        0,
        0,
        541,
        542,
        3,
        272,
        136,
        0,
        542,
        543,
        5,
        89,
        0,
        0,
        543,
        556,
        1,
        0,
        0,
        0,
        544,
        545,
        3,
        22,
        11,
        0,
        545,
        547,
        5,
        88,
        0,
        0,
        546,
        548,
        3,
        272,
        136,
        0,
        547,
        546,
        1,
        0,
        0,
        0,
        547,
        548,
        1,
        0,
        0,
        0,
        548,
        549,
        1,
        0,
        0,
        0,
        549,
        551,
        5,
        70,
        0,
        0,
        550,
        552,
        3,
        272,
        136,
        0,
        551,
        550,
        1,
        0,
        0,
        0,
        551,
        552,
        1,
        0,
        0,
        0,
        552,
        553,
        1,
        0,
        0,
        0,
        553,
        554,
        5,
        89,
        0,
        0,
        554,
        556,
        1,
        0,
        0,
        0,
        555,
        539,
        1,
        0,
        0,
        0,
        555,
        544,
        1,
        0,
        0,
        0,
        556,
        21,
        1,
        0,
        0,
        0,
        557,
        559,
        5,
        114,
        0,
        0,
        558,
        557,
        1,
        0,
        0,
        0,
        559,
        562,
        1,
        0,
        0,
        0,
        560,
        558,
        1,
        0,
        0,
        0,
        560,
        561,
        1,
        0,
        0,
        0,
        561,
        572,
        1,
        0,
        0,
        0,
        562,
        560,
        1,
        0,
        0,
        0,
        563,
        573,
        5,
        8,
        0,
        0,
        564,
        573,
        5,
        3,
        0,
        0,
        565,
        573,
        5,
        4,
        0,
        0,
        566,
        573,
        3,
        24,
        12,
        0,
        567,
        573,
        3,
        26,
        13,
        0,
        568,
        569,
        5,
        68,
        0,
        0,
        569,
        570,
        3,
        8,
        4,
        0,
        570,
        571,
        5,
        69,
        0,
        0,
        571,
        573,
        1,
        0,
        0,
        0,
        572,
        563,
        1,
        0,
        0,
        0,
        572,
        564,
        1,
        0,
        0,
        0,
        572,
        565,
        1,
        0,
        0,
        0,
        572,
        566,
        1,
        0,
        0,
        0,
        572,
        567,
        1,
        0,
        0,
        0,
        572,
        568,
        1,
        0,
        0,
        0,
        573,
        577,
        1,
        0,
        0,
        0,
        574,
        576,
        5,
        114,
        0,
        0,
        575,
        574,
        1,
        0,
        0,
        0,
        576,
        579,
        1,
        0,
        0,
        0,
        577,
        575,
        1,
        0,
        0,
        0,
        577,
        578,
        1,
        0,
        0,
        0,
        578,
        23,
        1,
        0,
        0,
        0,
        579,
        577,
        1,
        0,
        0,
        0,
        580,
        581,
        6,
        12,
        -1,
        0,
        581,
        582,
        5,
        52,
        0,
        0,
        582,
        601,
        1,
        0,
        0,
        0,
        583,
        584,
        10,
        4,
        0,
        0,
        584,
        585,
        5,
        64,
        0,
        0,
        585,
        600,
        5,
        52,
        0,
        0,
        586,
        587,
        10,
        3,
        0,
        0,
        587,
        588,
        5,
        75,
        0,
        0,
        588,
        589,
        3,
        338,
        169,
        0,
        589,
        590,
        5,
        76,
        0,
        0,
        590,
        600,
        1,
        0,
        0,
        0,
        591,
        592,
        10,
        2,
        0,
        0,
        592,
        600,
        3,
        406,
        203,
        0,
        593,
        594,
        10,
        1,
        0,
        0,
        594,
        596,
        5,
        68,
        0,
        0,
        595,
        597,
        3,
        410,
        205,
        0,
        596,
        595,
        1,
        0,
        0,
        0,
        596,
        597,
        1,
        0,
        0,
        0,
        597,
        598,
        1,
        0,
        0,
        0,
        598,
        600,
        5,
        69,
        0,
        0,
        599,
        583,
        1,
        0,
        0,
        0,
        599,
        586,
        1,
        0,
        0,
        0,
        599,
        591,
        1,
        0,
        0,
        0,
        599,
        593,
        1,
        0,
        0,
        0,
        600,
        603,
        1,
        0,
        0,
        0,
        601,
        599,
        1,
        0,
        0,
        0,
        601,
        602,
        1,
        0,
        0,
        0,
        602,
        25,
        1,
        0,
        0,
        0,
        603,
        601,
        1,
        0,
        0,
        0,
        604,
        606,
        5,
        75,
        0,
        0,
        605,
        607,
        5,
        78,
        0,
        0,
        606,
        605,
        1,
        0,
        0,
        0,
        606,
        607,
        1,
        0,
        0,
        0,
        607,
        608,
        1,
        0,
        0,
        0,
        608,
        609,
        5,
        3,
        0,
        0,
        609,
        610,
        5,
        76,
        0,
        0,
        610,
        27,
        1,
        0,
        0,
        0,
        611,
        613,
        5,
        46,
        0,
        0,
        612,
        614,
        3,
        30,
        15,
        0,
        613,
        612,
        1,
        0,
        0,
        0,
        613,
        614,
        1,
        0,
        0,
        0,
        614,
        615,
        1,
        0,
        0,
        0,
        615,
        616,
        3,
        32,
        16,
        0,
        616,
        617,
        7,
        0,
        0,
        0,
        617,
        640,
        1,
        0,
        0,
        0,
        618,
        620,
        5,
        46,
        0,
        0,
        619,
        621,
        3,
        30,
        15,
        0,
        620,
        619,
        1,
        0,
        0,
        0,
        620,
        621,
        1,
        0,
        0,
        0,
        621,
        622,
        1,
        0,
        0,
        0,
        622,
        623,
        5,
        51,
        0,
        0,
        623,
        624,
        3,
        44,
        22,
        0,
        624,
        625,
        7,
        0,
        0,
        0,
        625,
        640,
        1,
        0,
        0,
        0,
        626,
        628,
        3,
        30,
        15,
        0,
        627,
        626,
        1,
        0,
        0,
        0,
        627,
        628,
        1,
        0,
        0,
        0,
        628,
        629,
        1,
        0,
        0,
        0,
        629,
        630,
        3,
        32,
        16,
        0,
        630,
        631,
        5,
        72,
        0,
        0,
        631,
        640,
        1,
        0,
        0,
        0,
        632,
        634,
        3,
        30,
        15,
        0,
        633,
        632,
        1,
        0,
        0,
        0,
        633,
        634,
        1,
        0,
        0,
        0,
        634,
        635,
        1,
        0,
        0,
        0,
        635,
        636,
        5,
        51,
        0,
        0,
        636,
        637,
        3,
        44,
        22,
        0,
        637,
        638,
        5,
        72,
        0,
        0,
        638,
        640,
        1,
        0,
        0,
        0,
        639,
        611,
        1,
        0,
        0,
        0,
        639,
        618,
        1,
        0,
        0,
        0,
        639,
        627,
        1,
        0,
        0,
        0,
        639,
        633,
        1,
        0,
        0,
        0,
        640,
        29,
        1,
        0,
        0,
        0,
        641,
        642,
        4,
        15,
        4,
        0,
        642,
        643,
        5,
        52,
        0,
        0,
        643,
        31,
        1,
        0,
        0,
        0,
        644,
        646,
        5,
        114,
        0,
        0,
        645,
        644,
        1,
        0,
        0,
        0,
        646,
        649,
        1,
        0,
        0,
        0,
        647,
        645,
        1,
        0,
        0,
        0,
        647,
        648,
        1,
        0,
        0,
        0,
        648,
        655,
        1,
        0,
        0,
        0,
        649,
        647,
        1,
        0,
        0,
        0,
        650,
        651,
        3,
        34,
        17,
        0,
        651,
        652,
        5,
        98,
        0,
        0,
        652,
        653,
        3,
        32,
        16,
        0,
        653,
        656,
        1,
        0,
        0,
        0,
        654,
        656,
        3,
        34,
        17,
        0,
        655,
        650,
        1,
        0,
        0,
        0,
        655,
        654,
        1,
        0,
        0,
        0,
        656,
        660,
        1,
        0,
        0,
        0,
        657,
        659,
        5,
        114,
        0,
        0,
        658,
        657,
        1,
        0,
        0,
        0,
        659,
        662,
        1,
        0,
        0,
        0,
        660,
        658,
        1,
        0,
        0,
        0,
        660,
        661,
        1,
        0,
        0,
        0,
        661,
        33,
        1,
        0,
        0,
        0,
        662,
        660,
        1,
        0,
        0,
        0,
        663,
        665,
        5,
        114,
        0,
        0,
        664,
        663,
        1,
        0,
        0,
        0,
        665,
        668,
        1,
        0,
        0,
        0,
        666,
        664,
        1,
        0,
        0,
        0,
        666,
        667,
        1,
        0,
        0,
        0,
        667,
        684,
        1,
        0,
        0,
        0,
        668,
        666,
        1,
        0,
        0,
        0,
        669,
        670,
        5,
        49,
        0,
        0,
        670,
        671,
        5,
        8,
        0,
        0,
        671,
        672,
        5,
        30,
        0,
        0,
        672,
        673,
        3,
        48,
        24,
        0,
        673,
        674,
        5,
        71,
        0,
        0,
        674,
        675,
        3,
        34,
        17,
        0,
        675,
        685,
        1,
        0,
        0,
        0,
        676,
        677,
        5,
        50,
        0,
        0,
        677,
        678,
        5,
        8,
        0,
        0,
        678,
        679,
        5,
        30,
        0,
        0,
        679,
        680,
        3,
        48,
        24,
        0,
        680,
        681,
        5,
        71,
        0,
        0,
        681,
        682,
        3,
        34,
        17,
        0,
        682,
        685,
        1,
        0,
        0,
        0,
        683,
        685,
        3,
        36,
        18,
        0,
        684,
        669,
        1,
        0,
        0,
        0,
        684,
        676,
        1,
        0,
        0,
        0,
        684,
        683,
        1,
        0,
        0,
        0,
        685,
        689,
        1,
        0,
        0,
        0,
        686,
        688,
        5,
        114,
        0,
        0,
        687,
        686,
        1,
        0,
        0,
        0,
        688,
        691,
        1,
        0,
        0,
        0,
        689,
        687,
        1,
        0,
        0,
        0,
        689,
        690,
        1,
        0,
        0,
        0,
        690,
        35,
        1,
        0,
        0,
        0,
        691,
        689,
        1,
        0,
        0,
        0,
        692,
        694,
        5,
        114,
        0,
        0,
        693,
        692,
        1,
        0,
        0,
        0,
        694,
        697,
        1,
        0,
        0,
        0,
        695,
        693,
        1,
        0,
        0,
        0,
        695,
        696,
        1,
        0,
        0,
        0,
        696,
        698,
        1,
        0,
        0,
        0,
        697,
        695,
        1,
        0,
        0,
        0,
        698,
        703,
        3,
        38,
        19,
        0,
        699,
        700,
        5,
        37,
        0,
        0,
        700,
        702,
        3,
        38,
        19,
        0,
        701,
        699,
        1,
        0,
        0,
        0,
        702,
        705,
        1,
        0,
        0,
        0,
        703,
        701,
        1,
        0,
        0,
        0,
        703,
        704,
        1,
        0,
        0,
        0,
        704,
        709,
        1,
        0,
        0,
        0,
        705,
        703,
        1,
        0,
        0,
        0,
        706,
        708,
        5,
        114,
        0,
        0,
        707,
        706,
        1,
        0,
        0,
        0,
        708,
        711,
        1,
        0,
        0,
        0,
        709,
        707,
        1,
        0,
        0,
        0,
        709,
        710,
        1,
        0,
        0,
        0,
        710,
        37,
        1,
        0,
        0,
        0,
        711,
        709,
        1,
        0,
        0,
        0,
        712,
        714,
        5,
        114,
        0,
        0,
        713,
        712,
        1,
        0,
        0,
        0,
        714,
        717,
        1,
        0,
        0,
        0,
        715,
        713,
        1,
        0,
        0,
        0,
        715,
        716,
        1,
        0,
        0,
        0,
        716,
        718,
        1,
        0,
        0,
        0,
        717,
        715,
        1,
        0,
        0,
        0,
        718,
        723,
        3,
        40,
        20,
        0,
        719,
        720,
        5,
        9,
        0,
        0,
        720,
        722,
        3,
        40,
        20,
        0,
        721,
        719,
        1,
        0,
        0,
        0,
        722,
        725,
        1,
        0,
        0,
        0,
        723,
        721,
        1,
        0,
        0,
        0,
        723,
        724,
        1,
        0,
        0,
        0,
        724,
        729,
        1,
        0,
        0,
        0,
        725,
        723,
        1,
        0,
        0,
        0,
        726,
        728,
        5,
        114,
        0,
        0,
        727,
        726,
        1,
        0,
        0,
        0,
        728,
        731,
        1,
        0,
        0,
        0,
        729,
        727,
        1,
        0,
        0,
        0,
        729,
        730,
        1,
        0,
        0,
        0,
        730,
        39,
        1,
        0,
        0,
        0,
        731,
        729,
        1,
        0,
        0,
        0,
        732,
        734,
        5,
        114,
        0,
        0,
        733,
        732,
        1,
        0,
        0,
        0,
        734,
        737,
        1,
        0,
        0,
        0,
        735,
        733,
        1,
        0,
        0,
        0,
        735,
        736,
        1,
        0,
        0,
        0,
        736,
        744,
        1,
        0,
        0,
        0,
        737,
        735,
        1,
        0,
        0,
        0,
        738,
        745,
        3,
        42,
        21,
        0,
        739,
        740,
        5,
        68,
        0,
        0,
        740,
        741,
        3,
        32,
        16,
        0,
        741,
        742,
        5,
        69,
        0,
        0,
        742,
        745,
        1,
        0,
        0,
        0,
        743,
        745,
        3,
        44,
        22,
        0,
        744,
        738,
        1,
        0,
        0,
        0,
        744,
        739,
        1,
        0,
        0,
        0,
        744,
        743,
        1,
        0,
        0,
        0,
        745,
        749,
        1,
        0,
        0,
        0,
        746,
        748,
        5,
        114,
        0,
        0,
        747,
        746,
        1,
        0,
        0,
        0,
        748,
        751,
        1,
        0,
        0,
        0,
        749,
        747,
        1,
        0,
        0,
        0,
        749,
        750,
        1,
        0,
        0,
        0,
        750,
        41,
        1,
        0,
        0,
        0,
        751,
        749,
        1,
        0,
        0,
        0,
        752,
        753,
        3,
        44,
        22,
        0,
        753,
        754,
        7,
        1,
        0,
        0,
        754,
        755,
        3,
        44,
        22,
        0,
        755,
        43,
        1,
        0,
        0,
        0,
        756,
        765,
        3,
        46,
        23,
        0,
        757,
        765,
        3,
        292,
        146,
        0,
        758,
        759,
        3,
        292,
        146,
        0,
        759,
        760,
        5,
        28,
        0,
        0,
        760,
        761,
        3,
        292,
        146,
        0,
        761,
        762,
        5,
        21,
        0,
        0,
        762,
        763,
        3,
        292,
        146,
        0,
        763,
        765,
        1,
        0,
        0,
        0,
        764,
        756,
        1,
        0,
        0,
        0,
        764,
        757,
        1,
        0,
        0,
        0,
        764,
        758,
        1,
        0,
        0,
        0,
        765,
        45,
        1,
        0,
        0,
        0,
        766,
        767,
        5,
        77,
        0,
        0,
        767,
        768,
        3,
        48,
        24,
        0,
        768,
        769,
        5,
        77,
        0,
        0,
        769,
        772,
        1,
        0,
        0,
        0,
        770,
        772,
        3,
        48,
        24,
        0,
        771,
        766,
        1,
        0,
        0,
        0,
        771,
        770,
        1,
        0,
        0,
        0,
        772,
        47,
        1,
        0,
        0,
        0,
        773,
        774,
        6,
        24,
        -1,
        0,
        774,
        775,
        3,
        50,
        25,
        0,
        775,
        784,
        1,
        0,
        0,
        0,
        776,
        777,
        10,
        2,
        0,
        0,
        777,
        778,
        5,
        64,
        0,
        0,
        778,
        783,
        3,
        50,
        25,
        0,
        779,
        780,
        10,
        1,
        0,
        0,
        780,
        781,
        5,
        65,
        0,
        0,
        781,
        783,
        3,
        50,
        25,
        0,
        782,
        776,
        1,
        0,
        0,
        0,
        782,
        779,
        1,
        0,
        0,
        0,
        783,
        786,
        1,
        0,
        0,
        0,
        784,
        782,
        1,
        0,
        0,
        0,
        784,
        785,
        1,
        0,
        0,
        0,
        785,
        49,
        1,
        0,
        0,
        0,
        786,
        784,
        1,
        0,
        0,
        0,
        787,
        799,
        3,
        52,
        26,
        0,
        788,
        789,
        3,
        52,
        26,
        0,
        789,
        790,
        5,
        75,
        0,
        0,
        790,
        791,
        3,
        58,
        29,
        0,
        791,
        792,
        5,
        76,
        0,
        0,
        792,
        799,
        1,
        0,
        0,
        0,
        793,
        794,
        3,
        52,
        26,
        0,
        794,
        795,
        5,
        88,
        0,
        0,
        795,
        796,
        3,
        54,
        27,
        0,
        796,
        797,
        5,
        89,
        0,
        0,
        797,
        799,
        1,
        0,
        0,
        0,
        798,
        787,
        1,
        0,
        0,
        0,
        798,
        788,
        1,
        0,
        0,
        0,
        798,
        793,
        1,
        0,
        0,
        0,
        799,
        51,
        1,
        0,
        0,
        0,
        800,
        806,
        5,
        8,
        0,
        0,
        801,
        802,
        5,
        68,
        0,
        0,
        802,
        803,
        3,
        48,
        24,
        0,
        803,
        804,
        5,
        69,
        0,
        0,
        804,
        806,
        1,
        0,
        0,
        0,
        805,
        800,
        1,
        0,
        0,
        0,
        805,
        801,
        1,
        0,
        0,
        0,
        806,
        53,
        1,
        0,
        0,
        0,
        807,
        812,
        3,
        56,
        28,
        0,
        808,
        809,
        5,
        70,
        0,
        0,
        809,
        811,
        3,
        56,
        28,
        0,
        810,
        808,
        1,
        0,
        0,
        0,
        811,
        814,
        1,
        0,
        0,
        0,
        812,
        810,
        1,
        0,
        0,
        0,
        812,
        813,
        1,
        0,
        0,
        0,
        813,
        816,
        1,
        0,
        0,
        0,
        814,
        812,
        1,
        0,
        0,
        0,
        815,
        817,
        5,
        70,
        0,
        0,
        816,
        815,
        1,
        0,
        0,
        0,
        816,
        817,
        1,
        0,
        0,
        0,
        817,
        55,
        1,
        0,
        0,
        0,
        818,
        819,
        5,
        67,
        0,
        0,
        819,
        822,
        5,
        8,
        0,
        0,
        820,
        821,
        5,
        71,
        0,
        0,
        821,
        823,
        3,
        60,
        30,
        0,
        822,
        820,
        1,
        0,
        0,
        0,
        822,
        823,
        1,
        0,
        0,
        0,
        823,
        57,
        1,
        0,
        0,
        0,
        824,
        829,
        3,
        60,
        30,
        0,
        825,
        826,
        5,
        70,
        0,
        0,
        826,
        828,
        3,
        60,
        30,
        0,
        827,
        825,
        1,
        0,
        0,
        0,
        828,
        831,
        1,
        0,
        0,
        0,
        829,
        827,
        1,
        0,
        0,
        0,
        829,
        830,
        1,
        0,
        0,
        0,
        830,
        833,
        1,
        0,
        0,
        0,
        831,
        829,
        1,
        0,
        0,
        0,
        832,
        834,
        5,
        70,
        0,
        0,
        833,
        832,
        1,
        0,
        0,
        0,
        833,
        834,
        1,
        0,
        0,
        0,
        834,
        59,
        1,
        0,
        0,
        0,
        835,
        855,
        5,
        4,
        0,
        0,
        836,
        838,
        5,
        4,
        0,
        0,
        837,
        836,
        1,
        0,
        0,
        0,
        837,
        838,
        1,
        0,
        0,
        0,
        838,
        839,
        1,
        0,
        0,
        0,
        839,
        841,
        5,
        71,
        0,
        0,
        840,
        842,
        5,
        4,
        0,
        0,
        841,
        840,
        1,
        0,
        0,
        0,
        841,
        842,
        1,
        0,
        0,
        0,
        842,
        855,
        1,
        0,
        0,
        0,
        843,
        845,
        5,
        4,
        0,
        0,
        844,
        843,
        1,
        0,
        0,
        0,
        844,
        845,
        1,
        0,
        0,
        0,
        845,
        846,
        1,
        0,
        0,
        0,
        846,
        848,
        5,
        71,
        0,
        0,
        847,
        849,
        5,
        4,
        0,
        0,
        848,
        847,
        1,
        0,
        0,
        0,
        848,
        849,
        1,
        0,
        0,
        0,
        849,
        850,
        1,
        0,
        0,
        0,
        850,
        852,
        5,
        71,
        0,
        0,
        851,
        853,
        5,
        4,
        0,
        0,
        852,
        851,
        1,
        0,
        0,
        0,
        852,
        853,
        1,
        0,
        0,
        0,
        853,
        855,
        1,
        0,
        0,
        0,
        854,
        835,
        1,
        0,
        0,
        0,
        854,
        837,
        1,
        0,
        0,
        0,
        854,
        844,
        1,
        0,
        0,
        0,
        855,
        61,
        1,
        0,
        0,
        0,
        856,
        859,
        3,
        84,
        42,
        0,
        857,
        859,
        3,
        82,
        41,
        0,
        858,
        856,
        1,
        0,
        0,
        0,
        858,
        857,
        1,
        0,
        0,
        0,
        859,
        63,
        1,
        0,
        0,
        0,
        860,
        862,
        5,
        114,
        0,
        0,
        861,
        860,
        1,
        0,
        0,
        0,
        862,
        865,
        1,
        0,
        0,
        0,
        863,
        861,
        1,
        0,
        0,
        0,
        863,
        864,
        1,
        0,
        0,
        0,
        864,
        866,
        1,
        0,
        0,
        0,
        865,
        863,
        1,
        0,
        0,
        0,
        866,
        870,
        3,
        76,
        38,
        0,
        867,
        869,
        5,
        114,
        0,
        0,
        868,
        867,
        1,
        0,
        0,
        0,
        869,
        872,
        1,
        0,
        0,
        0,
        870,
        868,
        1,
        0,
        0,
        0,
        870,
        871,
        1,
        0,
        0,
        0,
        871,
        65,
        1,
        0,
        0,
        0,
        872,
        870,
        1,
        0,
        0,
        0,
        873,
        875,
        3,
        74,
        37,
        0,
        874,
        873,
        1,
        0,
        0,
        0,
        874,
        875,
        1,
        0,
        0,
        0,
        875,
        877,
        1,
        0,
        0,
        0,
        876,
        878,
        5,
        0,
        0,
        1,
        877,
        876,
        1,
        0,
        0,
        0,
        877,
        878,
        1,
        0,
        0,
        0,
        878,
        67,
        1,
        0,
        0,
        0,
        879,
        880,
        3,
        78,
        39,
        0,
        880,
        69,
        1,
        0,
        0,
        0,
        881,
        885,
        3,
        270,
        135,
        0,
        882,
        884,
        5,
        114,
        0,
        0,
        883,
        882,
        1,
        0,
        0,
        0,
        884,
        887,
        1,
        0,
        0,
        0,
        885,
        883,
        1,
        0,
        0,
        0,
        885,
        886,
        1,
        0,
        0,
        0,
        886,
        889,
        1,
        0,
        0,
        0,
        887,
        885,
        1,
        0,
        0,
        0,
        888,
        890,
        5,
        0,
        0,
        1,
        889,
        888,
        1,
        0,
        0,
        0,
        889,
        890,
        1,
        0,
        0,
        0,
        890,
        71,
        1,
        0,
        0,
        0,
        891,
        893,
        5,
        68,
        0,
        0,
        892,
        894,
        3,
        448,
        224,
        0,
        893,
        892,
        1,
        0,
        0,
        0,
        893,
        894,
        1,
        0,
        0,
        0,
        894,
        895,
        1,
        0,
        0,
        0,
        895,
        896,
        5,
        69,
        0,
        0,
        896,
        897,
        5,
        98,
        0,
        0,
        897,
        901,
        3,
        272,
        136,
        0,
        898,
        900,
        5,
        114,
        0,
        0,
        899,
        898,
        1,
        0,
        0,
        0,
        900,
        903,
        1,
        0,
        0,
        0,
        901,
        899,
        1,
        0,
        0,
        0,
        901,
        902,
        1,
        0,
        0,
        0,
        902,
        905,
        1,
        0,
        0,
        0,
        903,
        901,
        1,
        0,
        0,
        0,
        904,
        906,
        5,
        0,
        0,
        1,
        905,
        904,
        1,
        0,
        0,
        0,
        905,
        906,
        1,
        0,
        0,
        0,
        906,
        73,
        1,
        0,
        0,
        0,
        907,
        910,
        3,
        76,
        38,
        0,
        908,
        910,
        5,
        114,
        0,
        0,
        909,
        907,
        1,
        0,
        0,
        0,
        909,
        908,
        1,
        0,
        0,
        0,
        910,
        911,
        1,
        0,
        0,
        0,
        911,
        909,
        1,
        0,
        0,
        0,
        911,
        912,
        1,
        0,
        0,
        0,
        912,
        75,
        1,
        0,
        0,
        0,
        913,
        916,
        3,
        84,
        42,
        0,
        914,
        916,
        3,
        80,
        40,
        0,
        915,
        913,
        1,
        0,
        0,
        0,
        915,
        914,
        1,
        0,
        0,
        0,
        916,
        77,
        1,
        0,
        0,
        0,
        917,
        918,
        3,
        84,
        42,
        0,
        918,
        919,
        5,
        114,
        0,
        0,
        919,
        923,
        1,
        0,
        0,
        0,
        920,
        923,
        3,
        80,
        40,
        0,
        921,
        923,
        5,
        114,
        0,
        0,
        922,
        917,
        1,
        0,
        0,
        0,
        922,
        920,
        1,
        0,
        0,
        0,
        922,
        921,
        1,
        0,
        0,
        0,
        923,
        79,
        1,
        0,
        0,
        0,
        924,
        929,
        3,
        82,
        41,
        0,
        925,
        926,
        5,
        72,
        0,
        0,
        926,
        928,
        3,
        82,
        41,
        0,
        927,
        925,
        1,
        0,
        0,
        0,
        928,
        931,
        1,
        0,
        0,
        0,
        929,
        927,
        1,
        0,
        0,
        0,
        929,
        930,
        1,
        0,
        0,
        0,
        930,
        933,
        1,
        0,
        0,
        0,
        931,
        929,
        1,
        0,
        0,
        0,
        932,
        934,
        5,
        72,
        0,
        0,
        933,
        932,
        1,
        0,
        0,
        0,
        933,
        934,
        1,
        0,
        0,
        0,
        934,
        947,
        1,
        0,
        0,
        0,
        935,
        937,
        5,
        114,
        0,
        0,
        936,
        935,
        1,
        0,
        0,
        0,
        937,
        938,
        1,
        0,
        0,
        0,
        938,
        936,
        1,
        0,
        0,
        0,
        938,
        939,
        1,
        0,
        0,
        0,
        939,
        948,
        1,
        0,
        0,
        0,
        940,
        942,
        5,
        114,
        0,
        0,
        941,
        940,
        1,
        0,
        0,
        0,
        942,
        945,
        1,
        0,
        0,
        0,
        943,
        941,
        1,
        0,
        0,
        0,
        943,
        944,
        1,
        0,
        0,
        0,
        944,
        946,
        1,
        0,
        0,
        0,
        945,
        943,
        1,
        0,
        0,
        0,
        946,
        948,
        5,
        0,
        0,
        1,
        947,
        936,
        1,
        0,
        0,
        0,
        947,
        943,
        1,
        0,
        0,
        0,
        948,
        81,
        1,
        0,
        0,
        0,
        949,
        964,
        3,
        86,
        43,
        0,
        950,
        964,
        3,
        260,
        130,
        0,
        951,
        964,
        3,
        276,
        138,
        0,
        952,
        964,
        3,
        92,
        46,
        0,
        953,
        964,
        3,
        106,
        53,
        0,
        954,
        964,
        3,
        94,
        47,
        0,
        955,
        964,
        5,
        38,
        0,
        0,
        956,
        964,
        3,
        100,
        50,
        0,
        957,
        964,
        3,
        102,
        51,
        0,
        958,
        964,
        3,
        104,
        52,
        0,
        959,
        964,
        5,
        14,
        0,
        0,
        960,
        964,
        5,
        17,
        0,
        0,
        961,
        964,
        3,
        96,
        48,
        0,
        962,
        964,
        3,
        98,
        49,
        0,
        963,
        949,
        1,
        0,
        0,
        0,
        963,
        950,
        1,
        0,
        0,
        0,
        963,
        951,
        1,
        0,
        0,
        0,
        963,
        952,
        1,
        0,
        0,
        0,
        963,
        953,
        1,
        0,
        0,
        0,
        963,
        954,
        1,
        0,
        0,
        0,
        963,
        955,
        1,
        0,
        0,
        0,
        963,
        956,
        1,
        0,
        0,
        0,
        963,
        957,
        1,
        0,
        0,
        0,
        963,
        958,
        1,
        0,
        0,
        0,
        963,
        959,
        1,
        0,
        0,
        0,
        963,
        960,
        1,
        0,
        0,
        0,
        963,
        961,
        1,
        0,
        0,
        0,
        963,
        962,
        1,
        0,
        0,
        0,
        964,
        83,
        1,
        0,
        0,
        0,
        965,
        974,
        3,
        132,
        66,
        0,
        966,
        974,
        3,
        166,
        83,
        0,
        967,
        974,
        3,
        128,
        64,
        0,
        968,
        974,
        3,
        176,
        88,
        0,
        969,
        974,
        3,
        174,
        87,
        0,
        970,
        974,
        3,
        180,
        90,
        0,
        971,
        974,
        3,
        172,
        86,
        0,
        972,
        974,
        3,
        188,
        94,
        0,
        973,
        965,
        1,
        0,
        0,
        0,
        973,
        966,
        1,
        0,
        0,
        0,
        973,
        967,
        1,
        0,
        0,
        0,
        973,
        968,
        1,
        0,
        0,
        0,
        973,
        969,
        1,
        0,
        0,
        0,
        973,
        970,
        1,
        0,
        0,
        0,
        973,
        971,
        1,
        0,
        0,
        0,
        973,
        972,
        1,
        0,
        0,
        0,
        974,
        85,
        1,
        0,
        0,
        0,
        975,
        976,
        5,
        52,
        0,
        0,
        976,
        977,
        5,
        71,
        0,
        0,
        977,
        980,
        3,
        272,
        136,
        0,
        978,
        979,
        5,
        74,
        0,
        0,
        979,
        981,
        3,
        88,
        44,
        0,
        980,
        978,
        1,
        0,
        0,
        0,
        980,
        981,
        1,
        0,
        0,
        0,
        981,
        1013,
        1,
        0,
        0,
        0,
        982,
        983,
        5,
        68,
        0,
        0,
        983,
        984,
        3,
        436,
        218,
        0,
        984,
        985,
        5,
        69,
        0,
        0,
        985,
        988,
        1,
        0,
        0,
        0,
        986,
        988,
        3,
        438,
        219,
        0,
        987,
        982,
        1,
        0,
        0,
        0,
        987,
        986,
        1,
        0,
        0,
        0,
        988,
        989,
        1,
        0,
        0,
        0,
        989,
        990,
        5,
        71,
        0,
        0,
        990,
        993,
        3,
        272,
        136,
        0,
        991,
        992,
        5,
        74,
        0,
        0,
        992,
        994,
        3,
        88,
        44,
        0,
        993,
        991,
        1,
        0,
        0,
        0,
        993,
        994,
        1,
        0,
        0,
        0,
        994,
        1013,
        1,
        0,
        0,
        0,
        995,
        996,
        3,
        424,
        212,
        0,
        996,
        997,
        5,
        74,
        0,
        0,
        997,
        999,
        1,
        0,
        0,
        0,
        998,
        995,
        1,
        0,
        0,
        0,
        999,
        1000,
        1,
        0,
        0,
        0,
        1000,
        998,
        1,
        0,
        0,
        0,
        1000,
        1001,
        1,
        0,
        0,
        0,
        1001,
        1004,
        1,
        0,
        0,
        0,
        1002,
        1005,
        3,
        274,
        137,
        0,
        1003,
        1005,
        3,
        276,
        138,
        0,
        1004,
        1002,
        1,
        0,
        0,
        0,
        1004,
        1003,
        1,
        0,
        0,
        0,
        1005,
        1013,
        1,
        0,
        0,
        0,
        1006,
        1007,
        3,
        436,
        218,
        0,
        1007,
        1010,
        3,
        90,
        45,
        0,
        1008,
        1011,
        3,
        274,
        137,
        0,
        1009,
        1011,
        3,
        276,
        138,
        0,
        1010,
        1008,
        1,
        0,
        0,
        0,
        1010,
        1009,
        1,
        0,
        0,
        0,
        1011,
        1013,
        1,
        0,
        0,
        0,
        1012,
        975,
        1,
        0,
        0,
        0,
        1012,
        987,
        1,
        0,
        0,
        0,
        1012,
        998,
        1,
        0,
        0,
        0,
        1012,
        1006,
        1,
        0,
        0,
        0,
        1013,
        87,
        1,
        0,
        0,
        0,
        1014,
        1017,
        3,
        274,
        137,
        0,
        1015,
        1017,
        3,
        276,
        138,
        0,
        1016,
        1014,
        1,
        0,
        0,
        0,
        1016,
        1015,
        1,
        0,
        0,
        0,
        1017,
        89,
        1,
        0,
        0,
        0,
        1018,
        1019,
        7,
        2,
        0,
        0,
        1019,
        91,
        1,
        0,
        0,
        0,
        1020,
        1022,
        5,
        40,
        0,
        0,
        1021,
        1023,
        3,
        276,
        138,
        0,
        1022,
        1021,
        1,
        0,
        0,
        0,
        1022,
        1023,
        1,
        0,
        0,
        0,
        1023,
        93,
        1,
        0,
        0,
        0,
        1024,
        1025,
        5,
        39,
        0,
        0,
        1025,
        1028,
        3,
        272,
        136,
        0,
        1026,
        1027,
        5,
        26,
        0,
        0,
        1027,
        1029,
        3,
        272,
        136,
        0,
        1028,
        1026,
        1,
        0,
        0,
        0,
        1028,
        1029,
        1,
        0,
        0,
        0,
        1029,
        1032,
        1,
        0,
        0,
        0,
        1030,
        1032,
        5,
        39,
        0,
        0,
        1031,
        1024,
        1,
        0,
        0,
        0,
        1031,
        1030,
        1,
        0,
        0,
        0,
        1032,
        95,
        1,
        0,
        0,
        0,
        1033,
        1034,
        5,
        27,
        0,
        0,
        1034,
        1039,
        5,
        52,
        0,
        0,
        1035,
        1036,
        5,
        70,
        0,
        0,
        1036,
        1038,
        5,
        52,
        0,
        0,
        1037,
        1035,
        1,
        0,
        0,
        0,
        1038,
        1041,
        1,
        0,
        0,
        0,
        1039,
        1037,
        1,
        0,
        0,
        0,
        1039,
        1040,
        1,
        0,
        0,
        0,
        1040,
        97,
        1,
        0,
        0,
        0,
        1041,
        1039,
        1,
        0,
        0,
        0,
        1042,
        1043,
        5,
        35,
        0,
        0,
        1043,
        1048,
        5,
        52,
        0,
        0,
        1044,
        1045,
        5,
        70,
        0,
        0,
        1045,
        1047,
        5,
        52,
        0,
        0,
        1046,
        1044,
        1,
        0,
        0,
        0,
        1047,
        1050,
        1,
        0,
        0,
        0,
        1048,
        1046,
        1,
        0,
        0,
        0,
        1048,
        1049,
        1,
        0,
        0,
        0,
        1049,
        99,
        1,
        0,
        0,
        0,
        1050,
        1048,
        1,
        0,
        0,
        0,
        1051,
        1052,
        5,
        19,
        0,
        0,
        1052,
        1053,
        3,
        442,
        221,
        0,
        1053,
        101,
        1,
        0,
        0,
        0,
        1054,
        1055,
        3,
        274,
        137,
        0,
        1055,
        103,
        1,
        0,
        0,
        0,
        1056,
        1057,
        5,
        11,
        0,
        0,
        1057,
        1060,
        3,
        272,
        136,
        0,
        1058,
        1059,
        5,
        70,
        0,
        0,
        1059,
        1061,
        3,
        272,
        136,
        0,
        1060,
        1058,
        1,
        0,
        0,
        0,
        1060,
        1061,
        1,
        0,
        0,
        0,
        1061,
        105,
        1,
        0,
        0,
        0,
        1062,
        1065,
        3,
        108,
        54,
        0,
        1063,
        1065,
        3,
        110,
        55,
        0,
        1064,
        1062,
        1,
        0,
        0,
        0,
        1064,
        1063,
        1,
        0,
        0,
        0,
        1065,
        107,
        1,
        0,
        0,
        0,
        1066,
        1067,
        5,
        29,
        0,
        0,
        1067,
        1068,
        3,
        118,
        59,
        0,
        1068,
        109,
        1,
        0,
        0,
        0,
        1069,
        1073,
        5,
        26,
        0,
        0,
        1070,
        1072,
        7,
        3,
        0,
        0,
        1071,
        1070,
        1,
        0,
        0,
        0,
        1072,
        1075,
        1,
        0,
        0,
        0,
        1073,
        1071,
        1,
        0,
        0,
        0,
        1073,
        1074,
        1,
        0,
        0,
        0,
        1074,
        1076,
        1,
        0,
        0,
        0,
        1075,
        1073,
        1,
        0,
        0,
        0,
        1076,
        1077,
        3,
        122,
        61,
        0,
        1077,
        1078,
        5,
        29,
        0,
        0,
        1078,
        1079,
        3,
        112,
        56,
        0,
        1079,
        1089,
        1,
        0,
        0,
        0,
        1080,
        1082,
        5,
        26,
        0,
        0,
        1081,
        1083,
        7,
        3,
        0,
        0,
        1082,
        1081,
        1,
        0,
        0,
        0,
        1083,
        1084,
        1,
        0,
        0,
        0,
        1084,
        1082,
        1,
        0,
        0,
        0,
        1084,
        1085,
        1,
        0,
        0,
        0,
        1085,
        1086,
        1,
        0,
        0,
        0,
        1086,
        1087,
        5,
        29,
        0,
        0,
        1087,
        1089,
        3,
        112,
        56,
        0,
        1088,
        1069,
        1,
        0,
        0,
        0,
        1088,
        1080,
        1,
        0,
        0,
        0,
        1089,
        111,
        1,
        0,
        0,
        0,
        1090,
        1091,
        5,
        68,
        0,
        0,
        1091,
        1093,
        3,
        114,
        57,
        0,
        1092,
        1094,
        5,
        70,
        0,
        0,
        1093,
        1092,
        1,
        0,
        0,
        0,
        1093,
        1094,
        1,
        0,
        0,
        0,
        1094,
        1095,
        1,
        0,
        0,
        0,
        1095,
        1096,
        5,
        69,
        0,
        0,
        1096,
        1100,
        1,
        0,
        0,
        0,
        1097,
        1100,
        3,
        114,
        57,
        0,
        1098,
        1100,
        5,
        67,
        0,
        0,
        1099,
        1090,
        1,
        0,
        0,
        0,
        1099,
        1097,
        1,
        0,
        0,
        0,
        1099,
        1098,
        1,
        0,
        0,
        0,
        1100,
        113,
        1,
        0,
        0,
        0,
        1101,
        1106,
        3,
        116,
        58,
        0,
        1102,
        1103,
        5,
        70,
        0,
        0,
        1103,
        1105,
        3,
        116,
        58,
        0,
        1104,
        1102,
        1,
        0,
        0,
        0,
        1105,
        1108,
        1,
        0,
        0,
        0,
        1106,
        1104,
        1,
        0,
        0,
        0,
        1106,
        1107,
        1,
        0,
        0,
        0,
        1107,
        115,
        1,
        0,
        0,
        0,
        1108,
        1106,
        1,
        0,
        0,
        0,
        1109,
        1112,
        5,
        52,
        0,
        0,
        1110,
        1111,
        5,
        10,
        0,
        0,
        1111,
        1113,
        5,
        52,
        0,
        0,
        1112,
        1110,
        1,
        0,
        0,
        0,
        1112,
        1113,
        1,
        0,
        0,
        0,
        1113,
        117,
        1,
        0,
        0,
        0,
        1114,
        1119,
        3,
        120,
        60,
        0,
        1115,
        1116,
        5,
        70,
        0,
        0,
        1116,
        1118,
        3,
        120,
        60,
        0,
        1117,
        1115,
        1,
        0,
        0,
        0,
        1118,
        1121,
        1,
        0,
        0,
        0,
        1119,
        1117,
        1,
        0,
        0,
        0,
        1119,
        1120,
        1,
        0,
        0,
        0,
        1120,
        119,
        1,
        0,
        0,
        0,
        1121,
        1119,
        1,
        0,
        0,
        0,
        1122,
        1125,
        3,
        122,
        61,
        0,
        1123,
        1124,
        5,
        10,
        0,
        0,
        1124,
        1126,
        5,
        52,
        0,
        0,
        1125,
        1123,
        1,
        0,
        0,
        0,
        1125,
        1126,
        1,
        0,
        0,
        0,
        1126,
        121,
        1,
        0,
        0,
        0,
        1127,
        1128,
        6,
        61,
        -1,
        0,
        1128,
        1129,
        5,
        52,
        0,
        0,
        1129,
        1135,
        1,
        0,
        0,
        0,
        1130,
        1131,
        10,
        2,
        0,
        0,
        1131,
        1132,
        5,
        64,
        0,
        0,
        1132,
        1134,
        5,
        52,
        0,
        0,
        1133,
        1130,
        1,
        0,
        0,
        0,
        1134,
        1137,
        1,
        0,
        0,
        0,
        1135,
        1133,
        1,
        0,
        0,
        0,
        1135,
        1136,
        1,
        0,
        0,
        0,
        1136,
        123,
        1,
        0,
        0,
        0,
        1137,
        1135,
        1,
        0,
        0,
        0,
        1138,
        1139,
        5,
        114,
        0,
        0,
        1139,
        1140,
        5,
        1,
        0,
        0,
        1140,
        1141,
        3,
        74,
        37,
        0,
        1141,
        1142,
        5,
        2,
        0,
        0,
        1142,
        1145,
        1,
        0,
        0,
        0,
        1143,
        1145,
        3,
        80,
        40,
        0,
        1144,
        1138,
        1,
        0,
        0,
        0,
        1144,
        1143,
        1,
        0,
        0,
        0,
        1145,
        125,
        1,
        0,
        0,
        0,
        1146,
        1147,
        5,
        97,
        0,
        0,
        1147,
        1148,
        3,
        286,
        143,
        0,
        1148,
        1149,
        5,
        114,
        0,
        0,
        1149,
        1151,
        1,
        0,
        0,
        0,
        1150,
        1146,
        1,
        0,
        0,
        0,
        1151,
        1152,
        1,
        0,
        0,
        0,
        1152,
        1150,
        1,
        0,
        0,
        0,
        1152,
        1153,
        1,
        0,
        0,
        0,
        1153,
        127,
        1,
        0,
        0,
        0,
        1154,
        1156,
        3,
        126,
        63,
        0,
        1155,
        1154,
        1,
        0,
        0,
        0,
        1155,
        1156,
        1,
        0,
        0,
        0,
        1156,
        1157,
        1,
        0,
        0,
        0,
        1157,
        1158,
        3,
        130,
        65,
        0,
        1158,
        129,
        1,
        0,
        0,
        0,
        1159,
        1160,
        5,
        16,
        0,
        0,
        1160,
        1162,
        5,
        52,
        0,
        0,
        1161,
        1163,
        3,
        262,
        131,
        0,
        1162,
        1161,
        1,
        0,
        0,
        0,
        1162,
        1163,
        1,
        0,
        0,
        0,
        1163,
        1169,
        1,
        0,
        0,
        0,
        1164,
        1166,
        5,
        68,
        0,
        0,
        1165,
        1167,
        3,
        410,
        205,
        0,
        1166,
        1165,
        1,
        0,
        0,
        0,
        1166,
        1167,
        1,
        0,
        0,
        0,
        1167,
        1168,
        1,
        0,
        0,
        0,
        1168,
        1170,
        5,
        69,
        0,
        0,
        1169,
        1164,
        1,
        0,
        0,
        0,
        1169,
        1170,
        1,
        0,
        0,
        0,
        1170,
        1171,
        1,
        0,
        0,
        0,
        1171,
        1172,
        5,
        71,
        0,
        0,
        1172,
        1173,
        3,
        124,
        62,
        0,
        1173,
        131,
        1,
        0,
        0,
        0,
        1174,
        1176,
        3,
        126,
        63,
        0,
        1175,
        1174,
        1,
        0,
        0,
        0,
        1175,
        1176,
        1,
        0,
        0,
        0,
        1176,
        1177,
        1,
        0,
        0,
        0,
        1177,
        1178,
        3,
        134,
        67,
        0,
        1178,
        133,
        1,
        0,
        0,
        0,
        1179,
        1181,
        5,
        12,
        0,
        0,
        1180,
        1179,
        1,
        0,
        0,
        0,
        1180,
        1181,
        1,
        0,
        0,
        0,
        1181,
        1182,
        1,
        0,
        0,
        0,
        1182,
        1183,
        5,
        18,
        0,
        0,
        1183,
        1185,
        5,
        52,
        0,
        0,
        1184,
        1186,
        3,
        262,
        131,
        0,
        1185,
        1184,
        1,
        0,
        0,
        0,
        1185,
        1186,
        1,
        0,
        0,
        0,
        1186,
        1187,
        1,
        0,
        0,
        0,
        1187,
        1189,
        5,
        68,
        0,
        0,
        1188,
        1190,
        3,
        136,
        68,
        0,
        1189,
        1188,
        1,
        0,
        0,
        0,
        1189,
        1190,
        1,
        0,
        0,
        0,
        1190,
        1191,
        1,
        0,
        0,
        0,
        1191,
        1194,
        5,
        69,
        0,
        0,
        1192,
        1193,
        5,
        98,
        0,
        0,
        1193,
        1195,
        3,
        272,
        136,
        0,
        1194,
        1192,
        1,
        0,
        0,
        0,
        1194,
        1195,
        1,
        0,
        0,
        0,
        1195,
        1196,
        1,
        0,
        0,
        0,
        1196,
        1198,
        5,
        71,
        0,
        0,
        1197,
        1199,
        3,
        450,
        225,
        0,
        1198,
        1197,
        1,
        0,
        0,
        0,
        1198,
        1199,
        1,
        0,
        0,
        0,
        1199,
        1200,
        1,
        0,
        0,
        0,
        1200,
        1201,
        3,
        124,
        62,
        0,
        1201,
        135,
        1,
        0,
        0,
        0,
        1202,
        1203,
        3,
        138,
        69,
        0,
        1203,
        137,
        1,
        0,
        0,
        0,
        1204,
        1208,
        3,
        140,
        70,
        0,
        1205,
        1207,
        3,
        148,
        74,
        0,
        1206,
        1205,
        1,
        0,
        0,
        0,
        1207,
        1210,
        1,
        0,
        0,
        0,
        1208,
        1206,
        1,
        0,
        0,
        0,
        1208,
        1209,
        1,
        0,
        0,
        0,
        1209,
        1214,
        1,
        0,
        0,
        0,
        1210,
        1208,
        1,
        0,
        0,
        0,
        1211,
        1213,
        3,
        152,
        76,
        0,
        1212,
        1211,
        1,
        0,
        0,
        0,
        1213,
        1216,
        1,
        0,
        0,
        0,
        1214,
        1212,
        1,
        0,
        0,
        0,
        1214,
        1215,
        1,
        0,
        0,
        0,
        1215,
        1218,
        1,
        0,
        0,
        0,
        1216,
        1214,
        1,
        0,
        0,
        0,
        1217,
        1219,
        3,
        144,
        72,
        0,
        1218,
        1217,
        1,
        0,
        0,
        0,
        1218,
        1219,
        1,
        0,
        0,
        0,
        1219,
        1254,
        1,
        0,
        0,
        0,
        1220,
        1224,
        3,
        142,
        71,
        0,
        1221,
        1223,
        3,
        152,
        76,
        0,
        1222,
        1221,
        1,
        0,
        0,
        0,
        1223,
        1226,
        1,
        0,
        0,
        0,
        1224,
        1222,
        1,
        0,
        0,
        0,
        1224,
        1225,
        1,
        0,
        0,
        0,
        1225,
        1228,
        1,
        0,
        0,
        0,
        1226,
        1224,
        1,
        0,
        0,
        0,
        1227,
        1229,
        3,
        144,
        72,
        0,
        1228,
        1227,
        1,
        0,
        0,
        0,
        1228,
        1229,
        1,
        0,
        0,
        0,
        1229,
        1254,
        1,
        0,
        0,
        0,
        1230,
        1232,
        3,
        148,
        74,
        0,
        1231,
        1230,
        1,
        0,
        0,
        0,
        1232,
        1233,
        1,
        0,
        0,
        0,
        1233,
        1231,
        1,
        0,
        0,
        0,
        1233,
        1234,
        1,
        0,
        0,
        0,
        1234,
        1238,
        1,
        0,
        0,
        0,
        1235,
        1237,
        3,
        152,
        76,
        0,
        1236,
        1235,
        1,
        0,
        0,
        0,
        1237,
        1240,
        1,
        0,
        0,
        0,
        1238,
        1236,
        1,
        0,
        0,
        0,
        1238,
        1239,
        1,
        0,
        0,
        0,
        1239,
        1242,
        1,
        0,
        0,
        0,
        1240,
        1238,
        1,
        0,
        0,
        0,
        1241,
        1243,
        3,
        144,
        72,
        0,
        1242,
        1241,
        1,
        0,
        0,
        0,
        1242,
        1243,
        1,
        0,
        0,
        0,
        1243,
        1254,
        1,
        0,
        0,
        0,
        1244,
        1246,
        3,
        152,
        76,
        0,
        1245,
        1244,
        1,
        0,
        0,
        0,
        1246,
        1247,
        1,
        0,
        0,
        0,
        1247,
        1245,
        1,
        0,
        0,
        0,
        1247,
        1248,
        1,
        0,
        0,
        0,
        1248,
        1250,
        1,
        0,
        0,
        0,
        1249,
        1251,
        3,
        144,
        72,
        0,
        1250,
        1249,
        1,
        0,
        0,
        0,
        1250,
        1251,
        1,
        0,
        0,
        0,
        1251,
        1254,
        1,
        0,
        0,
        0,
        1252,
        1254,
        3,
        144,
        72,
        0,
        1253,
        1204,
        1,
        0,
        0,
        0,
        1253,
        1220,
        1,
        0,
        0,
        0,
        1253,
        1231,
        1,
        0,
        0,
        0,
        1253,
        1245,
        1,
        0,
        0,
        0,
        1253,
        1252,
        1,
        0,
        0,
        0,
        1254,
        139,
        1,
        0,
        0,
        0,
        1255,
        1257,
        3,
        148,
        74,
        0,
        1256,
        1255,
        1,
        0,
        0,
        0,
        1257,
        1258,
        1,
        0,
        0,
        0,
        1258,
        1256,
        1,
        0,
        0,
        0,
        1258,
        1259,
        1,
        0,
        0,
        0,
        1259,
        1260,
        1,
        0,
        0,
        0,
        1260,
        1262,
        5,
        84,
        0,
        0,
        1261,
        1263,
        5,
        70,
        0,
        0,
        1262,
        1261,
        1,
        0,
        0,
        0,
        1262,
        1263,
        1,
        0,
        0,
        0,
        1263,
        141,
        1,
        0,
        0,
        0,
        1264,
        1266,
        3,
        148,
        74,
        0,
        1265,
        1264,
        1,
        0,
        0,
        0,
        1266,
        1269,
        1,
        0,
        0,
        0,
        1267,
        1265,
        1,
        0,
        0,
        0,
        1267,
        1268,
        1,
        0,
        0,
        0,
        1268,
        1271,
        1,
        0,
        0,
        0,
        1269,
        1267,
        1,
        0,
        0,
        0,
        1270,
        1272,
        3,
        152,
        76,
        0,
        1271,
        1270,
        1,
        0,
        0,
        0,
        1272,
        1273,
        1,
        0,
        0,
        0,
        1273,
        1271,
        1,
        0,
        0,
        0,
        1273,
        1274,
        1,
        0,
        0,
        0,
        1274,
        1275,
        1,
        0,
        0,
        0,
        1275,
        1277,
        5,
        84,
        0,
        0,
        1276,
        1278,
        5,
        70,
        0,
        0,
        1277,
        1276,
        1,
        0,
        0,
        0,
        1277,
        1278,
        1,
        0,
        0,
        0,
        1278,
        143,
        1,
        0,
        0,
        0,
        1279,
        1280,
        5,
        67,
        0,
        0,
        1280,
        1284,
        3,
        148,
        74,
        0,
        1281,
        1283,
        3,
        154,
        77,
        0,
        1282,
        1281,
        1,
        0,
        0,
        0,
        1283,
        1286,
        1,
        0,
        0,
        0,
        1284,
        1282,
        1,
        0,
        0,
        0,
        1284,
        1285,
        1,
        0,
        0,
        0,
        1285,
        1288,
        1,
        0,
        0,
        0,
        1286,
        1284,
        1,
        0,
        0,
        0,
        1287,
        1289,
        3,
        146,
        73,
        0,
        1288,
        1287,
        1,
        0,
        0,
        0,
        1288,
        1289,
        1,
        0,
        0,
        0,
        1289,
        1313,
        1,
        0,
        0,
        0,
        1290,
        1291,
        5,
        67,
        0,
        0,
        1291,
        1295,
        3,
        150,
        75,
        0,
        1292,
        1294,
        3,
        154,
        77,
        0,
        1293,
        1292,
        1,
        0,
        0,
        0,
        1294,
        1297,
        1,
        0,
        0,
        0,
        1295,
        1293,
        1,
        0,
        0,
        0,
        1295,
        1296,
        1,
        0,
        0,
        0,
        1296,
        1299,
        1,
        0,
        0,
        0,
        1297,
        1295,
        1,
        0,
        0,
        0,
        1298,
        1300,
        3,
        146,
        73,
        0,
        1299,
        1298,
        1,
        0,
        0,
        0,
        1299,
        1300,
        1,
        0,
        0,
        0,
        1300,
        1313,
        1,
        0,
        0,
        0,
        1301,
        1302,
        5,
        67,
        0,
        0,
        1302,
        1304,
        5,
        70,
        0,
        0,
        1303,
        1305,
        3,
        154,
        77,
        0,
        1304,
        1303,
        1,
        0,
        0,
        0,
        1305,
        1306,
        1,
        0,
        0,
        0,
        1306,
        1304,
        1,
        0,
        0,
        0,
        1306,
        1307,
        1,
        0,
        0,
        0,
        1307,
        1309,
        1,
        0,
        0,
        0,
        1308,
        1310,
        3,
        146,
        73,
        0,
        1309,
        1308,
        1,
        0,
        0,
        0,
        1309,
        1310,
        1,
        0,
        0,
        0,
        1310,
        1313,
        1,
        0,
        0,
        0,
        1311,
        1313,
        3,
        146,
        73,
        0,
        1312,
        1279,
        1,
        0,
        0,
        0,
        1312,
        1290,
        1,
        0,
        0,
        0,
        1312,
        1301,
        1,
        0,
        0,
        0,
        1312,
        1311,
        1,
        0,
        0,
        0,
        1313,
        145,
        1,
        0,
        0,
        0,
        1314,
        1315,
        5,
        73,
        0,
        0,
        1315,
        1316,
        3,
        148,
        74,
        0,
        1316,
        147,
        1,
        0,
        0,
        0,
        1317,
        1318,
        3,
        156,
        78,
        0,
        1318,
        1319,
        5,
        70,
        0,
        0,
        1319,
        1322,
        1,
        0,
        0,
        0,
        1320,
        1322,
        3,
        156,
        78,
        0,
        1321,
        1317,
        1,
        0,
        0,
        0,
        1321,
        1320,
        1,
        0,
        0,
        0,
        1322,
        149,
        1,
        0,
        0,
        0,
        1323,
        1324,
        3,
        158,
        79,
        0,
        1324,
        1325,
        5,
        70,
        0,
        0,
        1325,
        1328,
        1,
        0,
        0,
        0,
        1326,
        1328,
        3,
        158,
        79,
        0,
        1327,
        1323,
        1,
        0,
        0,
        0,
        1327,
        1326,
        1,
        0,
        0,
        0,
        1328,
        151,
        1,
        0,
        0,
        0,
        1329,
        1330,
        3,
        156,
        78,
        0,
        1330,
        1331,
        3,
        164,
        82,
        0,
        1331,
        1332,
        5,
        70,
        0,
        0,
        1332,
        1337,
        1,
        0,
        0,
        0,
        1333,
        1334,
        3,
        156,
        78,
        0,
        1334,
        1335,
        3,
        164,
        82,
        0,
        1335,
        1337,
        1,
        0,
        0,
        0,
        1336,
        1329,
        1,
        0,
        0,
        0,
        1336,
        1333,
        1,
        0,
        0,
        0,
        1337,
        153,
        1,
        0,
        0,
        0,
        1338,
        1340,
        3,
        156,
        78,
        0,
        1339,
        1341,
        3,
        164,
        82,
        0,
        1340,
        1339,
        1,
        0,
        0,
        0,
        1340,
        1341,
        1,
        0,
        0,
        0,
        1341,
        1342,
        1,
        0,
        0,
        0,
        1342,
        1343,
        5,
        70,
        0,
        0,
        1343,
        1349,
        1,
        0,
        0,
        0,
        1344,
        1346,
        3,
        156,
        78,
        0,
        1345,
        1347,
        3,
        164,
        82,
        0,
        1346,
        1345,
        1,
        0,
        0,
        0,
        1346,
        1347,
        1,
        0,
        0,
        0,
        1347,
        1349,
        1,
        0,
        0,
        0,
        1348,
        1338,
        1,
        0,
        0,
        0,
        1348,
        1344,
        1,
        0,
        0,
        0,
        1349,
        155,
        1,
        0,
        0,
        0,
        1350,
        1352,
        5,
        52,
        0,
        0,
        1351,
        1353,
        3,
        160,
        80,
        0,
        1352,
        1351,
        1,
        0,
        0,
        0,
        1352,
        1353,
        1,
        0,
        0,
        0,
        1353,
        157,
        1,
        0,
        0,
        0,
        1354,
        1355,
        5,
        52,
        0,
        0,
        1355,
        1356,
        3,
        162,
        81,
        0,
        1356,
        159,
        1,
        0,
        0,
        0,
        1357,
        1358,
        5,
        71,
        0,
        0,
        1358,
        1359,
        3,
        272,
        136,
        0,
        1359,
        161,
        1,
        0,
        0,
        0,
        1360,
        1361,
        5,
        71,
        0,
        0,
        1361,
        1362,
        3,
        278,
        139,
        0,
        1362,
        163,
        1,
        0,
        0,
        0,
        1363,
        1364,
        5,
        74,
        0,
        0,
        1364,
        1365,
        3,
        272,
        136,
        0,
        1365,
        165,
        1,
        0,
        0,
        0,
        1366,
        1367,
        5,
        28,
        0,
        0,
        1367,
        1368,
        3,
        286,
        143,
        0,
        1368,
        1369,
        5,
        71,
        0,
        0,
        1369,
        1370,
        3,
        124,
        62,
        0,
        1370,
        1371,
        3,
        168,
        84,
        0,
        1371,
        1380,
        1,
        0,
        0,
        0,
        1372,
        1373,
        5,
        28,
        0,
        0,
        1373,
        1374,
        3,
        286,
        143,
        0,
        1374,
        1375,
        5,
        71,
        0,
        0,
        1375,
        1377,
        3,
        124,
        62,
        0,
        1376,
        1378,
        3,
        170,
        85,
        0,
        1377,
        1376,
        1,
        0,
        0,
        0,
        1377,
        1378,
        1,
        0,
        0,
        0,
        1378,
        1380,
        1,
        0,
        0,
        0,
        1379,
        1366,
        1,
        0,
        0,
        0,
        1379,
        1372,
        1,
        0,
        0,
        0,
        1380,
        167,
        1,
        0,
        0,
        0,
        1381,
        1382,
        5,
        20,
        0,
        0,
        1382,
        1383,
        3,
        286,
        143,
        0,
        1383,
        1384,
        5,
        71,
        0,
        0,
        1384,
        1385,
        3,
        124,
        62,
        0,
        1385,
        1386,
        3,
        168,
        84,
        0,
        1386,
        1395,
        1,
        0,
        0,
        0,
        1387,
        1388,
        5,
        20,
        0,
        0,
        1388,
        1389,
        3,
        286,
        143,
        0,
        1389,
        1390,
        5,
        71,
        0,
        0,
        1390,
        1392,
        3,
        124,
        62,
        0,
        1391,
        1393,
        3,
        170,
        85,
        0,
        1392,
        1391,
        1,
        0,
        0,
        0,
        1392,
        1393,
        1,
        0,
        0,
        0,
        1393,
        1395,
        1,
        0,
        0,
        0,
        1394,
        1381,
        1,
        0,
        0,
        0,
        1394,
        1387,
        1,
        0,
        0,
        0,
        1395,
        169,
        1,
        0,
        0,
        0,
        1396,
        1397,
        5,
        21,
        0,
        0,
        1397,
        1398,
        5,
        71,
        0,
        0,
        1398,
        1399,
        3,
        124,
        62,
        0,
        1399,
        171,
        1,
        0,
        0,
        0,
        1400,
        1401,
        5,
        45,
        0,
        0,
        1401,
        1402,
        3,
        286,
        143,
        0,
        1402,
        1403,
        5,
        71,
        0,
        0,
        1403,
        1405,
        3,
        124,
        62,
        0,
        1404,
        1406,
        3,
        170,
        85,
        0,
        1405,
        1404,
        1,
        0,
        0,
        0,
        1405,
        1406,
        1,
        0,
        0,
        0,
        1406,
        173,
        1,
        0,
        0,
        0,
        1407,
        1408,
        5,
        25,
        0,
        0,
        1408,
        1409,
        3,
        424,
        212,
        0,
        1409,
        1410,
        5,
        30,
        0,
        0,
        1410,
        1411,
        3,
        276,
        138,
        0,
        1411,
        1412,
        5,
        71,
        0,
        0,
        1412,
        1414,
        3,
        124,
        62,
        0,
        1413,
        1415,
        3,
        170,
        85,
        0,
        1414,
        1413,
        1,
        0,
        0,
        0,
        1414,
        1415,
        1,
        0,
        0,
        0,
        1415,
        1427,
        1,
        0,
        0,
        0,
        1416,
        1417,
        5,
        12,
        0,
        0,
        1417,
        1418,
        5,
        25,
        0,
        0,
        1418,
        1419,
        3,
        424,
        212,
        0,
        1419,
        1420,
        5,
        30,
        0,
        0,
        1420,
        1421,
        3,
        276,
        138,
        0,
        1421,
        1422,
        5,
        71,
        0,
        0,
        1422,
        1424,
        3,
        124,
        62,
        0,
        1423,
        1425,
        3,
        170,
        85,
        0,
        1424,
        1423,
        1,
        0,
        0,
        0,
        1424,
        1425,
        1,
        0,
        0,
        0,
        1425,
        1427,
        1,
        0,
        0,
        0,
        1426,
        1407,
        1,
        0,
        0,
        0,
        1426,
        1416,
        1,
        0,
        0,
        0,
        1427,
        175,
        1,
        0,
        0,
        0,
        1428,
        1429,
        5,
        47,
        0,
        0,
        1429,
        1430,
        5,
        68,
        0,
        0,
        1430,
        1435,
        3,
        178,
        89,
        0,
        1431,
        1432,
        5,
        70,
        0,
        0,
        1432,
        1434,
        3,
        178,
        89,
        0,
        1433,
        1431,
        1,
        0,
        0,
        0,
        1434,
        1437,
        1,
        0,
        0,
        0,
        1435,
        1433,
        1,
        0,
        0,
        0,
        1435,
        1436,
        1,
        0,
        0,
        0,
        1436,
        1439,
        1,
        0,
        0,
        0,
        1437,
        1435,
        1,
        0,
        0,
        0,
        1438,
        1440,
        5,
        70,
        0,
        0,
        1439,
        1438,
        1,
        0,
        0,
        0,
        1439,
        1440,
        1,
        0,
        0,
        0,
        1440,
        1441,
        1,
        0,
        0,
        0,
        1441,
        1442,
        5,
        69,
        0,
        0,
        1442,
        1443,
        5,
        71,
        0,
        0,
        1443,
        1444,
        3,
        124,
        62,
        0,
        1444,
        1489,
        1,
        0,
        0,
        0,
        1445,
        1446,
        5,
        47,
        0,
        0,
        1446,
        1451,
        3,
        178,
        89,
        0,
        1447,
        1448,
        5,
        70,
        0,
        0,
        1448,
        1450,
        3,
        178,
        89,
        0,
        1449,
        1447,
        1,
        0,
        0,
        0,
        1450,
        1453,
        1,
        0,
        0,
        0,
        1451,
        1449,
        1,
        0,
        0,
        0,
        1451,
        1452,
        1,
        0,
        0,
        0,
        1452,
        1454,
        1,
        0,
        0,
        0,
        1453,
        1451,
        1,
        0,
        0,
        0,
        1454,
        1455,
        5,
        71,
        0,
        0,
        1455,
        1456,
        3,
        124,
        62,
        0,
        1456,
        1489,
        1,
        0,
        0,
        0,
        1457,
        1458,
        5,
        12,
        0,
        0,
        1458,
        1459,
        5,
        47,
        0,
        0,
        1459,
        1460,
        5,
        68,
        0,
        0,
        1460,
        1465,
        3,
        178,
        89,
        0,
        1461,
        1462,
        5,
        70,
        0,
        0,
        1462,
        1464,
        3,
        178,
        89,
        0,
        1463,
        1461,
        1,
        0,
        0,
        0,
        1464,
        1467,
        1,
        0,
        0,
        0,
        1465,
        1463,
        1,
        0,
        0,
        0,
        1465,
        1466,
        1,
        0,
        0,
        0,
        1466,
        1469,
        1,
        0,
        0,
        0,
        1467,
        1465,
        1,
        0,
        0,
        0,
        1468,
        1470,
        5,
        70,
        0,
        0,
        1469,
        1468,
        1,
        0,
        0,
        0,
        1469,
        1470,
        1,
        0,
        0,
        0,
        1470,
        1471,
        1,
        0,
        0,
        0,
        1471,
        1472,
        5,
        69,
        0,
        0,
        1472,
        1473,
        5,
        71,
        0,
        0,
        1473,
        1474,
        3,
        124,
        62,
        0,
        1474,
        1489,
        1,
        0,
        0,
        0,
        1475,
        1476,
        5,
        12,
        0,
        0,
        1476,
        1477,
        5,
        47,
        0,
        0,
        1477,
        1482,
        3,
        178,
        89,
        0,
        1478,
        1479,
        5,
        70,
        0,
        0,
        1479,
        1481,
        3,
        178,
        89,
        0,
        1480,
        1478,
        1,
        0,
        0,
        0,
        1481,
        1484,
        1,
        0,
        0,
        0,
        1482,
        1480,
        1,
        0,
        0,
        0,
        1482,
        1483,
        1,
        0,
        0,
        0,
        1483,
        1485,
        1,
        0,
        0,
        0,
        1484,
        1482,
        1,
        0,
        0,
        0,
        1485,
        1486,
        5,
        71,
        0,
        0,
        1486,
        1487,
        3,
        124,
        62,
        0,
        1487,
        1489,
        1,
        0,
        0,
        0,
        1488,
        1428,
        1,
        0,
        0,
        0,
        1488,
        1445,
        1,
        0,
        0,
        0,
        1488,
        1457,
        1,
        0,
        0,
        0,
        1488,
        1475,
        1,
        0,
        0,
        0,
        1489,
        177,
        1,
        0,
        0,
        0,
        1490,
        1491,
        3,
        272,
        136,
        0,
        1491,
        1492,
        5,
        10,
        0,
        0,
        1492,
        1493,
        3,
        430,
        215,
        0,
        1493,
        1496,
        1,
        0,
        0,
        0,
        1494,
        1496,
        3,
        272,
        136,
        0,
        1495,
        1490,
        1,
        0,
        0,
        0,
        1495,
        1494,
        1,
        0,
        0,
        0,
        1496,
        179,
        1,
        0,
        0,
        0,
        1497,
        1498,
        5,
        42,
        0,
        0,
        1498,
        1499,
        5,
        71,
        0,
        0,
        1499,
        1500,
        3,
        124,
        62,
        0,
        1500,
        1501,
        3,
        186,
        93,
        0,
        1501,
        1531,
        1,
        0,
        0,
        0,
        1502,
        1503,
        5,
        42,
        0,
        0,
        1503,
        1504,
        5,
        71,
        0,
        0,
        1504,
        1506,
        3,
        124,
        62,
        0,
        1505,
        1507,
        3,
        182,
        91,
        0,
        1506,
        1505,
        1,
        0,
        0,
        0,
        1507,
        1508,
        1,
        0,
        0,
        0,
        1508,
        1506,
        1,
        0,
        0,
        0,
        1508,
        1509,
        1,
        0,
        0,
        0,
        1509,
        1511,
        1,
        0,
        0,
        0,
        1510,
        1512,
        3,
        170,
        85,
        0,
        1511,
        1510,
        1,
        0,
        0,
        0,
        1511,
        1512,
        1,
        0,
        0,
        0,
        1512,
        1514,
        1,
        0,
        0,
        0,
        1513,
        1515,
        3,
        186,
        93,
        0,
        1514,
        1513,
        1,
        0,
        0,
        0,
        1514,
        1515,
        1,
        0,
        0,
        0,
        1515,
        1531,
        1,
        0,
        0,
        0,
        1516,
        1517,
        5,
        42,
        0,
        0,
        1517,
        1518,
        5,
        71,
        0,
        0,
        1518,
        1520,
        3,
        124,
        62,
        0,
        1519,
        1521,
        3,
        184,
        92,
        0,
        1520,
        1519,
        1,
        0,
        0,
        0,
        1521,
        1522,
        1,
        0,
        0,
        0,
        1522,
        1520,
        1,
        0,
        0,
        0,
        1522,
        1523,
        1,
        0,
        0,
        0,
        1523,
        1525,
        1,
        0,
        0,
        0,
        1524,
        1526,
        3,
        170,
        85,
        0,
        1525,
        1524,
        1,
        0,
        0,
        0,
        1525,
        1526,
        1,
        0,
        0,
        0,
        1526,
        1528,
        1,
        0,
        0,
        0,
        1527,
        1529,
        3,
        186,
        93,
        0,
        1528,
        1527,
        1,
        0,
        0,
        0,
        1528,
        1529,
        1,
        0,
        0,
        0,
        1529,
        1531,
        1,
        0,
        0,
        0,
        1530,
        1497,
        1,
        0,
        0,
        0,
        1530,
        1502,
        1,
        0,
        0,
        0,
        1530,
        1516,
        1,
        0,
        0,
        0,
        1531,
        181,
        1,
        0,
        0,
        0,
        1532,
        1533,
        5,
        22,
        0,
        0,
        1533,
        1536,
        3,
        272,
        136,
        0,
        1534,
        1535,
        5,
        10,
        0,
        0,
        1535,
        1537,
        5,
        52,
        0,
        0,
        1536,
        1534,
        1,
        0,
        0,
        0,
        1536,
        1537,
        1,
        0,
        0,
        0,
        1537,
        1538,
        1,
        0,
        0,
        0,
        1538,
        1539,
        5,
        71,
        0,
        0,
        1539,
        1540,
        3,
        124,
        62,
        0,
        1540,
        1545,
        1,
        0,
        0,
        0,
        1541,
        1542,
        5,
        22,
        0,
        0,
        1542,
        1543,
        5,
        71,
        0,
        0,
        1543,
        1545,
        3,
        124,
        62,
        0,
        1544,
        1532,
        1,
        0,
        0,
        0,
        1544,
        1541,
        1,
        0,
        0,
        0,
        1545,
        183,
        1,
        0,
        0,
        0,
        1546,
        1547,
        5,
        22,
        0,
        0,
        1547,
        1548,
        5,
        67,
        0,
        0,
        1548,
        1551,
        3,
        272,
        136,
        0,
        1549,
        1550,
        5,
        10,
        0,
        0,
        1550,
        1552,
        5,
        52,
        0,
        0,
        1551,
        1549,
        1,
        0,
        0,
        0,
        1551,
        1552,
        1,
        0,
        0,
        0,
        1552,
        1553,
        1,
        0,
        0,
        0,
        1553,
        1554,
        5,
        71,
        0,
        0,
        1554,
        1555,
        3,
        124,
        62,
        0,
        1555,
        185,
        1,
        0,
        0,
        0,
        1556,
        1557,
        5,
        24,
        0,
        0,
        1557,
        1558,
        5,
        71,
        0,
        0,
        1558,
        1559,
        3,
        124,
        62,
        0,
        1559,
        187,
        1,
        0,
        0,
        0,
        1560,
        1561,
        5,
        33,
        0,
        0,
        1561,
        1562,
        3,
        190,
        95,
        0,
        1562,
        1563,
        5,
        71,
        0,
        0,
        1563,
        1564,
        5,
        114,
        0,
        0,
        1564,
        1566,
        5,
        1,
        0,
        0,
        1565,
        1567,
        3,
        192,
        96,
        0,
        1566,
        1565,
        1,
        0,
        0,
        0,
        1567,
        1568,
        1,
        0,
        0,
        0,
        1568,
        1566,
        1,
        0,
        0,
        0,
        1568,
        1569,
        1,
        0,
        0,
        0,
        1569,
        1570,
        1,
        0,
        0,
        0,
        1570,
        1571,
        5,
        2,
        0,
        0,
        1571,
        189,
        1,
        0,
        0,
        0,
        1572,
        1573,
        3,
        282,
        141,
        0,
        1573,
        1575,
        5,
        70,
        0,
        0,
        1574,
        1576,
        3,
        280,
        140,
        0,
        1575,
        1574,
        1,
        0,
        0,
        0,
        1575,
        1576,
        1,
        0,
        0,
        0,
        1576,
        1579,
        1,
        0,
        0,
        0,
        1577,
        1579,
        3,
        286,
        143,
        0,
        1578,
        1572,
        1,
        0,
        0,
        0,
        1578,
        1577,
        1,
        0,
        0,
        0,
        1579,
        191,
        1,
        0,
        0,
        0,
        1580,
        1581,
        5,
        15,
        0,
        0,
        1581,
        1583,
        3,
        196,
        98,
        0,
        1582,
        1584,
        3,
        194,
        97,
        0,
        1583,
        1582,
        1,
        0,
        0,
        0,
        1583,
        1584,
        1,
        0,
        0,
        0,
        1584,
        1585,
        1,
        0,
        0,
        0,
        1585,
        1586,
        5,
        71,
        0,
        0,
        1586,
        1587,
        3,
        124,
        62,
        0,
        1587,
        193,
        1,
        0,
        0,
        0,
        1588,
        1589,
        5,
        28,
        0,
        0,
        1589,
        1590,
        3,
        286,
        143,
        0,
        1590,
        195,
        1,
        0,
        0,
        0,
        1591,
        1594,
        3,
        236,
        118,
        0,
        1592,
        1594,
        3,
        198,
        99,
        0,
        1593,
        1591,
        1,
        0,
        0,
        0,
        1593,
        1592,
        1,
        0,
        0,
        0,
        1594,
        197,
        1,
        0,
        0,
        0,
        1595,
        1598,
        3,
        200,
        100,
        0,
        1596,
        1598,
        3,
        202,
        101,
        0,
        1597,
        1595,
        1,
        0,
        0,
        0,
        1597,
        1596,
        1,
        0,
        0,
        0,
        1598,
        199,
        1,
        0,
        0,
        0,
        1599,
        1600,
        3,
        202,
        101,
        0,
        1600,
        1601,
        5,
        10,
        0,
        0,
        1601,
        1602,
        3,
        222,
        111,
        0,
        1602,
        201,
        1,
        0,
        0,
        0,
        1603,
        1608,
        3,
        204,
        102,
        0,
        1604,
        1605,
        5,
        77,
        0,
        0,
        1605,
        1607,
        3,
        204,
        102,
        0,
        1606,
        1604,
        1,
        0,
        0,
        0,
        1607,
        1610,
        1,
        0,
        0,
        0,
        1608,
        1606,
        1,
        0,
        0,
        0,
        1608,
        1609,
        1,
        0,
        0,
        0,
        1609,
        203,
        1,
        0,
        0,
        0,
        1610,
        1608,
        1,
        0,
        0,
        0,
        1611,
        1620,
        3,
        206,
        103,
        0,
        1612,
        1620,
        3,
        220,
        110,
        0,
        1613,
        1620,
        3,
        224,
        112,
        0,
        1614,
        1620,
        3,
        226,
        113,
        0,
        1615,
        1620,
        3,
        232,
        116,
        0,
        1616,
        1620,
        3,
        234,
        117,
        0,
        1617,
        1620,
        3,
        244,
        122,
        0,
        1618,
        1620,
        3,
        252,
        126,
        0,
        1619,
        1611,
        1,
        0,
        0,
        0,
        1619,
        1612,
        1,
        0,
        0,
        0,
        1619,
        1613,
        1,
        0,
        0,
        0,
        1619,
        1614,
        1,
        0,
        0,
        0,
        1619,
        1615,
        1,
        0,
        0,
        0,
        1619,
        1616,
        1,
        0,
        0,
        0,
        1619,
        1617,
        1,
        0,
        0,
        0,
        1619,
        1618,
        1,
        0,
        0,
        0,
        1620,
        205,
        1,
        0,
        0,
        0,
        1621,
        1628,
        3,
        212,
        106,
        0,
        1622,
        1628,
        3,
        210,
        105,
        0,
        1623,
        1628,
        3,
        382,
        191,
        0,
        1624,
        1628,
        5,
        34,
        0,
        0,
        1625,
        1628,
        5,
        41,
        0,
        0,
        1626,
        1628,
        5,
        23,
        0,
        0,
        1627,
        1621,
        1,
        0,
        0,
        0,
        1627,
        1622,
        1,
        0,
        0,
        0,
        1627,
        1623,
        1,
        0,
        0,
        0,
        1627,
        1624,
        1,
        0,
        0,
        0,
        1627,
        1625,
        1,
        0,
        0,
        0,
        1627,
        1626,
        1,
        0,
        0,
        0,
        1628,
        207,
        1,
        0,
        0,
        0,
        1629,
        1636,
        3,
        212,
        106,
        0,
        1630,
        1636,
        3,
        210,
        105,
        0,
        1631,
        1636,
        3,
        382,
        191,
        0,
        1632,
        1636,
        5,
        34,
        0,
        0,
        1633,
        1636,
        5,
        41,
        0,
        0,
        1634,
        1636,
        5,
        23,
        0,
        0,
        1635,
        1629,
        1,
        0,
        0,
        0,
        1635,
        1630,
        1,
        0,
        0,
        0,
        1635,
        1631,
        1,
        0,
        0,
        0,
        1635,
        1632,
        1,
        0,
        0,
        0,
        1635,
        1633,
        1,
        0,
        0,
        0,
        1635,
        1634,
        1,
        0,
        0,
        0,
        1636,
        209,
        1,
        0,
        0,
        0,
        1637,
        1638,
        3,
        214,
        107,
        0,
        1638,
        1639,
        5,
        82,
        0,
        0,
        1639,
        1640,
        3,
        218,
        109,
        0,
        1640,
        1646,
        1,
        0,
        0,
        0,
        1641,
        1642,
        3,
        214,
        107,
        0,
        1642,
        1643,
        5,
        83,
        0,
        0,
        1643,
        1644,
        3,
        218,
        109,
        0,
        1644,
        1646,
        1,
        0,
        0,
        0,
        1645,
        1637,
        1,
        0,
        0,
        0,
        1645,
        1641,
        1,
        0,
        0,
        0,
        1646,
        211,
        1,
        0,
        0,
        0,
        1647,
        1651,
        5,
        4,
        0,
        0,
        1648,
        1649,
        5,
        83,
        0,
        0,
        1649,
        1651,
        5,
        4,
        0,
        0,
        1650,
        1647,
        1,
        0,
        0,
        0,
        1650,
        1648,
        1,
        0,
        0,
        0,
        1651,
        213,
        1,
        0,
        0,
        0,
        1652,
        1656,
        3,
        216,
        108,
        0,
        1653,
        1654,
        5,
        83,
        0,
        0,
        1654,
        1656,
        3,
        216,
        108,
        0,
        1655,
        1652,
        1,
        0,
        0,
        0,
        1655,
        1653,
        1,
        0,
        0,
        0,
        1656,
        215,
        1,
        0,
        0,
        0,
        1657,
        1658,
        5,
        4,
        0,
        0,
        1658,
        217,
        1,
        0,
        0,
        0,
        1659,
        1660,
        5,
        4,
        0,
        0,
        1660,
        219,
        1,
        0,
        0,
        0,
        1661,
        1662,
        3,
        222,
        111,
        0,
        1662,
        221,
        1,
        0,
        0,
        0,
        1663,
        1664,
        5,
        52,
        0,
        0,
        1664,
        223,
        1,
        0,
        0,
        0,
        1665,
        1666,
        5,
        44,
        0,
        0,
        1666,
        225,
        1,
        0,
        0,
        0,
        1667,
        1668,
        3,
        228,
        114,
        0,
        1668,
        227,
        1,
        0,
        0,
        0,
        1669,
        1670,
        3,
        230,
        115,
        0,
        1670,
        1671,
        5,
        64,
        0,
        0,
        1671,
        1672,
        5,
        52,
        0,
        0,
        1672,
        229,
        1,
        0,
        0,
        0,
        1673,
        1674,
        6,
        115,
        -1,
        0,
        1674,
        1675,
        5,
        52,
        0,
        0,
        1675,
        1681,
        1,
        0,
        0,
        0,
        1676,
        1677,
        10,
        2,
        0,
        0,
        1677,
        1678,
        5,
        64,
        0,
        0,
        1678,
        1680,
        5,
        52,
        0,
        0,
        1679,
        1676,
        1,
        0,
        0,
        0,
        1680,
        1683,
        1,
        0,
        0,
        0,
        1681,
        1679,
        1,
        0,
        0,
        0,
        1681,
        1682,
        1,
        0,
        0,
        0,
        1682,
        231,
        1,
        0,
        0,
        0,
        1683,
        1681,
        1,
        0,
        0,
        0,
        1684,
        1685,
        5,
        68,
        0,
        0,
        1685,
        1686,
        3,
        198,
        99,
        0,
        1686,
        1687,
        5,
        69,
        0,
        0,
        1687,
        233,
        1,
        0,
        0,
        0,
        1688,
        1690,
        5,
        75,
        0,
        0,
        1689,
        1691,
        3,
        238,
        119,
        0,
        1690,
        1689,
        1,
        0,
        0,
        0,
        1690,
        1691,
        1,
        0,
        0,
        0,
        1691,
        1692,
        1,
        0,
        0,
        0,
        1692,
        1699,
        5,
        76,
        0,
        0,
        1693,
        1695,
        5,
        68,
        0,
        0,
        1694,
        1696,
        3,
        236,
        118,
        0,
        1695,
        1694,
        1,
        0,
        0,
        0,
        1695,
        1696,
        1,
        0,
        0,
        0,
        1696,
        1697,
        1,
        0,
        0,
        0,
        1697,
        1699,
        5,
        69,
        0,
        0,
        1698,
        1688,
        1,
        0,
        0,
        0,
        1698,
        1693,
        1,
        0,
        0,
        0,
        1699,
        235,
        1,
        0,
        0,
        0,
        1700,
        1701,
        3,
        240,
        120,
        0,
        1701,
        1703,
        5,
        70,
        0,
        0,
        1702,
        1704,
        3,
        238,
        119,
        0,
        1703,
        1702,
        1,
        0,
        0,
        0,
        1703,
        1704,
        1,
        0,
        0,
        0,
        1704,
        237,
        1,
        0,
        0,
        0,
        1705,
        1710,
        3,
        240,
        120,
        0,
        1706,
        1707,
        5,
        70,
        0,
        0,
        1707,
        1709,
        3,
        240,
        120,
        0,
        1708,
        1706,
        1,
        0,
        0,
        0,
        1709,
        1712,
        1,
        0,
        0,
        0,
        1710,
        1708,
        1,
        0,
        0,
        0,
        1710,
        1711,
        1,
        0,
        0,
        0,
        1711,
        1714,
        1,
        0,
        0,
        0,
        1712,
        1710,
        1,
        0,
        0,
        0,
        1713,
        1715,
        5,
        70,
        0,
        0,
        1714,
        1713,
        1,
        0,
        0,
        0,
        1714,
        1715,
        1,
        0,
        0,
        0,
        1715,
        239,
        1,
        0,
        0,
        0,
        1716,
        1719,
        3,
        242,
        121,
        0,
        1717,
        1719,
        3,
        198,
        99,
        0,
        1718,
        1716,
        1,
        0,
        0,
        0,
        1718,
        1717,
        1,
        0,
        0,
        0,
        1719,
        241,
        1,
        0,
        0,
        0,
        1720,
        1721,
        5,
        67,
        0,
        0,
        1721,
        1725,
        3,
        222,
        111,
        0,
        1722,
        1723,
        5,
        67,
        0,
        0,
        1723,
        1725,
        3,
        224,
        112,
        0,
        1724,
        1720,
        1,
        0,
        0,
        0,
        1724,
        1722,
        1,
        0,
        0,
        0,
        1725,
        243,
        1,
        0,
        0,
        0,
        1726,
        1727,
        5,
        88,
        0,
        0,
        1727,
        1752,
        5,
        89,
        0,
        0,
        1728,
        1729,
        5,
        88,
        0,
        0,
        1729,
        1731,
        3,
        250,
        125,
        0,
        1730,
        1732,
        5,
        70,
        0,
        0,
        1731,
        1730,
        1,
        0,
        0,
        0,
        1731,
        1732,
        1,
        0,
        0,
        0,
        1732,
        1733,
        1,
        0,
        0,
        0,
        1733,
        1734,
        5,
        89,
        0,
        0,
        1734,
        1752,
        1,
        0,
        0,
        0,
        1735,
        1736,
        5,
        88,
        0,
        0,
        1736,
        1737,
        3,
        246,
        123,
        0,
        1737,
        1738,
        5,
        70,
        0,
        0,
        1738,
        1740,
        3,
        250,
        125,
        0,
        1739,
        1741,
        5,
        70,
        0,
        0,
        1740,
        1739,
        1,
        0,
        0,
        0,
        1740,
        1741,
        1,
        0,
        0,
        0,
        1741,
        1742,
        1,
        0,
        0,
        0,
        1742,
        1743,
        5,
        89,
        0,
        0,
        1743,
        1752,
        1,
        0,
        0,
        0,
        1744,
        1745,
        5,
        88,
        0,
        0,
        1745,
        1747,
        3,
        246,
        123,
        0,
        1746,
        1748,
        5,
        70,
        0,
        0,
        1747,
        1746,
        1,
        0,
        0,
        0,
        1747,
        1748,
        1,
        0,
        0,
        0,
        1748,
        1749,
        1,
        0,
        0,
        0,
        1749,
        1750,
        5,
        89,
        0,
        0,
        1750,
        1752,
        1,
        0,
        0,
        0,
        1751,
        1726,
        1,
        0,
        0,
        0,
        1751,
        1728,
        1,
        0,
        0,
        0,
        1751,
        1735,
        1,
        0,
        0,
        0,
        1751,
        1744,
        1,
        0,
        0,
        0,
        1752,
        245,
        1,
        0,
        0,
        0,
        1753,
        1758,
        3,
        248,
        124,
        0,
        1754,
        1755,
        5,
        70,
        0,
        0,
        1755,
        1757,
        3,
        248,
        124,
        0,
        1756,
        1754,
        1,
        0,
        0,
        0,
        1757,
        1760,
        1,
        0,
        0,
        0,
        1758,
        1756,
        1,
        0,
        0,
        0,
        1758,
        1759,
        1,
        0,
        0,
        0,
        1759,
        247,
        1,
        0,
        0,
        0,
        1760,
        1758,
        1,
        0,
        0,
        0,
        1761,
        1764,
        3,
        208,
        104,
        0,
        1762,
        1764,
        3,
        228,
        114,
        0,
        1763,
        1761,
        1,
        0,
        0,
        0,
        1763,
        1762,
        1,
        0,
        0,
        0,
        1764,
        1765,
        1,
        0,
        0,
        0,
        1765,
        1766,
        5,
        71,
        0,
        0,
        1766,
        1767,
        3,
        198,
        99,
        0,
        1767,
        249,
        1,
        0,
        0,
        0,
        1768,
        1769,
        5,
        73,
        0,
        0,
        1769,
        1770,
        3,
        222,
        111,
        0,
        1770,
        251,
        1,
        0,
        0,
        0,
        1771,
        1772,
        3,
        230,
        115,
        0,
        1772,
        1773,
        5,
        68,
        0,
        0,
        1773,
        1774,
        5,
        69,
        0,
        0,
        1774,
        1802,
        1,
        0,
        0,
        0,
        1775,
        1776,
        3,
        230,
        115,
        0,
        1776,
        1777,
        5,
        68,
        0,
        0,
        1777,
        1779,
        3,
        254,
        127,
        0,
        1778,
        1780,
        5,
        70,
        0,
        0,
        1779,
        1778,
        1,
        0,
        0,
        0,
        1779,
        1780,
        1,
        0,
        0,
        0,
        1780,
        1781,
        1,
        0,
        0,
        0,
        1781,
        1782,
        5,
        69,
        0,
        0,
        1782,
        1802,
        1,
        0,
        0,
        0,
        1783,
        1784,
        3,
        230,
        115,
        0,
        1784,
        1785,
        5,
        68,
        0,
        0,
        1785,
        1787,
        3,
        256,
        128,
        0,
        1786,
        1788,
        5,
        70,
        0,
        0,
        1787,
        1786,
        1,
        0,
        0,
        0,
        1787,
        1788,
        1,
        0,
        0,
        0,
        1788,
        1789,
        1,
        0,
        0,
        0,
        1789,
        1790,
        5,
        69,
        0,
        0,
        1790,
        1802,
        1,
        0,
        0,
        0,
        1791,
        1792,
        3,
        230,
        115,
        0,
        1792,
        1793,
        5,
        68,
        0,
        0,
        1793,
        1794,
        3,
        254,
        127,
        0,
        1794,
        1795,
        5,
        70,
        0,
        0,
        1795,
        1797,
        3,
        256,
        128,
        0,
        1796,
        1798,
        5,
        70,
        0,
        0,
        1797,
        1796,
        1,
        0,
        0,
        0,
        1797,
        1798,
        1,
        0,
        0,
        0,
        1798,
        1799,
        1,
        0,
        0,
        0,
        1799,
        1800,
        5,
        69,
        0,
        0,
        1800,
        1802,
        1,
        0,
        0,
        0,
        1801,
        1771,
        1,
        0,
        0,
        0,
        1801,
        1775,
        1,
        0,
        0,
        0,
        1801,
        1783,
        1,
        0,
        0,
        0,
        1801,
        1791,
        1,
        0,
        0,
        0,
        1802,
        253,
        1,
        0,
        0,
        0,
        1803,
        1808,
        3,
        198,
        99,
        0,
        1804,
        1805,
        5,
        70,
        0,
        0,
        1805,
        1807,
        3,
        198,
        99,
        0,
        1806,
        1804,
        1,
        0,
        0,
        0,
        1807,
        1810,
        1,
        0,
        0,
        0,
        1808,
        1806,
        1,
        0,
        0,
        0,
        1808,
        1809,
        1,
        0,
        0,
        0,
        1809,
        255,
        1,
        0,
        0,
        0,
        1810,
        1808,
        1,
        0,
        0,
        0,
        1811,
        1816,
        3,
        258,
        129,
        0,
        1812,
        1813,
        5,
        70,
        0,
        0,
        1813,
        1815,
        3,
        258,
        129,
        0,
        1814,
        1812,
        1,
        0,
        0,
        0,
        1815,
        1818,
        1,
        0,
        0,
        0,
        1816,
        1814,
        1,
        0,
        0,
        0,
        1816,
        1817,
        1,
        0,
        0,
        0,
        1817,
        257,
        1,
        0,
        0,
        0,
        1818,
        1816,
        1,
        0,
        0,
        0,
        1819,
        1820,
        5,
        52,
        0,
        0,
        1820,
        1821,
        5,
        74,
        0,
        0,
        1821,
        1822,
        3,
        198,
        99,
        0,
        1822,
        259,
        1,
        0,
        0,
        0,
        1823,
        1824,
        5,
        43,
        0,
        0,
        1824,
        1826,
        5,
        52,
        0,
        0,
        1825,
        1827,
        3,
        262,
        131,
        0,
        1826,
        1825,
        1,
        0,
        0,
        0,
        1826,
        1827,
        1,
        0,
        0,
        0,
        1827,
        1828,
        1,
        0,
        0,
        0,
        1828,
        1829,
        5,
        74,
        0,
        0,
        1829,
        1830,
        3,
        272,
        136,
        0,
        1830,
        261,
        1,
        0,
        0,
        0,
        1831,
        1832,
        5,
        75,
        0,
        0,
        1832,
        1833,
        3,
        264,
        132,
        0,
        1833,
        1834,
        5,
        76,
        0,
        0,
        1834,
        263,
        1,
        0,
        0,
        0,
        1835,
        1840,
        3,
        266,
        133,
        0,
        1836,
        1837,
        5,
        70,
        0,
        0,
        1837,
        1839,
        3,
        266,
        133,
        0,
        1838,
        1836,
        1,
        0,
        0,
        0,
        1839,
        1842,
        1,
        0,
        0,
        0,
        1840,
        1838,
        1,
        0,
        0,
        0,
        1840,
        1841,
        1,
        0,
        0,
        0,
        1841,
        1844,
        1,
        0,
        0,
        0,
        1842,
        1840,
        1,
        0,
        0,
        0,
        1843,
        1845,
        5,
        70,
        0,
        0,
        1844,
        1843,
        1,
        0,
        0,
        0,
        1844,
        1845,
        1,
        0,
        0,
        0,
        1845,
        265,
        1,
        0,
        0,
        0,
        1846,
        1848,
        5,
        52,
        0,
        0,
        1847,
        1849,
        3,
        268,
        134,
        0,
        1848,
        1847,
        1,
        0,
        0,
        0,
        1848,
        1849,
        1,
        0,
        0,
        0,
        1849,
        1855,
        1,
        0,
        0,
        0,
        1850,
        1851,
        5,
        67,
        0,
        0,
        1851,
        1855,
        5,
        52,
        0,
        0,
        1852,
        1853,
        5,
        73,
        0,
        0,
        1853,
        1855,
        5,
        52,
        0,
        0,
        1854,
        1846,
        1,
        0,
        0,
        0,
        1854,
        1850,
        1,
        0,
        0,
        0,
        1854,
        1852,
        1,
        0,
        0,
        0,
        1855,
        267,
        1,
        0,
        0,
        0,
        1856,
        1857,
        5,
        71,
        0,
        0,
        1857,
        1858,
        3,
        272,
        136,
        0,
        1858,
        269,
        1,
        0,
        0,
        0,
        1859,
        1864,
        3,
        272,
        136,
        0,
        1860,
        1861,
        5,
        70,
        0,
        0,
        1861,
        1863,
        3,
        272,
        136,
        0,
        1862,
        1860,
        1,
        0,
        0,
        0,
        1863,
        1866,
        1,
        0,
        0,
        0,
        1864,
        1862,
        1,
        0,
        0,
        0,
        1864,
        1865,
        1,
        0,
        0,
        0,
        1865,
        1868,
        1,
        0,
        0,
        0,
        1866,
        1864,
        1,
        0,
        0,
        0,
        1867,
        1869,
        5,
        70,
        0,
        0,
        1868,
        1867,
        1,
        0,
        0,
        0,
        1868,
        1869,
        1,
        0,
        0,
        0,
        1869,
        271,
        1,
        0,
        0,
        0,
        1870,
        1871,
        3,
        288,
        144,
        0,
        1871,
        1872,
        5,
        28,
        0,
        0,
        1872,
        1873,
        3,
        288,
        144,
        0,
        1873,
        1874,
        5,
        21,
        0,
        0,
        1874,
        1875,
        3,
        272,
        136,
        0,
        1875,
        1879,
        1,
        0,
        0,
        0,
        1876,
        1879,
        3,
        288,
        144,
        0,
        1877,
        1879,
        3,
        346,
        173,
        0,
        1878,
        1870,
        1,
        0,
        0,
        0,
        1878,
        1876,
        1,
        0,
        0,
        0,
        1878,
        1877,
        1,
        0,
        0,
        0,
        1879,
        273,
        1,
        0,
        0,
        0,
        1880,
        1881,
        5,
        48,
        0,
        0,
        1881,
        1882,
        5,
        26,
        0,
        0,
        1882,
        1888,
        3,
        272,
        136,
        0,
        1883,
        1885,
        5,
        48,
        0,
        0,
        1884,
        1886,
        3,
        276,
        138,
        0,
        1885,
        1884,
        1,
        0,
        0,
        0,
        1885,
        1886,
        1,
        0,
        0,
        0,
        1886,
        1888,
        1,
        0,
        0,
        0,
        1887,
        1880,
        1,
        0,
        0,
        0,
        1887,
        1883,
        1,
        0,
        0,
        0,
        1888,
        275,
        1,
        0,
        0,
        0,
        1889,
        1894,
        3,
        278,
        139,
        0,
        1890,
        1891,
        5,
        70,
        0,
        0,
        1891,
        1893,
        3,
        278,
        139,
        0,
        1892,
        1890,
        1,
        0,
        0,
        0,
        1893,
        1896,
        1,
        0,
        0,
        0,
        1894,
        1892,
        1,
        0,
        0,
        0,
        1894,
        1895,
        1,
        0,
        0,
        0,
        1895,
        1898,
        1,
        0,
        0,
        0,
        1896,
        1894,
        1,
        0,
        0,
        0,
        1897,
        1899,
        5,
        70,
        0,
        0,
        1898,
        1897,
        1,
        0,
        0,
        0,
        1898,
        1899,
        1,
        0,
        0,
        0,
        1899,
        277,
        1,
        0,
        0,
        0,
        1900,
        1901,
        5,
        67,
        0,
        0,
        1901,
        1904,
        3,
        318,
        159,
        0,
        1902,
        1904,
        3,
        272,
        136,
        0,
        1903,
        1900,
        1,
        0,
        0,
        0,
        1903,
        1902,
        1,
        0,
        0,
        0,
        1904,
        279,
        1,
        0,
        0,
        0,
        1905,
        1910,
        3,
        282,
        141,
        0,
        1906,
        1907,
        5,
        70,
        0,
        0,
        1907,
        1909,
        3,
        282,
        141,
        0,
        1908,
        1906,
        1,
        0,
        0,
        0,
        1909,
        1912,
        1,
        0,
        0,
        0,
        1910,
        1908,
        1,
        0,
        0,
        0,
        1910,
        1911,
        1,
        0,
        0,
        0,
        1911,
        1914,
        1,
        0,
        0,
        0,
        1912,
        1910,
        1,
        0,
        0,
        0,
        1913,
        1915,
        5,
        70,
        0,
        0,
        1914,
        1913,
        1,
        0,
        0,
        0,
        1914,
        1915,
        1,
        0,
        0,
        0,
        1915,
        281,
        1,
        0,
        0,
        0,
        1916,
        1917,
        5,
        67,
        0,
        0,
        1917,
        1920,
        3,
        318,
        159,
        0,
        1918,
        1920,
        3,
        286,
        143,
        0,
        1919,
        1916,
        1,
        0,
        0,
        0,
        1919,
        1918,
        1,
        0,
        0,
        0,
        1920,
        283,
        1,
        0,
        0,
        0,
        1921,
        1922,
        5,
        52,
        0,
        0,
        1922,
        1923,
        5,
        112,
        0,
        0,
        1923,
        1924,
        3,
        272,
        136,
        0,
        1924,
        285,
        1,
        0,
        0,
        0,
        1925,
        1928,
        3,
        284,
        142,
        0,
        1926,
        1928,
        3,
        272,
        136,
        0,
        1927,
        1925,
        1,
        0,
        0,
        0,
        1927,
        1926,
        1,
        0,
        0,
        0,
        1928,
        287,
        1,
        0,
        0,
        0,
        1929,
        1934,
        3,
        290,
        145,
        0,
        1930,
        1931,
        5,
        37,
        0,
        0,
        1931,
        1933,
        3,
        290,
        145,
        0,
        1932,
        1930,
        1,
        0,
        0,
        0,
        1933,
        1936,
        1,
        0,
        0,
        0,
        1934,
        1932,
        1,
        0,
        0,
        0,
        1934,
        1935,
        1,
        0,
        0,
        0,
        1935,
        289,
        1,
        0,
        0,
        0,
        1936,
        1934,
        1,
        0,
        0,
        0,
        1937,
        1942,
        3,
        292,
        146,
        0,
        1938,
        1939,
        5,
        9,
        0,
        0,
        1939,
        1941,
        3,
        292,
        146,
        0,
        1940,
        1938,
        1,
        0,
        0,
        0,
        1941,
        1944,
        1,
        0,
        0,
        0,
        1942,
        1940,
        1,
        0,
        0,
        0,
        1942,
        1943,
        1,
        0,
        0,
        0,
        1943,
        291,
        1,
        0,
        0,
        0,
        1944,
        1942,
        1,
        0,
        0,
        0,
        1945,
        1946,
        5,
        36,
        0,
        0,
        1946,
        1949,
        3,
        292,
        146,
        0,
        1947,
        1949,
        3,
        294,
        147,
        0,
        1948,
        1945,
        1,
        0,
        0,
        0,
        1948,
        1947,
        1,
        0,
        0,
        0,
        1949,
        293,
        1,
        0,
        0,
        0,
        1950,
        1954,
        3,
        318,
        159,
        0,
        1951,
        1953,
        3,
        296,
        148,
        0,
        1952,
        1951,
        1,
        0,
        0,
        0,
        1953,
        1956,
        1,
        0,
        0,
        0,
        1954,
        1952,
        1,
        0,
        0,
        0,
        1954,
        1955,
        1,
        0,
        0,
        0,
        1955,
        295,
        1,
        0,
        0,
        0,
        1956,
        1954,
        1,
        0,
        0,
        0,
        1957,
        1968,
        3,
        298,
        149,
        0,
        1958,
        1968,
        3,
        300,
        150,
        0,
        1959,
        1968,
        3,
        302,
        151,
        0,
        1960,
        1968,
        3,
        304,
        152,
        0,
        1961,
        1968,
        3,
        306,
        153,
        0,
        1962,
        1968,
        3,
        308,
        154,
        0,
        1963,
        1968,
        3,
        310,
        155,
        0,
        1964,
        1968,
        3,
        312,
        156,
        0,
        1965,
        1968,
        3,
        314,
        157,
        0,
        1966,
        1968,
        3,
        316,
        158,
        0,
        1967,
        1957,
        1,
        0,
        0,
        0,
        1967,
        1958,
        1,
        0,
        0,
        0,
        1967,
        1959,
        1,
        0,
        0,
        0,
        1967,
        1960,
        1,
        0,
        0,
        0,
        1967,
        1961,
        1,
        0,
        0,
        0,
        1967,
        1962,
        1,
        0,
        0,
        0,
        1967,
        1963,
        1,
        0,
        0,
        0,
        1967,
        1964,
        1,
        0,
        0,
        0,
        1967,
        1965,
        1,
        0,
        0,
        0,
        1967,
        1966,
        1,
        0,
        0,
        0,
        1968,
        297,
        1,
        0,
        0,
        0,
        1969,
        1970,
        5,
        92,
        0,
        0,
        1970,
        1971,
        3,
        318,
        159,
        0,
        1971,
        299,
        1,
        0,
        0,
        0,
        1972,
        1973,
        5,
        96,
        0,
        0,
        1973,
        1974,
        3,
        318,
        159,
        0,
        1974,
        301,
        1,
        0,
        0,
        0,
        1975,
        1976,
        5,
        94,
        0,
        0,
        1976,
        1977,
        3,
        318,
        159,
        0,
        1977,
        303,
        1,
        0,
        0,
        0,
        1978,
        1979,
        5,
        90,
        0,
        0,
        1979,
        1980,
        3,
        318,
        159,
        0,
        1980,
        305,
        1,
        0,
        0,
        0,
        1981,
        1982,
        5,
        93,
        0,
        0,
        1982,
        1983,
        3,
        318,
        159,
        0,
        1983,
        307,
        1,
        0,
        0,
        0,
        1984,
        1985,
        5,
        91,
        0,
        0,
        1985,
        1986,
        3,
        318,
        159,
        0,
        1986,
        309,
        1,
        0,
        0,
        0,
        1987,
        1988,
        5,
        36,
        0,
        0,
        1988,
        1989,
        5,
        30,
        0,
        0,
        1989,
        1990,
        3,
        318,
        159,
        0,
        1990,
        311,
        1,
        0,
        0,
        0,
        1991,
        1992,
        5,
        30,
        0,
        0,
        1992,
        1993,
        3,
        318,
        159,
        0,
        1993,
        313,
        1,
        0,
        0,
        0,
        1994,
        1995,
        5,
        31,
        0,
        0,
        1995,
        1996,
        5,
        36,
        0,
        0,
        1996,
        1997,
        3,
        318,
        159,
        0,
        1997,
        315,
        1,
        0,
        0,
        0,
        1998,
        1999,
        5,
        31,
        0,
        0,
        1999,
        2000,
        3,
        318,
        159,
        0,
        2000,
        317,
        1,
        0,
        0,
        0,
        2001,
        2002,
        6,
        159,
        -1,
        0,
        2002,
        2003,
        3,
        320,
        160,
        0,
        2003,
        2009,
        1,
        0,
        0,
        0,
        2004,
        2005,
        10,
        2,
        0,
        0,
        2005,
        2006,
        5,
        77,
        0,
        0,
        2006,
        2008,
        3,
        320,
        160,
        0,
        2007,
        2004,
        1,
        0,
        0,
        0,
        2008,
        2011,
        1,
        0,
        0,
        0,
        2009,
        2007,
        1,
        0,
        0,
        0,
        2009,
        2010,
        1,
        0,
        0,
        0,
        2010,
        319,
        1,
        0,
        0,
        0,
        2011,
        2009,
        1,
        0,
        0,
        0,
        2012,
        2013,
        6,
        160,
        -1,
        0,
        2013,
        2014,
        3,
        322,
        161,
        0,
        2014,
        2020,
        1,
        0,
        0,
        0,
        2015,
        2016,
        10,
        2,
        0,
        0,
        2016,
        2017,
        5,
        78,
        0,
        0,
        2017,
        2019,
        3,
        322,
        161,
        0,
        2018,
        2015,
        1,
        0,
        0,
        0,
        2019,
        2022,
        1,
        0,
        0,
        0,
        2020,
        2018,
        1,
        0,
        0,
        0,
        2020,
        2021,
        1,
        0,
        0,
        0,
        2021,
        321,
        1,
        0,
        0,
        0,
        2022,
        2020,
        1,
        0,
        0,
        0,
        2023,
        2024,
        6,
        161,
        -1,
        0,
        2024,
        2025,
        3,
        324,
        162,
        0,
        2025,
        2031,
        1,
        0,
        0,
        0,
        2026,
        2027,
        10,
        2,
        0,
        0,
        2027,
        2028,
        5,
        79,
        0,
        0,
        2028,
        2030,
        3,
        324,
        162,
        0,
        2029,
        2026,
        1,
        0,
        0,
        0,
        2030,
        2033,
        1,
        0,
        0,
        0,
        2031,
        2029,
        1,
        0,
        0,
        0,
        2031,
        2032,
        1,
        0,
        0,
        0,
        2032,
        323,
        1,
        0,
        0,
        0,
        2033,
        2031,
        1,
        0,
        0,
        0,
        2034,
        2035,
        6,
        162,
        -1,
        0,
        2035,
        2036,
        3,
        326,
        163,
        0,
        2036,
        2045,
        1,
        0,
        0,
        0,
        2037,
        2038,
        10,
        3,
        0,
        0,
        2038,
        2039,
        5,
        80,
        0,
        0,
        2039,
        2044,
        3,
        326,
        163,
        0,
        2040,
        2041,
        10,
        2,
        0,
        0,
        2041,
        2042,
        5,
        81,
        0,
        0,
        2042,
        2044,
        3,
        326,
        163,
        0,
        2043,
        2037,
        1,
        0,
        0,
        0,
        2043,
        2040,
        1,
        0,
        0,
        0,
        2044,
        2047,
        1,
        0,
        0,
        0,
        2045,
        2043,
        1,
        0,
        0,
        0,
        2045,
        2046,
        1,
        0,
        0,
        0,
        2046,
        325,
        1,
        0,
        0,
        0,
        2047,
        2045,
        1,
        0,
        0,
        0,
        2048,
        2049,
        6,
        163,
        -1,
        0,
        2049,
        2050,
        3,
        328,
        164,
        0,
        2050,
        2059,
        1,
        0,
        0,
        0,
        2051,
        2052,
        10,
        3,
        0,
        0,
        2052,
        2053,
        5,
        82,
        0,
        0,
        2053,
        2058,
        3,
        328,
        164,
        0,
        2054,
        2055,
        10,
        2,
        0,
        0,
        2055,
        2056,
        5,
        83,
        0,
        0,
        2056,
        2058,
        3,
        328,
        164,
        0,
        2057,
        2051,
        1,
        0,
        0,
        0,
        2057,
        2054,
        1,
        0,
        0,
        0,
        2058,
        2061,
        1,
        0,
        0,
        0,
        2059,
        2057,
        1,
        0,
        0,
        0,
        2059,
        2060,
        1,
        0,
        0,
        0,
        2060,
        327,
        1,
        0,
        0,
        0,
        2061,
        2059,
        1,
        0,
        0,
        0,
        2062,
        2063,
        6,
        164,
        -1,
        0,
        2063,
        2064,
        3,
        330,
        165,
        0,
        2064,
        2082,
        1,
        0,
        0,
        0,
        2065,
        2066,
        10,
        6,
        0,
        0,
        2066,
        2067,
        5,
        67,
        0,
        0,
        2067,
        2081,
        3,
        330,
        165,
        0,
        2068,
        2069,
        10,
        5,
        0,
        0,
        2069,
        2070,
        5,
        84,
        0,
        0,
        2070,
        2081,
        3,
        330,
        165,
        0,
        2071,
        2072,
        10,
        4,
        0,
        0,
        2072,
        2073,
        5,
        86,
        0,
        0,
        2073,
        2081,
        3,
        330,
        165,
        0,
        2074,
        2075,
        10,
        3,
        0,
        0,
        2075,
        2076,
        5,
        85,
        0,
        0,
        2076,
        2081,
        3,
        330,
        165,
        0,
        2077,
        2078,
        10,
        2,
        0,
        0,
        2078,
        2079,
        5,
        97,
        0,
        0,
        2079,
        2081,
        3,
        330,
        165,
        0,
        2080,
        2065,
        1,
        0,
        0,
        0,
        2080,
        2068,
        1,
        0,
        0,
        0,
        2080,
        2071,
        1,
        0,
        0,
        0,
        2080,
        2074,
        1,
        0,
        0,
        0,
        2080,
        2077,
        1,
        0,
        0,
        0,
        2081,
        2084,
        1,
        0,
        0,
        0,
        2082,
        2080,
        1,
        0,
        0,
        0,
        2082,
        2083,
        1,
        0,
        0,
        0,
        2083,
        329,
        1,
        0,
        0,
        0,
        2084,
        2082,
        1,
        0,
        0,
        0,
        2085,
        2086,
        5,
        82,
        0,
        0,
        2086,
        2093,
        3,
        330,
        165,
        0,
        2087,
        2088,
        5,
        83,
        0,
        0,
        2088,
        2093,
        3,
        330,
        165,
        0,
        2089,
        2090,
        5,
        87,
        0,
        0,
        2090,
        2093,
        3,
        330,
        165,
        0,
        2091,
        2093,
        3,
        332,
        166,
        0,
        2092,
        2085,
        1,
        0,
        0,
        0,
        2092,
        2087,
        1,
        0,
        0,
        0,
        2092,
        2089,
        1,
        0,
        0,
        0,
        2092,
        2091,
        1,
        0,
        0,
        0,
        2093,
        331,
        1,
        0,
        0,
        0,
        2094,
        2095,
        3,
        334,
        167,
        0,
        2095,
        2096,
        5,
        73,
        0,
        0,
        2096,
        2097,
        3,
        330,
        165,
        0,
        2097,
        2100,
        1,
        0,
        0,
        0,
        2098,
        2100,
        3,
        334,
        167,
        0,
        2099,
        2094,
        1,
        0,
        0,
        0,
        2099,
        2098,
        1,
        0,
        0,
        0,
        2100,
        333,
        1,
        0,
        0,
        0,
        2101,
        2102,
        5,
        13,
        0,
        0,
        2102,
        2105,
        3,
        336,
        168,
        0,
        2103,
        2105,
        3,
        336,
        168,
        0,
        2104,
        2101,
        1,
        0,
        0,
        0,
        2104,
        2103,
        1,
        0,
        0,
        0,
        2105,
        335,
        1,
        0,
        0,
        0,
        2106,
        2107,
        6,
        168,
        -1,
        0,
        2107,
        2108,
        3,
        342,
        171,
        0,
        2108,
        2127,
        1,
        0,
        0,
        0,
        2109,
        2110,
        10,
        5,
        0,
        0,
        2110,
        2111,
        5,
        64,
        0,
        0,
        2111,
        2126,
        5,
        52,
        0,
        0,
        2112,
        2113,
        10,
        4,
        0,
        0,
        2113,
        2126,
        3,
        406,
        203,
        0,
        2114,
        2115,
        10,
        3,
        0,
        0,
        2115,
        2117,
        5,
        68,
        0,
        0,
        2116,
        2118,
        3,
        410,
        205,
        0,
        2117,
        2116,
        1,
        0,
        0,
        0,
        2117,
        2118,
        1,
        0,
        0,
        0,
        2118,
        2119,
        1,
        0,
        0,
        0,
        2119,
        2126,
        5,
        69,
        0,
        0,
        2120,
        2121,
        10,
        2,
        0,
        0,
        2121,
        2122,
        5,
        75,
        0,
        0,
        2122,
        2123,
        3,
        338,
        169,
        0,
        2123,
        2124,
        5,
        76,
        0,
        0,
        2124,
        2126,
        1,
        0,
        0,
        0,
        2125,
        2109,
        1,
        0,
        0,
        0,
        2125,
        2112,
        1,
        0,
        0,
        0,
        2125,
        2114,
        1,
        0,
        0,
        0,
        2125,
        2120,
        1,
        0,
        0,
        0,
        2126,
        2129,
        1,
        0,
        0,
        0,
        2127,
        2125,
        1,
        0,
        0,
        0,
        2127,
        2128,
        1,
        0,
        0,
        0,
        2128,
        337,
        1,
        0,
        0,
        0,
        2129,
        2127,
        1,
        0,
        0,
        0,
        2130,
        2133,
        3,
        340,
        170,
        0,
        2131,
        2133,
        3,
        418,
        209,
        0,
        2132,
        2130,
        1,
        0,
        0,
        0,
        2132,
        2131,
        1,
        0,
        0,
        0,
        2133,
        2141,
        1,
        0,
        0,
        0,
        2134,
        2137,
        5,
        70,
        0,
        0,
        2135,
        2138,
        3,
        340,
        170,
        0,
        2136,
        2138,
        3,
        418,
        209,
        0,
        2137,
        2135,
        1,
        0,
        0,
        0,
        2137,
        2136,
        1,
        0,
        0,
        0,
        2138,
        2140,
        1,
        0,
        0,
        0,
        2139,
        2134,
        1,
        0,
        0,
        0,
        2140,
        2143,
        1,
        0,
        0,
        0,
        2141,
        2139,
        1,
        0,
        0,
        0,
        2141,
        2142,
        1,
        0,
        0,
        0,
        2142,
        2145,
        1,
        0,
        0,
        0,
        2143,
        2141,
        1,
        0,
        0,
        0,
        2144,
        2146,
        5,
        70,
        0,
        0,
        2145,
        2144,
        1,
        0,
        0,
        0,
        2145,
        2146,
        1,
        0,
        0,
        0,
        2146,
        339,
        1,
        0,
        0,
        0,
        2147,
        2149,
        3,
        272,
        136,
        0,
        2148,
        2147,
        1,
        0,
        0,
        0,
        2148,
        2149,
        1,
        0,
        0,
        0,
        2149,
        2150,
        1,
        0,
        0,
        0,
        2150,
        2152,
        5,
        71,
        0,
        0,
        2151,
        2153,
        3,
        272,
        136,
        0,
        2152,
        2151,
        1,
        0,
        0,
        0,
        2152,
        2153,
        1,
        0,
        0,
        0,
        2153,
        2158,
        1,
        0,
        0,
        0,
        2154,
        2156,
        5,
        71,
        0,
        0,
        2155,
        2157,
        3,
        272,
        136,
        0,
        2156,
        2155,
        1,
        0,
        0,
        0,
        2156,
        2157,
        1,
        0,
        0,
        0,
        2157,
        2159,
        1,
        0,
        0,
        0,
        2158,
        2154,
        1,
        0,
        0,
        0,
        2158,
        2159,
        1,
        0,
        0,
        0,
        2159,
        2162,
        1,
        0,
        0,
        0,
        2160,
        2162,
        3,
        286,
        143,
        0,
        2161,
        2148,
        1,
        0,
        0,
        0,
        2161,
        2160,
        1,
        0,
        0,
        0,
        2162,
        341,
        1,
        0,
        0,
        0,
        2163,
        2187,
        3,
        46,
        23,
        0,
        2164,
        2187,
        5,
        52,
        0,
        0,
        2165,
        2187,
        5,
        41,
        0,
        0,
        2166,
        2187,
        5,
        23,
        0,
        0,
        2167,
        2187,
        5,
        34,
        0,
        0,
        2168,
        2187,
        3,
        382,
        191,
        0,
        2169,
        2187,
        5,
        4,
        0,
        0,
        2170,
        2174,
        3,
        386,
        193,
        0,
        2171,
        2174,
        3,
        344,
        172,
        0,
        2172,
        2174,
        3,
        406,
        203,
        0,
        2173,
        2170,
        1,
        0,
        0,
        0,
        2173,
        2171,
        1,
        0,
        0,
        0,
        2173,
        2172,
        1,
        0,
        0,
        0,
        2174,
        2187,
        1,
        0,
        0,
        0,
        2175,
        2178,
        3,
        384,
        192,
        0,
        2176,
        2178,
        3,
        402,
        201,
        0,
        2177,
        2175,
        1,
        0,
        0,
        0,
        2177,
        2176,
        1,
        0,
        0,
        0,
        2178,
        2187,
        1,
        0,
        0,
        0,
        2179,
        2184,
        3,
        390,
        195,
        0,
        2180,
        2184,
        3,
        388,
        194,
        0,
        2181,
        2184,
        3,
        408,
        204,
        0,
        2182,
        2184,
        3,
        404,
        202,
        0,
        2183,
        2179,
        1,
        0,
        0,
        0,
        2183,
        2180,
        1,
        0,
        0,
        0,
        2183,
        2181,
        1,
        0,
        0,
        0,
        2183,
        2182,
        1,
        0,
        0,
        0,
        2184,
        2187,
        1,
        0,
        0,
        0,
        2185,
        2187,
        5,
        66,
        0,
        0,
        2186,
        2163,
        1,
        0,
        0,
        0,
        2186,
        2164,
        1,
        0,
        0,
        0,
        2186,
        2165,
        1,
        0,
        0,
        0,
        2186,
        2166,
        1,
        0,
        0,
        0,
        2186,
        2167,
        1,
        0,
        0,
        0,
        2186,
        2168,
        1,
        0,
        0,
        0,
        2186,
        2169,
        1,
        0,
        0,
        0,
        2186,
        2173,
        1,
        0,
        0,
        0,
        2186,
        2177,
        1,
        0,
        0,
        0,
        2186,
        2183,
        1,
        0,
        0,
        0,
        2186,
        2185,
        1,
        0,
        0,
        0,
        2187,
        343,
        1,
        0,
        0,
        0,
        2188,
        2191,
        5,
        68,
        0,
        0,
        2189,
        2192,
        3,
        274,
        137,
        0,
        2190,
        2192,
        3,
        286,
        143,
        0,
        2191,
        2189,
        1,
        0,
        0,
        0,
        2191,
        2190,
        1,
        0,
        0,
        0,
        2192,
        2193,
        1,
        0,
        0,
        0,
        2193,
        2194,
        5,
        69,
        0,
        0,
        2194,
        345,
        1,
        0,
        0,
        0,
        2195,
        2197,
        5,
        32,
        0,
        0,
        2196,
        2198,
        3,
        348,
        174,
        0,
        2197,
        2196,
        1,
        0,
        0,
        0,
        2197,
        2198,
        1,
        0,
        0,
        0,
        2198,
        2199,
        1,
        0,
        0,
        0,
        2199,
        2200,
        5,
        71,
        0,
        0,
        2200,
        2201,
        3,
        272,
        136,
        0,
        2201,
        347,
        1,
        0,
        0,
        0,
        2202,
        2203,
        3,
        350,
        175,
        0,
        2203,
        349,
        1,
        0,
        0,
        0,
        2204,
        2208,
        3,
        352,
        176,
        0,
        2205,
        2207,
        3,
        360,
        180,
        0,
        2206,
        2205,
        1,
        0,
        0,
        0,
        2207,
        2210,
        1,
        0,
        0,
        0,
        2208,
        2206,
        1,
        0,
        0,
        0,
        2208,
        2209,
        1,
        0,
        0,
        0,
        2209,
        2214,
        1,
        0,
        0,
        0,
        2210,
        2208,
        1,
        0,
        0,
        0,
        2211,
        2213,
        3,
        362,
        181,
        0,
        2212,
        2211,
        1,
        0,
        0,
        0,
        2213,
        2216,
        1,
        0,
        0,
        0,
        2214,
        2212,
        1,
        0,
        0,
        0,
        2214,
        2215,
        1,
        0,
        0,
        0,
        2215,
        2218,
        1,
        0,
        0,
        0,
        2216,
        2214,
        1,
        0,
        0,
        0,
        2217,
        2219,
        3,
        356,
        178,
        0,
        2218,
        2217,
        1,
        0,
        0,
        0,
        2218,
        2219,
        1,
        0,
        0,
        0,
        2219,
        2254,
        1,
        0,
        0,
        0,
        2220,
        2224,
        3,
        354,
        177,
        0,
        2221,
        2223,
        3,
        362,
        181,
        0,
        2222,
        2221,
        1,
        0,
        0,
        0,
        2223,
        2226,
        1,
        0,
        0,
        0,
        2224,
        2222,
        1,
        0,
        0,
        0,
        2224,
        2225,
        1,
        0,
        0,
        0,
        2225,
        2228,
        1,
        0,
        0,
        0,
        2226,
        2224,
        1,
        0,
        0,
        0,
        2227,
        2229,
        3,
        356,
        178,
        0,
        2228,
        2227,
        1,
        0,
        0,
        0,
        2228,
        2229,
        1,
        0,
        0,
        0,
        2229,
        2254,
        1,
        0,
        0,
        0,
        2230,
        2232,
        3,
        360,
        180,
        0,
        2231,
        2230,
        1,
        0,
        0,
        0,
        2232,
        2233,
        1,
        0,
        0,
        0,
        2233,
        2231,
        1,
        0,
        0,
        0,
        2233,
        2234,
        1,
        0,
        0,
        0,
        2234,
        2238,
        1,
        0,
        0,
        0,
        2235,
        2237,
        3,
        362,
        181,
        0,
        2236,
        2235,
        1,
        0,
        0,
        0,
        2237,
        2240,
        1,
        0,
        0,
        0,
        2238,
        2236,
        1,
        0,
        0,
        0,
        2238,
        2239,
        1,
        0,
        0,
        0,
        2239,
        2242,
        1,
        0,
        0,
        0,
        2240,
        2238,
        1,
        0,
        0,
        0,
        2241,
        2243,
        3,
        356,
        178,
        0,
        2242,
        2241,
        1,
        0,
        0,
        0,
        2242,
        2243,
        1,
        0,
        0,
        0,
        2243,
        2254,
        1,
        0,
        0,
        0,
        2244,
        2246,
        3,
        362,
        181,
        0,
        2245,
        2244,
        1,
        0,
        0,
        0,
        2246,
        2247,
        1,
        0,
        0,
        0,
        2247,
        2245,
        1,
        0,
        0,
        0,
        2247,
        2248,
        1,
        0,
        0,
        0,
        2248,
        2250,
        1,
        0,
        0,
        0,
        2249,
        2251,
        3,
        356,
        178,
        0,
        2250,
        2249,
        1,
        0,
        0,
        0,
        2250,
        2251,
        1,
        0,
        0,
        0,
        2251,
        2254,
        1,
        0,
        0,
        0,
        2252,
        2254,
        3,
        356,
        178,
        0,
        2253,
        2204,
        1,
        0,
        0,
        0,
        2253,
        2220,
        1,
        0,
        0,
        0,
        2253,
        2231,
        1,
        0,
        0,
        0,
        2253,
        2245,
        1,
        0,
        0,
        0,
        2253,
        2252,
        1,
        0,
        0,
        0,
        2254,
        351,
        1,
        0,
        0,
        0,
        2255,
        2257,
        3,
        360,
        180,
        0,
        2256,
        2255,
        1,
        0,
        0,
        0,
        2257,
        2258,
        1,
        0,
        0,
        0,
        2258,
        2256,
        1,
        0,
        0,
        0,
        2258,
        2259,
        1,
        0,
        0,
        0,
        2259,
        2260,
        1,
        0,
        0,
        0,
        2260,
        2262,
        5,
        84,
        0,
        0,
        2261,
        2263,
        5,
        70,
        0,
        0,
        2262,
        2261,
        1,
        0,
        0,
        0,
        2262,
        2263,
        1,
        0,
        0,
        0,
        2263,
        353,
        1,
        0,
        0,
        0,
        2264,
        2266,
        3,
        360,
        180,
        0,
        2265,
        2264,
        1,
        0,
        0,
        0,
        2266,
        2269,
        1,
        0,
        0,
        0,
        2267,
        2265,
        1,
        0,
        0,
        0,
        2267,
        2268,
        1,
        0,
        0,
        0,
        2268,
        2271,
        1,
        0,
        0,
        0,
        2269,
        2267,
        1,
        0,
        0,
        0,
        2270,
        2272,
        3,
        362,
        181,
        0,
        2271,
        2270,
        1,
        0,
        0,
        0,
        2272,
        2273,
        1,
        0,
        0,
        0,
        2273,
        2271,
        1,
        0,
        0,
        0,
        2273,
        2274,
        1,
        0,
        0,
        0,
        2274,
        2275,
        1,
        0,
        0,
        0,
        2275,
        2277,
        5,
        84,
        0,
        0,
        2276,
        2278,
        5,
        70,
        0,
        0,
        2277,
        2276,
        1,
        0,
        0,
        0,
        2277,
        2278,
        1,
        0,
        0,
        0,
        2278,
        355,
        1,
        0,
        0,
        0,
        2279,
        2280,
        5,
        67,
        0,
        0,
        2280,
        2284,
        3,
        360,
        180,
        0,
        2281,
        2283,
        3,
        364,
        182,
        0,
        2282,
        2281,
        1,
        0,
        0,
        0,
        2283,
        2286,
        1,
        0,
        0,
        0,
        2284,
        2282,
        1,
        0,
        0,
        0,
        2284,
        2285,
        1,
        0,
        0,
        0,
        2285,
        2288,
        1,
        0,
        0,
        0,
        2286,
        2284,
        1,
        0,
        0,
        0,
        2287,
        2289,
        3,
        358,
        179,
        0,
        2288,
        2287,
        1,
        0,
        0,
        0,
        2288,
        2289,
        1,
        0,
        0,
        0,
        2289,
        2302,
        1,
        0,
        0,
        0,
        2290,
        2291,
        5,
        67,
        0,
        0,
        2291,
        2293,
        5,
        70,
        0,
        0,
        2292,
        2294,
        3,
        364,
        182,
        0,
        2293,
        2292,
        1,
        0,
        0,
        0,
        2294,
        2295,
        1,
        0,
        0,
        0,
        2295,
        2293,
        1,
        0,
        0,
        0,
        2295,
        2296,
        1,
        0,
        0,
        0,
        2296,
        2298,
        1,
        0,
        0,
        0,
        2297,
        2299,
        3,
        358,
        179,
        0,
        2298,
        2297,
        1,
        0,
        0,
        0,
        2298,
        2299,
        1,
        0,
        0,
        0,
        2299,
        2302,
        1,
        0,
        0,
        0,
        2300,
        2302,
        3,
        358,
        179,
        0,
        2301,
        2279,
        1,
        0,
        0,
        0,
        2301,
        2290,
        1,
        0,
        0,
        0,
        2301,
        2300,
        1,
        0,
        0,
        0,
        2302,
        357,
        1,
        0,
        0,
        0,
        2303,
        2304,
        5,
        73,
        0,
        0,
        2304,
        2305,
        3,
        360,
        180,
        0,
        2305,
        359,
        1,
        0,
        0,
        0,
        2306,
        2308,
        3,
        366,
        183,
        0,
        2307,
        2309,
        5,
        70,
        0,
        0,
        2308,
        2307,
        1,
        0,
        0,
        0,
        2308,
        2309,
        1,
        0,
        0,
        0,
        2309,
        361,
        1,
        0,
        0,
        0,
        2310,
        2311,
        3,
        366,
        183,
        0,
        2311,
        2313,
        3,
        164,
        82,
        0,
        2312,
        2314,
        5,
        70,
        0,
        0,
        2313,
        2312,
        1,
        0,
        0,
        0,
        2313,
        2314,
        1,
        0,
        0,
        0,
        2314,
        363,
        1,
        0,
        0,
        0,
        2315,
        2317,
        3,
        366,
        183,
        0,
        2316,
        2318,
        3,
        164,
        82,
        0,
        2317,
        2316,
        1,
        0,
        0,
        0,
        2317,
        2318,
        1,
        0,
        0,
        0,
        2318,
        2320,
        1,
        0,
        0,
        0,
        2319,
        2321,
        5,
        70,
        0,
        0,
        2320,
        2319,
        1,
        0,
        0,
        0,
        2320,
        2321,
        1,
        0,
        0,
        0,
        2321,
        365,
        1,
        0,
        0,
        0,
        2322,
        2323,
        5,
        52,
        0,
        0,
        2323,
        367,
        1,
        0,
        0,
        0,
        2324,
        2327,
        3,
        370,
        185,
        0,
        2325,
        2327,
        5,
        117,
        0,
        0,
        2326,
        2324,
        1,
        0,
        0,
        0,
        2326,
        2325,
        1,
        0,
        0,
        0,
        2327,
        369,
        1,
        0,
        0,
        0,
        2328,
        2331,
        5,
        88,
        0,
        0,
        2329,
        2332,
        3,
        274,
        137,
        0,
        2330,
        2332,
        3,
        276,
        138,
        0,
        2331,
        2329,
        1,
        0,
        0,
        0,
        2331,
        2330,
        1,
        0,
        0,
        0,
        2332,
        2334,
        1,
        0,
        0,
        0,
        2333,
        2335,
        5,
        74,
        0,
        0,
        2334,
        2333,
        1,
        0,
        0,
        0,
        2334,
        2335,
        1,
        0,
        0,
        0,
        2335,
        2337,
        1,
        0,
        0,
        0,
        2336,
        2338,
        3,
        372,
        186,
        0,
        2337,
        2336,
        1,
        0,
        0,
        0,
        2337,
        2338,
        1,
        0,
        0,
        0,
        2338,
        2340,
        1,
        0,
        0,
        0,
        2339,
        2341,
        3,
        374,
        187,
        0,
        2340,
        2339,
        1,
        0,
        0,
        0,
        2340,
        2341,
        1,
        0,
        0,
        0,
        2341,
        2342,
        1,
        0,
        0,
        0,
        2342,
        2343,
        5,
        89,
        0,
        0,
        2343,
        371,
        1,
        0,
        0,
        0,
        2344,
        2348,
        1,
        0,
        0,
        0,
        2345,
        2346,
        5,
        113,
        0,
        0,
        2346,
        2348,
        5,
        52,
        0,
        0,
        2347,
        2344,
        1,
        0,
        0,
        0,
        2347,
        2345,
        1,
        0,
        0,
        0,
        2348,
        373,
        1,
        0,
        0,
        0,
        2349,
        2353,
        5,
        71,
        0,
        0,
        2350,
        2352,
        3,
        376,
        188,
        0,
        2351,
        2350,
        1,
        0,
        0,
        0,
        2352,
        2355,
        1,
        0,
        0,
        0,
        2353,
        2351,
        1,
        0,
        0,
        0,
        2353,
        2354,
        1,
        0,
        0,
        0,
        2354,
        375,
        1,
        0,
        0,
        0,
        2355,
        2353,
        1,
        0,
        0,
        0,
        2356,
        2359,
        5,
        117,
        0,
        0,
        2357,
        2359,
        3,
        370,
        185,
        0,
        2358,
        2356,
        1,
        0,
        0,
        0,
        2358,
        2357,
        1,
        0,
        0,
        0,
        2359,
        377,
        1,
        0,
        0,
        0,
        2360,
        2364,
        5,
        118,
        0,
        0,
        2361,
        2363,
        3,
        368,
        184,
        0,
        2362,
        2361,
        1,
        0,
        0,
        0,
        2363,
        2366,
        1,
        0,
        0,
        0,
        2364,
        2362,
        1,
        0,
        0,
        0,
        2364,
        2365,
        1,
        0,
        0,
        0,
        2365,
        2367,
        1,
        0,
        0,
        0,
        2366,
        2364,
        1,
        0,
        0,
        0,
        2367,
        2368,
        5,
        119,
        0,
        0,
        2368,
        379,
        1,
        0,
        0,
        0,
        2369,
        2370,
        5,
        3,
        0,
        0,
        2370,
        381,
        1,
        0,
        0,
        0,
        2371,
        2374,
        3,
        378,
        189,
        0,
        2372,
        2374,
        3,
        380,
        190,
        0,
        2373,
        2371,
        1,
        0,
        0,
        0,
        2373,
        2372,
        1,
        0,
        0,
        0,
        2374,
        2375,
        1,
        0,
        0,
        0,
        2375,
        2373,
        1,
        0,
        0,
        0,
        2375,
        2376,
        1,
        0,
        0,
        0,
        2376,
        383,
        1,
        0,
        0,
        0,
        2377,
        2379,
        5,
        75,
        0,
        0,
        2378,
        2380,
        3,
        280,
        140,
        0,
        2379,
        2378,
        1,
        0,
        0,
        0,
        2379,
        2380,
        1,
        0,
        0,
        0,
        2380,
        2381,
        1,
        0,
        0,
        0,
        2381,
        2382,
        5,
        76,
        0,
        0,
        2382,
        385,
        1,
        0,
        0,
        0,
        2383,
        2388,
        5,
        68,
        0,
        0,
        2384,
        2385,
        3,
        282,
        141,
        0,
        2385,
        2386,
        5,
        70,
        0,
        0,
        2386,
        2387,
        3,
        280,
        140,
        0,
        2387,
        2389,
        1,
        0,
        0,
        0,
        2388,
        2384,
        1,
        0,
        0,
        0,
        2388,
        2389,
        1,
        0,
        0,
        0,
        2389,
        2390,
        1,
        0,
        0,
        0,
        2390,
        2391,
        5,
        69,
        0,
        0,
        2391,
        387,
        1,
        0,
        0,
        0,
        2392,
        2393,
        5,
        88,
        0,
        0,
        2393,
        2394,
        3,
        280,
        140,
        0,
        2394,
        2395,
        5,
        89,
        0,
        0,
        2395,
        389,
        1,
        0,
        0,
        0,
        2396,
        2398,
        5,
        88,
        0,
        0,
        2397,
        2399,
        3,
        392,
        196,
        0,
        2398,
        2397,
        1,
        0,
        0,
        0,
        2398,
        2399,
        1,
        0,
        0,
        0,
        2399,
        2400,
        1,
        0,
        0,
        0,
        2400,
        2401,
        5,
        89,
        0,
        0,
        2401,
        391,
        1,
        0,
        0,
        0,
        2402,
        2407,
        3,
        394,
        197,
        0,
        2403,
        2404,
        5,
        70,
        0,
        0,
        2404,
        2406,
        3,
        394,
        197,
        0,
        2405,
        2403,
        1,
        0,
        0,
        0,
        2406,
        2409,
        1,
        0,
        0,
        0,
        2407,
        2405,
        1,
        0,
        0,
        0,
        2407,
        2408,
        1,
        0,
        0,
        0,
        2408,
        2411,
        1,
        0,
        0,
        0,
        2409,
        2407,
        1,
        0,
        0,
        0,
        2410,
        2412,
        5,
        70,
        0,
        0,
        2411,
        2410,
        1,
        0,
        0,
        0,
        2411,
        2412,
        1,
        0,
        0,
        0,
        2412,
        393,
        1,
        0,
        0,
        0,
        2413,
        2414,
        5,
        73,
        0,
        0,
        2414,
        2417,
        3,
        318,
        159,
        0,
        2415,
        2417,
        3,
        396,
        198,
        0,
        2416,
        2413,
        1,
        0,
        0,
        0,
        2416,
        2415,
        1,
        0,
        0,
        0,
        2417,
        395,
        1,
        0,
        0,
        0,
        2418,
        2419,
        3,
        272,
        136,
        0,
        2419,
        2420,
        5,
        71,
        0,
        0,
        2420,
        2421,
        3,
        272,
        136,
        0,
        2421,
        397,
        1,
        0,
        0,
        0,
        2422,
        2424,
        3,
        400,
        200,
        0,
        2423,
        2422,
        1,
        0,
        0,
        0,
        2424,
        2425,
        1,
        0,
        0,
        0,
        2425,
        2423,
        1,
        0,
        0,
        0,
        2425,
        2426,
        1,
        0,
        0,
        0,
        2426,
        399,
        1,
        0,
        0,
        0,
        2427,
        2429,
        5,
        12,
        0,
        0,
        2428,
        2427,
        1,
        0,
        0,
        0,
        2428,
        2429,
        1,
        0,
        0,
        0,
        2429,
        2430,
        1,
        0,
        0,
        0,
        2430,
        2431,
        5,
        25,
        0,
        0,
        2431,
        2432,
        3,
        424,
        212,
        0,
        2432,
        2433,
        5,
        30,
        0,
        0,
        2433,
        2438,
        3,
        288,
        144,
        0,
        2434,
        2435,
        5,
        28,
        0,
        0,
        2435,
        2437,
        3,
        288,
        144,
        0,
        2436,
        2434,
        1,
        0,
        0,
        0,
        2437,
        2440,
        1,
        0,
        0,
        0,
        2438,
        2436,
        1,
        0,
        0,
        0,
        2438,
        2439,
        1,
        0,
        0,
        0,
        2439,
        401,
        1,
        0,
        0,
        0,
        2440,
        2438,
        1,
        0,
        0,
        0,
        2441,
        2442,
        5,
        75,
        0,
        0,
        2442,
        2443,
        3,
        286,
        143,
        0,
        2443,
        2444,
        3,
        398,
        199,
        0,
        2444,
        2445,
        5,
        76,
        0,
        0,
        2445,
        403,
        1,
        0,
        0,
        0,
        2446,
        2447,
        5,
        88,
        0,
        0,
        2447,
        2448,
        3,
        286,
        143,
        0,
        2448,
        2449,
        3,
        398,
        199,
        0,
        2449,
        2450,
        5,
        89,
        0,
        0,
        2450,
        405,
        1,
        0,
        0,
        0,
        2451,
        2454,
        5,
        68,
        0,
        0,
        2452,
        2455,
        3,
        284,
        142,
        0,
        2453,
        2455,
        3,
        272,
        136,
        0,
        2454,
        2452,
        1,
        0,
        0,
        0,
        2454,
        2453,
        1,
        0,
        0,
        0,
        2455,
        2456,
        1,
        0,
        0,
        0,
        2456,
        2457,
        3,
        398,
        199,
        0,
        2457,
        2458,
        5,
        69,
        0,
        0,
        2458,
        407,
        1,
        0,
        0,
        0,
        2459,
        2460,
        5,
        88,
        0,
        0,
        2460,
        2461,
        3,
        396,
        198,
        0,
        2461,
        2462,
        3,
        398,
        199,
        0,
        2462,
        2463,
        5,
        89,
        0,
        0,
        2463,
        409,
        1,
        0,
        0,
        0,
        2464,
        2466,
        3,
        412,
        206,
        0,
        2465,
        2467,
        5,
        70,
        0,
        0,
        2466,
        2465,
        1,
        0,
        0,
        0,
        2466,
        2467,
        1,
        0,
        0,
        0,
        2467,
        411,
        1,
        0,
        0,
        0,
        2468,
        2473,
        3,
        414,
        207,
        0,
        2469,
        2470,
        5,
        70,
        0,
        0,
        2470,
        2472,
        3,
        414,
        207,
        0,
        2471,
        2469,
        1,
        0,
        0,
        0,
        2472,
        2475,
        1,
        0,
        0,
        0,
        2473,
        2471,
        1,
        0,
        0,
        0,
        2473,
        2474,
        1,
        0,
        0,
        0,
        2474,
        2478,
        1,
        0,
        0,
        0,
        2475,
        2473,
        1,
        0,
        0,
        0,
        2476,
        2477,
        5,
        70,
        0,
        0,
        2477,
        2479,
        3,
        416,
        208,
        0,
        2478,
        2476,
        1,
        0,
        0,
        0,
        2478,
        2479,
        1,
        0,
        0,
        0,
        2479,
        2482,
        1,
        0,
        0,
        0,
        2480,
        2482,
        3,
        416,
        208,
        0,
        2481,
        2468,
        1,
        0,
        0,
        0,
        2481,
        2480,
        1,
        0,
        0,
        0,
        2482,
        413,
        1,
        0,
        0,
        0,
        2483,
        2487,
        3,
        418,
        209,
        0,
        2484,
        2487,
        3,
        284,
        142,
        0,
        2485,
        2487,
        3,
        272,
        136,
        0,
        2486,
        2483,
        1,
        0,
        0,
        0,
        2486,
        2484,
        1,
        0,
        0,
        0,
        2486,
        2485,
        1,
        0,
        0,
        0,
        2487,
        415,
        1,
        0,
        0,
        0,
        2488,
        2493,
        3,
        420,
        210,
        0,
        2489,
        2490,
        5,
        70,
        0,
        0,
        2490,
        2492,
        3,
        420,
        210,
        0,
        2491,
        2489,
        1,
        0,
        0,
        0,
        2492,
        2495,
        1,
        0,
        0,
        0,
        2493,
        2491,
        1,
        0,
        0,
        0,
        2493,
        2494,
        1,
        0,
        0,
        0,
        2494,
        2496,
        1,
        0,
        0,
        0,
        2495,
        2493,
        1,
        0,
        0,
        0,
        2496,
        2497,
        5,
        70,
        0,
        0,
        2497,
        2502,
        3,
        422,
        211,
        0,
        2498,
        2499,
        5,
        70,
        0,
        0,
        2499,
        2501,
        3,
        422,
        211,
        0,
        2500,
        2498,
        1,
        0,
        0,
        0,
        2501,
        2504,
        1,
        0,
        0,
        0,
        2502,
        2500,
        1,
        0,
        0,
        0,
        2502,
        2503,
        1,
        0,
        0,
        0,
        2503,
        2522,
        1,
        0,
        0,
        0,
        2504,
        2502,
        1,
        0,
        0,
        0,
        2505,
        2510,
        3,
        420,
        210,
        0,
        2506,
        2507,
        5,
        70,
        0,
        0,
        2507,
        2509,
        3,
        420,
        210,
        0,
        2508,
        2506,
        1,
        0,
        0,
        0,
        2509,
        2512,
        1,
        0,
        0,
        0,
        2510,
        2508,
        1,
        0,
        0,
        0,
        2510,
        2511,
        1,
        0,
        0,
        0,
        2511,
        2522,
        1,
        0,
        0,
        0,
        2512,
        2510,
        1,
        0,
        0,
        0,
        2513,
        2518,
        3,
        422,
        211,
        0,
        2514,
        2515,
        5,
        70,
        0,
        0,
        2515,
        2517,
        3,
        422,
        211,
        0,
        2516,
        2514,
        1,
        0,
        0,
        0,
        2517,
        2520,
        1,
        0,
        0,
        0,
        2518,
        2516,
        1,
        0,
        0,
        0,
        2518,
        2519,
        1,
        0,
        0,
        0,
        2519,
        2522,
        1,
        0,
        0,
        0,
        2520,
        2518,
        1,
        0,
        0,
        0,
        2521,
        2488,
        1,
        0,
        0,
        0,
        2521,
        2505,
        1,
        0,
        0,
        0,
        2521,
        2513,
        1,
        0,
        0,
        0,
        2522,
        417,
        1,
        0,
        0,
        0,
        2523,
        2524,
        5,
        67,
        0,
        0,
        2524,
        2525,
        3,
        272,
        136,
        0,
        2525,
        419,
        1,
        0,
        0,
        0,
        2526,
        2527,
        5,
        52,
        0,
        0,
        2527,
        2528,
        5,
        74,
        0,
        0,
        2528,
        2531,
        3,
        272,
        136,
        0,
        2529,
        2531,
        3,
        418,
        209,
        0,
        2530,
        2526,
        1,
        0,
        0,
        0,
        2530,
        2529,
        1,
        0,
        0,
        0,
        2531,
        421,
        1,
        0,
        0,
        0,
        2532,
        2533,
        5,
        52,
        0,
        0,
        2533,
        2534,
        5,
        74,
        0,
        0,
        2534,
        2538,
        3,
        272,
        136,
        0,
        2535,
        2536,
        5,
        73,
        0,
        0,
        2536,
        2538,
        3,
        272,
        136,
        0,
        2537,
        2532,
        1,
        0,
        0,
        0,
        2537,
        2535,
        1,
        0,
        0,
        0,
        2538,
        423,
        1,
        0,
        0,
        0,
        2539,
        2544,
        3,
        430,
        215,
        0,
        2540,
        2541,
        5,
        70,
        0,
        0,
        2541,
        2543,
        3,
        430,
        215,
        0,
        2542,
        2540,
        1,
        0,
        0,
        0,
        2543,
        2546,
        1,
        0,
        0,
        0,
        2544,
        2542,
        1,
        0,
        0,
        0,
        2544,
        2545,
        1,
        0,
        0,
        0,
        2545,
        2548,
        1,
        0,
        0,
        0,
        2546,
        2544,
        1,
        0,
        0,
        0,
        2547,
        2549,
        5,
        70,
        0,
        0,
        2548,
        2547,
        1,
        0,
        0,
        0,
        2548,
        2549,
        1,
        0,
        0,
        0,
        2549,
        425,
        1,
        0,
        0,
        0,
        2550,
        2555,
        3,
        430,
        215,
        0,
        2551,
        2552,
        5,
        70,
        0,
        0,
        2552,
        2554,
        3,
        430,
        215,
        0,
        2553,
        2551,
        1,
        0,
        0,
        0,
        2554,
        2557,
        1,
        0,
        0,
        0,
        2555,
        2553,
        1,
        0,
        0,
        0,
        2555,
        2556,
        1,
        0,
        0,
        0,
        2556,
        2559,
        1,
        0,
        0,
        0,
        2557,
        2555,
        1,
        0,
        0,
        0,
        2558,
        2560,
        5,
        70,
        0,
        0,
        2559,
        2558,
        1,
        0,
        0,
        0,
        2559,
        2560,
        1,
        0,
        0,
        0,
        2560,
        427,
        1,
        0,
        0,
        0,
        2561,
        2564,
        3,
        430,
        215,
        0,
        2562,
        2563,
        5,
        70,
        0,
        0,
        2563,
        2565,
        3,
        430,
        215,
        0,
        2564,
        2562,
        1,
        0,
        0,
        0,
        2565,
        2566,
        1,
        0,
        0,
        0,
        2566,
        2564,
        1,
        0,
        0,
        0,
        2566,
        2567,
        1,
        0,
        0,
        0,
        2567,
        2569,
        1,
        0,
        0,
        0,
        2568,
        2570,
        5,
        70,
        0,
        0,
        2569,
        2568,
        1,
        0,
        0,
        0,
        2569,
        2570,
        1,
        0,
        0,
        0,
        2570,
        2575,
        1,
        0,
        0,
        0,
        2571,
        2572,
        3,
        430,
        215,
        0,
        2572,
        2573,
        5,
        70,
        0,
        0,
        2573,
        2575,
        1,
        0,
        0,
        0,
        2574,
        2561,
        1,
        0,
        0,
        0,
        2574,
        2571,
        1,
        0,
        0,
        0,
        2575,
        429,
        1,
        0,
        0,
        0,
        2576,
        2577,
        5,
        67,
        0,
        0,
        2577,
        2580,
        3,
        430,
        215,
        0,
        2578,
        2580,
        3,
        432,
        216,
        0,
        2579,
        2576,
        1,
        0,
        0,
        0,
        2579,
        2578,
        1,
        0,
        0,
        0,
        2580,
        431,
        1,
        0,
        0,
        0,
        2581,
        2582,
        3,
        440,
        220,
        0,
        2582,
        2583,
        5,
        64,
        0,
        0,
        2583,
        2584,
        5,
        52,
        0,
        0,
        2584,
        2592,
        1,
        0,
        0,
        0,
        2585,
        2586,
        3,
        440,
        220,
        0,
        2586,
        2587,
        5,
        75,
        0,
        0,
        2587,
        2588,
        3,
        338,
        169,
        0,
        2588,
        2589,
        5,
        76,
        0,
        0,
        2589,
        2592,
        1,
        0,
        0,
        0,
        2590,
        2592,
        3,
        434,
        217,
        0,
        2591,
        2581,
        1,
        0,
        0,
        0,
        2591,
        2585,
        1,
        0,
        0,
        0,
        2591,
        2590,
        1,
        0,
        0,
        0,
        2592,
        433,
        1,
        0,
        0,
        0,
        2593,
        2609,
        5,
        52,
        0,
        0,
        2594,
        2595,
        5,
        68,
        0,
        0,
        2595,
        2596,
        3,
        432,
        216,
        0,
        2596,
        2597,
        5,
        69,
        0,
        0,
        2597,
        2609,
        1,
        0,
        0,
        0,
        2598,
        2600,
        5,
        68,
        0,
        0,
        2599,
        2601,
        3,
        428,
        214,
        0,
        2600,
        2599,
        1,
        0,
        0,
        0,
        2600,
        2601,
        1,
        0,
        0,
        0,
        2601,
        2602,
        1,
        0,
        0,
        0,
        2602,
        2609,
        5,
        69,
        0,
        0,
        2603,
        2605,
        5,
        75,
        0,
        0,
        2604,
        2606,
        3,
        426,
        213,
        0,
        2605,
        2604,
        1,
        0,
        0,
        0,
        2605,
        2606,
        1,
        0,
        0,
        0,
        2606,
        2607,
        1,
        0,
        0,
        0,
        2607,
        2609,
        5,
        76,
        0,
        0,
        2608,
        2593,
        1,
        0,
        0,
        0,
        2608,
        2594,
        1,
        0,
        0,
        0,
        2608,
        2598,
        1,
        0,
        0,
        0,
        2608,
        2603,
        1,
        0,
        0,
        0,
        2609,
        435,
        1,
        0,
        0,
        0,
        2610,
        2617,
        3,
        438,
        219,
        0,
        2611,
        2617,
        5,
        52,
        0,
        0,
        2612,
        2613,
        5,
        68,
        0,
        0,
        2613,
        2614,
        3,
        436,
        218,
        0,
        2614,
        2615,
        5,
        69,
        0,
        0,
        2615,
        2617,
        1,
        0,
        0,
        0,
        2616,
        2610,
        1,
        0,
        0,
        0,
        2616,
        2611,
        1,
        0,
        0,
        0,
        2616,
        2612,
        1,
        0,
        0,
        0,
        2617,
        437,
        1,
        0,
        0,
        0,
        2618,
        2619,
        3,
        440,
        220,
        0,
        2619,
        2620,
        5,
        64,
        0,
        0,
        2620,
        2621,
        5,
        52,
        0,
        0,
        2621,
        2628,
        1,
        0,
        0,
        0,
        2622,
        2623,
        3,
        440,
        220,
        0,
        2623,
        2624,
        5,
        75,
        0,
        0,
        2624,
        2625,
        3,
        338,
        169,
        0,
        2625,
        2626,
        5,
        76,
        0,
        0,
        2626,
        2628,
        1,
        0,
        0,
        0,
        2627,
        2618,
        1,
        0,
        0,
        0,
        2627,
        2622,
        1,
        0,
        0,
        0,
        2628,
        439,
        1,
        0,
        0,
        0,
        2629,
        2630,
        6,
        220,
        -1,
        0,
        2630,
        2631,
        3,
        342,
        171,
        0,
        2631,
        2650,
        1,
        0,
        0,
        0,
        2632,
        2633,
        10,
        5,
        0,
        0,
        2633,
        2634,
        5,
        64,
        0,
        0,
        2634,
        2649,
        5,
        52,
        0,
        0,
        2635,
        2636,
        10,
        4,
        0,
        0,
        2636,
        2637,
        5,
        75,
        0,
        0,
        2637,
        2638,
        3,
        338,
        169,
        0,
        2638,
        2639,
        5,
        76,
        0,
        0,
        2639,
        2649,
        1,
        0,
        0,
        0,
        2640,
        2641,
        10,
        3,
        0,
        0,
        2641,
        2649,
        3,
        406,
        203,
        0,
        2642,
        2643,
        10,
        2,
        0,
        0,
        2643,
        2645,
        5,
        68,
        0,
        0,
        2644,
        2646,
        3,
        410,
        205,
        0,
        2645,
        2644,
        1,
        0,
        0,
        0,
        2645,
        2646,
        1,
        0,
        0,
        0,
        2646,
        2647,
        1,
        0,
        0,
        0,
        2647,
        2649,
        5,
        69,
        0,
        0,
        2648,
        2632,
        1,
        0,
        0,
        0,
        2648,
        2635,
        1,
        0,
        0,
        0,
        2648,
        2640,
        1,
        0,
        0,
        0,
        2648,
        2642,
        1,
        0,
        0,
        0,
        2649,
        2652,
        1,
        0,
        0,
        0,
        2650,
        2648,
        1,
        0,
        0,
        0,
        2650,
        2651,
        1,
        0,
        0,
        0,
        2651,
        441,
        1,
        0,
        0,
        0,
        2652,
        2650,
        1,
        0,
        0,
        0,
        2653,
        2658,
        3,
        444,
        222,
        0,
        2654,
        2655,
        5,
        70,
        0,
        0,
        2655,
        2657,
        3,
        444,
        222,
        0,
        2656,
        2654,
        1,
        0,
        0,
        0,
        2657,
        2660,
        1,
        0,
        0,
        0,
        2658,
        2656,
        1,
        0,
        0,
        0,
        2658,
        2659,
        1,
        0,
        0,
        0,
        2659,
        2662,
        1,
        0,
        0,
        0,
        2660,
        2658,
        1,
        0,
        0,
        0,
        2661,
        2663,
        5,
        70,
        0,
        0,
        2662,
        2661,
        1,
        0,
        0,
        0,
        2662,
        2663,
        1,
        0,
        0,
        0,
        2663,
        443,
        1,
        0,
        0,
        0,
        2664,
        2665,
        3,
        440,
        220,
        0,
        2665,
        2666,
        5,
        64,
        0,
        0,
        2666,
        2667,
        5,
        52,
        0,
        0,
        2667,
        2675,
        1,
        0,
        0,
        0,
        2668,
        2669,
        3,
        440,
        220,
        0,
        2669,
        2670,
        5,
        75,
        0,
        0,
        2670,
        2671,
        3,
        338,
        169,
        0,
        2671,
        2672,
        5,
        76,
        0,
        0,
        2672,
        2675,
        1,
        0,
        0,
        0,
        2673,
        2675,
        3,
        446,
        223,
        0,
        2674,
        2664,
        1,
        0,
        0,
        0,
        2674,
        2668,
        1,
        0,
        0,
        0,
        2674,
        2673,
        1,
        0,
        0,
        0,
        2675,
        445,
        1,
        0,
        0,
        0,
        2676,
        2688,
        5,
        52,
        0,
        0,
        2677,
        2679,
        5,
        68,
        0,
        0,
        2678,
        2680,
        3,
        442,
        221,
        0,
        2679,
        2678,
        1,
        0,
        0,
        0,
        2679,
        2680,
        1,
        0,
        0,
        0,
        2680,
        2681,
        1,
        0,
        0,
        0,
        2681,
        2688,
        5,
        69,
        0,
        0,
        2682,
        2684,
        5,
        75,
        0,
        0,
        2683,
        2685,
        3,
        442,
        221,
        0,
        2684,
        2683,
        1,
        0,
        0,
        0,
        2684,
        2685,
        1,
        0,
        0,
        0,
        2685,
        2686,
        1,
        0,
        0,
        0,
        2686,
        2688,
        5,
        76,
        0,
        0,
        2687,
        2676,
        1,
        0,
        0,
        0,
        2687,
        2677,
        1,
        0,
        0,
        0,
        2687,
        2682,
        1,
        0,
        0,
        0,
        2688,
        447,
        1,
        0,
        0,
        0,
        2689,
        2694,
        3,
        272,
        136,
        0,
        2690,
        2691,
        5,
        70,
        0,
        0,
        2691,
        2693,
        3,
        272,
        136,
        0,
        2692,
        2690,
        1,
        0,
        0,
        0,
        2693,
        2696,
        1,
        0,
        0,
        0,
        2694,
        2692,
        1,
        0,
        0,
        0,
        2694,
        2695,
        1,
        0,
        0,
        0,
        2695,
        2697,
        1,
        0,
        0,
        0,
        2696,
        2694,
        1,
        0,
        0,
        0,
        2697,
        2698,
        5,
        70,
        0,
        0,
        2698,
        2699,
        5,
        67,
        0,
        0,
        2699,
        2700,
        3,
        272,
        136,
        0,
        2700,
        2701,
        5,
        70,
        0,
        0,
        2701,
        2702,
        5,
        73,
        0,
        0,
        2702,
        2703,
        3,
        272,
        136,
        0,
        2703,
        2747,
        1,
        0,
        0,
        0,
        2704,
        2709,
        3,
        272,
        136,
        0,
        2705,
        2706,
        5,
        70,
        0,
        0,
        2706,
        2708,
        3,
        272,
        136,
        0,
        2707,
        2705,
        1,
        0,
        0,
        0,
        2708,
        2711,
        1,
        0,
        0,
        0,
        2709,
        2707,
        1,
        0,
        0,
        0,
        2709,
        2710,
        1,
        0,
        0,
        0,
        2710,
        2712,
        1,
        0,
        0,
        0,
        2711,
        2709,
        1,
        0,
        0,
        0,
        2712,
        2713,
        5,
        70,
        0,
        0,
        2713,
        2714,
        5,
        67,
        0,
        0,
        2714,
        2715,
        3,
        272,
        136,
        0,
        2715,
        2747,
        1,
        0,
        0,
        0,
        2716,
        2721,
        3,
        272,
        136,
        0,
        2717,
        2718,
        5,
        70,
        0,
        0,
        2718,
        2720,
        3,
        272,
        136,
        0,
        2719,
        2717,
        1,
        0,
        0,
        0,
        2720,
        2723,
        1,
        0,
        0,
        0,
        2721,
        2719,
        1,
        0,
        0,
        0,
        2721,
        2722,
        1,
        0,
        0,
        0,
        2722,
        2724,
        1,
        0,
        0,
        0,
        2723,
        2721,
        1,
        0,
        0,
        0,
        2724,
        2725,
        5,
        70,
        0,
        0,
        2725,
        2726,
        5,
        73,
        0,
        0,
        2726,
        2727,
        3,
        272,
        136,
        0,
        2727,
        2747,
        1,
        0,
        0,
        0,
        2728,
        2729,
        5,
        67,
        0,
        0,
        2729,
        2730,
        3,
        272,
        136,
        0,
        2730,
        2731,
        5,
        70,
        0,
        0,
        2731,
        2732,
        5,
        73,
        0,
        0,
        2732,
        2733,
        3,
        272,
        136,
        0,
        2733,
        2747,
        1,
        0,
        0,
        0,
        2734,
        2735,
        5,
        67,
        0,
        0,
        2735,
        2747,
        3,
        272,
        136,
        0,
        2736,
        2737,
        5,
        73,
        0,
        0,
        2737,
        2747,
        3,
        272,
        136,
        0,
        2738,
        2743,
        3,
        272,
        136,
        0,
        2739,
        2740,
        5,
        70,
        0,
        0,
        2740,
        2742,
        3,
        272,
        136,
        0,
        2741,
        2739,
        1,
        0,
        0,
        0,
        2742,
        2745,
        1,
        0,
        0,
        0,
        2743,
        2741,
        1,
        0,
        0,
        0,
        2743,
        2744,
        1,
        0,
        0,
        0,
        2744,
        2747,
        1,
        0,
        0,
        0,
        2745,
        2743,
        1,
        0,
        0,
        0,
        2746,
        2689,
        1,
        0,
        0,
        0,
        2746,
        2704,
        1,
        0,
        0,
        0,
        2746,
        2716,
        1,
        0,
        0,
        0,
        2746,
        2728,
        1,
        0,
        0,
        0,
        2746,
        2734,
        1,
        0,
        0,
        0,
        2746,
        2736,
        1,
        0,
        0,
        0,
        2746,
        2738,
        1,
        0,
        0,
        0,
        2747,
        449,
        1,
        0,
        0,
        0,
        2748,
        2749,
        5,
        114,
        0,
        0,
        2749,
        451,
        1,
        0,
        0,
        0,
        344,
        458,
        465,
        470,
        476,
        483,
        492,
        502,
        506,
        513,
        520,
        528,
        547,
        551,
        555,
        560,
        572,
        577,
        596,
        599,
        601,
        606,
        613,
        620,
        627,
        633,
        639,
        647,
        655,
        660,
        666,
        684,
        689,
        695,
        703,
        709,
        715,
        723,
        729,
        735,
        744,
        749,
        764,
        771,
        782,
        784,
        798,
        805,
        812,
        816,
        822,
        829,
        833,
        837,
        841,
        844,
        848,
        852,
        854,
        858,
        863,
        870,
        874,
        877,
        885,
        889,
        893,
        901,
        905,
        909,
        911,
        915,
        922,
        929,
        933,
        938,
        943,
        947,
        963,
        973,
        980,
        987,
        993,
        1000,
        1004,
        1010,
        1012,
        1016,
        1022,
        1028,
        1031,
        1039,
        1048,
        1060,
        1064,
        1073,
        1084,
        1088,
        1093,
        1099,
        1106,
        1112,
        1119,
        1125,
        1135,
        1144,
        1152,
        1155,
        1162,
        1166,
        1169,
        1175,
        1180,
        1185,
        1189,
        1194,
        1198,
        1208,
        1214,
        1218,
        1224,
        1228,
        1233,
        1238,
        1242,
        1247,
        1250,
        1253,
        1258,
        1262,
        1267,
        1273,
        1277,
        1284,
        1288,
        1295,
        1299,
        1306,
        1309,
        1312,
        1321,
        1327,
        1336,
        1340,
        1346,
        1348,
        1352,
        1377,
        1379,
        1392,
        1394,
        1405,
        1414,
        1424,
        1426,
        1435,
        1439,
        1451,
        1465,
        1469,
        1482,
        1488,
        1495,
        1508,
        1511,
        1514,
        1522,
        1525,
        1528,
        1530,
        1536,
        1544,
        1551,
        1568,
        1575,
        1578,
        1583,
        1593,
        1597,
        1608,
        1619,
        1627,
        1635,
        1645,
        1650,
        1655,
        1681,
        1690,
        1695,
        1698,
        1703,
        1710,
        1714,
        1718,
        1724,
        1731,
        1740,
        1747,
        1751,
        1758,
        1763,
        1779,
        1787,
        1797,
        1801,
        1808,
        1816,
        1826,
        1840,
        1844,
        1848,
        1854,
        1864,
        1868,
        1878,
        1885,
        1887,
        1894,
        1898,
        1903,
        1910,
        1914,
        1919,
        1927,
        1934,
        1942,
        1948,
        1954,
        1967,
        2009,
        2020,
        2031,
        2043,
        2045,
        2057,
        2059,
        2080,
        2082,
        2092,
        2099,
        2104,
        2117,
        2125,
        2127,
        2132,
        2137,
        2141,
        2145,
        2148,
        2152,
        2156,
        2158,
        2161,
        2173,
        2177,
        2183,
        2186,
        2191,
        2197,
        2208,
        2214,
        2218,
        2224,
        2228,
        2233,
        2238,
        2242,
        2247,
        2250,
        2253,
        2258,
        2262,
        2267,
        2273,
        2277,
        2284,
        2288,
        2295,
        2298,
        2301,
        2308,
        2313,
        2317,
        2320,
        2326,
        2331,
        2334,
        2337,
        2340,
        2347,
        2353,
        2358,
        2364,
        2373,
        2375,
        2379,
        2388,
        2398,
        2407,
        2411,
        2416,
        2425,
        2428,
        2438,
        2454,
        2466,
        2473,
        2478,
        2481,
        2486,
        2493,
        2502,
        2510,
        2518,
        2521,
        2530,
        2537,
        2544,
        2548,
        2555,
        2559,
        2566,
        2569,
        2574,
        2579,
        2591,
        2600,
        2605,
        2608,
        2616,
        2627,
        2645,
        2648,
        2650,
        2658,
        2662,
        2674,
        2679,
        2684,
        2687,
        2694,
        2709,
        2721,
        2743,
        2746,
    ]


class FandangoParser(Parser):

    grammarFileName = "FandangoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'<py>'",
        "'</py>'",
        "<INVALID>",
        "'and'",
        "'as'",
        "'assert'",
        "'async'",
        "'await'",
        "'break'",
        "'case'",
        "'class'",
        "'continue'",
        "'def'",
        "'del'",
        "'elif'",
        "'else'",
        "'except'",
        "'False'",
        "'finally'",
        "'for'",
        "'from'",
        "'global'",
        "'if'",
        "'import'",
        "'in'",
        "'is'",
        "'lambda'",
        "'match'",
        "'None'",
        "'nonlocal'",
        "'not'",
        "'or'",
        "'pass'",
        "'raise'",
        "'return'",
        "'True'",
        "'try'",
        "'type'",
        "'_'",
        "'while'",
        "'where'",
        "'with'",
        "'yield'",
        "'forall'",
        "'exists'",
        "'fitness'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'::='",
        "'?'",
        "'\\'",
        "'.'",
        "'..'",
        "'...'",
        "'*'",
        "'('",
        "')'",
        "','",
        "':'",
        "';'",
        "'**'",
        "'='",
        "'['",
        "']'",
        "'|'",
        "'^'",
        "'&'",
        "'<<'",
        "'>>'",
        "'+'",
        "'-'",
        "'/'",
        "'%'",
        "'//'",
        "'~'",
        "'{'",
        "'}'",
        "'<'",
        "'>'",
        "'=='",
        "'>='",
        "'<='",
        "'<>'",
        "'!='",
        "'@'",
        "'->'",
        "'+='",
        "'-='",
        "'*='",
        "'@='",
        "'/='",
        "'%='",
        "'&='",
        "'|='",
        "'^='",
        "'<<='",
        "'>>='",
        "'**='",
        "'//='",
        "':='",
        "'!'",
    ]

    symbolicNames = [
        "<INVALID>",
        "INDENT",
        "DEDENT",
        "STRING",
        "NUMBER",
        "INTEGER",
        "PYTHON_START",
        "PYTHON_END",
        "NONTERMINAL",
        "AND",
        "AS",
        "ASSERT",
        "ASYNC",
        "AWAIT",
        "BREAK",
        "CASE",
        "CLASS",
        "CONTINUE",
        "DEF",
        "DEL",
        "ELIF",
        "ELSE",
        "EXCEPT",
        "FALSE",
        "FINALLY",
        "FOR",
        "FROM",
        "GLOBAL",
        "IF",
        "IMPORT",
        "IN",
        "IS",
        "LAMBDA",
        "MATCH",
        "NONE",
        "NONLOCAL",
        "NOT",
        "OR",
        "PASS",
        "RAISE",
        "RETURN",
        "TRUE",
        "TRY",
        "TYPE",
        "UNDERSCORE",
        "WHILE",
        "WHERE",
        "WITH",
        "YIELD",
        "FORALL",
        "EXISTS",
        "FITNESS",
        "NAME",
        "STRING_LITERAL",
        "BYTES_LITERAL",
        "DECIMAL_INTEGER",
        "OCT_INTEGER",
        "HEX_INTEGER",
        "BIN_INTEGER",
        "FLOAT_NUMBER",
        "IMAG_NUMBER",
        "GRAMMAR_ASSIGN",
        "QUESTION",
        "BACKSLASH",
        "DOT",
        "DOTDOT",
        "ELLIPSIS",
        "STAR",
        "OPEN_PAREN",
        "CLOSE_PAREN",
        "COMMA",
        "COLON",
        "SEMI_COLON",
        "POWER",
        "ASSIGN",
        "OPEN_BRACK",
        "CLOSE_BRACK",
        "OR_OP",
        "XOR",
        "AND_OP",
        "LEFT_SHIFT",
        "RIGHT_SHIFT",
        "ADD",
        "MINUS",
        "DIV",
        "MOD",
        "IDIV",
        "NOT_OP",
        "OPEN_BRACE",
        "CLOSE_BRACE",
        "LESS_THAN",
        "GREATER_THAN",
        "EQUALS",
        "GT_EQ",
        "LT_EQ",
        "NOT_EQ_1",
        "NOT_EQ_2",
        "AT",
        "ARROW",
        "ADD_ASSIGN",
        "SUB_ASSIGN",
        "MULT_ASSIGN",
        "AT_ASSIGN",
        "DIV_ASSIGN",
        "MOD_ASSIGN",
        "AND_ASSIGN",
        "OR_ASSIGN",
        "XOR_ASSIGN",
        "LEFT_SHIFT_ASSIGN",
        "RIGHT_SHIFT_ASSIGN",
        "POWER_ASSIGN",
        "IDIV_ASSIGN",
        "EXPR_ASSIGN",
        "EXCL",
        "NEWLINE",
        "SKIP_",
        "UNKNOWN_CHAR",
        "FSTRING_MIDDLE",
        "FSTRING_START",
        "FSTRING_END",
    ]

    RULE_fandango = 0
    RULE_program = 1
    RULE_statement = 2
    RULE_production = 3
    RULE_alternative = 4
    RULE_concatenation = 5
    RULE_operator = 6
    RULE_kleene = 7
    RULE_plus = 8
    RULE_option = 9
    RULE_repeat = 10
    RULE_symbol = 11
    RULE_generator_call = 12
    RULE_char_set = 13
    RULE_constraint = 14
    RULE_minOrMax = 15
    RULE_implies = 16
    RULE_quantifier = 17
    RULE_formula_disjunction = 18
    RULE_formula_conjunction = 19
    RULE_formula_atom = 20
    RULE_formula_comparison = 21
    RULE_expr = 22
    RULE_selector_length = 23
    RULE_selector = 24
    RULE_selection = 25
    RULE_base_selection = 26
    RULE_rs_pairs = 27
    RULE_rs_pair = 28
    RULE_rs_slices = 29
    RULE_rs_slice = 30
    RULE_python = 31
    RULE_python_tag = 32
    RULE_python_file = 33
    RULE_interactive = 34
    RULE_eval = 35
    RULE_func_type = 36
    RULE_statements = 37
    RULE_stmt = 38
    RULE_statement_newline = 39
    RULE_simple_stmts = 40
    RULE_simple_stmt = 41
    RULE_compound_stmt = 42
    RULE_assignment = 43
    RULE_annotated_rhs = 44
    RULE_augassign = 45
    RULE_return_stmt = 46
    RULE_raise_stmt = 47
    RULE_global_stmt = 48
    RULE_nonlocal_stmt = 49
    RULE_del_stmt = 50
    RULE_yield_stmt = 51
    RULE_assert_stmt = 52
    RULE_import_stmt = 53
    RULE_import_name = 54
    RULE_import_from = 55
    RULE_import_from_targets = 56
    RULE_import_from_as_names = 57
    RULE_import_from_as_name = 58
    RULE_dotted_as_names = 59
    RULE_dotted_as_name = 60
    RULE_dotted_name = 61
    RULE_block = 62
    RULE_decorators = 63
    RULE_class_def = 64
    RULE_class_def_raw = 65
    RULE_function_def = 66
    RULE_function_def_raw = 67
    RULE_params = 68
    RULE_parameters = 69
    RULE_slash_no_default = 70
    RULE_slash_with_default = 71
    RULE_star_etc = 72
    RULE_kwds = 73
    RULE_param_no_default = 74
    RULE_param_no_default_star_annotation = 75
    RULE_param_with_default = 76
    RULE_param_maybe_default = 77
    RULE_param = 78
    RULE_param_star_annotation = 79
    RULE_annotation = 80
    RULE_star_annotation = 81
    RULE_default = 82
    RULE_if_stmt = 83
    RULE_elif_stmt = 84
    RULE_else_block = 85
    RULE_while_stmt = 86
    RULE_for_stmt = 87
    RULE_with_stmt = 88
    RULE_with_item = 89
    RULE_try_stmt = 90
    RULE_except_block = 91
    RULE_except_star_block = 92
    RULE_finally_block = 93
    RULE_match_stmt = 94
    RULE_subject_expr = 95
    RULE_case_block = 96
    RULE_guard = 97
    RULE_patterns = 98
    RULE_pattern = 99
    RULE_as_pattern = 100
    RULE_or_pattern = 101
    RULE_closed_pattern = 102
    RULE_literal_pattern = 103
    RULE_literal_expr = 104
    RULE_complex_number = 105
    RULE_signed_number = 106
    RULE_signed_real_number = 107
    RULE_real_number = 108
    RULE_imaginary_number = 109
    RULE_capture_pattern = 110
    RULE_pattern_capture_target = 111
    RULE_wildcard_pattern = 112
    RULE_value_pattern = 113
    RULE_attr = 114
    RULE_name_or_attr = 115
    RULE_group_pattern = 116
    RULE_sequence_pattern = 117
    RULE_open_sequence_pattern = 118
    RULE_maybe_sequence_pattern = 119
    RULE_maybe_star_pattern = 120
    RULE_star_pattern = 121
    RULE_mapping_pattern = 122
    RULE_items_pattern = 123
    RULE_key_value_pattern = 124
    RULE_double_star_pattern = 125
    RULE_class_pattern = 126
    RULE_positional_patterns = 127
    RULE_keyword_patterns = 128
    RULE_keyword_pattern = 129
    RULE_type_alias = 130
    RULE_type_params = 131
    RULE_type_param_seq = 132
    RULE_type_param = 133
    RULE_type_param_bound = 134
    RULE_expressions = 135
    RULE_expression = 136
    RULE_yield_expr = 137
    RULE_star_expressions = 138
    RULE_star_expression = 139
    RULE_star_named_expressions = 140
    RULE_star_named_expression = 141
    RULE_assignment_expression = 142
    RULE_named_expression = 143
    RULE_disjunction = 144
    RULE_conjunction = 145
    RULE_inversion = 146
    RULE_comparison = 147
    RULE_compare_op_bitwise_or_pair = 148
    RULE_eq_bitwise_or = 149
    RULE_noteq_bitwise_or = 150
    RULE_lte_bitwise_or = 151
    RULE_lt_bitwise_or = 152
    RULE_gte_bitwise_or = 153
    RULE_gt_bitwise_or = 154
    RULE_notin_bitwise_or = 155
    RULE_in_bitwise_or = 156
    RULE_isnot_bitwise_or = 157
    RULE_is_bitwise_or = 158
    RULE_bitwise_or = 159
    RULE_bitwise_xor = 160
    RULE_bitwise_and = 161
    RULE_shift_expr = 162
    RULE_sum = 163
    RULE_term = 164
    RULE_factor = 165
    RULE_power = 166
    RULE_await_primary = 167
    RULE_primary = 168
    RULE_slices = 169
    RULE_slice = 170
    RULE_atom = 171
    RULE_group = 172
    RULE_lambdef = 173
    RULE_lambda_params = 174
    RULE_lambda_parameters = 175
    RULE_lambda_slash_no_default = 176
    RULE_lambda_slash_with_default = 177
    RULE_lambda_star_etc = 178
    RULE_lambda_kwds = 179
    RULE_lambda_param_no_default = 180
    RULE_lambda_param_with_default = 181
    RULE_lambda_param_maybe_default = 182
    RULE_lambda_param = 183
    RULE_fstring_middle = 184
    RULE_fstring_replacement_field = 185
    RULE_fstring_conversion = 186
    RULE_fstring_full_format_spec = 187
    RULE_fstring_format_spec = 188
    RULE_fstring = 189
    RULE_string = 190
    RULE_strings = 191
    RULE_list = 192
    RULE_tuple = 193
    RULE_set = 194
    RULE_dict = 195
    RULE_double_starred_kvpairs = 196
    RULE_double_starred_kvpair = 197
    RULE_kvpair = 198
    RULE_for_if_clauses = 199
    RULE_for_if_clause = 200
    RULE_listcomp = 201
    RULE_setcomp = 202
    RULE_genexp = 203
    RULE_dictcomp = 204
    RULE_arguments = 205
    RULE_args = 206
    RULE_arg = 207
    RULE_kwargs = 208
    RULE_starred_expression = 209
    RULE_kwarg_or_starred = 210
    RULE_kwarg_or_double_starred = 211
    RULE_star_targets = 212
    RULE_star_targets_list_seq = 213
    RULE_star_targets_tuple_seq = 214
    RULE_star_target = 215
    RULE_target_with_star_atom = 216
    RULE_star_atom = 217
    RULE_single_target = 218
    RULE_single_subscript_attribute_target = 219
    RULE_t_primary = 220
    RULE_del_targets = 221
    RULE_del_target = 222
    RULE_del_t_atom = 223
    RULE_type_expressions = 224
    RULE_func_type_comment = 225

    ruleNames = [
        "fandango",
        "program",
        "statement",
        "production",
        "alternative",
        "concatenation",
        "operator",
        "kleene",
        "plus",
        "option",
        "repeat",
        "symbol",
        "generator_call",
        "char_set",
        "constraint",
        "minOrMax",
        "implies",
        "quantifier",
        "formula_disjunction",
        "formula_conjunction",
        "formula_atom",
        "formula_comparison",
        "expr",
        "selector_length",
        "selector",
        "selection",
        "base_selection",
        "rs_pairs",
        "rs_pair",
        "rs_slices",
        "rs_slice",
        "python",
        "python_tag",
        "python_file",
        "interactive",
        "eval",
        "func_type",
        "statements",
        "stmt",
        "statement_newline",
        "simple_stmts",
        "simple_stmt",
        "compound_stmt",
        "assignment",
        "annotated_rhs",
        "augassign",
        "return_stmt",
        "raise_stmt",
        "global_stmt",
        "nonlocal_stmt",
        "del_stmt",
        "yield_stmt",
        "assert_stmt",
        "import_stmt",
        "import_name",
        "import_from",
        "import_from_targets",
        "import_from_as_names",
        "import_from_as_name",
        "dotted_as_names",
        "dotted_as_name",
        "dotted_name",
        "block",
        "decorators",
        "class_def",
        "class_def_raw",
        "function_def",
        "function_def_raw",
        "params",
        "parameters",
        "slash_no_default",
        "slash_with_default",
        "star_etc",
        "kwds",
        "param_no_default",
        "param_no_default_star_annotation",
        "param_with_default",
        "param_maybe_default",
        "param",
        "param_star_annotation",
        "annotation",
        "star_annotation",
        "default",
        "if_stmt",
        "elif_stmt",
        "else_block",
        "while_stmt",
        "for_stmt",
        "with_stmt",
        "with_item",
        "try_stmt",
        "except_block",
        "except_star_block",
        "finally_block",
        "match_stmt",
        "subject_expr",
        "case_block",
        "guard",
        "patterns",
        "pattern",
        "as_pattern",
        "or_pattern",
        "closed_pattern",
        "literal_pattern",
        "literal_expr",
        "complex_number",
        "signed_number",
        "signed_real_number",
        "real_number",
        "imaginary_number",
        "capture_pattern",
        "pattern_capture_target",
        "wildcard_pattern",
        "value_pattern",
        "attr",
        "name_or_attr",
        "group_pattern",
        "sequence_pattern",
        "open_sequence_pattern",
        "maybe_sequence_pattern",
        "maybe_star_pattern",
        "star_pattern",
        "mapping_pattern",
        "items_pattern",
        "key_value_pattern",
        "double_star_pattern",
        "class_pattern",
        "positional_patterns",
        "keyword_patterns",
        "keyword_pattern",
        "type_alias",
        "type_params",
        "type_param_seq",
        "type_param",
        "type_param_bound",
        "expressions",
        "expression",
        "yield_expr",
        "star_expressions",
        "star_expression",
        "star_named_expressions",
        "star_named_expression",
        "assignment_expression",
        "named_expression",
        "disjunction",
        "conjunction",
        "inversion",
        "comparison",
        "compare_op_bitwise_or_pair",
        "eq_bitwise_or",
        "noteq_bitwise_or",
        "lte_bitwise_or",
        "lt_bitwise_or",
        "gte_bitwise_or",
        "gt_bitwise_or",
        "notin_bitwise_or",
        "in_bitwise_or",
        "isnot_bitwise_or",
        "is_bitwise_or",
        "bitwise_or",
        "bitwise_xor",
        "bitwise_and",
        "shift_expr",
        "sum",
        "term",
        "factor",
        "power",
        "await_primary",
        "primary",
        "slices",
        "slice",
        "atom",
        "group",
        "lambdef",
        "lambda_params",
        "lambda_parameters",
        "lambda_slash_no_default",
        "lambda_slash_with_default",
        "lambda_star_etc",
        "lambda_kwds",
        "lambda_param_no_default",
        "lambda_param_with_default",
        "lambda_param_maybe_default",
        "lambda_param",
        "fstring_middle",
        "fstring_replacement_field",
        "fstring_conversion",
        "fstring_full_format_spec",
        "fstring_format_spec",
        "fstring",
        "string",
        "strings",
        "list",
        "tuple",
        "set",
        "dict",
        "double_starred_kvpairs",
        "double_starred_kvpair",
        "kvpair",
        "for_if_clauses",
        "for_if_clause",
        "listcomp",
        "setcomp",
        "genexp",
        "dictcomp",
        "arguments",
        "args",
        "arg",
        "kwargs",
        "starred_expression",
        "kwarg_or_starred",
        "kwarg_or_double_starred",
        "star_targets",
        "star_targets_list_seq",
        "star_targets_tuple_seq",
        "star_target",
        "target_with_star_atom",
        "star_atom",
        "single_target",
        "single_subscript_attribute_target",
        "t_primary",
        "del_targets",
        "del_target",
        "del_t_atom",
        "type_expressions",
        "func_type_comment",
    ]

    EOF = Token.EOF
    INDENT = 1
    DEDENT = 2
    STRING = 3
    NUMBER = 4
    INTEGER = 5
    PYTHON_START = 6
    PYTHON_END = 7
    NONTERMINAL = 8
    AND = 9
    AS = 10
    ASSERT = 11
    ASYNC = 12
    AWAIT = 13
    BREAK = 14
    CASE = 15
    CLASS = 16
    CONTINUE = 17
    DEF = 18
    DEL = 19
    ELIF = 20
    ELSE = 21
    EXCEPT = 22
    FALSE = 23
    FINALLY = 24
    FOR = 25
    FROM = 26
    GLOBAL = 27
    IF = 28
    IMPORT = 29
    IN = 30
    IS = 31
    LAMBDA = 32
    MATCH = 33
    NONE = 34
    NONLOCAL = 35
    NOT = 36
    OR = 37
    PASS = 38
    RAISE = 39
    RETURN = 40
    TRUE = 41
    TRY = 42
    TYPE = 43
    UNDERSCORE = 44
    WHILE = 45
    WHERE = 46
    WITH = 47
    YIELD = 48
    FORALL = 49
    EXISTS = 50
    FITNESS = 51
    NAME = 52
    STRING_LITERAL = 53
    BYTES_LITERAL = 54
    DECIMAL_INTEGER = 55
    OCT_INTEGER = 56
    HEX_INTEGER = 57
    BIN_INTEGER = 58
    FLOAT_NUMBER = 59
    IMAG_NUMBER = 60
    GRAMMAR_ASSIGN = 61
    QUESTION = 62
    BACKSLASH = 63
    DOT = 64
    DOTDOT = 65
    ELLIPSIS = 66
    STAR = 67
    OPEN_PAREN = 68
    CLOSE_PAREN = 69
    COMMA = 70
    COLON = 71
    SEMI_COLON = 72
    POWER = 73
    ASSIGN = 74
    OPEN_BRACK = 75
    CLOSE_BRACK = 76
    OR_OP = 77
    XOR = 78
    AND_OP = 79
    LEFT_SHIFT = 80
    RIGHT_SHIFT = 81
    ADD = 82
    MINUS = 83
    DIV = 84
    MOD = 85
    IDIV = 86
    NOT_OP = 87
    OPEN_BRACE = 88
    CLOSE_BRACE = 89
    LESS_THAN = 90
    GREATER_THAN = 91
    EQUALS = 92
    GT_EQ = 93
    LT_EQ = 94
    NOT_EQ_1 = 95
    NOT_EQ_2 = 96
    AT = 97
    ARROW = 98
    ADD_ASSIGN = 99
    SUB_ASSIGN = 100
    MULT_ASSIGN = 101
    AT_ASSIGN = 102
    DIV_ASSIGN = 103
    MOD_ASSIGN = 104
    AND_ASSIGN = 105
    OR_ASSIGN = 106
    XOR_ASSIGN = 107
    LEFT_SHIFT_ASSIGN = 108
    RIGHT_SHIFT_ASSIGN = 109
    POWER_ASSIGN = 110
    IDIV_ASSIGN = 111
    EXPR_ASSIGN = 112
    EXCL = 113
    NEWLINE = 114
    SKIP_ = 115
    UNKNOWN_CHAR = 116
    FSTRING_MIDDLE = 117
    FSTRING_START = 118
    FSTRING_END = 119

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class FandangoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program(self):
            return self.getTypedRuleContext(FandangoParser.ProgramContext, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fandango

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFandango"):
                listener.enterFandango(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFandango"):
                listener.exitFandango(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFandango"):
                return visitor.visitFandango(self)
            else:
                return visitor.visitChildren(self)

    def fandango(self):

        localctx = FandangoParser.FandangoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fandango)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.program()
            self.state = 453
            self.match(FandangoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StatementContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StatementContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_program

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProgram"):
                listener.enterProgram(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProgram"):
                listener.exitProgram(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProgram"):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)

    def program(self):

        localctx = FandangoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 455
                    self.match(FandangoParser.NEWLINE)
                self.state = 460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)

            self.state = 470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 461
                    self.statement()
                    self.state = 465
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 462
                            self.match(FandangoParser.NEWLINE)
                        self.state = 467
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)

                self.state = 472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def production(self):
            return self.getTypedRuleContext(FandangoParser.ProductionContext, 0)

        def constraint(self):
            return self.getTypedRuleContext(FandangoParser.ConstraintContext, 0)

        def python(self):
            return self.getTypedRuleContext(FandangoParser.PythonContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):

        localctx = FandangoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self.production()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 475
                self.python()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProductionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONTERMINAL(self):
            return self.getToken(FandangoParser.NONTERMINAL, 0)

        def GRAMMAR_ASSIGN(self):
            return self.getToken(FandangoParser.GRAMMAR_ASSIGN, 0)

        def alternative(self):
            return self.getTypedRuleContext(FandangoParser.AlternativeContext, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def EXPR_ASSIGN(self):
            return self.getToken(FandangoParser.EXPR_ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_production

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProduction"):
                listener.enterProduction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProduction"):
                listener.exitProduction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProduction"):
                return visitor.visitProduction(self)
            else:
                return visitor.visitChildren(self)

    def production(self):

        localctx = FandangoParser.ProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_production)
        self._la = 0  # Token type
        try:
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.match(FandangoParser.NONTERMINAL)
                self.state = 479
                self.match(FandangoParser.GRAMMAR_ASSIGN)
                self.state = 480
                self.alternative()
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 112:
                    self.state = 481
                    self.match(FandangoParser.EXPR_ASSIGN)
                    self.state = 482
                    self.expression()

                self.state = 485
                _la = self._input.LA(1)
                if not (_la == -1 or _la == 72 or _la == 114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.match(FandangoParser.NONTERMINAL)
                self.state = 488
                self.match(FandangoParser.GRAMMAR_ASSIGN)
                self.state = 489
                self.alternative()
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 74:
                    self.state = 490
                    self.match(FandangoParser.ASSIGN)
                    self.state = 491
                    self.expression()

                self.state = 494
                _la = self._input.LA(1)
                if not (_la == -1 or _la == 72 or _la == 114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.match(FandangoParser.NONTERMINAL)
                self.state = 497
                self.match(FandangoParser.GRAMMAR_ASSIGN)
                self.state = 498
                self.alternative()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 71:
                    self.state = 499
                    self.match(FandangoParser.COLON)
                    self.state = 500
                    self.match(FandangoParser.COLON)
                    self.state = 501
                    self.expression()

                self.state = 504
                _la = self._input.LA(1)
                if not (_la == -1 or _la == 72 or _la == 114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlternativeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ConcatenationContext, i)

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_alternative

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlternative"):
                listener.enterAlternative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlternative"):
                listener.exitAlternative(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAlternative"):
                return visitor.visitAlternative(self)
            else:
                return visitor.visitChildren(self)

    def alternative(self):

        localctx = FandangoParser.AlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alternative)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.concatenation()
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 77:
                self.state = 509
                self.match(FandangoParser.OR_OP)
                self.state = 510
                self.concatenation()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.OperatorContext)
            else:
                return self.getTypedRuleContext(FandangoParser.OperatorContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_concatenation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConcatenation"):
                listener.enterConcatenation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConcatenation"):
                listener.exitConcatenation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConcatenation"):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)

    def concatenation(self):

        localctx = FandangoParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_concatenation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.operator()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 517
                    self.operator()
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def kleene(self):
            return self.getTypedRuleContext(FandangoParser.KleeneContext, 0)

        def plus(self):
            return self.getTypedRuleContext(FandangoParser.PlusContext, 0)

        def option(self):
            return self.getTypedRuleContext(FandangoParser.OptionContext, 0)

        def repeat(self):
            return self.getTypedRuleContext(FandangoParser.RepeatContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOperator"):
                listener.enterOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOperator"):
                listener.exitOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOperator"):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)

    def operator(self):

        localctx = FandangoParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_operator)
        try:
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.kleene()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 525
                self.plus()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 526
                self.option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 527
                self.repeat()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KleeneContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kleene

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKleene"):
                listener.enterKleene(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKleene"):
                listener.exitKleene(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKleene"):
                return visitor.visitKleene(self)
            else:
                return visitor.visitChildren(self)

    def kleene(self):

        localctx = FandangoParser.KleeneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_kleene)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.symbol()
            self.state = 531
            self.match(FandangoParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_plus

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPlus"):
                listener.enterPlus(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPlus"):
                listener.exitPlus(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPlus"):
                return visitor.visitPlus(self)
            else:
                return visitor.visitChildren(self)

    def plus(self):

        localctx = FandangoParser.PlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_plus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.symbol()
            self.state = 534
            self.match(FandangoParser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def QUESTION(self):
            return self.getToken(FandangoParser.QUESTION, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_option

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOption"):
                listener.enterOption(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOption"):
                listener.exitOption(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOption"):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)

    def option(self):

        localctx = FandangoParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.symbol()
            self.state = 537
            self.match(FandangoParser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RepeatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_repeat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRepeat"):
                listener.enterRepeat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRepeat"):
                listener.exitRepeat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRepeat"):
                return visitor.visitRepeat(self)
            else:
                return visitor.visitChildren(self)

    def repeat(self):

        localctx = FandangoParser.RepeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_repeat)
        self._la = 0  # Token type
        try:
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.symbol()
                self.state = 540
                self.match(FandangoParser.OPEN_BRACE)

                self.state = 541
                self.expression()
                self.state = 542
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.symbol()
                self.state = 545
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599633861125) != 0
                ):
                    self.state = 546
                    self.expression()

                self.state = 549
                self.match(FandangoParser.COMMA)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599633861125) != 0
                ):
                    self.state = 550
                    self.expression()

                self.state = 553
                self.match(FandangoParser.CLOSE_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONTERMINAL(self):
            return self.getToken(FandangoParser.NONTERMINAL, 0)

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def generator_call(self):
            return self.getTypedRuleContext(FandangoParser.Generator_callContext, 0)

        def char_set(self):
            return self.getTypedRuleContext(FandangoParser.Char_setContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def alternative(self):
            return self.getTypedRuleContext(FandangoParser.AlternativeContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_symbol

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSymbol"):
                listener.enterSymbol(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSymbol"):
                listener.exitSymbol(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSymbol"):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)

    def symbol(self):

        localctx = FandangoParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_symbol)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 114:
                self.state = 557
                self.match(FandangoParser.NEWLINE)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.state = 563
                self.match(FandangoParser.NONTERMINAL)
                pass
            elif token in [3]:
                self.state = 564
                self.match(FandangoParser.STRING)
                pass
            elif token in [4]:
                self.state = 565
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [52]:
                self.state = 566
                self.generator_call(0)
                pass
            elif token in [75]:
                self.state = 567
                self.char_set()
                pass
            elif token in [68]:
                self.state = 568
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 569
                self.alternative()
                self.state = 570
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 577
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 574
                    self.match(FandangoParser.NEWLINE)
                self.state = 579
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generator_callContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def generator_call(self):
            return self.getTypedRuleContext(FandangoParser.Generator_callContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_generator_call

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGenerator_call"):
                listener.enterGenerator_call(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGenerator_call"):
                listener.exitGenerator_call(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenerator_call"):
                return visitor.visitGenerator_call(self)
            else:
                return visitor.visitChildren(self)

    def generator_call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Generator_callContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_generator_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(FandangoParser.NAME)
            self._ctx.stop = self._input.LT(-1)
            self.state = 601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 599
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 583
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 584
                        self.match(FandangoParser.DOT)
                        self.state = 585
                        self.match(FandangoParser.NAME)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 586
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 587
                        self.match(FandangoParser.OPEN_BRACK)
                        self.state = 588
                        self.slices()
                        self.state = 589
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 591
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 592
                        self.genexp()
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 593
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 594
                        self.match(FandangoParser.OPEN_PAREN)
                        self.state = 596
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 4505888853336344) != 0
                        ) or (
                            (((_la - 66)) & ~0x3F) == 0
                            and ((1 << (_la - 66)) & 4503599633861255) != 0
                        ):
                            self.state = 595
                            self.arguments()

                        self.state = 598
                        self.match(FandangoParser.CLOSE_PAREN)
                        pass

                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Char_setContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_char_set

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterChar_set"):
                listener.enterChar_set(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitChar_set"):
                listener.exitChar_set(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitChar_set"):
                return visitor.visitChar_set(self)
            else:
                return visitor.visitChildren(self)

    def char_set(self):

        localctx = FandangoParser.Char_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_char_set)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 78:
                self.state = 605
                self.match(FandangoParser.XOR)

            self.state = 608
            self.match(FandangoParser.STRING)
            self.state = 609
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(FandangoParser.WHERE, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def minOrMax(self):
            return self.getTypedRuleContext(FandangoParser.MinOrMaxContext, 0)

        def FITNESS(self):
            return self.getToken(FandangoParser.FITNESS, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraint"):
                listener.enterConstraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraint"):
                listener.exitConstraint(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraint"):
                return visitor.visitConstraint(self)
            else:
                return visitor.visitChildren(self)

    def constraint(self):

        localctx = FandangoParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_constraint)
        self._la = 0  # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.match(FandangoParser.WHERE)
                self.state = 613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
                if la_ == 1:
                    self.state = 612
                    self.minOrMax()

                self.state = 615
                self.implies()
                self.state = 616
                _la = self._input.LA(1)
                if not (_la == -1 or _la == 72 or _la == 114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.match(FandangoParser.WHERE)
                self.state = 620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
                if la_ == 1:
                    self.state = 619
                    self.minOrMax()

                self.state = 622
                self.match(FandangoParser.FITNESS)
                self.state = 623
                self.expr()
                self.state = 624
                _la = self._input.LA(1)
                if not (_la == -1 or _la == 72 or _la == 114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                if la_ == 1:
                    self.state = 626
                    self.minOrMax()

                self.state = 629
                self.implies()
                self.state = 630
                self.match(FandangoParser.SEMI_COLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 633
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 24, self._ctx)
                if la_ == 1:
                    self.state = 632
                    self.minOrMax()

                self.state = 635
                self.match(FandangoParser.FITNESS)
                self.state = 636
                self.expr()
                self.state = 637
                self.match(FandangoParser.SEMI_COLON)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MinOrMaxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_minOrMax

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMinOrMax"):
                listener.enterMinOrMax(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMinOrMax"):
                listener.exitMinOrMax(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMinOrMax"):
                return visitor.visitMinOrMax(self)
            else:
                return visitor.visitChildren(self)

    def minOrMax(self):

        localctx = FandangoParser.MinOrMaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_minOrMax)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            if not self._input.LT(1).text in ["min", "max"]:
                from antlr4.error.Errors import FailedPredicateException

                raise FailedPredicateException(
                    self, ' self._input.LT(1).text in ["min", "max"] '
                )
            self.state = 642
            self.match(FandangoParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImpliesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext, 0)

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_implies

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImplies"):
                listener.enterImplies(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImplies"):
                listener.exitImplies(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImplies"):
                return visitor.visitImplies(self)
            else:
                return visitor.visitChildren(self)

    def implies(self):

        localctx = FandangoParser.ImpliesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_implies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 644
                    self.match(FandangoParser.NEWLINE)
                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)

            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.state = 650
                self.quantifier()
                self.state = 651
                self.match(FandangoParser.ARROW)
                self.state = 652
                self.implies()
                pass

            elif la_ == 2:
                self.state = 654
                self.quantifier()
                pass

            self.state = 660
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 657
                    self.match(FandangoParser.NEWLINE)
                self.state = 662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(FandangoParser.FORALL, 0)

        def NONTERMINAL(self):
            return self.getToken(FandangoParser.NONTERMINAL, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext, 0)

        def EXISTS(self):
            return self.getToken(FandangoParser.EXISTS, 0)

        def formula_disjunction(self):
            return self.getTypedRuleContext(
                FandangoParser.Formula_disjunctionContext, 0
            )

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_quantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantifier"):
                listener.enterQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantifier"):
                listener.exitQuantifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQuantifier"):
                return visitor.visitQuantifier(self)
            else:
                return visitor.visitChildren(self)

    def quantifier(self):

        localctx = FandangoParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_quantifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 663
                    self.match(FandangoParser.NEWLINE)
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 669
                self.match(FandangoParser.FORALL)
                self.state = 670
                self.match(FandangoParser.NONTERMINAL)
                self.state = 671
                self.match(FandangoParser.IN)
                self.state = 672
                self.selector(0)
                self.state = 673
                self.match(FandangoParser.COLON)
                self.state = 674
                self.quantifier()
                pass
            elif token in [50]:
                self.state = 676
                self.match(FandangoParser.EXISTS)
                self.state = 677
                self.match(FandangoParser.NONTERMINAL)
                self.state = 678
                self.match(FandangoParser.IN)
                self.state = 679
                self.selector(0)
                self.state = 680
                self.match(FandangoParser.COLON)
                self.state = 681
                self.quantifier()
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                34,
                36,
                41,
                52,
                66,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                114,
                118,
            ]:
                self.state = 683
                self.formula_disjunction()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 686
                    self.match(FandangoParser.NEWLINE)
                self.state = 691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_disjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_conjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Formula_conjunctionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Formula_conjunctionContext, i
                )

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_disjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormula_disjunction"):
                listener.enterFormula_disjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormula_disjunction"):
                listener.exitFormula_disjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_disjunction"):
                return visitor.visitFormula_disjunction(self)
            else:
                return visitor.visitChildren(self)

    def formula_disjunction(self):

        localctx = FandangoParser.Formula_disjunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 36, self.RULE_formula_disjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 32, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 692
                    self.match(FandangoParser.NEWLINE)
                self.state = 697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 32, self._ctx)

            self.state = 698
            self.formula_conjunction()
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 37:
                self.state = 699
                self.match(FandangoParser.OR)
                self.state = 700
                self.formula_conjunction()
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 709
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 706
                    self.match(FandangoParser.NEWLINE)
                self.state = 711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_conjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_atom(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Formula_atomContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Formula_atomContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_conjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormula_conjunction"):
                listener.enterFormula_conjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormula_conjunction"):
                listener.exitFormula_conjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_conjunction"):
                return visitor.visitFormula_conjunction(self)
            else:
                return visitor.visitChildren(self)

    def formula_conjunction(self):

        localctx = FandangoParser.Formula_conjunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 38, self.RULE_formula_conjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 35, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 712
                    self.match(FandangoParser.NEWLINE)
                self.state = 717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 35, self._ctx)

            self.state = 718
            self.formula_atom()
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 9:
                self.state = 719
                self.match(FandangoParser.AND)
                self.state = 720
                self.formula_atom()
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 729
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 726
                    self.match(FandangoParser.NEWLINE)
                self.state = 731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_comparison(self):
            return self.getTypedRuleContext(FandangoParser.Formula_comparisonContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormula_atom"):
                listener.enterFormula_atom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormula_atom"):
                listener.exitFormula_atom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_atom"):
                return visitor.visitFormula_atom(self)
            else:
                return visitor.visitChildren(self)

    def formula_atom(self):

        localctx = FandangoParser.Formula_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_formula_atom)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 114:
                self.state = 732
                self.match(FandangoParser.NEWLINE)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
            if la_ == 1:
                self.state = 738
                self.formula_comparison()
                pass

            elif la_ == 2:
                self.state = 739
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 740
                self.implies()
                self.state = 741
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.state = 743
                self.expr()
                pass

            self.state = 749
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 746
                    self.match(FandangoParser.NEWLINE)
                self.state = 751
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_comparisonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext, i)

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FandangoParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FandangoParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FandangoParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FandangoParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FandangoParser.NOT_EQ_2, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_comparison

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormula_comparison"):
                listener.enterFormula_comparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormula_comparison"):
                listener.exitFormula_comparison(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_comparison"):
                return visitor.visitFormula_comparison(self)
            else:
                return visitor.visitChildren(self)

    def formula_comparison(self):

        localctx = FandangoParser.Formula_comparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_formula_comparison)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.expr()
            self.state = 753
            _la = self._input.LA(1)
            if not (((((_la - 90)) & ~0x3F) == 0 and ((1 << (_la - 90)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 754
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector_length(self):
            return self.getTypedRuleContext(FandangoParser.Selector_lengthContext, 0)

        def inversion(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.InversionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.InversionContext, i)

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr"):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)

    def expr(self):

        localctx = FandangoParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expr)
        try:
            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.selector_length()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 757
                self.inversion()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 758
                self.inversion()
                self.state = 759
                self.match(FandangoParser.IF)
                self.state = 760
                self.inversion()
                self.state = 761
                self.match(FandangoParser.ELSE)
                self.state = 762
                self.inversion()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selector_lengthContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_selector_length

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelector_length"):
                listener.enterSelector_length(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelector_length"):
                listener.exitSelector_length(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelector_length"):
                return visitor.visitSelector_length(self)
            else:
                return visitor.visitChildren(self)

    def selector_length(self):

        localctx = FandangoParser.Selector_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_selector_length)
        try:
            self.state = 771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.match(FandangoParser.OR_OP)
                self.state = 767
                self.selector(0)
                self.state = 768
                self.match(FandangoParser.OR_OP)
                pass
            elif token in [8, 68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.selector(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selection(self):
            return self.getTypedRuleContext(FandangoParser.SelectionContext, 0)

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def DOTDOT(self):
            return self.getToken(FandangoParser.DOTDOT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_selector

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelector"):
                listener.enterSelector(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelector"):
                listener.exitSelector(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelector"):
                return visitor.visitSelector(self)
            else:
                return visitor.visitChildren(self)

    def selector(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.SelectorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_selector, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.selection()
            self._ctx.stop = self._input.LT(-1)
            self.state = 784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 44, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 782
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.SelectorContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_selector
                        )
                        self.state = 776
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 777
                        self.match(FandangoParser.DOT)
                        self.state = 778
                        self.selection()
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.SelectorContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_selector
                        )
                        self.state = 779
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 780
                        self.match(FandangoParser.DOTDOT)
                        self.state = 781
                        self.selection()
                        pass

                self.state = 786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 44, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SelectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_selection(self):
            return self.getTypedRuleContext(FandangoParser.Base_selectionContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def rs_slices(self):
            return self.getTypedRuleContext(FandangoParser.Rs_slicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def rs_pairs(self):
            return self.getTypedRuleContext(FandangoParser.Rs_pairsContext, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_selection

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelection"):
                listener.enterSelection(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelection"):
                listener.exitSelection(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelection"):
                return visitor.visitSelection(self)
            else:
                return visitor.visitChildren(self)

    def selection(self):

        localctx = FandangoParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_selection)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.base_selection()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.base_selection()
                self.state = 789
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 790
                self.rs_slices()
                self.state = 791
                self.match(FandangoParser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 793
                self.base_selection()
                self.state = 794
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 795
                self.rs_pairs()
                self.state = 796
                self.match(FandangoParser.CLOSE_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_selectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONTERMINAL(self):
            return self.getToken(FandangoParser.NONTERMINAL, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_base_selection

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBase_selection"):
                listener.enterBase_selection(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBase_selection"):
                listener.exitBase_selection(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBase_selection"):
                return visitor.visitBase_selection(self)
            else:
                return visitor.visitChildren(self)

    def base_selection(self):

        localctx = FandangoParser.Base_selectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_base_selection)
        try:
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.match(FandangoParser.NONTERMINAL)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 802
                self.selector(0)
                self.state = 803
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_pairsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rs_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Rs_pairContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Rs_pairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_pairs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRs_pairs"):
                listener.enterRs_pairs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRs_pairs"):
                listener.exitRs_pairs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_pairs"):
                return visitor.visitRs_pairs(self)
            else:
                return visitor.visitChildren(self)

    def rs_pairs(self):

        localctx = FandangoParser.Rs_pairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rs_pairs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.rs_pair()
            self.state = 812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 47, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 808
                    self.match(FandangoParser.COMMA)
                    self.state = 809
                    self.rs_pair()
                self.state = 814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 47, self._ctx)

            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 815
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def NONTERMINAL(self):
            return self.getToken(FandangoParser.NONTERMINAL, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def rs_slice(self):
            return self.getTypedRuleContext(FandangoParser.Rs_sliceContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_pair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRs_pair"):
                listener.enterRs_pair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRs_pair"):
                listener.exitRs_pair(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_pair"):
                return visitor.visitRs_pair(self)
            else:
                return visitor.visitChildren(self)

    def rs_pair(self):

        localctx = FandangoParser.Rs_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_rs_pair)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(FandangoParser.STAR)
            self.state = 819
            self.match(FandangoParser.NONTERMINAL)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 71:
                self.state = 820
                self.match(FandangoParser.COLON)
                self.state = 821
                self.rs_slice()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_slicesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rs_slice(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Rs_sliceContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Rs_sliceContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_slices

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRs_slices"):
                listener.enterRs_slices(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRs_slices"):
                listener.exitRs_slices(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_slices"):
                return visitor.visitRs_slices(self)
            else:
                return visitor.visitChildren(self)

    def rs_slices(self):

        localctx = FandangoParser.Rs_slicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_rs_slices)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.rs_slice()
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 50, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 825
                    self.match(FandangoParser.COMMA)
                    self.state = 826
                    self.rs_slice()
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 50, self._ctx)

            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 832
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_sliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NUMBER)
            else:
                return self.getToken(FandangoParser.NUMBER, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_slice

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRs_slice"):
                listener.enterRs_slice(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRs_slice"):
                listener.exitRs_slice(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_slice"):
                return visitor.visitRs_slice(self)
            else:
                return visitor.visitChildren(self)

    def rs_slice(self):

        localctx = FandangoParser.Rs_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_rs_slice)
        self._la = 0  # Token type
        try:
            self.state = 854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.match(FandangoParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 4:
                    self.state = 836
                    self.match(FandangoParser.NUMBER)

                self.state = 839
                self.match(FandangoParser.COLON)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 4:
                    self.state = 840
                    self.match(FandangoParser.NUMBER)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 4:
                    self.state = 843
                    self.match(FandangoParser.NUMBER)

                self.state = 846
                self.match(FandangoParser.COLON)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 4:
                    self.state = 847
                    self.match(FandangoParser.NUMBER)

                self.state = 850
                self.match(FandangoParser.COLON)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 4:
                    self.state = 851
                    self.match(FandangoParser.NUMBER)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PythonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_python

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPython"):
                listener.enterPython(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPython"):
                listener.exitPython(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython"):
                return visitor.visitPython(self)
            else:
                return visitor.visitChildren(self)

    def python(self):

        localctx = FandangoParser.PythonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_python)
        try:
            self.state = 858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 16, 18, 25, 28, 33, 42, 45, 47, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 856
                self.compound_stmt()
                pass
            elif token in [
                3,
                4,
                8,
                11,
                13,
                14,
                17,
                19,
                23,
                26,
                27,
                29,
                32,
                34,
                35,
                36,
                38,
                39,
                40,
                41,
                43,
                48,
                52,
                66,
                67,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.simple_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_tagContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(FandangoParser.StmtContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_python_tag

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPython_tag"):
                listener.enterPython_tag(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPython_tag"):
                listener.exitPython_tag(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython_tag"):
                return visitor.visitPython_tag(self)
            else:
                return visitor.visitChildren(self)

    def python_tag(self):

        localctx = FandangoParser.Python_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_python_tag)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 114:
                self.state = 860
                self.match(FandangoParser.NEWLINE)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 866
            self.stmt()
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 114:
                self.state = 867
                self.match(FandangoParser.NEWLINE)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_fileContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(FandangoParser.StatementsContext, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_python_file

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPython_file"):
                listener.enterPython_file(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPython_file"):
                listener.exitPython_file(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython_file"):
                return visitor.visitPython_file(self)
            else:
                return visitor.visitChildren(self)

    def python_file(self):

        localctx = FandangoParser.Python_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_python_file)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4978447966239000) != 0) or (
                (((_la - 66)) & ~0x3F) == 0
                and ((1 << (_la - 66)) & 4785076758055431) != 0
            ):
                self.state = 873
                self.statements()

            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
            if la_ == 1:
                self.state = 876
                self.match(FandangoParser.EOF)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InteractiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_newline(self):
            return self.getTypedRuleContext(FandangoParser.Statement_newlineContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_interactive

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInteractive"):
                listener.enterInteractive(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInteractive"):
                listener.exitInteractive(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInteractive"):
                return visitor.visitInteractive(self)
            else:
                return visitor.visitChildren(self)

    def interactive(self):

        localctx = FandangoParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_interactive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.statement_newline()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionsContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_eval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEval"):
                listener.enterEval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEval"):
                listener.exitEval(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEval"):
                return visitor.visitEval(self)
            else:
                return visitor.visitChildren(self)

    def eval_(self):

        localctx = FandangoParser.EvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_eval)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.expressions()
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 114:
                self.state = 882
                self.match(FandangoParser.NEWLINE)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
            if la_ == 1:
                self.state = 888
                self.match(FandangoParser.EOF)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def type_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Type_expressionsContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_func_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_type"):
                listener.enterFunc_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_type"):
                listener.exitFunc_type(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_type"):
                return visitor.visitFunc_type(self)
            else:
                return visitor.visitChildren(self)

    def func_type(self):

        localctx = FandangoParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_func_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                (((_la - 66)) & ~0x3F) == 0
                and ((1 << (_la - 66)) & 4503599633861255) != 0
            ):
                self.state = 892
                self.type_expressions()

            self.state = 895
            self.match(FandangoParser.CLOSE_PAREN)
            self.state = 896
            self.match(FandangoParser.ARROW)
            self.state = 897
            self.expression()
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 114:
                self.state = 898
                self.match(FandangoParser.NEWLINE)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.state = 904
                self.match(FandangoParser.EOF)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StmtContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_statements

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatements"):
                listener.enterStatements(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatements"):
                listener.exitStatements(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatements"):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)

    def statements(self):

        localctx = FandangoParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statements)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 909
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    3,
                    4,
                    8,
                    11,
                    12,
                    13,
                    14,
                    16,
                    17,
                    18,
                    19,
                    23,
                    25,
                    26,
                    27,
                    28,
                    29,
                    32,
                    33,
                    34,
                    35,
                    36,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    45,
                    47,
                    48,
                    52,
                    66,
                    67,
                    68,
                    75,
                    77,
                    82,
                    83,
                    87,
                    88,
                    97,
                    118,
                ]:
                    self.state = 907
                    self.stmt()
                    pass
                elif token in [114]:
                    self.state = 908
                    self.match(FandangoParser.NEWLINE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 4978447966239000) != 0)
                    or (
                        (((_la - 66)) & ~0x3F) == 0
                        and ((1 << (_la - 66)) & 4785076758055431) != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStmt"):
                listener.enterStmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStmt"):
                listener.exitStmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStmt"):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)

    def stmt(self):

        localctx = FandangoParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_stmt)
        try:
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 16, 18, 25, 28, 33, 42, 45, 47, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.compound_stmt()
                pass
            elif token in [
                3,
                4,
                8,
                11,
                13,
                14,
                17,
                19,
                23,
                26,
                27,
                29,
                32,
                34,
                35,
                36,
                38,
                39,
                40,
                41,
                43,
                48,
                52,
                66,
                67,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.simple_stmts()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_newlineContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_statement_newline

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement_newline"):
                listener.enterStatement_newline(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement_newline"):
                listener.exitStatement_newline(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement_newline"):
                return visitor.visitStatement_newline(self)
            else:
                return visitor.visitChildren(self)

    def statement_newline(self):

        localctx = FandangoParser.Statement_newlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement_newline)
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 16, 18, 25, 28, 33, 42, 45, 47, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.compound_stmt()
                self.state = 918
                self.match(FandangoParser.NEWLINE)
                pass
            elif token in [
                3,
                4,
                8,
                11,
                13,
                14,
                17,
                19,
                23,
                26,
                27,
                29,
                32,
                34,
                35,
                36,
                38,
                39,
                40,
                41,
                43,
                48,
                52,
                66,
                67,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.simple_stmts()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 3)
                self.state = 921
                self.match(FandangoParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Simple_stmtContext, i)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def SEMI_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.SEMI_COLON)
            else:
                return self.getToken(FandangoParser.SEMI_COLON, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_stmts"):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_stmts"):
                listener.exitSimple_stmts(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_stmts"):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)

    def simple_stmts(self):

        localctx = FandangoParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_simple_stmts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.simple_stmt()
            self.state = 929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 925
                    self.match(FandangoParser.SEMI_COLON)
                    self.state = 926
                    self.simple_stmt()
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)

            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 72:
                self.state = 932
                self.match(FandangoParser.SEMI_COLON)

            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
            if la_ == 1:
                self.state = 936
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 935
                        self.match(FandangoParser.NEWLINE)

                    else:
                        raise NoViableAltException(self)
                    self.state = 938
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 74, self._ctx)

                pass

            elif la_ == 2:
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 114:
                    self.state = 940
                    self.match(FandangoParser.NEWLINE)
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 946
                self.match(FandangoParser.EOF)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(FandangoParser.AssignmentContext, 0)

        def type_alias(self):
            return self.getTypedRuleContext(FandangoParser.Type_aliasContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def return_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Return_stmtContext, 0)

        def import_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Import_stmtContext, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Raise_stmtContext, 0)

        def PASS(self):
            return self.getToken(FandangoParser.PASS, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Del_stmtContext, 0)

        def yield_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Yield_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Assert_stmtContext, 0)

        def BREAK(self):
            return self.getToken(FandangoParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(FandangoParser.CONTINUE, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Global_stmtContext, 0)

        def nonlocal_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Nonlocal_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_stmt"):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_stmt"):
                listener.exitSimple_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_stmt"):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)

    def simple_stmt(self):

        localctx = FandangoParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_simple_stmt)
        try:
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 949
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.type_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 951
                self.star_expressions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 952
                self.return_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 953
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 954
                self.raise_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 955
                self.match(FandangoParser.PASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 956
                self.del_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 957
                self.yield_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 958
                self.assert_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 959
                self.match(FandangoParser.BREAK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 960
                self.match(FandangoParser.CONTINUE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 961
                self.global_stmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 962
                self.nonlocal_stmt()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def(self):
            return self.getTypedRuleContext(FandangoParser.Function_defContext, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(FandangoParser.If_stmtContext, 0)

        def class_def(self):
            return self.getTypedRuleContext(FandangoParser.Class_defContext, 0)

        def with_stmt(self):
            return self.getTypedRuleContext(FandangoParser.With_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(FandangoParser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Try_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(FandangoParser.While_stmtContext, 0)

        def match_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Match_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_compound_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompound_stmt"):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompound_stmt"):
                listener.exitCompound_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompound_stmt"):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)

    def compound_stmt(self):

        localctx = FandangoParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compound_stmt)
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 965
                self.function_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 966
                self.if_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.class_def()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 968
                self.with_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 969
                self.for_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 970
                self.try_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 971
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 972
                self.match_stmt()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def annotated_rhs(self):
            return self.getTypedRuleContext(FandangoParser.Annotated_rhsContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def single_target(self):
            return self.getTypedRuleContext(FandangoParser.Single_targetContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Single_subscript_attribute_targetContext, 0
            )

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def star_targets(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetsContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetsContext, i)

        def augassign(self):
            return self.getTypedRuleContext(FandangoParser.AugassignContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignment"):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)

    def assignment(self):

        localctx = FandangoParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_assignment)
        try:
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.match(FandangoParser.NAME)
                self.state = 976
                self.match(FandangoParser.COLON)
                self.state = 977
                self.expression()
                self.state = 980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
                if la_ == 1:
                    self.state = 978
                    self.match(FandangoParser.ASSIGN)
                    self.state = 979
                    self.annotated_rhs()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 80, self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.match(FandangoParser.OPEN_PAREN)
                    self.state = 983
                    self.single_target()
                    self.state = 984
                    self.match(FandangoParser.CLOSE_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 986
                    self.single_subscript_attribute_target()
                    pass

                self.state = 989
                self.match(FandangoParser.COLON)
                self.state = 990
                self.expression()
                self.state = 993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
                if la_ == 1:
                    self.state = 991
                    self.match(FandangoParser.ASSIGN)
                    self.state = 992
                    self.annotated_rhs()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 995
                        self.star_targets()
                        self.state = 996
                        self.match(FandangoParser.ASSIGN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1000
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

                self.state = 1004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [48]:
                    self.state = 1002
                    self.yield_expr()
                    pass
                elif token in [
                    3,
                    4,
                    8,
                    13,
                    23,
                    32,
                    34,
                    36,
                    41,
                    52,
                    66,
                    67,
                    68,
                    75,
                    77,
                    82,
                    83,
                    87,
                    88,
                    118,
                ]:
                    self.state = 1003
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1006
                self.single_target()
                self.state = 1007
                self.augassign()
                self.state = 1010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [48]:
                    self.state = 1008
                    self.yield_expr()
                    pass
                elif token in [
                    3,
                    4,
                    8,
                    13,
                    23,
                    32,
                    34,
                    36,
                    41,
                    52,
                    66,
                    67,
                    68,
                    75,
                    77,
                    82,
                    83,
                    87,
                    88,
                    118,
                ]:
                    self.state = 1009
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotated_rhsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_annotated_rhs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotated_rhs"):
                listener.enterAnnotated_rhs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotated_rhs"):
                listener.exitAnnotated_rhs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotated_rhs"):
                return visitor.visitAnnotated_rhs(self)
            else:
                return visitor.visitChildren(self)

    def annotated_rhs(self):

        localctx = FandangoParser.Annotated_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_annotated_rhs)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.yield_expr()
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                32,
                34,
                36,
                41,
                52,
                66,
                67,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(FandangoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FandangoParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FandangoParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FandangoParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FandangoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FandangoParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FandangoParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FandangoParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FandangoParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FandangoParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FandangoParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_augassign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAugassign"):
                listener.enterAugassign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAugassign"):
                listener.exitAugassign(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = FandangoParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            _la = self._input.LA(1)
            if not (((((_la - 99)) & ~0x3F) == 0 and ((1 << (_la - 99)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(FandangoParser.RETURN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_return_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturn_stmt"):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturn_stmt"):
                listener.exitReturn_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturn_stmt"):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)

    def return_stmt(self):

        localctx = FandangoParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_return_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(FandangoParser.RETURN)
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 87, self._ctx)
            if la_ == 1:
                self.state = 1021
                self.star_expressions()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(FandangoParser.RAISE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_raise_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRaise_stmt"):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRaise_stmt"):
                listener.exitRaise_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = FandangoParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_raise_stmt)
        try:
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.match(FandangoParser.RAISE)
                self.state = 1025
                self.expression()
                self.state = 1028
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
                if la_ == 1:
                    self.state = 1026
                    self.match(FandangoParser.FROM)
                    self.state = 1027
                    self.expression()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.match(FandangoParser.RAISE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(FandangoParser.GLOBAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NAME)
            else:
                return self.getToken(FandangoParser.NAME, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_global_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_stmt"):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_stmt"):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGlobal_stmt"):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def global_stmt(self):

        localctx = FandangoParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_global_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(FandangoParser.GLOBAL)
            self.state = 1034
            self.match(FandangoParser.NAME)
            self.state = 1039
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1035
                    self.match(FandangoParser.COMMA)
                    self.state = 1036
                    self.match(FandangoParser.NAME)
                self.state = 1041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(FandangoParser.NONLOCAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NAME)
            else:
                return self.getToken(FandangoParser.NAME, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_nonlocal_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonlocal_stmt"):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonlocal_stmt"):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonlocal_stmt"):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def nonlocal_stmt(self):

        localctx = FandangoParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_nonlocal_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(FandangoParser.NONLOCAL)
            self.state = 1043
            self.match(FandangoParser.NAME)
            self.state = 1048
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1044
                    self.match(FandangoParser.COMMA)
                    self.state = 1045
                    self.match(FandangoParser.NAME)
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(FandangoParser.DEL, 0)

        def del_targets(self):
            return self.getTypedRuleContext(FandangoParser.Del_targetsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDel_stmt"):
                listener.enterDel_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDel_stmt"):
                listener.exitDel_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_stmt"):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)

    def del_stmt(self):

        localctx = FandangoParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(FandangoParser.DEL)
            self.state = 1052
            self.del_targets()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_yield_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_stmt"):
                listener.enterYield_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_stmt"):
                listener.exitYield_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_stmt"):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)

    def yield_stmt(self):

        localctx = FandangoParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(FandangoParser.ASSERT, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssert_stmt"):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssert_stmt"):
                listener.exitAssert_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssert_stmt"):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)

    def assert_stmt(self):

        localctx = FandangoParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_assert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(FandangoParser.ASSERT)
            self.state = 1057
            self.expression()
            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
            if la_ == 1:
                self.state = 1058
                self.match(FandangoParser.COMMA)
                self.state = 1059
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(FandangoParser.Import_nameContext, 0)

        def import_from(self):
            return self.getTypedRuleContext(FandangoParser.Import_fromContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_stmt"):
                listener.enterImport_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_stmt"):
                listener.exitImport_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_stmt"):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)

    def import_stmt(self):

        localctx = FandangoParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_import_stmt)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.import_name()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_as_namesContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_name"):
                listener.enterImport_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_name"):
                listener.exitImport_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_name"):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)

    def import_name(self):

        localctx = FandangoParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(FandangoParser.IMPORT)
            self.state = 1067
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def import_from_targets(self):
            return self.getTypedRuleContext(
                FandangoParser.Import_from_targetsContext, 0
            )

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def ELLIPSIS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ELLIPSIS)
            else:
                return self.getToken(FandangoParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_from"):
                listener.enterImport_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_from"):
                listener.exitImport_from(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from"):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)

    def import_from(self):

        localctx = FandangoParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_import_from)
        self._la = 0  # Token type
        try:
            self.state = 1088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.match(FandangoParser.FROM)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 64 or _la == 66:
                    self.state = 1070
                    _la = self._input.LA(1)
                    if not (_la == 64 or _la == 66):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1076
                self.dotted_name(0)
                self.state = 1077
                self.match(FandangoParser.IMPORT)
                self.state = 1078
                self.import_from_targets()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.match(FandangoParser.FROM)
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1081
                    _la = self._input.LA(1)
                    if not (_la == 64 or _la == 66):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 64 or _la == 66):
                        break

                self.state = 1086
                self.match(FandangoParser.IMPORT)
                self.state = 1087
                self.import_from_targets()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_from_targetsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def import_from_as_names(self):
            return self.getTypedRuleContext(
                FandangoParser.Import_from_as_namesContext, 0
            )

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from_targets

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_from_targets"):
                listener.enterImport_from_targets(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_from_targets"):
                listener.exitImport_from_targets(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from_targets"):
                return visitor.visitImport_from_targets(self)
            else:
                return visitor.visitChildren(self)

    def import_from_targets(self):

        localctx = FandangoParser.Import_from_targetsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 112, self.RULE_import_from_targets)
        self._la = 0  # Token type
        try:
            self.state = 1099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1091
                self.import_from_as_names()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1092
                    self.match(FandangoParser.COMMA)

                self.state = 1095
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1097
                self.import_from_as_names()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1098
                self.match(FandangoParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_from_as_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_from_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Import_from_as_nameContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Import_from_as_nameContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from_as_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_from_as_names"):
                listener.enterImport_from_as_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_from_as_names"):
                listener.exitImport_from_as_names(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from_as_names"):
                return visitor.visitImport_from_as_names(self)
            else:
                return visitor.visitChildren(self)

    def import_from_as_names(self):

        localctx = FandangoParser.Import_from_as_namesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 114, self.RULE_import_from_as_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.import_from_as_name()
            self.state = 1106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1102
                    self.match(FandangoParser.COMMA)
                    self.state = 1103
                    self.import_from_as_name()
                self.state = 1108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_from_as_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NAME)
            else:
                return self.getToken(FandangoParser.NAME, i)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from_as_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_from_as_name"):
                listener.enterImport_from_as_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_from_as_name"):
                listener.exitImport_from_as_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from_as_name"):
                return visitor.visitImport_from_as_name(self)
            else:
                return visitor.visitChildren(self)

    def import_from_as_name(self):

        localctx = FandangoParser.Import_from_as_nameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 116, self.RULE_import_from_as_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(FandangoParser.NAME)
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
            if la_ == 1:
                self.state = 1110
                self.match(FandangoParser.AS)
                self.state = 1111
                self.match(FandangoParser.NAME)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Dotted_as_nameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_as_names"):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_as_names"):
                listener.exitDotted_as_names(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_names"):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_names(self):

        localctx = FandangoParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_dotted_as_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.dotted_as_name()
            self.state = 1119
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1115
                    self.match(FandangoParser.COMMA)
                    self.state = 1116
                    self.dotted_as_name()
                self.state = 1121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_as_name"):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_as_name"):
                listener.exitDotted_as_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_name"):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_name(self):

        localctx = FandangoParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_dotted_as_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.dotted_name(0)
            self.state = 1125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
            if la_ == 1:
                self.state = 1123
                self.match(FandangoParser.AS)
                self.state = 1124
                self.match(FandangoParser.NAME)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_name"):
                listener.enterDotted_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_name"):
                listener.exitDotted_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_name"):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_name(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(FandangoParser.NAME)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1135
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Dotted_nameContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_dotted_name
                    )
                    self.state = 1130
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1131
                    self.match(FandangoParser.DOT)
                    self.state = 1132
                    self.match(FandangoParser.NAME)
                self.state = 1137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(FandangoParser.INDENT, 0)

        def statements(self):
            return self.getTypedRuleContext(FandangoParser.StatementsContext, 0)

        def DEDENT(self):
            return self.getToken(FandangoParser.DEDENT, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlock"):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)

    def block(self):

        localctx = FandangoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_block)
        try:
            self.state = 1144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1138
                self.match(FandangoParser.NEWLINE)
                self.state = 1139
                self.match(FandangoParser.INDENT)
                self.state = 1140
                self.statements()
                self.state = 1141
                self.match(FandangoParser.DEDENT)
                pass
            elif token in [
                3,
                4,
                8,
                11,
                13,
                14,
                17,
                19,
                23,
                26,
                27,
                29,
                32,
                34,
                35,
                36,
                38,
                39,
                40,
                41,
                43,
                48,
                52,
                66,
                67,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1143
                self.simple_stmts()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AT)
            else:
                return self.getToken(FandangoParser.AT, i)

        def named_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Named_expressionContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Named_expressionContext, i
                )

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_decorators

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecorators"):
                listener.enterDecorators(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecorators"):
                listener.exitDecorators(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorators"):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)

    def decorators(self):

        localctx = FandangoParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_decorators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1146
                self.match(FandangoParser.AT)
                self.state = 1147
                self.named_expression()
                self.state = 1148
                self.match(FandangoParser.NEWLINE)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 97):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_defContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_def_raw(self):
            return self.getTypedRuleContext(FandangoParser.Class_def_rawContext, 0)

        def decorators(self):
            return self.getTypedRuleContext(FandangoParser.DecoratorsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_class_def

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_def"):
                listener.enterClass_def(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_def"):
                listener.exitClass_def(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClass_def"):
                return visitor.visitClass_def(self)
            else:
                return visitor.visitChildren(self)

    def class_def(self):

        localctx = FandangoParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_class_def)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 97:
                self.state = 1154
                self.decorators()

            self.state = 1157
            self.class_def_raw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_def_rawContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FandangoParser.CLASS, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def type_params(self):
            return self.getTypedRuleContext(FandangoParser.Type_paramsContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_class_def_raw

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_def_raw"):
                listener.enterClass_def_raw(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_def_raw"):
                listener.exitClass_def_raw(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClass_def_raw"):
                return visitor.visitClass_def_raw(self)
            else:
                return visitor.visitChildren(self)

    def class_def_raw(self):

        localctx = FandangoParser.Class_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_class_def_raw)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(FandangoParser.CLASS)
            self.state = 1160
            self.match(FandangoParser.NAME)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 75:
                self.state = 1161
                self.type_params()

            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 68:
                self.state = 1164
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599633861255) != 0
                ):
                    self.state = 1165
                    self.arguments()

                self.state = 1168
                self.match(FandangoParser.CLOSE_PAREN)

            self.state = 1171
            self.match(FandangoParser.COLON)
            self.state = 1172
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_defContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def_raw(self):
            return self.getTypedRuleContext(FandangoParser.Function_def_rawContext, 0)

        def decorators(self):
            return self.getTypedRuleContext(FandangoParser.DecoratorsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_function_def

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_def"):
                listener.enterFunction_def(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_def"):
                listener.exitFunction_def(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunction_def"):
                return visitor.visitFunction_def(self)
            else:
                return visitor.visitChildren(self)

    def function_def(self):

        localctx = FandangoParser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_function_def)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 97:
                self.state = 1174
                self.decorators()

            self.state = 1177
            self.function_def_raw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_def_rawContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FandangoParser.DEF, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def type_params(self):
            return self.getTypedRuleContext(FandangoParser.Type_paramsContext, 0)

        def params(self):
            return self.getTypedRuleContext(FandangoParser.ParamsContext, 0)

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def func_type_comment(self):
            return self.getTypedRuleContext(FandangoParser.Func_type_commentContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_function_def_raw

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_def_raw"):
                listener.enterFunction_def_raw(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_def_raw"):
                listener.exitFunction_def_raw(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunction_def_raw"):
                return visitor.visitFunction_def_raw(self)
            else:
                return visitor.visitChildren(self)

    def function_def_raw(self):

        localctx = FandangoParser.Function_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_function_def_raw)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 12:
                self.state = 1179
                self.match(FandangoParser.ASYNC)

            self.state = 1182
            self.match(FandangoParser.DEF)
            self.state = 1183
            self.match(FandangoParser.NAME)
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 75:
                self.state = 1184
                self.type_params()

            self.state = 1187
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 52)) & ~0x3F) == 0 and ((1 << (_la - 52)) & 2129921) != 0:
                self.state = 1188
                self.params()

            self.state = 1191
            self.match(FandangoParser.CLOSE_PAREN)
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 98:
                self.state = 1192
                self.match(FandangoParser.ARROW)
                self.state = 1193
                self.expression()

            self.state = 1196
            self.match(FandangoParser.COLON)
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
            if la_ == 1:
                self.state = 1197
                self.func_type_comment()

            self.state = 1200
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(FandangoParser.ParametersContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_params

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParams"):
                listener.enterParams(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParams"):
                listener.exitParams(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParams"):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)

    def params(self):

        localctx = FandangoParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slash_no_default(self):
            return self.getTypedRuleContext(FandangoParser.Slash_no_defaultContext, 0)

        def param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_no_defaultContext, i
                )

        def param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_with_defaultContext, i
                )

        def star_etc(self):
            return self.getTypedRuleContext(FandangoParser.Star_etcContext, 0)

        def slash_with_default(self):
            return self.getTypedRuleContext(FandangoParser.Slash_with_defaultContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_parameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameters"):
                listener.enterParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameters"):
                listener.exitParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)

    def parameters(self):

        localctx = FandangoParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_parameters)
        self._la = 0  # Token type
        try:
            self.state = 1253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self.slash_no_default()
                self.state = 1208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 116, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1205
                        self.param_no_default()
                    self.state = 1210
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 116, self._ctx)

                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 1211
                    self.param_with_default()
                    self.state = 1216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 1217
                    self.star_etc()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1220
                self.slash_with_default()
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 1221
                    self.param_with_default()
                    self.state = 1226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 1227
                    self.star_etc()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1231
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1230
                        self.param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1233
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 121, self._ctx)

                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 1235
                    self.param_with_default()
                    self.state = 1240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 1241
                    self.star_etc()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1244
                    self.param_with_default()
                    self.state = 1247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 52):
                        break

                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 1249
                    self.star_etc()

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1252
                self.star_etc()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slash_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_no_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_slash_no_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSlash_no_default"):
                listener.enterSlash_no_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSlash_no_default"):
                listener.exitSlash_no_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlash_no_default"):
                return visitor.visitSlash_no_default(self)
            else:
                return visitor.visitChildren(self)

    def slash_no_default(self):

        localctx = FandangoParser.Slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_slash_no_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1255
                self.param_no_default()
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 52):
                    break

            self.state = 1260
            self.match(FandangoParser.DIV)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 1261
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slash_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_no_defaultContext, i
                )

        def param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_with_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_slash_with_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSlash_with_default"):
                listener.enterSlash_with_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSlash_with_default"):
                listener.exitSlash_with_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlash_with_default"):
                return visitor.visitSlash_with_default(self)
            else:
                return visitor.visitChildren(self)

    def slash_with_default(self):

        localctx = FandangoParser.Slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_slash_with_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1264
                    self.param_no_default()
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1270
                self.param_with_default()
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 52):
                    break

            self.state = 1275
            self.match(FandangoParser.DIV)
            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 1276
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_etcContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(FandangoParser.Param_no_defaultContext, 0)

        def param_maybe_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Param_maybe_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_maybe_defaultContext, i
                )

        def kwds(self):
            return self.getTypedRuleContext(FandangoParser.KwdsContext, 0)

        def param_no_default_star_annotation(self):
            return self.getTypedRuleContext(
                FandangoParser.Param_no_default_star_annotationContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_etc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_etc"):
                listener.enterStar_etc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_etc"):
                listener.exitStar_etc(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_etc"):
                return visitor.visitStar_etc(self)
            else:
                return visitor.visitChildren(self)

    def star_etc(self):

        localctx = FandangoParser.Star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_star_etc)
        self._la = 0  # Token type
        try:
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.match(FandangoParser.STAR)
                self.state = 1280
                self.param_no_default()
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 1281
                    self.param_maybe_default()
                    self.state = 1286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 73:
                    self.state = 1287
                    self.kwds()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.match(FandangoParser.STAR)
                self.state = 1291
                self.param_no_default_star_annotation()
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 1292
                    self.param_maybe_default()
                    self.state = 1297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 73:
                    self.state = 1298
                    self.kwds()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1301
                self.match(FandangoParser.STAR)
                self.state = 1302
                self.match(FandangoParser.COMMA)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1303
                    self.param_maybe_default()
                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 52):
                        break

                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 73:
                    self.state = 1308
                    self.kwds()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1311
                self.kwds()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KwdsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(FandangoParser.Param_no_defaultContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kwds

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKwds"):
                listener.enterKwds(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKwds"):
                listener.exitKwds(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwds"):
                return visitor.visitKwds(self)
            else:
                return visitor.visitChildren(self)

    def kwds(self):

        localctx = FandangoParser.KwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(FandangoParser.POWER)
            self.state = 1315
            self.param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(FandangoParser.ParamContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_no_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam_no_default"):
                listener.enterParam_no_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam_no_default"):
                listener.exitParam_no_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_no_default"):
                return visitor.visitParam_no_default(self)
            else:
                return visitor.visitChildren(self)

    def param_no_default(self):

        localctx = FandangoParser.Param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_param_no_default)
        try:
            self.state = 1321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1317
                self.param()
                self.state = 1318
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1320
                self.param()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_no_default_star_annotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_star_annotation(self):
            return self.getTypedRuleContext(
                FandangoParser.Param_star_annotationContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_no_default_star_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam_no_default_star_annotation"):
                listener.enterParam_no_default_star_annotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam_no_default_star_annotation"):
                listener.exitParam_no_default_star_annotation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_no_default_star_annotation"):
                return visitor.visitParam_no_default_star_annotation(self)
            else:
                return visitor.visitChildren(self)

    def param_no_default_star_annotation(self):

        localctx = FandangoParser.Param_no_default_star_annotationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 150, self.RULE_param_no_default_star_annotation)
        try:
            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 140, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                self.param_star_annotation()
                self.state = 1324
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.param_star_annotation()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(FandangoParser.ParamContext, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_with_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam_with_default"):
                listener.enterParam_with_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam_with_default"):
                listener.exitParam_with_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_with_default"):
                return visitor.visitParam_with_default(self)
            else:
                return visitor.visitChildren(self)

    def param_with_default(self):

        localctx = FandangoParser.Param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_param_with_default)
        try:
            self.state = 1336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 141, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1329
                self.param()
                self.state = 1330
                self.default()
                self.state = 1331
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.param()
                self.state = 1334
                self.default()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_maybe_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(FandangoParser.ParamContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_maybe_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam_maybe_default"):
                listener.enterParam_maybe_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam_maybe_default"):
                listener.exitParam_maybe_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_maybe_default"):
                return visitor.visitParam_maybe_default(self)
            else:
                return visitor.visitChildren(self)

    def param_maybe_default(self):

        localctx = FandangoParser.Param_maybe_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 154, self.RULE_param_maybe_default)
        self._la = 0  # Token type
        try:
            self.state = 1348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 144, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1338
                self.param()
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 74:
                    self.state = 1339
                    self.default()

                self.state = 1342
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.param()
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 74:
                    self.state = 1345
                    self.default()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def annotation(self):
            return self.getTypedRuleContext(FandangoParser.AnnotationContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam"):
                listener.enterParam(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam"):
                listener.exitParam(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam"):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)

    def param(self):

        localctx = FandangoParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_param)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(FandangoParser.NAME)
            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 71:
                self.state = 1351
                self.annotation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_star_annotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def star_annotation(self):
            return self.getTypedRuleContext(FandangoParser.Star_annotationContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_star_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam_star_annotation"):
                listener.enterParam_star_annotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam_star_annotation"):
                listener.exitParam_star_annotation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_star_annotation"):
                return visitor.visitParam_star_annotation(self)
            else:
                return visitor.visitChildren(self)

    def param_star_annotation(self):

        localctx = FandangoParser.Param_star_annotationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 158, self.RULE_param_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(FandangoParser.NAME)
            self.state = 1355
            self.star_annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotation"):
                listener.enterAnnotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotation"):
                listener.exitAnnotation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotation"):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)

    def annotation(self):

        localctx = FandangoParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(FandangoParser.COLON)
            self.state = 1358
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_annotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def star_expression(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_annotation"):
                listener.enterStar_annotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_annotation"):
                listener.exitStar_annotation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_annotation"):
                return visitor.visitStar_annotation(self)
            else:
                return visitor.visitChildren(self)

    def star_annotation(self):

        localctx = FandangoParser.Star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.match(FandangoParser.COLON)
            self.state = 1361
            self.star_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefault"):
                listener.enterDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefault"):
                listener.exitDefault(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefault"):
                return visitor.visitDefault(self)
            else:
                return visitor.visitChildren(self)

    def default(self):

        localctx = FandangoParser.DefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(FandangoParser.ASSIGN)
            self.state = 1364
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def elif_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Elif_stmtContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_if_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_stmt"):
                listener.enterIf_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_stmt"):
                listener.exitIf_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = FandangoParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_if_stmt)
        try:
            self.state = 1379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1366
                self.match(FandangoParser.IF)
                self.state = 1367
                self.named_expression()
                self.state = 1368
                self.match(FandangoParser.COLON)
                self.state = 1369
                self.block()
                self.state = 1370
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.match(FandangoParser.IF)
                self.state = 1373
                self.named_expression()
                self.state = 1374
                self.match(FandangoParser.COLON)
                self.state = 1375
                self.block()
                self.state = 1377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 146, self._ctx)
                if la_ == 1:
                    self.state = 1376
                    self.else_block()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FandangoParser.ELIF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def elif_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Elif_stmtContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_elif_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElif_stmt"):
                listener.enterElif_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElif_stmt"):
                listener.exitElif_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElif_stmt"):
                return visitor.visitElif_stmt(self)
            else:
                return visitor.visitChildren(self)

    def elif_stmt(self):

        localctx = FandangoParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_elif_stmt)
        try:
            self.state = 1394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 149, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.match(FandangoParser.ELIF)
                self.state = 1382
                self.named_expression()
                self.state = 1383
                self.match(FandangoParser.COLON)
                self.state = 1384
                self.block()
                self.state = 1385
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1387
                self.match(FandangoParser.ELIF)
                self.state = 1388
                self.named_expression()
                self.state = 1389
                self.match(FandangoParser.COLON)
                self.state = 1390
                self.block()
                self.state = 1392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
                if la_ == 1:
                    self.state = 1391
                    self.else_block()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_else_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_block"):
                listener.enterElse_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_block"):
                listener.exitElse_block(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_block"):
                return visitor.visitElse_block(self)
            else:
                return visitor.visitChildren(self)

    def else_block(self):

        localctx = FandangoParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_else_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            self.match(FandangoParser.ELSE)
            self.state = 1397
            self.match(FandangoParser.COLON)
            self.state = 1398
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(FandangoParser.WHILE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_while_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_stmt"):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_stmt"):
                listener.exitWhile_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = FandangoParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(FandangoParser.WHILE)
            self.state = 1401
            self.named_expression()
            self.state = 1402
            self.match(FandangoParser.COLON)
            self.state = 1403
            self.block()
            self.state = 1405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 150, self._ctx)
            if la_ == 1:
                self.state = 1404
                self.else_block()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetsContext, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_stmt"):
                listener.enterFor_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_stmt"):
                listener.exitFor_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = FandangoParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_for_stmt)
        try:
            self.state = 1426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1407
                self.match(FandangoParser.FOR)
                self.state = 1408
                self.star_targets()
                self.state = 1409
                self.match(FandangoParser.IN)
                self.state = 1410
                self.star_expressions()
                self.state = 1411
                self.match(FandangoParser.COLON)
                self.state = 1412
                self.block()
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
                if la_ == 1:
                    self.state = 1413
                    self.else_block()

                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1416
                self.match(FandangoParser.ASYNC)
                self.state = 1417
                self.match(FandangoParser.FOR)
                self.state = 1418
                self.star_targets()
                self.state = 1419
                self.match(FandangoParser.IN)
                self.state = 1420
                self.star_expressions()
                self.state = 1421
                self.match(FandangoParser.COLON)
                self.state = 1422
                self.block()
                self.state = 1424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 152, self._ctx)
                if la_ == 1:
                    self.state = 1423
                    self.else_block()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FandangoParser.WITH, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def with_item(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FandangoParser.With_itemContext, i)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_with_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWith_stmt"):
                listener.enterWith_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWith_stmt"):
                listener.exitWith_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_stmt"):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)

    def with_stmt(self):

        localctx = FandangoParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_with_stmt)
        self._la = 0  # Token type
        try:
            self.state = 1488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1428
                self.match(FandangoParser.WITH)
                self.state = 1429
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1430
                self.with_item()
                self.state = 1435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1431
                        self.match(FandangoParser.COMMA)
                        self.state = 1432
                        self.with_item()
                    self.state = 1437
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)

                self.state = 1439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1438
                    self.match(FandangoParser.COMMA)

                self.state = 1441
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 1442
                self.match(FandangoParser.COLON)
                self.state = 1443
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.match(FandangoParser.WITH)
                self.state = 1446
                self.with_item()
                self.state = 1451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 70:
                    self.state = 1447
                    self.match(FandangoParser.COMMA)
                    self.state = 1448
                    self.with_item()
                    self.state = 1453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1454
                self.match(FandangoParser.COLON)
                self.state = 1455
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.match(FandangoParser.ASYNC)
                self.state = 1458
                self.match(FandangoParser.WITH)
                self.state = 1459
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1460
                self.with_item()
                self.state = 1465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1461
                        self.match(FandangoParser.COMMA)
                        self.state = 1462
                        self.with_item()
                    self.state = 1467
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)

                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1468
                    self.match(FandangoParser.COMMA)

                self.state = 1471
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 1472
                self.match(FandangoParser.COLON)
                self.state = 1473
                self.block()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1475
                self.match(FandangoParser.ASYNC)
                self.state = 1476
                self.match(FandangoParser.WITH)
                self.state = 1477
                self.with_item()
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 70:
                    self.state = 1478
                    self.match(FandangoParser.COMMA)
                    self.state = 1479
                    self.with_item()
                    self.state = 1484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1485
                self.match(FandangoParser.COLON)
                self.state = 1486
                self.block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def star_target(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_with_item

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWith_item"):
                listener.enterWith_item(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWith_item"):
                listener.exitWith_item(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_item"):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)

    def with_item(self):

        localctx = FandangoParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_with_item)
        try:
            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 161, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1490
                self.expression()
                self.state = 1491
                self.match(FandangoParser.AS)
                self.state = 1492
                self.star_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1494
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(FandangoParser.TRY, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def finally_block(self):
            return self.getTypedRuleContext(FandangoParser.Finally_blockContext, 0)

        def except_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Except_blockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Except_blockContext, i)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def except_star_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Except_star_blockContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Except_star_blockContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_try_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTry_stmt"):
                listener.enterTry_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTry_stmt"):
                listener.exitTry_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = FandangoParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_try_stmt)
        try:
            self.state = 1530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(FandangoParser.TRY)
                self.state = 1498
                self.match(FandangoParser.COLON)
                self.state = 1499
                self.block()
                self.state = 1500
                self.finally_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1502
                self.match(FandangoParser.TRY)
                self.state = 1503
                self.match(FandangoParser.COLON)
                self.state = 1504
                self.block()
                self.state = 1506
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1505
                        self.except_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1508
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 162, self._ctx)

                self.state = 1511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 163, self._ctx)
                if la_ == 1:
                    self.state = 1510
                    self.else_block()

                self.state = 1514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
                if la_ == 1:
                    self.state = 1513
                    self.finally_block()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1516
                self.match(FandangoParser.TRY)
                self.state = 1517
                self.match(FandangoParser.COLON)
                self.state = 1518
                self.block()
                self.state = 1520
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1519
                        self.except_star_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1522
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 165, self._ctx)

                self.state = 1525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
                if la_ == 1:
                    self.state = 1524
                    self.else_block()

                self.state = 1528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
                if la_ == 1:
                    self.state = 1527
                    self.finally_block()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FandangoParser.EXCEPT, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_except_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExcept_block"):
                listener.enterExcept_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExcept_block"):
                listener.exitExcept_block(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_block"):
                return visitor.visitExcept_block(self)
            else:
                return visitor.visitChildren(self)

    def except_block(self):

        localctx = FandangoParser.Except_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_except_block)
        self._la = 0  # Token type
        try:
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 170, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.match(FandangoParser.EXCEPT)
                self.state = 1533
                self.expression()
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 10:
                    self.state = 1534
                    self.match(FandangoParser.AS)
                    self.state = 1535
                    self.match(FandangoParser.NAME)

                self.state = 1538
                self.match(FandangoParser.COLON)
                self.state = 1539
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1541
                self.match(FandangoParser.EXCEPT)
                self.state = 1542
                self.match(FandangoParser.COLON)
                self.state = 1543
                self.block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_star_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FandangoParser.EXCEPT, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_except_star_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExcept_star_block"):
                listener.enterExcept_star_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExcept_star_block"):
                listener.exitExcept_star_block(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_star_block"):
                return visitor.visitExcept_star_block(self)
            else:
                return visitor.visitChildren(self)

    def except_star_block(self):

        localctx = FandangoParser.Except_star_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_except_star_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.match(FandangoParser.EXCEPT)
            self.state = 1547
            self.match(FandangoParser.STAR)
            self.state = 1548
            self.expression()
            self.state = 1551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 10:
                self.state = 1549
                self.match(FandangoParser.AS)
                self.state = 1550
                self.match(FandangoParser.NAME)

            self.state = 1553
            self.match(FandangoParser.COLON)
            self.state = 1554
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Finally_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FandangoParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_finally_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFinally_block"):
                listener.enterFinally_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFinally_block"):
                listener.exitFinally_block(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFinally_block"):
                return visitor.visitFinally_block(self)
            else:
                return visitor.visitChildren(self)

    def finally_block(self):

        localctx = FandangoParser.Finally_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_finally_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.match(FandangoParser.FINALLY)
            self.state = 1557
            self.match(FandangoParser.COLON)
            self.state = 1558
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(FandangoParser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(FandangoParser.Subject_exprContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(FandangoParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FandangoParser.DEDENT, 0)

        def case_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Case_blockContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_match_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMatch_stmt"):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMatch_stmt"):
                listener.exitMatch_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMatch_stmt"):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)

    def match_stmt(self):

        localctx = FandangoParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_match_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.match(FandangoParser.MATCH)
            self.state = 1561
            self.subject_expr()
            self.state = 1562
            self.match(FandangoParser.COLON)
            self.state = 1563
            self.match(FandangoParser.NEWLINE)
            self.state = 1564
            self.match(FandangoParser.INDENT)
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1565
                self.case_block()
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 15):
                    break

            self.state = 1570
            self.match(FandangoParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subject_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_subject_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubject_expr"):
                listener.enterSubject_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubject_expr"):
                listener.exitSubject_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubject_expr"):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)

    def subject_expr(self):

        localctx = FandangoParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_subject_expr)
        self._la = 0  # Token type
        try:
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1572
                self.star_named_expression()
                self.state = 1573
                self.match(FandangoParser.COMMA)
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599633861127) != 0
                ):
                    self.state = 1574
                    self.star_named_expressions()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1577
                self.named_expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(FandangoParser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(FandangoParser.PatternsContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def guard(self):
            return self.getTypedRuleContext(FandangoParser.GuardContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_case_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCase_block"):
                listener.enterCase_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCase_block"):
                listener.exitCase_block(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCase_block"):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)

    def case_block(self):

        localctx = FandangoParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_case_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.match(FandangoParser.CASE)
            self.state = 1581
            self.patterns()
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 28:
                self.state = 1582
                self.guard()

            self.state = 1585
            self.match(FandangoParser.COLON)
            self.state = 1586
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_guard

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGuard"):
                listener.enterGuard(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGuard"):
                listener.exitGuard(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGuard"):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)

    def guard(self):

        localctx = FandangoParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self.match(FandangoParser.IF)
            self.state = 1589
            self.named_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Open_sequence_patternContext, 0
            )

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_patterns

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPatterns"):
                listener.enterPatterns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPatterns"):
                listener.exitPatterns(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPatterns"):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)

    def patterns(self):

        localctx = FandangoParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_patterns)
        try:
            self.state = 1593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1591
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1592
                self.pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(FandangoParser.As_patternContext, 0)

        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPattern"):
                listener.enterPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPattern"):
                listener.exitPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPattern"):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)

    def pattern(self):

        localctx = FandangoParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pattern)
        try:
            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1595
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.or_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_as_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAs_pattern"):
                listener.enterAs_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAs_pattern"):
                listener.exitAs_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAs_pattern"):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)

    def as_pattern(self):

        localctx = FandangoParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.or_pattern()
            self.state = 1600
            self.match(FandangoParser.AS)
            self.state = 1601
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Closed_patternContext, i)

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_or_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOr_pattern"):
                listener.enterOr_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOr_pattern"):
                listener.exitOr_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_pattern"):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)

    def or_pattern(self):

        localctx = FandangoParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_or_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.closed_pattern()
            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 77:
                self.state = 1604
                self.match(FandangoParser.OR_OP)
                self.state = 1605
                self.closed_pattern()
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closed_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Literal_patternContext, 0)

        def capture_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Capture_patternContext, 0)

        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext, 0)

        def value_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Value_patternContext, 0)

        def group_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Group_patternContext, 0)

        def sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Sequence_patternContext, 0)

        def mapping_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Mapping_patternContext, 0)

        def class_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Class_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_closed_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClosed_pattern"):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClosed_pattern"):
                listener.exitClosed_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosed_pattern"):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)

    def closed_pattern(self):

        localctx = FandangoParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_closed_pattern)
        try:
            self.state = 1619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1612
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1613
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1614
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1615
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1616
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1617
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1618
                self.class_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext, 0)

        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral_pattern"):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral_pattern"):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral_pattern"):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)

    def literal_pattern(self):

        localctx = FandangoParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_literal_pattern)
        try:
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1621
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1622
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1623
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1624
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1625
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1626
                self.match(FandangoParser.FALSE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext, 0)

        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral_expr"):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral_expr"):
                listener.exitLiteral_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral_expr"):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)

    def literal_expr(self):

        localctx = FandangoParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_literal_expr)
        try:
            self.state = 1635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 181, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1629
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1630
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1631
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1632
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1633
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1634
                self.match(FandangoParser.FALSE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Complex_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_real_numberContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(FandangoParser.Imaginary_numberContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_complex_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComplex_number"):
                listener.enterComplex_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComplex_number"):
                listener.exitComplex_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComplex_number"):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)

    def complex_number(self):

        localctx = FandangoParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_complex_number)
        try:
            self.state = 1645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1637
                self.signed_real_number()
                self.state = 1638
                self.match(FandangoParser.ADD)
                self.state = 1639
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1641
                self.signed_real_number()
                self.state = 1642
                self.match(FandangoParser.MINUS)
                self.state = 1643
                self.imaginary_number()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_number"):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)

    def signed_number(self):

        localctx = FandangoParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_signed_number)
        try:
            self.state = 1650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1647
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                self.match(FandangoParser.MINUS)
                self.state = 1649
                self.match(FandangoParser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(FandangoParser.Real_numberContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_real_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSigned_real_number"):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSigned_real_number"):
                listener.exitSigned_real_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_real_number"):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)

    def signed_real_number(self):

        localctx = FandangoParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_signed_real_number)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self.real_number()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1653
                self.match(FandangoParser.MINUS)
                self.state = 1654
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Real_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_real_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReal_number"):
                listener.enterReal_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReal_number"):
                listener.exitReal_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReal_number"):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)

    def real_number(self):

        localctx = FandangoParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_imaginary_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImaginary_number"):
                listener.enterImaginary_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImaginary_number"):
                listener.exitImaginary_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImaginary_number"):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)

    def imaginary_number(self):

        localctx = FandangoParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Capture_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_capture_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapture_pattern"):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapture_pattern"):
                listener.exitCapture_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCapture_pattern"):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)

    def capture_pattern(self):

        localctx = FandangoParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pattern_capture_target

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPattern_capture_target"):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPattern_capture_target"):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPattern_capture_target"):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)

    def pattern_capture_target(self):

        localctx = FandangoParser.Pattern_capture_targetContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 222, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.match(FandangoParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(FandangoParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_wildcard_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWildcard_pattern"):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWildcard_pattern"):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWildcard_pattern"):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)

    def wildcard_pattern(self):

        localctx = FandangoParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(FandangoParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_value_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValue_pattern"):
                listener.enterValue_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValue_pattern"):
                listener.exitValue_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValue_pattern"):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)

    def value_pattern(self):

        localctx = FandangoParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_attr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr"):
                listener.enterAttr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr"):
                listener.exitAttr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAttr"):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)

    def attr(self):

        localctx = FandangoParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.name_or_attr(0)
            self.state = 1670
            self.match(FandangoParser.DOT)
            self.state = 1671
            self.match(FandangoParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_or_attrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_name_or_attr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName_or_attr"):
                listener.enterName_or_attr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName_or_attr"):
                listener.exitName_or_attr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitName_or_attr"):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)

    def name_or_attr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Name_or_attrContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_name_or_attr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.match(FandangoParser.NAME)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1681
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Name_or_attrContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_name_or_attr
                    )
                    self.state = 1676
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1677
                    self.match(FandangoParser.DOT)
                    self.state = 1678
                    self.match(FandangoParser.NAME)
                self.state = 1683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Group_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_group_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroup_pattern"):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroup_pattern"):
                listener.exitGroup_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroup_pattern"):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)

    def group_pattern(self):

        localctx = FandangoParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 1685
            self.pattern()
            self.state = 1686
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Maybe_sequence_patternContext, 0
            )

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Open_sequence_patternContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_sequence_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSequence_pattern"):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSequence_pattern"):
                listener.exitSequence_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSequence_pattern"):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def sequence_pattern(self):

        localctx = FandangoParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.state = 1698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1688
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4523408024928280) != 0) or (
                    (((_la - 67)) & ~0x3F) == 0
                    and ((1 << (_la - 67)) & 2251799815848195) != 0
                ):
                    self.state = 1689
                    self.maybe_sequence_pattern()

                self.state = 1692
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1693
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4523408024928280) != 0) or (
                    (((_la - 67)) & ~0x3F) == 0
                    and ((1 << (_la - 67)) & 2251799815848195) != 0
                ):
                    self.state = 1694
                    self.open_sequence_pattern()

                self.state = 1697
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Maybe_star_patternContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Maybe_sequence_patternContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_open_sequence_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOpen_sequence_pattern"):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOpen_sequence_pattern"):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpen_sequence_pattern"):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def open_sequence_pattern(self):

        localctx = FandangoParser.Open_sequence_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 236, self.RULE_open_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.maybe_star_pattern()
            self.state = 1701
            self.match(FandangoParser.COMMA)
            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4523408024928280) != 0) or (
                (((_la - 67)) & ~0x3F) == 0
                and ((1 << (_la - 67)) & 2251799815848195) != 0
            ):
                self.state = 1702
                self.maybe_sequence_pattern()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Maybe_star_patternContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Maybe_star_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_sequence_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMaybe_sequence_pattern"):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMaybe_sequence_pattern"):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaybe_sequence_pattern"):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def maybe_sequence_pattern(self):

        localctx = FandangoParser.Maybe_sequence_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 238, self.RULE_maybe_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.maybe_star_pattern()
            self.state = 1710
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 190, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1706
                    self.match(FandangoParser.COMMA)
                    self.state = 1707
                    self.maybe_star_pattern()
                self.state = 1712
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 190, self._ctx)

            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 1713
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Star_patternContext, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_star_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMaybe_star_pattern"):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMaybe_star_pattern"):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaybe_star_pattern"):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)

    def maybe_star_pattern(self):

        localctx = FandangoParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_maybe_star_pattern)
        try:
            self.state = 1718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1716
                self.star_pattern()
                pass
            elif token in [3, 4, 23, 34, 41, 44, 52, 68, 75, 83, 88, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1717
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_pattern"):
                listener.enterStar_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_pattern"):
                listener.exitStar_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_pattern"):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)

    def star_pattern(self):

        localctx = FandangoParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_star_pattern)
        try:
            self.state = 1724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1720
                self.match(FandangoParser.STAR)
                self.state = 1721
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1722
                self.match(FandangoParser.STAR)
                self.state = 1723
                self.wildcard_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mapping_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Double_star_patternContext, 0
            )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Items_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_mapping_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMapping_pattern"):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMapping_pattern"):
                listener.exitMapping_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMapping_pattern"):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)

    def mapping_pattern(self):

        localctx = FandangoParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_mapping_pattern)
        self._la = 0  # Token type
        try:
            self.state = 1751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 197, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1726
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1727
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1728
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1729
                self.double_star_pattern()
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1730
                    self.match(FandangoParser.COMMA)

                self.state = 1733
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1735
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1736
                self.items_pattern()
                self.state = 1737
                self.match(FandangoParser.COMMA)
                self.state = 1738
                self.double_star_pattern()
                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1739
                    self.match(FandangoParser.COMMA)

                self.state = 1742
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1744
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1745
                self.items_pattern()
                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1746
                    self.match(FandangoParser.COMMA)

                self.state = 1749
                self.match(FandangoParser.CLOSE_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Items_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Key_value_patternContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Key_value_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_items_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterItems_pattern"):
                listener.enterItems_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitItems_pattern"):
                listener.exitItems_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitItems_pattern"):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)

    def items_pattern(self):

        localctx = FandangoParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.key_value_pattern()
            self.state = 1758
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1754
                    self.match(FandangoParser.COMMA)
                    self.state = 1755
                    self.key_value_pattern()
                self.state = 1760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_value_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def literal_expr(self):
            return self.getTypedRuleContext(FandangoParser.Literal_exprContext, 0)

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_key_value_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKey_value_pattern"):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKey_value_pattern"):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKey_value_pattern"):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)

    def key_value_pattern(self):

        localctx = FandangoParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 23, 34, 41, 83, 118]:
                self.state = 1761
                self.literal_expr()
                pass
            elif token in [52]:
                self.state = 1762
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1765
            self.match(FandangoParser.COLON)
            self.state = 1766
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_double_star_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDouble_star_pattern"):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDouble_star_pattern"):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDouble_star_pattern"):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)

    def double_star_pattern(self):

        localctx = FandangoParser.Double_star_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 250, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(FandangoParser.POWER)
            self.state = 1769
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(
                FandangoParser.Positional_patternsContext, 0
            )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(FandangoParser.Keyword_patternsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_class_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_pattern"):
                listener.enterClass_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_pattern"):
                listener.exitClass_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClass_pattern"):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)

    def class_pattern(self):

        localctx = FandangoParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_class_pattern)
        self._la = 0  # Token type
        try:
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1771
                self.name_or_attr(0)
                self.state = 1772
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1773
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1775
                self.name_or_attr(0)
                self.state = 1776
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1777
                self.positional_patterns()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1778
                    self.match(FandangoParser.COMMA)

                self.state = 1781
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1783
                self.name_or_attr(0)
                self.state = 1784
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1785
                self.keyword_patterns()
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1786
                    self.match(FandangoParser.COMMA)

                self.state = 1789
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1791
                self.name_or_attr(0)
                self.state = 1792
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1793
                self.positional_patterns()
                self.state = 1794
                self.match(FandangoParser.COMMA)
                self.state = 1795
                self.keyword_patterns()
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 1796
                    self.match(FandangoParser.COMMA)

                self.state = 1799
                self.match(FandangoParser.CLOSE_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_patternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.PatternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.PatternContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_positional_patterns

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPositional_patterns"):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPositional_patterns"):
                listener.exitPositional_patterns(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPositional_patterns"):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)

    def positional_patterns(self):

        localctx = FandangoParser.Positional_patternsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 254, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.pattern()
            self.state = 1808
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 204, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1804
                    self.match(FandangoParser.COMMA)
                    self.state = 1805
                    self.pattern()
                self.state = 1810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 204, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Keyword_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_patterns

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword_patterns"):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword_patterns"):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword_patterns"):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)

    def keyword_patterns(self):

        localctx = FandangoParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.keyword_pattern()
            self.state = 1816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 205, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1812
                    self.match(FandangoParser.COMMA)
                    self.state = 1813
                    self.keyword_pattern()
                self.state = 1818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 205, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword_pattern"):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword_pattern"):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword_pattern"):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)

    def keyword_pattern(self):

        localctx = FandangoParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.match(FandangoParser.NAME)
            self.state = 1820
            self.match(FandangoParser.ASSIGN)
            self.state = 1821
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_aliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(FandangoParser.TYPE, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def type_params(self):
            return self.getTypedRuleContext(FandangoParser.Type_paramsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_alias"):
                listener.enterType_alias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_alias"):
                listener.exitType_alias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_alias"):
                return visitor.visitType_alias(self)
            else:
                return visitor.visitChildren(self)

    def type_alias(self):

        localctx = FandangoParser.Type_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_type_alias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(FandangoParser.TYPE)
            self.state = 1824
            self.match(FandangoParser.NAME)
            self.state = 1826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 75:
                self.state = 1825
                self.type_params()

            self.state = 1828
            self.match(FandangoParser.ASSIGN)
            self.state = 1829
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_paramsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def type_param_seq(self):
            return self.getTypedRuleContext(FandangoParser.Type_param_seqContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_params

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_params"):
                listener.enterType_params(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_params"):
                listener.exitType_params(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_params"):
                return visitor.visitType_params(self)
            else:
                return visitor.visitChildren(self)

    def type_params(self):

        localctx = FandangoParser.Type_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_type_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 1832
            self.type_param_seq()
            self.state = 1833
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_param_seqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_param(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Type_paramContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Type_paramContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_param_seq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_param_seq"):
                listener.enterType_param_seq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_param_seq"):
                listener.exitType_param_seq(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_param_seq"):
                return visitor.visitType_param_seq(self)
            else:
                return visitor.visitChildren(self)

    def type_param_seq(self):

        localctx = FandangoParser.Type_param_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_type_param_seq)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.type_param()
            self.state = 1840
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1836
                    self.match(FandangoParser.COMMA)
                    self.state = 1837
                    self.type_param()
                self.state = 1842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)

            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 1843
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_paramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def type_param_bound(self):
            return self.getTypedRuleContext(FandangoParser.Type_param_boundContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_param

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_param"):
                listener.enterType_param(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_param"):
                listener.exitType_param(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_param"):
                return visitor.visitType_param(self)
            else:
                return visitor.visitChildren(self)

    def type_param(self):

        localctx = FandangoParser.Type_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_type_param)
        self._la = 0  # Token type
        try:
            self.state = 1854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                self.match(FandangoParser.NAME)
                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 71:
                    self.state = 1847
                    self.type_param_bound()

                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1850
                self.match(FandangoParser.STAR)
                self.state = 1851
                self.match(FandangoParser.NAME)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1852
                self.match(FandangoParser.POWER)
                self.state = 1853
                self.match(FandangoParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_param_boundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_param_bound

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_param_bound"):
                listener.enterType_param_bound(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_param_bound"):
                listener.exitType_param_bound(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_param_bound"):
                return visitor.visitType_param_bound(self)
            else:
                return visitor.visitChildren(self)

    def type_param_bound(self):

        localctx = FandangoParser.Type_param_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_type_param_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.match(FandangoParser.COLON)
            self.state = 1857
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_expressions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressions"):
                listener.enterExpressions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressions"):
                listener.exitExpressions(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressions"):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)

    def expressions(self):

        localctx = FandangoParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_expressions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.expression()
            self.state = 1864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 211, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1860
                    self.match(FandangoParser.COMMA)
                    self.state = 1861
                    self.expression()
                self.state = 1866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 211, self._ctx)

            self.state = 1868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 1867
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.DisjunctionContext, i)

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def lambdef(self):
            return self.getTypedRuleContext(FandangoParser.LambdefContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self):

        localctx = FandangoParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_expression)
        try:
            self.state = 1878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 213, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1870
                self.disjunction()
                self.state = 1871
                self.match(FandangoParser.IF)
                self.state = 1872
                self.disjunction()
                self.state = 1873
                self.match(FandangoParser.ELSE)
                self.state = 1874
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1876
                self.disjunction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1877
                self.lambdef()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FandangoParser.YIELD, 0)

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_yield_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_expr"):
                listener.enterYield_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_expr"):
                listener.exitYield_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_expr"):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)

    def yield_expr(self):

        localctx = FandangoParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_yield_expr)
        try:
            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 215, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1880
                self.match(FandangoParser.YIELD)
                self.state = 1881
                self.match(FandangoParser.FROM)
                self.state = 1882
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1883
                self.match(FandangoParser.YIELD)
                self.state = 1885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 214, self._ctx)
                if la_ == 1:
                    self.state = 1884
                    self.star_expressions()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_expressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_expressionContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Star_expressionContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_expressions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_expressions"):
                listener.enterStar_expressions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_expressions"):
                listener.exitStar_expressions(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_expressions"):
                return visitor.visitStar_expressions(self)
            else:
                return visitor.visitChildren(self)

    def star_expressions(self):

        localctx = FandangoParser.Star_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_star_expressions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self.star_expression()
            self.state = 1894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1890
                    self.match(FandangoParser.COMMA)
                    self.state = 1891
                    self.star_expression()
                self.state = 1896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)

            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                self.state = 1897
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_expression"):
                listener.enterStar_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_expression"):
                listener.exitStar_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_expression"):
                return visitor.visitStar_expression(self)
            else:
                return visitor.visitChildren(self)

    def star_expression(self):

        localctx = FandangoParser.Star_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_star_expression)
        try:
            self.state = 1903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1900
                self.match(FandangoParser.STAR)
                self.state = 1901
                self.bitwise_or(0)
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                32,
                34,
                36,
                41,
                52,
                66,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Star_named_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Star_named_expressionContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expressions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_named_expressions"):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_named_expressions"):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_named_expressions"):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)

    def star_named_expressions(self):

        localctx = FandangoParser.Star_named_expressionsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 280, self.RULE_star_named_expressions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.star_named_expression()
            self.state = 1910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 219, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1906
                    self.match(FandangoParser.COMMA)
                    self.state = 1907
                    self.star_named_expression()
                self.state = 1912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 219, self._ctx)

            self.state = 1914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 1913
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_named_expression"):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_named_expression"):
                listener.exitStar_named_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_named_expression"):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)

    def star_named_expression(self):

        localctx = FandangoParser.Star_named_expressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 282, self.RULE_star_named_expression)
        try:
            self.state = 1919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1916
                self.match(FandangoParser.STAR)
                self.state = 1917
                self.bitwise_or(0)
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                32,
                34,
                36,
                41,
                52,
                66,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1918
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def EXPR_ASSIGN(self):
            return self.getToken(FandangoParser.EXPR_ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assignment_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment_expression"):
                listener.enterAssignment_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment_expression"):
                listener.exitAssignment_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignment_expression"):
                return visitor.visitAssignment_expression(self)
            else:
                return visitor.visitChildren(self)

    def assignment_expression(self):

        localctx = FandangoParser.Assignment_expressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 284, self.RULE_assignment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self.match(FandangoParser.NAME)
            self.state = 1922
            self.match(FandangoParser.EXPR_ASSIGN)
            self.state = 1923
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Assignment_expressionContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_named_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamed_expression"):
                listener.enterNamed_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamed_expression"):
                listener.exitNamed_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNamed_expression"):
                return visitor.visitNamed_expression(self)
            else:
                return visitor.visitChildren(self)

    def named_expression(self):

        localctx = FandangoParser.Named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_named_expression)
        try:
            self.state = 1927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 222, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ConjunctionContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_disjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisjunction"):
                listener.enterDisjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisjunction"):
                listener.exitDisjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDisjunction"):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)

    def disjunction(self):

        localctx = FandangoParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_disjunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.conjunction()
            self.state = 1934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 223, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1930
                    self.match(FandangoParser.OR)
                    self.state = 1931
                    self.conjunction()
                self.state = 1936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 223, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.InversionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.InversionContext, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_conjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConjunction"):
                listener.enterConjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConjunction"):
                listener.exitConjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConjunction"):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)

    def conjunction(self):

        localctx = FandangoParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_conjunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.inversion()
            self.state = 1942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 224, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1938
                    self.match(FandangoParser.AND)
                    self.state = 1939
                    self.inversion()
                self.state = 1944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 224, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InversionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def inversion(self):
            return self.getTypedRuleContext(FandangoParser.InversionContext, 0)

        def comparison(self):
            return self.getTypedRuleContext(FandangoParser.ComparisonContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_inversion

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInversion"):
                listener.enterInversion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInversion"):
                listener.exitInversion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInversion"):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)

    def inversion(self):

        localctx = FandangoParser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_inversion)
        try:
            self.state = 1948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1945
                self.match(FandangoParser.NOT)
                self.state = 1946
                self.inversion()
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                34,
                41,
                52,
                66,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1947
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def compare_op_bitwise_or_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Compare_op_bitwise_or_pairContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Compare_op_bitwise_or_pairContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_comparison

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparison"):
                listener.enterComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparison"):
                listener.exitComparison(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)

    def comparison(self):

        localctx = FandangoParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.bitwise_or(0)
            self.state = 1954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 226, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1951
                    self.compare_op_bitwise_or_pair()
                self.state = 1956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 226, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compare_op_bitwise_or_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eq_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Eq_bitwise_orContext, 0)

        def noteq_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Noteq_bitwise_orContext, 0)

        def lte_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Lte_bitwise_orContext, 0)

        def lt_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Lt_bitwise_orContext, 0)

        def gte_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Gte_bitwise_orContext, 0)

        def gt_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Gt_bitwise_orContext, 0)

        def notin_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Notin_bitwise_orContext, 0)

        def in_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.In_bitwise_orContext, 0)

        def isnot_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Isnot_bitwise_orContext, 0)

        def is_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Is_bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_compare_op_bitwise_or_pair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompare_op_bitwise_or_pair"):
                listener.enterCompare_op_bitwise_or_pair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompare_op_bitwise_or_pair"):
                listener.exitCompare_op_bitwise_or_pair(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompare_op_bitwise_or_pair"):
                return visitor.visitCompare_op_bitwise_or_pair(self)
            else:
                return visitor.visitChildren(self)

    def compare_op_bitwise_or_pair(self):

        localctx = FandangoParser.Compare_op_bitwise_or_pairContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 296, self.RULE_compare_op_bitwise_or_pair)
        try:
            self.state = 1967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1957
                self.eq_bitwise_or()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1958
                self.noteq_bitwise_or()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1959
                self.lte_bitwise_or()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1960
                self.lt_bitwise_or()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1961
                self.gte_bitwise_or()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1962
                self.gt_bitwise_or()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1963
                self.notin_bitwise_or()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1964
                self.in_bitwise_or()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1965
                self.isnot_bitwise_or()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1966
                self.is_bitwise_or()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eq_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(FandangoParser.EQUALS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_eq_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEq_bitwise_or"):
                listener.enterEq_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEq_bitwise_or"):
                listener.exitEq_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEq_bitwise_or"):
                return visitor.visitEq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def eq_bitwise_or(self):

        localctx = FandangoParser.Eq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_eq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(FandangoParser.EQUALS)
            self.state = 1970
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Noteq_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQ_2(self):
            return self.getToken(FandangoParser.NOT_EQ_2, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_noteq_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoteq_bitwise_or"):
                listener.enterNoteq_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoteq_bitwise_or"):
                listener.exitNoteq_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNoteq_bitwise_or"):
                return visitor.visitNoteq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def noteq_bitwise_or(self):

        localctx = FandangoParser.Noteq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_noteq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.match(FandangoParser.NOT_EQ_2)
            self.state = 1973
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lte_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT_EQ(self):
            return self.getToken(FandangoParser.LT_EQ, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lte_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLte_bitwise_or"):
                listener.enterLte_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLte_bitwise_or"):
                listener.exitLte_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLte_bitwise_or"):
                return visitor.visitLte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def lte_bitwise_or(self):

        localctx = FandangoParser.Lte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_lte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.match(FandangoParser.LT_EQ)
            self.state = 1976
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lt_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lt_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLt_bitwise_or"):
                listener.enterLt_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLt_bitwise_or"):
                listener.exitLt_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLt_bitwise_or"):
                return visitor.visitLt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def lt_bitwise_or(self):

        localctx = FandangoParser.Lt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_lt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(FandangoParser.LESS_THAN)
            self.state = 1979
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Gte_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT_EQ(self):
            return self.getToken(FandangoParser.GT_EQ, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_gte_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGte_bitwise_or"):
                listener.enterGte_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGte_bitwise_or"):
                listener.exitGte_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGte_bitwise_or"):
                return visitor.visitGte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def gte_bitwise_or(self):

        localctx = FandangoParser.Gte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_gte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self.match(FandangoParser.GT_EQ)
            self.state = 1982
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Gt_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_gt_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGt_bitwise_or"):
                listener.enterGt_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGt_bitwise_or"):
                listener.exitGt_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGt_bitwise_or"):
                return visitor.visitGt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def gt_bitwise_or(self):

        localctx = FandangoParser.Gt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_gt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(FandangoParser.GREATER_THAN)
            self.state = 1985
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notin_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_notin_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNotin_bitwise_or"):
                listener.enterNotin_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNotin_bitwise_or"):
                listener.exitNotin_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNotin_bitwise_or"):
                return visitor.visitNotin_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def notin_bitwise_or(self):

        localctx = FandangoParser.Notin_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_notin_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(FandangoParser.NOT)
            self.state = 1988
            self.match(FandangoParser.IN)
            self.state = 1989
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class In_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_in_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIn_bitwise_or"):
                listener.enterIn_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIn_bitwise_or"):
                listener.exitIn_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIn_bitwise_or"):
                return visitor.visitIn_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def in_bitwise_or(self):

        localctx = FandangoParser.In_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_in_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.match(FandangoParser.IN)
            self.state = 1992
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isnot_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(FandangoParser.IS, 0)

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_isnot_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIsnot_bitwise_or"):
                listener.enterIsnot_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIsnot_bitwise_or"):
                listener.exitIsnot_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsnot_bitwise_or"):
                return visitor.visitIsnot_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def isnot_bitwise_or(self):

        localctx = FandangoParser.Isnot_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_isnot_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.match(FandangoParser.IS)
            self.state = 1995
            self.match(FandangoParser.NOT)
            self.state = 1996
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Is_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(FandangoParser.IS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_is_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIs_bitwise_or"):
                listener.enterIs_bitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIs_bitwise_or"):
                listener.exitIs_bitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIs_bitwise_or"):
                return visitor.visitIs_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def is_bitwise_or(self):

        localctx = FandangoParser.Is_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_is_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.match(FandangoParser.IS)
            self.state = 1999
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_xor(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_xorContext, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def OR_OP(self):
            return self.getToken(FandangoParser.OR_OP, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_bitwise_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitwise_or"):
                listener.enterBitwise_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitwise_or"):
                listener.exitBitwise_or(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwise_or"):
                return visitor.visitBitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def bitwise_or(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Bitwise_orContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_bitwise_or, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.bitwise_xor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2009
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 228, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Bitwise_orContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwise_or
                    )
                    self.state = 2004
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 2005
                    self.match(FandangoParser.OR_OP)
                    self.state = 2006
                    self.bitwise_xor(0)
                self.state = 2011
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 228, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_and(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_andContext, 0)

        def bitwise_xor(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_xorContext, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_bitwise_xor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitwise_xor"):
                listener.enterBitwise_xor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitwise_xor"):
                listener.exitBitwise_xor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwise_xor"):
                return visitor.visitBitwise_xor(self)
            else:
                return visitor.visitChildren(self)

    def bitwise_xor(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Bitwise_xorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 320
        self.enterRecursionRule(localctx, 320, self.RULE_bitwise_xor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self.bitwise_and(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2020
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 229, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Bitwise_xorContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwise_xor
                    )
                    self.state = 2015
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 2016
                    self.match(FandangoParser.XOR)
                    self.state = 2017
                    self.bitwise_and(0)
                self.state = 2022
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 229, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Bitwise_andContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self):
            return self.getTypedRuleContext(FandangoParser.Shift_exprContext, 0)

        def bitwise_and(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_andContext, 0)

        def AND_OP(self):
            return self.getToken(FandangoParser.AND_OP, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_bitwise_and

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitwise_and"):
                listener.enterBitwise_and(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitwise_and"):
                listener.exitBitwise_and(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwise_and"):
                return visitor.visitBitwise_and(self)
            else:
                return visitor.visitChildren(self)

    def bitwise_and(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Bitwise_andContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 322
        self.enterRecursionRule(localctx, 322, self.RULE_bitwise_and, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.shift_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 230, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Bitwise_andContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwise_and
                    )
                    self.state = 2026
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 2027
                    self.match(FandangoParser.AND_OP)
                    self.state = 2028
                    self.shift_expr(0)
                self.state = 2033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 230, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Shift_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_(self):
            return self.getTypedRuleContext(FandangoParser.SumContext, 0)

        def shift_expr(self):
            return self.getTypedRuleContext(FandangoParser.Shift_exprContext, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FandangoParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_shift_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShift_expr"):
                listener.enterShift_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShift_expr"):
                listener.exitShift_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitShift_expr"):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)

    def shift_expr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Shift_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 324
        self.enterRecursionRule(localctx, 324, self.RULE_shift_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.sum_(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 232, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2043
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.Shift_exprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_shift_expr
                        )
                        self.state = 2037
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2038
                        self.match(FandangoParser.LEFT_SHIFT)
                        self.state = 2039
                        self.sum_(0)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.Shift_exprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_shift_expr
                        )
                        self.state = 2040
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2041
                        self.match(FandangoParser.RIGHT_SHIFT)
                        self.state = 2042
                        self.sum_(0)
                        pass

                self.state = 2047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 232, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SumContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(FandangoParser.TermContext, 0)

        def sum_(self):
            return self.getTypedRuleContext(FandangoParser.SumContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_sum

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSum"):
                listener.enterSum(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSum"):
                listener.exitSum(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSum"):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)

    def sum_(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.SumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 326
        self.enterRecursionRule(localctx, 326, self.RULE_sum, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 234, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2057
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.SumContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_sum
                        )
                        self.state = 2051
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2052
                        self.match(FandangoParser.ADD)
                        self.state = 2053
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.SumContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_sum
                        )
                        self.state = 2054
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2055
                        self.match(FandangoParser.MINUS)
                        self.state = 2056
                        self.term(0)
                        pass

                self.state = 2061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 234, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(FandangoParser.FactorContext, 0)

        def term(self):
            return self.getTypedRuleContext(FandangoParser.TermContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def IDIV(self):
            return self.getToken(FandangoParser.IDIV, 0)

        def MOD(self):
            return self.getToken(FandangoParser.MOD, 0)

        def AT(self):
            return self.getToken(FandangoParser.AT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTerm"):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)

    def term(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 328
        self.enterRecursionRule(localctx, 328, self.RULE_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2082
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 236, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2080
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2065
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 2066
                        self.match(FandangoParser.STAR)
                        self.state = 2067
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2068
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 2069
                        self.match(FandangoParser.DIV)
                        self.state = 2070
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2071
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 2072
                        self.match(FandangoParser.IDIV)
                        self.state = 2073
                        self.factor()
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2074
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2075
                        self.match(FandangoParser.MOD)
                        self.state = 2076
                        self.factor()
                        pass

                    elif la_ == 5:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2077
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2078
                        self.match(FandangoParser.AT)
                        self.state = 2079
                        self.factor()
                        pass

                self.state = 2084
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 236, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def factor(self):
            return self.getTypedRuleContext(FandangoParser.FactorContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FandangoParser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(FandangoParser.PowerContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFactor"):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)

    def factor(self):

        localctx = FandangoParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_factor)
        try:
            self.state = 2092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2085
                self.match(FandangoParser.ADD)
                self.state = 2086
                self.factor()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2087
                self.match(FandangoParser.MINUS)
                self.state = 2088
                self.factor()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2089
                self.match(FandangoParser.NOT_OP)
                self.state = 2090
                self.factor()
                pass
            elif token in [3, 4, 8, 13, 23, 34, 41, 52, 66, 68, 75, 77, 88, 118]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2091
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def await_primary(self):
            return self.getTypedRuleContext(FandangoParser.Await_primaryContext, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(FandangoParser.FactorContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_power

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPower"):
                listener.enterPower(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPower"):
                listener.exitPower(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)

    def power(self):

        localctx = FandangoParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_power)
        try:
            self.state = 2099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 238, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2094
                self.await_primary()
                self.state = 2095
                self.match(FandangoParser.POWER)
                self.state = 2096
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2098
                self.await_primary()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Await_primaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT(self):
            return self.getToken(FandangoParser.AWAIT, 0)

        def primary(self):
            return self.getTypedRuleContext(FandangoParser.PrimaryContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_await_primary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAwait_primary"):
                listener.enterAwait_primary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAwait_primary"):
                listener.exitAwait_primary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAwait_primary"):
                return visitor.visitAwait_primary(self)
            else:
                return visitor.visitChildren(self)

    def await_primary(self):

        localctx = FandangoParser.Await_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_await_primary)
        try:
            self.state = 2104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2101
                self.match(FandangoParser.AWAIT)
                self.state = 2102
                self.primary(0)
                pass
            elif token in [3, 4, 8, 23, 34, 41, 52, 66, 68, 75, 77, 88, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2103
                self.primary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(FandangoParser.AtomContext, 0)

        def primary(self):
            return self.getTypedRuleContext(FandangoParser.PrimaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_primary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimary"):
                listener.enterPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimary"):
                listener.exitPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimary"):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)

    def primary(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.PrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 336
        self.enterRecursionRule(localctx, 336, self.RULE_primary, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2127
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 242, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2125
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 241, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2109
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 2110
                        self.match(FandangoParser.DOT)
                        self.state = 2111
                        self.match(FandangoParser.NAME)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2112
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 2113
                        self.genexp()
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2114
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2115
                        self.match(FandangoParser.OPEN_PAREN)
                        self.state = 2117
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 4505888853336344) != 0
                        ) or (
                            (((_la - 66)) & ~0x3F) == 0
                            and ((1 << (_la - 66)) & 4503599633861255) != 0
                        ):
                            self.state = 2116
                            self.arguments()

                        self.state = 2119
                        self.match(FandangoParser.CLOSE_PAREN)
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2120
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2121
                        self.match(FandangoParser.OPEN_BRACK)
                        self.state = 2122
                        self.slices()
                        self.state = 2123
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass

                self.state = 2129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 242, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SlicesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slice_(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.SliceContext)
            else:
                return self.getTypedRuleContext(FandangoParser.SliceContext, i)

        def starred_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Starred_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Starred_expressionContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_slices

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSlices"):
                listener.enterSlices(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSlices"):
                listener.exitSlices(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlices"):
                return visitor.visitSlices(self)
            else:
                return visitor.visitChildren(self)

    def slices(self):

        localctx = FandangoParser.SlicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_slices)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                3,
                4,
                8,
                13,
                23,
                32,
                34,
                36,
                41,
                52,
                66,
                68,
                71,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.state = 2130
                self.slice_()
                pass
            elif token in [67]:
                self.state = 2131
                self.starred_expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2141
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 245, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2134
                    self.match(FandangoParser.COMMA)
                    self.state = 2137
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        3,
                        4,
                        8,
                        13,
                        23,
                        32,
                        34,
                        36,
                        41,
                        52,
                        66,
                        68,
                        71,
                        75,
                        77,
                        82,
                        83,
                        87,
                        88,
                        118,
                    ]:
                        self.state = 2135
                        self.slice_()
                        pass
                    elif token in [67]:
                        self.state = 2136
                        self.starred_expression()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 2143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 245, self._ctx)

            self.state = 2145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2144
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_slice

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSlice"):
                listener.enterSlice(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSlice"):
                listener.exitSlice(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlice"):
                return visitor.visitSlice(self)
            else:
                return visitor.visitChildren(self)

    def slice_(self):

        localctx = FandangoParser.SliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_slice)
        self._la = 0  # Token type
        try:
            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 251, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599633861125) != 0
                ):
                    self.state = 2147
                    self.expression()

                self.state = 2150
                self.match(FandangoParser.COLON)
                self.state = 2152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599633861125) != 0
                ):
                    self.state = 2151
                    self.expression()

                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 71:
                    self.state = 2154
                    self.match(FandangoParser.COLON)
                    self.state = 2156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        ((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0
                    ) or (
                        (((_la - 66)) & ~0x3F) == 0
                        and ((1 << (_la - 66)) & 4503599633861125) != 0
                    ):
                        self.state = 2155
                        self.expression()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2160
                self.named_expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector_length(self):
            return self.getTypedRuleContext(FandangoParser.Selector_lengthContext, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def tuple_(self):
            return self.getTypedRuleContext(FandangoParser.TupleContext, 0)

        def group(self):
            return self.getTypedRuleContext(FandangoParser.GroupContext, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def list_(self):
            return self.getTypedRuleContext(FandangoParser.ListContext, 0)

        def listcomp(self):
            return self.getTypedRuleContext(FandangoParser.ListcompContext, 0)

        def dict_(self):
            return self.getTypedRuleContext(FandangoParser.DictContext, 0)

        def set_(self):
            return self.getTypedRuleContext(FandangoParser.SetContext, 0)

        def dictcomp(self):
            return self.getTypedRuleContext(FandangoParser.DictcompContext, 0)

        def setcomp(self):
            return self.getTypedRuleContext(FandangoParser.SetcompContext, 0)

        def ELLIPSIS(self):
            return self.getToken(FandangoParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)

    def atom(self):

        localctx = FandangoParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_atom)
        try:
            self.state = 2186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 255, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.selector_length()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.match(FandangoParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2165
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2166
                self.match(FandangoParser.FALSE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2167
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2168
                self.strings()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2169
                self.match(FandangoParser.NUMBER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 252, self._ctx)
                if la_ == 1:
                    self.state = 2170
                    self.tuple_()
                    pass

                elif la_ == 2:
                    self.state = 2171
                    self.group()
                    pass

                elif la_ == 3:
                    self.state = 2172
                    self.genexp()
                    pass

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 253, self._ctx)
                if la_ == 1:
                    self.state = 2175
                    self.list_()
                    pass

                elif la_ == 2:
                    self.state = 2176
                    self.listcomp()
                    pass

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 254, self._ctx)
                if la_ == 1:
                    self.state = 2179
                    self.dict_()
                    pass

                elif la_ == 2:
                    self.state = 2180
                    self.set_()
                    pass

                elif la_ == 3:
                    self.state = 2181
                    self.dictcomp()
                    pass

                elif la_ == 4:
                    self.state = 2182
                    self.setcomp()
                    pass

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2185
                self.match(FandangoParser.ELLIPSIS)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_group

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroup"):
                listener.enterGroup(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroup"):
                listener.exitGroup(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroup"):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)

    def group(self):

        localctx = FandangoParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 2191
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.state = 2189
                self.yield_expr()
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                32,
                34,
                36,
                41,
                52,
                66,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.state = 2190
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2193
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(FandangoParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def lambda_params(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambdef

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdef"):
                listener.enterLambdef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdef"):
                listener.exitLambdef(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdef"):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)

    def lambdef(self):

        localctx = FandangoParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_lambdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2195
            self.match(FandangoParser.LAMBDA)
            self.state = 2197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 52)) & ~0x3F) == 0 and ((1 << (_la - 52)) & 2129921) != 0:
                self.state = 2196
                self.lambda_params()

            self.state = 2199
            self.match(FandangoParser.COLON)
            self.state = 2200
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_paramsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_parameters(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_parametersContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_params

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_params"):
                listener.enterLambda_params(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_params"):
                listener.exitLambda_params(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_params"):
                return visitor.visitLambda_params(self)
            else:
                return visitor.visitChildren(self)

    def lambda_params(self):

        localctx = FandangoParser.Lambda_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_lambda_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            self.lambda_parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_parametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_slash_no_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_slash_no_defaultContext, 0
            )

        def lambda_param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_no_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_no_defaultContext, i
                )

        def lambda_param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_with_defaultContext, i
                )

        def lambda_star_etc(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_star_etcContext, 0)

        def lambda_slash_with_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_slash_with_defaultContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_parameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_parameters"):
                listener.enterLambda_parameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_parameters"):
                listener.exitLambda_parameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_parameters"):
                return visitor.visitLambda_parameters(self)
            else:
                return visitor.visitChildren(self)

    def lambda_parameters(self):

        localctx = FandangoParser.Lambda_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_lambda_parameters)
        self._la = 0  # Token type
        try:
            self.state = 2253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2204
                self.lambda_slash_no_default()
                self.state = 2208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2205
                        self.lambda_param_no_default()
                    self.state = 2210
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)

                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 2211
                    self.lambda_param_with_default()
                    self.state = 2216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 2217
                    self.lambda_star_etc()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2220
                self.lambda_slash_with_default()
                self.state = 2224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 2221
                    self.lambda_param_with_default()
                    self.state = 2226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 2227
                    self.lambda_star_etc()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2231
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2230
                        self.lambda_param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2233
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 263, self._ctx)

                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 2235
                    self.lambda_param_with_default()
                    self.state = 2240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 2241
                    self.lambda_star_etc()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2244
                    self.lambda_param_with_default()
                    self.state = 2247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 52):
                        break

                self.state = 2250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 67 or _la == 73:
                    self.state = 2249
                    self.lambda_star_etc()

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2252
                self.lambda_star_etc()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_slash_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def lambda_param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_no_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_no_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_slash_no_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_slash_no_default"):
                listener.enterLambda_slash_no_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_slash_no_default"):
                listener.exitLambda_slash_no_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_slash_no_default"):
                return visitor.visitLambda_slash_no_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_slash_no_default(self):

        localctx = FandangoParser.Lambda_slash_no_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 352, self.RULE_lambda_slash_no_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2255
                self.lambda_param_no_default()
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 52):
                    break

            self.state = 2260
            self.match(FandangoParser.DIV)
            self.state = 2262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2261
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_slash_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def lambda_param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_no_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_no_defaultContext, i
                )

        def lambda_param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_with_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_slash_with_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_slash_with_default"):
                listener.enterLambda_slash_with_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_slash_with_default"):
                listener.exitLambda_slash_with_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_slash_with_default"):
                return visitor.visitLambda_slash_with_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_slash_with_default(self):

        localctx = FandangoParser.Lambda_slash_with_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 354, self.RULE_lambda_slash_with_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 271, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2264
                    self.lambda_param_no_default()
                self.state = 2269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 271, self._ctx)

            self.state = 2271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2270
                self.lambda_param_with_default()
                self.state = 2273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 52):
                    break

            self.state = 2275
            self.match(FandangoParser.DIV)
            self.state = 2277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2276
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_star_etcContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_param_no_defaultContext, 0
            )

        def lambda_param_maybe_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_maybe_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_maybe_defaultContext, i
                )

        def lambda_kwds(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_kwdsContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_star_etc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_star_etc"):
                listener.enterLambda_star_etc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_star_etc"):
                listener.exitLambda_star_etc(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_star_etc"):
                return visitor.visitLambda_star_etc(self)
            else:
                return visitor.visitChildren(self)

    def lambda_star_etc(self):

        localctx = FandangoParser.Lambda_star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_lambda_star_etc)
        self._la = 0  # Token type
        try:
            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 278, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2279
                self.match(FandangoParser.STAR)
                self.state = 2280
                self.lambda_param_no_default()
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 52:
                    self.state = 2281
                    self.lambda_param_maybe_default()
                    self.state = 2286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 73:
                    self.state = 2287
                    self.lambda_kwds()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2290
                self.match(FandangoParser.STAR)
                self.state = 2291
                self.match(FandangoParser.COMMA)
                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2292
                    self.lambda_param_maybe_default()
                    self.state = 2295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 52):
                        break

                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 73:
                    self.state = 2297
                    self.lambda_kwds()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2300
                self.lambda_kwds()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_kwdsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_param_no_defaultContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_kwds

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_kwds"):
                listener.enterLambda_kwds(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_kwds"):
                listener.exitLambda_kwds(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_kwds"):
                return visitor.visitLambda_kwds(self)
            else:
                return visitor.visitChildren(self)

    def lambda_kwds(self):

        localctx = FandangoParser.Lambda_kwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_lambda_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self.match(FandangoParser.POWER)
            self.state = 2304
            self.lambda_param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_param_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param_no_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_param_no_default"):
                listener.enterLambda_param_no_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_param_no_default"):
                listener.exitLambda_param_no_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param_no_default"):
                return visitor.visitLambda_param_no_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param_no_default(self):

        localctx = FandangoParser.Lambda_param_no_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 360, self.RULE_lambda_param_no_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.lambda_param()
            self.state = 2308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2307
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_param_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramContext, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param_with_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_param_with_default"):
                listener.enterLambda_param_with_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_param_with_default"):
                listener.exitLambda_param_with_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param_with_default"):
                return visitor.visitLambda_param_with_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param_with_default(self):

        localctx = FandangoParser.Lambda_param_with_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 362, self.RULE_lambda_param_with_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.lambda_param()
            self.state = 2311
            self.default()
            self.state = 2313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2312
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_param_maybe_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramContext, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param_maybe_default

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_param_maybe_default"):
                listener.enterLambda_param_maybe_default(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_param_maybe_default"):
                listener.exitLambda_param_maybe_default(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param_maybe_default"):
                return visitor.visitLambda_param_maybe_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param_maybe_default(self):

        localctx = FandangoParser.Lambda_param_maybe_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 364, self.RULE_lambda_param_maybe_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            self.lambda_param()
            self.state = 2317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 74:
                self.state = 2316
                self.default()

            self.state = 2320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2319
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_paramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambda_param"):
                listener.enterLambda_param(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambda_param"):
                listener.exitLambda_param(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param"):
                return visitor.visitLambda_param(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param(self):

        localctx = FandangoParser.Lambda_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_lambda_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.match(FandangoParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_middleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_replacement_fieldContext, 0
            )

        def FSTRING_MIDDLE(self):
            return self.getToken(FandangoParser.FSTRING_MIDDLE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_middle

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFstring_middle"):
                listener.enterFstring_middle(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFstring_middle"):
                listener.exitFstring_middle(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_middle"):
                return visitor.visitFstring_middle(self)
            else:
                return visitor.visitChildren(self)

    def fstring_middle(self):

        localctx = FandangoParser.Fstring_middleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_fstring_middle)
        try:
            self.state = 2326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2324
                self.fstring_replacement_field()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2325
                self.match(FandangoParser.FSTRING_MIDDLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_replacement_fieldContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def fstring_conversion(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_conversionContext, 0)

        def fstring_full_format_spec(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_full_format_specContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_replacement_field

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFstring_replacement_field"):
                listener.enterFstring_replacement_field(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFstring_replacement_field"):
                listener.exitFstring_replacement_field(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_replacement_field"):
                return visitor.visitFstring_replacement_field(self)
            else:
                return visitor.visitChildren(self)

    def fstring_replacement_field(self):

        localctx = FandangoParser.Fstring_replacement_fieldContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 370, self.RULE_fstring_replacement_field)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 2331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.state = 2329
                self.yield_expr()
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                32,
                34,
                36,
                41,
                52,
                66,
                67,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.state = 2330
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 74:
                self.state = 2333
                self.match(FandangoParser.ASSIGN)

            self.state = 2337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
            if la_ == 1:
                self.state = 2336
                self.fstring_conversion()

            self.state = 2340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 71:
                self.state = 2339
                self.fstring_full_format_spec()

            self.state = 2342
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_conversionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(FandangoParser.EXCL, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_conversion

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFstring_conversion"):
                listener.enterFstring_conversion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFstring_conversion"):
                listener.exitFstring_conversion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_conversion"):
                return visitor.visitFstring_conversion(self)
            else:
                return visitor.visitChildren(self)

    def fstring_conversion(self):

        localctx = FandangoParser.Fstring_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_fstring_conversion)
        try:
            self.state = 2347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 89]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2345
                self.match(FandangoParser.EXCL)
                self.state = 2346
                self.match(FandangoParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_full_format_specContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def fstring_format_spec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Fstring_format_specContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Fstring_format_specContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_full_format_spec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFstring_full_format_spec"):
                listener.enterFstring_full_format_spec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFstring_full_format_spec"):
                listener.exitFstring_full_format_spec(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_full_format_spec"):
                return visitor.visitFstring_full_format_spec(self)
            else:
                return visitor.visitChildren(self)

    def fstring_full_format_spec(self):

        localctx = FandangoParser.Fstring_full_format_specContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 374, self.RULE_fstring_full_format_spec)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(FandangoParser.COLON)
            self.state = 2353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 88 or _la == 117:
                self.state = 2350
                self.fstring_format_spec()
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_format_specContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_MIDDLE(self):
            return self.getToken(FandangoParser.FSTRING_MIDDLE, 0)

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_replacement_fieldContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_format_spec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFstring_format_spec"):
                listener.enterFstring_format_spec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFstring_format_spec"):
                listener.exitFstring_format_spec(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_format_spec"):
                return visitor.visitFstring_format_spec(self)
            else:
                return visitor.visitChildren(self)

    def fstring_format_spec(self):

        localctx = FandangoParser.Fstring_format_specContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 376, self.RULE_fstring_format_spec)
        try:
            self.state = 2358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2356
                self.match(FandangoParser.FSTRING_MIDDLE)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2357
                self.fstring_replacement_field()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FstringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_START(self):
            return self.getToken(FandangoParser.FSTRING_START, 0)

        def FSTRING_END(self):
            return self.getToken(FandangoParser.FSTRING_END, 0)

        def fstring_middle(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Fstring_middleContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Fstring_middleContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFstring"):
                listener.enterFstring(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFstring"):
                listener.exitFstring(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring"):
                return visitor.visitFstring(self)
            else:
                return visitor.visitChildren(self)

    def fstring(self):

        localctx = FandangoParser.FstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_fstring)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2360
            self.match(FandangoParser.FSTRING_START)
            self.state = 2364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 88 or _la == 117:
                self.state = 2361
                self.fstring_middle()
                self.state = 2366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2367
            self.match(FandangoParser.FSTRING_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_string

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString"):
                listener.enterString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString"):
                listener.exitString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)

    def string(self):

        localctx = FandangoParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2369
            self.match(FandangoParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.FstringContext)
            else:
                return self.getTypedRuleContext(FandangoParser.FstringContext, i)

        def string(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StringContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StringContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_strings

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStrings"):
                listener.enterStrings(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStrings"):
                listener.exitStrings(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStrings"):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)

    def strings(self):

        localctx = FandangoParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_strings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2373
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [118]:
                        self.state = 2371
                        self.fstring()
                        pass
                    elif token in [3]:
                        self.state = 2372
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)

                else:
                    raise NoViableAltException(self)
                self.state = 2375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 293, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList"):
                listener.enterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList"):
                listener.exitList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitList"):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)

    def list_(self):

        localctx = FandangoParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 2379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                (((_la - 66)) & ~0x3F) == 0
                and ((1 << (_la - 66)) & 4503599633861127) != 0
            ):
                self.state = 2378
                self.star_named_expressions()

            self.state = 2381
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def star_named_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_tuple

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTuple"):
                listener.enterTuple(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTuple"):
                listener.exitTuple(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTuple"):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)

    def tuple_(self):

        localctx = FandangoParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_tuple)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2383
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 2388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                (((_la - 66)) & ~0x3F) == 0
                and ((1 << (_la - 66)) & 4503599633861127) != 0
            ):
                self.state = 2384
                self.star_named_expression()
                self.state = 2385
                self.match(FandangoParser.COMMA)

                self.state = 2386
                self.star_named_expressions()

            self.state = 2390
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_set

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSet"):
                listener.enterSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSet"):
                listener.exitSet(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSet"):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)

    def set_(self):

        localctx = FandangoParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 2393
            self.star_named_expressions()
            self.state = 2394
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def double_starred_kvpairs(self):
            return self.getTypedRuleContext(
                FandangoParser.Double_starred_kvpairsContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_dict

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict"):
                listener.enterDict(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict"):
                listener.exitDict(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDict"):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)

    def dict_(self):

        localctx = FandangoParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_dict)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2396
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 2398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505888853336344) != 0) or (
                (((_la - 66)) & ~0x3F) == 0
                and ((1 << (_la - 66)) & 4503599633861253) != 0
            ):
                self.state = 2397
                self.double_starred_kvpairs()

            self.state = 2400
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_starred_kvpairsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def double_starred_kvpair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Double_starred_kvpairContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Double_starred_kvpairContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_double_starred_kvpairs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDouble_starred_kvpairs"):
                listener.enterDouble_starred_kvpairs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDouble_starred_kvpairs"):
                listener.exitDouble_starred_kvpairs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDouble_starred_kvpairs"):
                return visitor.visitDouble_starred_kvpairs(self)
            else:
                return visitor.visitChildren(self)

    def double_starred_kvpairs(self):

        localctx = FandangoParser.Double_starred_kvpairsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 392, self.RULE_double_starred_kvpairs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.double_starred_kvpair()
            self.state = 2407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 297, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2403
                    self.match(FandangoParser.COMMA)
                    self.state = 2404
                    self.double_starred_kvpair()
                self.state = 2409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 297, self._ctx)

            self.state = 2411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2410
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_starred_kvpairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def kvpair(self):
            return self.getTypedRuleContext(FandangoParser.KvpairContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_double_starred_kvpair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDouble_starred_kvpair"):
                listener.enterDouble_starred_kvpair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDouble_starred_kvpair"):
                listener.exitDouble_starred_kvpair(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDouble_starred_kvpair"):
                return visitor.visitDouble_starred_kvpair(self)
            else:
                return visitor.visitChildren(self)

    def double_starred_kvpair(self):

        localctx = FandangoParser.Double_starred_kvpairContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 394, self.RULE_double_starred_kvpair)
        try:
            self.state = 2416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2413
                self.match(FandangoParser.POWER)
                self.state = 2414
                self.bitwise_or(0)
                pass
            elif token in [
                3,
                4,
                8,
                13,
                23,
                32,
                34,
                36,
                41,
                52,
                66,
                68,
                75,
                77,
                82,
                83,
                87,
                88,
                118,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2415
                self.kvpair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KvpairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kvpair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKvpair"):
                listener.enterKvpair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKvpair"):
                listener.exitKvpair(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKvpair"):
                return visitor.visitKvpair(self)
            else:
                return visitor.visitChildren(self)

    def kvpair(self):

        localctx = FandangoParser.KvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_kvpair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.expression()
            self.state = 2419
            self.match(FandangoParser.COLON)
            self.state = 2420
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_if_clausesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_if_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.For_if_clauseContext)
            else:
                return self.getTypedRuleContext(FandangoParser.For_if_clauseContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_if_clauses

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_if_clauses"):
                listener.enterFor_if_clauses(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_if_clauses"):
                listener.exitFor_if_clauses(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_if_clauses"):
                return visitor.visitFor_if_clauses(self)
            else:
                return visitor.visitChildren(self)

    def for_if_clauses(self):

        localctx = FandangoParser.For_if_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_for_if_clauses)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2422
                self.for_if_clause()
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 12 or _la == 25):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_if_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetsContext, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def disjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.DisjunctionContext, i)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def IF(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IF)
            else:
                return self.getToken(FandangoParser.IF, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_if_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_if_clause"):
                listener.enterFor_if_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_if_clause"):
                listener.exitFor_if_clause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_if_clause"):
                return visitor.visitFor_if_clause(self)
            else:
                return visitor.visitChildren(self)

    def for_if_clause(self):

        localctx = FandangoParser.For_if_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_for_if_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 12:
                self.state = 2427
                self.match(FandangoParser.ASYNC)

            self.state = 2430
            self.match(FandangoParser.FOR)
            self.state = 2431
            self.star_targets()
            self.state = 2432
            self.match(FandangoParser.IN)
            self.state = 2433
            self.disjunction()
            self.state = 2438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 28:
                self.state = 2434
                self.match(FandangoParser.IF)
                self.state = 2435
                self.disjunction()
                self.state = 2440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListcompContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_listcomp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListcomp"):
                listener.enterListcomp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListcomp"):
                listener.exitListcomp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListcomp"):
                return visitor.visitListcomp(self)
            else:
                return visitor.visitChildren(self)

    def listcomp(self):

        localctx = FandangoParser.ListcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_listcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 2442
            self.named_expression()
            self.state = 2443
            self.for_if_clauses()
            self.state = 2444
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetcompContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_setcomp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetcomp"):
                listener.enterSetcomp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetcomp"):
                listener.exitSetcomp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetcomp"):
                return visitor.visitSetcomp(self)
            else:
                return visitor.visitChildren(self)

    def setcomp(self):

        localctx = FandangoParser.SetcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_setcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2446
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 2447
            self.named_expression()
            self.state = 2448
            self.for_if_clauses()
            self.state = 2449
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenexpContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Assignment_expressionContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_genexp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGenexp"):
                listener.enterGenexp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGenexp"):
                listener.exitGenexp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenexp"):
                return visitor.visitGenexp(self)
            else:
                return visitor.visitChildren(self)

    def genexp(self):

        localctx = FandangoParser.GenexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_genexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2451
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 2454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 303, self._ctx)
            if la_ == 1:
                self.state = 2452
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.state = 2453
                self.expression()
                pass

            self.state = 2456
            self.for_if_clauses()
            self.state = 2457
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictcompContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def kvpair(self):
            return self.getTypedRuleContext(FandangoParser.KvpairContext, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dictcomp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDictcomp"):
                listener.enterDictcomp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDictcomp"):
                listener.exitDictcomp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDictcomp"):
                return visitor.visitDictcomp(self)
            else:
                return visitor.visitChildren(self)

    def dictcomp(self):

        localctx = FandangoParser.DictcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_dictcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 2460
            self.kvpair()
            self.state = 2461
            self.for_if_clauses()
            self.state = 2462
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FandangoParser.ArgsContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArguments"):
                listener.enterArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArguments"):
                listener.exitArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArguments"):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)

    def arguments(self):

        localctx = FandangoParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2464
            self.args()
            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2465
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ArgContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ArgContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def kwargs(self):
            return self.getTypedRuleContext(FandangoParser.KwargsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_args

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgs"):
                listener.enterArgs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgs"):
                listener.exitArgs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgs"):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)

    def args(self):

        localctx = FandangoParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_args)
        try:
            self.state = 2481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2468
                self.arg()
                self.state = 2473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 305, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2469
                        self.match(FandangoParser.COMMA)
                        self.state = 2470
                        self.arg()
                    self.state = 2475
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 305, self._ctx)

                self.state = 2478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
                if la_ == 1:
                    self.state = 2476
                    self.match(FandangoParser.COMMA)
                    self.state = 2477
                    self.kwargs()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2480
                self.kwargs()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def starred_expression(self):
            return self.getTypedRuleContext(FandangoParser.Starred_expressionContext, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Assignment_expressionContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArg"):
                listener.enterArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArg"):
                listener.exitArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArg"):
                return visitor.visitArg(self)
            else:
                return visitor.visitChildren(self)

    def arg(self):

        localctx = FandangoParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_arg)
        try:
            self.state = 2486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 308, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2483
                self.starred_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2484
                self.assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2485
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KwargsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kwarg_or_starred(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Kwarg_or_starredContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Kwarg_or_starredContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def kwarg_or_double_starred(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Kwarg_or_double_starredContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Kwarg_or_double_starredContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_kwargs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKwargs"):
                listener.enterKwargs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKwargs"):
                listener.exitKwargs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwargs"):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)

    def kwargs(self):

        localctx = FandangoParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_kwargs)
        try:
            self.state = 2521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 313, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2488
                self.kwarg_or_starred()
                self.state = 2493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 309, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2489
                        self.match(FandangoParser.COMMA)
                        self.state = 2490
                        self.kwarg_or_starred()
                    self.state = 2495
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 309, self._ctx)

                self.state = 2496
                self.match(FandangoParser.COMMA)
                self.state = 2497
                self.kwarg_or_double_starred()
                self.state = 2502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 310, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2498
                        self.match(FandangoParser.COMMA)
                        self.state = 2499
                        self.kwarg_or_double_starred()
                    self.state = 2504
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 310, self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2505
                self.kwarg_or_starred()
                self.state = 2510
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 311, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2506
                        self.match(FandangoParser.COMMA)
                        self.state = 2507
                        self.kwarg_or_starred()
                    self.state = 2512
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 311, self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2513
                self.kwarg_or_double_starred()
                self.state = 2518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 312, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2514
                        self.match(FandangoParser.COMMA)
                        self.state = 2515
                        self.kwarg_or_double_starred()
                    self.state = 2520
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 312, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Starred_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_starred_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStarred_expression"):
                listener.enterStarred_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStarred_expression"):
                listener.exitStarred_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStarred_expression"):
                return visitor.visitStarred_expression(self)
            else:
                return visitor.visitChildren(self)

    def starred_expression(self):

        localctx = FandangoParser.Starred_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_starred_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            self.match(FandangoParser.STAR)
            self.state = 2524
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kwarg_or_starredContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def starred_expression(self):
            return self.getTypedRuleContext(FandangoParser.Starred_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kwarg_or_starred

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKwarg_or_starred"):
                listener.enterKwarg_or_starred(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKwarg_or_starred"):
                listener.exitKwarg_or_starred(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwarg_or_starred"):
                return visitor.visitKwarg_or_starred(self)
            else:
                return visitor.visitChildren(self)

    def kwarg_or_starred(self):

        localctx = FandangoParser.Kwarg_or_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_kwarg_or_starred)
        try:
            self.state = 2530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2526
                self.match(FandangoParser.NAME)
                self.state = 2527
                self.match(FandangoParser.ASSIGN)
                self.state = 2528
                self.expression()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2529
                self.starred_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kwarg_or_double_starredContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kwarg_or_double_starred

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKwarg_or_double_starred"):
                listener.enterKwarg_or_double_starred(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKwarg_or_double_starred"):
                listener.exitKwarg_or_double_starred(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwarg_or_double_starred"):
                return visitor.visitKwarg_or_double_starred(self)
            else:
                return visitor.visitChildren(self)

    def kwarg_or_double_starred(self):

        localctx = FandangoParser.Kwarg_or_double_starredContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 422, self.RULE_kwarg_or_double_starred)
        try:
            self.state = 2537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2532
                self.match(FandangoParser.NAME)
                self.state = 2533
                self.match(FandangoParser.ASSIGN)
                self.state = 2534
                self.expression()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2535
                self.match(FandangoParser.POWER)
                self.state = 2536
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targetsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_targets

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_targets"):
                listener.enterStar_targets(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_targets"):
                listener.exitStar_targets(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_targets"):
                return visitor.visitStar_targets(self)
            else:
                return visitor.visitChildren(self)

    def star_targets(self):

        localctx = FandangoParser.Star_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_star_targets)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            self.star_target()
            self.state = 2544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 316, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2540
                    self.match(FandangoParser.COMMA)
                    self.state = 2541
                    self.star_target()
                self.state = 2546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 316, self._ctx)

            self.state = 2548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2547
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targets_list_seqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_targets_list_seq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_targets_list_seq"):
                listener.enterStar_targets_list_seq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_targets_list_seq"):
                listener.exitStar_targets_list_seq(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_targets_list_seq"):
                return visitor.visitStar_targets_list_seq(self)
            else:
                return visitor.visitChildren(self)

    def star_targets_list_seq(self):

        localctx = FandangoParser.Star_targets_list_seqContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 426, self.RULE_star_targets_list_seq)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2550
            self.star_target()
            self.state = 2555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 318, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2551
                    self.match(FandangoParser.COMMA)
                    self.state = 2552
                    self.star_target()
                self.state = 2557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 318, self._ctx)

            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 70:
                self.state = 2558
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targets_tuple_seqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_targets_tuple_seq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_targets_tuple_seq"):
                listener.enterStar_targets_tuple_seq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_targets_tuple_seq"):
                listener.exitStar_targets_tuple_seq(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_targets_tuple_seq"):
                return visitor.visitStar_targets_tuple_seq(self)
            else:
                return visitor.visitChildren(self)

    def star_targets_tuple_seq(self):

        localctx = FandangoParser.Star_targets_tuple_seqContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 428, self.RULE_star_targets_tuple_seq)
        self._la = 0  # Token type
        try:
            self.state = 2574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 322, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2561
                self.star_target()
                self.state = 2564
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2562
                        self.match(FandangoParser.COMMA)
                        self.state = 2563
                        self.star_target()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2566
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 320, self._ctx)

                self.state = 2569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70:
                    self.state = 2568
                    self.match(FandangoParser.COMMA)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2571
                self.star_target()
                self.state = 2572
                self.match(FandangoParser.COMMA)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def star_target(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetContext, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(
                FandangoParser.Target_with_star_atomContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_star_target

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_target"):
                listener.enterStar_target(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_target"):
                listener.exitStar_target(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_target"):
                return visitor.visitStar_target(self)
            else:
                return visitor.visitChildren(self)

    def star_target(self):

        localctx = FandangoParser.Star_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_star_target)
        try:
            self.state = 2579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2576
                self.match(FandangoParser.STAR)
                self.state = 2577
                self.star_target()
                pass
            elif token in [3, 4, 8, 23, 34, 41, 52, 66, 68, 75, 77, 88, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2578
                self.target_with_star_atom()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_with_star_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def star_atom(self):
            return self.getTypedRuleContext(FandangoParser.Star_atomContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_target_with_star_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTarget_with_star_atom"):
                listener.enterTarget_with_star_atom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTarget_with_star_atom"):
                listener.exitTarget_with_star_atom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTarget_with_star_atom"):
                return visitor.visitTarget_with_star_atom(self)
            else:
                return visitor.visitChildren(self)

    def target_with_star_atom(self):

        localctx = FandangoParser.Target_with_star_atomContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 432, self.RULE_target_with_star_atom)
        try:
            self.state = 2591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 324, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2581
                self.t_primary(0)
                self.state = 2582
                self.match(FandangoParser.DOT)
                self.state = 2583
                self.match(FandangoParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2585
                self.t_primary(0)
                self.state = 2586
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 2587
                self.slices()
                self.state = 2588
                self.match(FandangoParser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2590
                self.star_atom()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(
                FandangoParser.Target_with_star_atomContext, 0
            )

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def star_targets_tuple_seq(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_targets_tuple_seqContext, 0
            )

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def star_targets_list_seq(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_targets_list_seqContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_star_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_atom"):
                listener.enterStar_atom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_atom"):
                listener.exitStar_atom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_atom"):
                return visitor.visitStar_atom(self)
            else:
                return visitor.visitChildren(self)

    def star_atom(self):

        localctx = FandangoParser.Star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_star_atom)
        self._la = 0  # Token type
        try:
            self.state = 2608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 327, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2593
                self.match(FandangoParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2594
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2595
                self.target_with_star_atom()
                self.state = 2596
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2598
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505815838884120) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599631567367) != 0
                ):
                    self.state = 2599
                    self.star_targets_tuple_seq()

                self.state = 2602
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2603
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 2605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505815838884120) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599631567367) != 0
                ):
                    self.state = 2604
                    self.star_targets_list_seq()

                self.state = 2607
                self.match(FandangoParser.CLOSE_BRACK)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Single_subscript_attribute_targetContext, 0
            )

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def single_target(self):
            return self.getTypedRuleContext(FandangoParser.Single_targetContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_single_target

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingle_target"):
                listener.enterSingle_target(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingle_target"):
                listener.exitSingle_target(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSingle_target"):
                return visitor.visitSingle_target(self)
            else:
                return visitor.visitChildren(self)

    def single_target(self):

        localctx = FandangoParser.Single_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_single_target)
        try:
            self.state = 2616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 328, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2610
                self.single_subscript_attribute_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2611
                self.match(FandangoParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2612
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2613
                self.single_target()
                self.state = 2614
                self.match(FandangoParser.CLOSE_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_subscript_attribute_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_single_subscript_attribute_target

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingle_subscript_attribute_target"):
                listener.enterSingle_subscript_attribute_target(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingle_subscript_attribute_target"):
                listener.exitSingle_subscript_attribute_target(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSingle_subscript_attribute_target"):
                return visitor.visitSingle_subscript_attribute_target(self)
            else:
                return visitor.visitChildren(self)

    def single_subscript_attribute_target(self):

        localctx = FandangoParser.Single_subscript_attribute_targetContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 438, self.RULE_single_subscript_attribute_target)
        try:
            self.state = 2627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 329, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2618
                self.t_primary(0)
                self.state = 2619
                self.match(FandangoParser.DOT)
                self.state = 2620
                self.match(FandangoParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2622
                self.t_primary(0)
                self.state = 2623
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 2624
                self.slices()
                self.state = 2625
                self.match(FandangoParser.CLOSE_BRACK)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class T_primaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(FandangoParser.AtomContext, 0)

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_t_primary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterT_primary"):
                listener.enterT_primary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitT_primary"):
                listener.exitT_primary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitT_primary"):
                return visitor.visitT_primary(self)
            else:
                return visitor.visitChildren(self)

    def t_primary(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.T_primaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 440
        self.enterRecursionRule(localctx, 440, self.RULE_t_primary, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 332, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2648
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 331, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 2632
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 2633
                        self.match(FandangoParser.DOT)
                        self.state = 2634
                        self.match(FandangoParser.NAME)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 2635
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 2636
                        self.match(FandangoParser.OPEN_BRACK)
                        self.state = 2637
                        self.slices()
                        self.state = 2638
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 2640
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2641
                        self.genexp()
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 2642
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2643
                        self.match(FandangoParser.OPEN_PAREN)
                        self.state = 2645
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 4505888853336344) != 0
                        ) or (
                            (((_la - 66)) & ~0x3F) == 0
                            and ((1 << (_la - 66)) & 4503599633861255) != 0
                        ):
                            self.state = 2644
                            self.arguments()

                        self.state = 2647
                        self.match(FandangoParser.CLOSE_PAREN)
                        pass

                self.state = 2652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 332, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Del_targetsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def del_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Del_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Del_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_targets

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDel_targets"):
                listener.enterDel_targets(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDel_targets"):
                listener.exitDel_targets(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_targets"):
                return visitor.visitDel_targets(self)
            else:
                return visitor.visitChildren(self)

    def del_targets(self):

        localctx = FandangoParser.Del_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_del_targets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2653
            self.del_target()
            self.state = 2658
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 333, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2654
                    self.match(FandangoParser.COMMA)
                    self.state = 2655
                    self.del_target()
                self.state = 2660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 333, self._ctx)

            self.state = 2662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 334, self._ctx)
            if la_ == 1:
                self.state = 2661
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def del_t_atom(self):
            return self.getTypedRuleContext(FandangoParser.Del_t_atomContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_target

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDel_target"):
                listener.enterDel_target(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDel_target"):
                listener.exitDel_target(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_target"):
                return visitor.visitDel_target(self)
            else:
                return visitor.visitChildren(self)

    def del_target(self):

        localctx = FandangoParser.Del_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_del_target)
        try:
            self.state = 2674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 335, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2664
                self.t_primary(0)
                self.state = 2665
                self.match(FandangoParser.DOT)
                self.state = 2666
                self.match(FandangoParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2668
                self.t_primary(0)
                self.state = 2669
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 2670
                self.slices()
                self.state = 2671
                self.match(FandangoParser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2673
                self.del_t_atom()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_t_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def del_targets(self):
            return self.getTypedRuleContext(FandangoParser.Del_targetsContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_t_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDel_t_atom"):
                listener.enterDel_t_atom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDel_t_atom"):
                listener.exitDel_t_atom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_t_atom"):
                return visitor.visitDel_t_atom(self)
            else:
                return visitor.visitChildren(self)

    def del_t_atom(self):

        localctx = FandangoParser.Del_t_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_del_t_atom)
        self._la = 0  # Token type
        try:
            self.state = 2687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2676
                self.match(FandangoParser.NAME)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2677
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505815838884120) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599631567365) != 0
                ):
                    self.state = 2678
                    self.del_targets()

                self.state = 2681
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2682
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 2684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3F) == 0 and ((1 << _la) & 4505815838884120) != 0) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & 4503599631567365) != 0
                ):
                    self.state = 2683
                    self.del_targets()

                self.state = 2686
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_expressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_expressions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_expressions"):
                listener.enterType_expressions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_expressions"):
                listener.exitType_expressions(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_expressions"):
                return visitor.visitType_expressions(self)
            else:
                return visitor.visitChildren(self)

    def type_expressions(self):

        localctx = FandangoParser.Type_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_type_expressions)
        self._la = 0  # Token type
        try:
            self.state = 2746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 343, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2689
                self.expression()
                self.state = 2694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 339, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2690
                        self.match(FandangoParser.COMMA)
                        self.state = 2691
                        self.expression()
                    self.state = 2696
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 339, self._ctx)

                self.state = 2697
                self.match(FandangoParser.COMMA)
                self.state = 2698
                self.match(FandangoParser.STAR)
                self.state = 2699
                self.expression()
                self.state = 2700
                self.match(FandangoParser.COMMA)
                self.state = 2701
                self.match(FandangoParser.POWER)
                self.state = 2702
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2704
                self.expression()
                self.state = 2709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 340, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2705
                        self.match(FandangoParser.COMMA)
                        self.state = 2706
                        self.expression()
                    self.state = 2711
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 340, self._ctx)

                self.state = 2712
                self.match(FandangoParser.COMMA)
                self.state = 2713
                self.match(FandangoParser.STAR)
                self.state = 2714
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2716
                self.expression()
                self.state = 2721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 341, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2717
                        self.match(FandangoParser.COMMA)
                        self.state = 2718
                        self.expression()
                    self.state = 2723
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 341, self._ctx)

                self.state = 2724
                self.match(FandangoParser.COMMA)
                self.state = 2725
                self.match(FandangoParser.POWER)
                self.state = 2726
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2728
                self.match(FandangoParser.STAR)
                self.state = 2729
                self.expression()
                self.state = 2730
                self.match(FandangoParser.COMMA)
                self.state = 2731
                self.match(FandangoParser.POWER)
                self.state = 2732
                self.expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2734
                self.match(FandangoParser.STAR)
                self.state = 2735
                self.expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2736
                self.match(FandangoParser.POWER)
                self.state = 2737
                self.expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2738
                self.expression()
                self.state = 2743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 70:
                    self.state = 2739
                    self.match(FandangoParser.COMMA)
                    self.state = 2740
                    self.expression()
                    self.state = 2745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_type_commentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_func_type_comment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_type_comment"):
                listener.enterFunc_type_comment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_type_comment"):
                listener.exitFunc_type_comment(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_type_comment"):
                return visitor.visitFunc_type_comment(self)
            else:
                return visitor.visitChildren(self)

    def func_type_comment(self):

        localctx = FandangoParser.Func_type_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_func_type_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2748
            self.match(FandangoParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.generator_call_sempred
        self._predicates[15] = self.minOrMax_sempred
        self._predicates[24] = self.selector_sempred
        self._predicates[61] = self.dotted_name_sempred
        self._predicates[115] = self.name_or_attr_sempred
        self._predicates[159] = self.bitwise_or_sempred
        self._predicates[160] = self.bitwise_xor_sempred
        self._predicates[161] = self.bitwise_and_sempred
        self._predicates[162] = self.shift_expr_sempred
        self._predicates[163] = self.sum_sempred
        self._predicates[164] = self.term_sempred
        self._predicates[168] = self.primary_sempred
        self._predicates[220] = self.t_primary_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def generator_call_sempred(self, localctx: Generator_callContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 4)

        if predIndex == 1:
            return self.precpred(self._ctx, 3)

        if predIndex == 2:
            return self.precpred(self._ctx, 2)

        if predIndex == 3:
            return self.precpred(self._ctx, 1)

    def minOrMax_sempred(self, localctx: MinOrMaxContext, predIndex: int):
        if predIndex == 4:
            return self._input.LT(1).text in ["min", "max"]

    def selector_sempred(self, localctx: SelectorContext, predIndex: int):
        if predIndex == 5:
            return self.precpred(self._ctx, 2)

        if predIndex == 6:
            return self.precpred(self._ctx, 1)

    def dotted_name_sempred(self, localctx: Dotted_nameContext, predIndex: int):
        if predIndex == 7:
            return self.precpred(self._ctx, 2)

    def name_or_attr_sempred(self, localctx: Name_or_attrContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 2)

    def bitwise_or_sempred(self, localctx: Bitwise_orContext, predIndex: int):
        if predIndex == 9:
            return self.precpred(self._ctx, 2)

    def bitwise_xor_sempred(self, localctx: Bitwise_xorContext, predIndex: int):
        if predIndex == 10:
            return self.precpred(self._ctx, 2)

    def bitwise_and_sempred(self, localctx: Bitwise_andContext, predIndex: int):
        if predIndex == 11:
            return self.precpred(self._ctx, 2)

    def shift_expr_sempred(self, localctx: Shift_exprContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 3)

        if predIndex == 13:
            return self.precpred(self._ctx, 2)

    def sum_sempred(self, localctx: SumContext, predIndex: int):
        if predIndex == 14:
            return self.precpred(self._ctx, 3)

        if predIndex == 15:
            return self.precpred(self._ctx, 2)

    def term_sempred(self, localctx: TermContext, predIndex: int):
        if predIndex == 16:
            return self.precpred(self._ctx, 6)

        if predIndex == 17:
            return self.precpred(self._ctx, 5)

        if predIndex == 18:
            return self.precpred(self._ctx, 4)

        if predIndex == 19:
            return self.precpred(self._ctx, 3)

        if predIndex == 20:
            return self.precpred(self._ctx, 2)

    def primary_sempred(self, localctx: PrimaryContext, predIndex: int):
        if predIndex == 21:
            return self.precpred(self._ctx, 5)

        if predIndex == 22:
            return self.precpred(self._ctx, 4)

        if predIndex == 23:
            return self.precpred(self._ctx, 3)

        if predIndex == 24:
            return self.precpred(self._ctx, 2)

    def t_primary_sempred(self, localctx: T_primaryContext, predIndex: int):
        if predIndex == 25:
            return self.precpred(self._ctx, 5)

        if predIndex == 26:
            return self.precpred(self._ctx, 4)

        if predIndex == 27:
            return self.precpred(self._ctx, 3)

        if predIndex == 28:
            return self.precpred(self._ctx, 2)
