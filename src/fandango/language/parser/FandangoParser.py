# Generated from FandangoParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        107,
        1655,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        2,
        113,
        7,
        113,
        2,
        114,
        7,
        114,
        2,
        115,
        7,
        115,
        2,
        116,
        7,
        116,
        2,
        117,
        7,
        117,
        2,
        118,
        7,
        118,
        2,
        119,
        7,
        119,
        2,
        120,
        7,
        120,
        2,
        121,
        7,
        121,
        2,
        122,
        7,
        122,
        2,
        123,
        7,
        123,
        2,
        124,
        7,
        124,
        2,
        125,
        7,
        125,
        2,
        126,
        7,
        126,
        2,
        127,
        7,
        127,
        2,
        128,
        7,
        128,
        2,
        129,
        7,
        129,
        2,
        130,
        7,
        130,
        2,
        131,
        7,
        131,
        2,
        132,
        7,
        132,
        2,
        133,
        7,
        133,
        2,
        134,
        7,
        134,
        2,
        135,
        7,
        135,
        2,
        136,
        7,
        136,
        2,
        137,
        7,
        137,
        2,
        138,
        7,
        138,
        2,
        139,
        7,
        139,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        5,
        1,
        285,
        8,
        1,
        10,
        1,
        12,
        1,
        288,
        9,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        292,
        8,
        1,
        10,
        1,
        12,
        1,
        295,
        9,
        1,
        5,
        1,
        297,
        8,
        1,
        10,
        1,
        12,
        1,
        300,
        9,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        305,
        8,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        312,
        8,
        3,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        319,
        8,
        4,
        10,
        4,
        12,
        4,
        322,
        9,
        4,
        1,
        5,
        1,
        5,
        5,
        5,
        326,
        8,
        5,
        10,
        5,
        12,
        5,
        329,
        9,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        336,
        8,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        352,
        8,
        10,
        1,
        10,
        1,
        10,
        1,
        11,
        5,
        11,
        357,
        8,
        11,
        10,
        11,
        12,
        11,
        360,
        9,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        3,
        11,
        369,
        8,
        11,
        1,
        11,
        5,
        11,
        372,
        8,
        11,
        10,
        11,
        12,
        11,
        375,
        9,
        11,
        1,
        12,
        1,
        12,
        3,
        12,
        379,
        8,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        392,
        8,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        3,
        15,
        409,
        8,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        414,
        8,
        16,
        10,
        16,
        12,
        16,
        417,
        9,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        5,
        17,
        422,
        8,
        17,
        10,
        17,
        12,
        17,
        425,
        9,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        432,
        8,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        5,
        19,
        437,
        8,
        19,
        10,
        19,
        12,
        19,
        440,
        9,
        19,
        1,
        20,
        1,
        20,
        3,
        20,
        444,
        8,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        5,
        21,
        452,
        8,
        21,
        10,
        21,
        12,
        21,
        455,
        9,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        5,
        22,
        466,
        8,
        22,
        10,
        22,
        12,
        22,
        469,
        9,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        5,
        23,
        474,
        8,
        23,
        10,
        23,
        12,
        23,
        477,
        9,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        5,
        24,
        482,
        8,
        24,
        10,
        24,
        12,
        24,
        485,
        9,
        24,
        1,
        24,
        1,
        24,
        3,
        24,
        489,
        8,
        24,
        1,
        24,
        5,
        24,
        492,
        8,
        24,
        10,
        24,
        12,
        24,
        495,
        9,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        501,
        8,
        25,
        1,
        25,
        3,
        25,
        504,
        8,
        25,
        1,
        25,
        1,
        25,
        1,
        26,
        4,
        26,
        509,
        8,
        26,
        11,
        26,
        12,
        26,
        510,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        517,
        8,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        527,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        30,
        1,
        30,
        3,
        30,
        534,
        8,
        30,
        1,
        30,
        1,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        541,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        547,
        8,
        31,
        5,
        31,
        549,
        8,
        31,
        10,
        31,
        12,
        31,
        552,
        9,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        557,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        563,
        8,
        31,
        5,
        31,
        565,
        8,
        31,
        10,
        31,
        12,
        31,
        568,
        9,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        574,
        8,
        31,
        3,
        31,
        576,
        8,
        31,
        3,
        31,
        578,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        583,
        8,
        31,
        3,
        31,
        585,
        8,
        31,
        3,
        31,
        587,
        8,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        591,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        597,
        8,
        31,
        5,
        31,
        599,
        8,
        31,
        10,
        31,
        12,
        31,
        602,
        9,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        608,
        8,
        31,
        3,
        31,
        610,
        8,
        31,
        3,
        31,
        612,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        617,
        8,
        31,
        3,
        31,
        619,
        8,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        3,
        32,
        624,
        8,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        629,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        635,
        8,
        33,
        5,
        33,
        637,
        8,
        33,
        10,
        33,
        12,
        33,
        640,
        9,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        645,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        651,
        8,
        33,
        5,
        33,
        653,
        8,
        33,
        10,
        33,
        12,
        33,
        656,
        9,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        662,
        8,
        33,
        3,
        33,
        664,
        8,
        33,
        3,
        33,
        666,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        671,
        8,
        33,
        3,
        33,
        673,
        8,
        33,
        3,
        33,
        675,
        8,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        679,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        685,
        8,
        33,
        5,
        33,
        687,
        8,
        33,
        10,
        33,
        12,
        33,
        690,
        9,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        696,
        8,
        33,
        3,
        33,
        698,
        8,
        33,
        3,
        33,
        700,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        705,
        8,
        33,
        3,
        33,
        707,
        8,
        33,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        3,
        35,
        713,
        8,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        5,
        36,
        718,
        8,
        36,
        10,
        36,
        12,
        36,
        721,
        9,
        36,
        1,
        36,
        3,
        36,
        724,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        736,
        8,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        743,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        748,
        8,
        38,
        5,
        38,
        750,
        8,
        38,
        10,
        38,
        12,
        38,
        753,
        9,
        38,
        3,
        38,
        755,
        8,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        3,
        39,
        761,
        8,
        39,
        1,
        40,
        1,
        40,
        3,
        40,
        765,
        8,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        3,
        40,
        770,
        8,
        40,
        5,
        40,
        772,
        8,
        40,
        10,
        40,
        12,
        40,
        775,
        9,
        40,
        1,
        40,
        3,
        40,
        778,
        8,
        40,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        792,
        8,
        44,
        1,
        45,
        1,
        45,
        1,
        46,
        1,
        46,
        1,
        47,
        1,
        47,
        3,
        47,
        800,
        8,
        47,
        1,
        48,
        1,
        48,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        3,
        49,
        808,
        8,
        49,
        3,
        49,
        810,
        8,
        49,
        1,
        50,
        1,
        50,
        3,
        50,
        814,
        8,
        50,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        52,
        1,
        52,
        5,
        52,
        821,
        8,
        52,
        10,
        52,
        12,
        52,
        824,
        9,
        52,
        1,
        52,
        1,
        52,
        4,
        52,
        828,
        8,
        52,
        11,
        52,
        12,
        52,
        829,
        3,
        52,
        832,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        841,
        8,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        3,
        53,
        846,
        8,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        851,
        8,
        54,
        1,
        55,
        1,
        55,
        1,
        55,
        5,
        55,
        856,
        8,
        55,
        10,
        55,
        12,
        55,
        859,
        9,
        55,
        1,
        55,
        3,
        55,
        862,
        8,
        55,
        1,
        56,
        1,
        56,
        1,
        56,
        5,
        56,
        867,
        8,
        56,
        10,
        56,
        12,
        56,
        870,
        9,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        5,
        57,
        875,
        8,
        57,
        10,
        57,
        12,
        57,
        878,
        9,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        5,
        58,
        884,
        8,
        58,
        10,
        58,
        12,
        58,
        887,
        9,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        5,
        59,
        893,
        8,
        59,
        10,
        59,
        12,
        59,
        896,
        9,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        3,
        60,
        902,
        8,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        3,
        61,
        914,
        8,
        61,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        920,
        8,
        62,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        5,
        63,
        931,
        8,
        63,
        10,
        63,
        12,
        63,
        934,
        9,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        3,
        63,
        939,
        8,
        63,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        3,
        64,
        948,
        8,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        3,
        65,
        959,
        8,
        65,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        4,
        66,
        968,
        8,
        66,
        11,
        66,
        12,
        66,
        969,
        1,
        66,
        1,
        66,
        1,
        66,
        3,
        66,
        975,
        8,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        3,
        66,
        980,
        8,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        3,
        66,
        985,
        8,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        5,
        67,
        991,
        8,
        67,
        10,
        67,
        12,
        67,
        994,
        9,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        3,
        68,
        1002,
        8,
        68,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        3,
        69,
        1008,
        8,
        69,
        3,
        69,
        1010,
        8,
        69,
        1,
        70,
        1,
        70,
        1,
        70,
        4,
        70,
        1015,
        8,
        70,
        11,
        70,
        12,
        70,
        1016,
        3,
        70,
        1019,
        8,
        70,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        4,
        71,
        1026,
        8,
        71,
        11,
        71,
        12,
        71,
        1027,
        1,
        72,
        1,
        72,
        1,
        72,
        3,
        72,
        1033,
        8,
        72,
        1,
        72,
        3,
        72,
        1036,
        8,
        72,
        1,
        73,
        1,
        73,
        4,
        73,
        1040,
        8,
        73,
        11,
        73,
        12,
        73,
        1041,
        1,
        73,
        3,
        73,
        1045,
        8,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        3,
        74,
        1050,
        8,
        74,
        1,
        75,
        1,
        75,
        1,
        75,
        3,
        75,
        1055,
        8,
        75,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        77,
        1,
        77,
        3,
        77,
        1065,
        8,
        77,
        1,
        78,
        1,
        78,
        3,
        78,
        1069,
        8,
        78,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        80,
        1,
        80,
        1,
        80,
        5,
        80,
        1078,
        8,
        80,
        10,
        80,
        12,
        80,
        1081,
        9,
        80,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        3,
        81,
        1091,
        8,
        81,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        82,
        3,
        82,
        1099,
        8,
        82,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        3,
        83,
        1107,
        8,
        83,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        3,
        84,
        1117,
        8,
        84,
        1,
        85,
        1,
        85,
        1,
        85,
        3,
        85,
        1122,
        8,
        85,
        1,
        86,
        1,
        86,
        1,
        86,
        3,
        86,
        1127,
        8,
        86,
        1,
        87,
        1,
        87,
        1,
        88,
        1,
        88,
        1,
        89,
        1,
        89,
        1,
        90,
        1,
        90,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        93,
        1,
        93,
        1,
        93,
        4,
        93,
        1144,
        8,
        93,
        11,
        93,
        12,
        93,
        1145,
        1,
        94,
        1,
        94,
        3,
        94,
        1150,
        8,
        94,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        96,
        1,
        96,
        3,
        96,
        1158,
        8,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        3,
        96,
        1163,
        8,
        96,
        1,
        96,
        3,
        96,
        1166,
        8,
        96,
        1,
        97,
        1,
        97,
        1,
        97,
        3,
        97,
        1171,
        8,
        97,
        1,
        98,
        1,
        98,
        1,
        98,
        5,
        98,
        1176,
        8,
        98,
        10,
        98,
        12,
        98,
        1179,
        9,
        98,
        1,
        98,
        3,
        98,
        1182,
        8,
        98,
        1,
        99,
        1,
        99,
        3,
        99,
        1186,
        8,
        99,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        3,
        100,
        1192,
        8,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        3,
        101,
        1199,
        8,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        3,
        101,
        1208,
        8,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        3,
        101,
        1215,
        8,
        101,
        1,
        101,
        1,
        101,
        3,
        101,
        1219,
        8,
        101,
        1,
        102,
        1,
        102,
        1,
        102,
        5,
        102,
        1224,
        8,
        102,
        10,
        102,
        12,
        102,
        1227,
        9,
        102,
        1,
        103,
        1,
        103,
        3,
        103,
        1231,
        8,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1247,
        8,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1255,
        8,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1265,
        8,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1269,
        8,
        105,
        1,
        106,
        1,
        106,
        1,
        106,
        5,
        106,
        1274,
        8,
        106,
        10,
        106,
        12,
        106,
        1277,
        9,
        106,
        1,
        107,
        1,
        107,
        1,
        107,
        5,
        107,
        1282,
        8,
        107,
        10,
        107,
        12,
        107,
        1285,
        9,
        107,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        3,
        109,
        1297,
        8,
        109,
        1,
        109,
        3,
        109,
        1300,
        8,
        109,
        1,
        110,
        1,
        110,
        3,
        110,
        1304,
        8,
        110,
        1,
        111,
        1,
        111,
        3,
        111,
        1308,
        8,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        112,
        1,
        112,
        3,
        112,
        1315,
        8,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        113,
        1,
        113,
        1,
        113,
        5,
        113,
        1323,
        8,
        113,
        10,
        113,
        12,
        113,
        1326,
        9,
        113,
        1,
        114,
        1,
        114,
        1,
        114,
        5,
        114,
        1331,
        8,
        114,
        10,
        114,
        12,
        114,
        1334,
        9,
        114,
        1,
        115,
        1,
        115,
        1,
        115,
        3,
        115,
        1339,
        8,
        115,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        5,
        116,
        1345,
        8,
        116,
        10,
        116,
        12,
        116,
        1348,
        9,
        116,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        3,
        117,
        1363,
        8,
        117,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        4,
        119,
        1372,
        8,
        119,
        11,
        119,
        12,
        119,
        1373,
        1,
        119,
        3,
        119,
        1377,
        8,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        5,
        119,
        1400,
        8,
        119,
        10,
        119,
        12,
        119,
        1403,
        9,
        119,
        1,
        120,
        3,
        120,
        1406,
        8,
        120,
        1,
        120,
        1,
        120,
        5,
        120,
        1410,
        8,
        120,
        10,
        120,
        12,
        120,
        1413,
        9,
        120,
        1,
        121,
        1,
        121,
        1,
        121,
        3,
        121,
        1418,
        8,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        3,
        121,
        1423,
        8,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        3,
        121,
        1428,
        8,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        4,
        121,
        1434,
        8,
        121,
        11,
        121,
        12,
        121,
        1435,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        3,
        121,
        1442,
        8,
        121,
        1,
        122,
        1,
        122,
        1,
        123,
        1,
        123,
        3,
        123,
        1448,
        8,
        123,
        1,
        123,
        1,
        123,
        1,
        123,
        1,
        123,
        3,
        123,
        1454,
        8,
        123,
        5,
        123,
        1456,
        8,
        123,
        10,
        123,
        12,
        123,
        1459,
        9,
        123,
        1,
        123,
        3,
        123,
        1462,
        8,
        123,
        3,
        123,
        1464,
        8,
        123,
        1,
        124,
        1,
        124,
        3,
        124,
        1468,
        8,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1477,
        8,
        124,
        1,
        125,
        1,
        125,
        1,
        125,
        5,
        125,
        1482,
        8,
        125,
        10,
        125,
        12,
        125,
        1485,
        9,
        125,
        1,
        125,
        3,
        125,
        1488,
        8,
        125,
        1,
        126,
        1,
        126,
        3,
        126,
        1492,
        8,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        1496,
        8,
        126,
        1,
        126,
        3,
        126,
        1499,
        8,
        126,
        3,
        126,
        1501,
        8,
        126,
        1,
        127,
        1,
        127,
        3,
        127,
        1505,
        8,
        127,
        1,
        128,
        1,
        128,
        3,
        128,
        1509,
        8,
        128,
        1,
        128,
        1,
        128,
        1,
        128,
        3,
        128,
        1514,
        8,
        128,
        5,
        128,
        1516,
        8,
        128,
        10,
        128,
        12,
        128,
        1519,
        9,
        128,
        1,
        128,
        3,
        128,
        1522,
        8,
        128,
        1,
        129,
        1,
        129,
        1,
        129,
        5,
        129,
        1527,
        8,
        129,
        10,
        129,
        12,
        129,
        1530,
        9,
        129,
        1,
        129,
        3,
        129,
        1533,
        8,
        129,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        1541,
        8,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        1551,
        8,
        130,
        5,
        130,
        1553,
        8,
        130,
        10,
        130,
        12,
        130,
        1556,
        9,
        130,
        1,
        130,
        3,
        130,
        1559,
        8,
        130,
        3,
        130,
        1561,
        8,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        1565,
        8,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        1571,
        8,
        130,
        5,
        130,
        1573,
        8,
        130,
        10,
        130,
        12,
        130,
        1576,
        9,
        130,
        1,
        130,
        3,
        130,
        1579,
        8,
        130,
        3,
        130,
        1581,
        8,
        130,
        3,
        130,
        1583,
        8,
        130,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        1589,
        8,
        131,
        1,
        131,
        3,
        131,
        1592,
        8,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        132,
        1,
        132,
        1,
        132,
        5,
        132,
        1600,
        8,
        132,
        10,
        132,
        12,
        132,
        1603,
        9,
        132,
        1,
        132,
        3,
        132,
        1606,
        8,
        132,
        1,
        133,
        1,
        133,
        3,
        133,
        1610,
        8,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        3,
        133,
        1620,
        8,
        133,
        1,
        134,
        1,
        134,
        3,
        134,
        1624,
        8,
        134,
        1,
        135,
        3,
        135,
        1627,
        8,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        3,
        135,
        1634,
        8,
        135,
        1,
        136,
        1,
        136,
        1,
        136,
        3,
        136,
        1639,
        8,
        136,
        1,
        137,
        1,
        137,
        3,
        137,
        1643,
        8,
        137,
        1,
        138,
        1,
        138,
        1,
        138,
        3,
        138,
        1648,
        8,
        138,
        1,
        139,
        4,
        139,
        1651,
        8,
        139,
        11,
        139,
        12,
        139,
        1652,
        1,
        139,
        0,
        2,
        42,
        238,
        140,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        234,
        236,
        238,
        240,
        242,
        244,
        246,
        248,
        250,
        252,
        254,
        256,
        258,
        260,
        262,
        264,
        266,
        268,
        270,
        272,
        274,
        276,
        278,
        0,
        8,
        1,
        0,
        84,
        90,
        1,
        0,
        93,
        105,
        1,
        0,
        59,
        60,
        2,
        0,
        76,
        77,
        81,
        81,
        3,
        0,
        61,
        61,
        78,
        80,
        91,
        91,
        1,
        0,
        76,
        77,
        1,
        0,
        74,
        75,
        3,
        0,
        31,
        31,
        41,
        41,
        47,
        47,
        1816,
        0,
        280,
        1,
        0,
        0,
        0,
        2,
        286,
        1,
        0,
        0,
        0,
        4,
        304,
        1,
        0,
        0,
        0,
        6,
        306,
        1,
        0,
        0,
        0,
        8,
        315,
        1,
        0,
        0,
        0,
        10,
        323,
        1,
        0,
        0,
        0,
        12,
        335,
        1,
        0,
        0,
        0,
        14,
        337,
        1,
        0,
        0,
        0,
        16,
        340,
        1,
        0,
        0,
        0,
        18,
        343,
        1,
        0,
        0,
        0,
        20,
        346,
        1,
        0,
        0,
        0,
        22,
        358,
        1,
        0,
        0,
        0,
        24,
        376,
        1,
        0,
        0,
        0,
        26,
        383,
        1,
        0,
        0,
        0,
        28,
        391,
        1,
        0,
        0,
        0,
        30,
        408,
        1,
        0,
        0,
        0,
        32,
        410,
        1,
        0,
        0,
        0,
        34,
        418,
        1,
        0,
        0,
        0,
        36,
        431,
        1,
        0,
        0,
        0,
        38,
        433,
        1,
        0,
        0,
        0,
        40,
        443,
        1,
        0,
        0,
        0,
        42,
        445,
        1,
        0,
        0,
        0,
        44,
        456,
        1,
        0,
        0,
        0,
        46,
        470,
        1,
        0,
        0,
        0,
        48,
        483,
        1,
        0,
        0,
        0,
        50,
        496,
        1,
        0,
        0,
        0,
        52,
        508,
        1,
        0,
        0,
        0,
        54,
        512,
        1,
        0,
        0,
        0,
        56,
        518,
        1,
        0,
        0,
        0,
        58,
        521,
        1,
        0,
        0,
        0,
        60,
        531,
        1,
        0,
        0,
        0,
        62,
        618,
        1,
        0,
        0,
        0,
        64,
        620,
        1,
        0,
        0,
        0,
        66,
        706,
        1,
        0,
        0,
        0,
        68,
        708,
        1,
        0,
        0,
        0,
        70,
        712,
        1,
        0,
        0,
        0,
        72,
        714,
        1,
        0,
        0,
        0,
        74,
        735,
        1,
        0,
        0,
        0,
        76,
        737,
        1,
        0,
        0,
        0,
        78,
        756,
        1,
        0,
        0,
        0,
        80,
        764,
        1,
        0,
        0,
        0,
        82,
        779,
        1,
        0,
        0,
        0,
        84,
        781,
        1,
        0,
        0,
        0,
        86,
        784,
        1,
        0,
        0,
        0,
        88,
        791,
        1,
        0,
        0,
        0,
        90,
        793,
        1,
        0,
        0,
        0,
        92,
        795,
        1,
        0,
        0,
        0,
        94,
        797,
        1,
        0,
        0,
        0,
        96,
        801,
        1,
        0,
        0,
        0,
        98,
        803,
        1,
        0,
        0,
        0,
        100,
        813,
        1,
        0,
        0,
        0,
        102,
        815,
        1,
        0,
        0,
        0,
        104,
        818,
        1,
        0,
        0,
        0,
        106,
        842,
        1,
        0,
        0,
        0,
        108,
        847,
        1,
        0,
        0,
        0,
        110,
        852,
        1,
        0,
        0,
        0,
        112,
        863,
        1,
        0,
        0,
        0,
        114,
        871,
        1,
        0,
        0,
        0,
        116,
        879,
        1,
        0,
        0,
        0,
        118,
        888,
        1,
        0,
        0,
        0,
        120,
        897,
        1,
        0,
        0,
        0,
        122,
        913,
        1,
        0,
        0,
        0,
        124,
        915,
        1,
        0,
        0,
        0,
        126,
        921,
        1,
        0,
        0,
        0,
        128,
        940,
        1,
        0,
        0,
        0,
        130,
        949,
        1,
        0,
        0,
        0,
        132,
        960,
        1,
        0,
        0,
        0,
        134,
        986,
        1,
        0,
        0,
        0,
        136,
        998,
        1,
        0,
        0,
        0,
        138,
        1003,
        1,
        0,
        0,
        0,
        140,
        1018,
        1,
        0,
        0,
        0,
        142,
        1020,
        1,
        0,
        0,
        0,
        144,
        1035,
        1,
        0,
        0,
        0,
        146,
        1037,
        1,
        0,
        0,
        0,
        148,
        1049,
        1,
        0,
        0,
        0,
        150,
        1051,
        1,
        0,
        0,
        0,
        152,
        1059,
        1,
        0,
        0,
        0,
        154,
        1064,
        1,
        0,
        0,
        0,
        156,
        1068,
        1,
        0,
        0,
        0,
        158,
        1070,
        1,
        0,
        0,
        0,
        160,
        1074,
        1,
        0,
        0,
        0,
        162,
        1090,
        1,
        0,
        0,
        0,
        164,
        1098,
        1,
        0,
        0,
        0,
        166,
        1106,
        1,
        0,
        0,
        0,
        168,
        1116,
        1,
        0,
        0,
        0,
        170,
        1121,
        1,
        0,
        0,
        0,
        172,
        1126,
        1,
        0,
        0,
        0,
        174,
        1128,
        1,
        0,
        0,
        0,
        176,
        1130,
        1,
        0,
        0,
        0,
        178,
        1132,
        1,
        0,
        0,
        0,
        180,
        1134,
        1,
        0,
        0,
        0,
        182,
        1136,
        1,
        0,
        0,
        0,
        184,
        1138,
        1,
        0,
        0,
        0,
        186,
        1140,
        1,
        0,
        0,
        0,
        188,
        1149,
        1,
        0,
        0,
        0,
        190,
        1151,
        1,
        0,
        0,
        0,
        192,
        1165,
        1,
        0,
        0,
        0,
        194,
        1167,
        1,
        0,
        0,
        0,
        196,
        1172,
        1,
        0,
        0,
        0,
        198,
        1185,
        1,
        0,
        0,
        0,
        200,
        1191,
        1,
        0,
        0,
        0,
        202,
        1218,
        1,
        0,
        0,
        0,
        204,
        1220,
        1,
        0,
        0,
        0,
        206,
        1230,
        1,
        0,
        0,
        0,
        208,
        1235,
        1,
        0,
        0,
        0,
        210,
        1268,
        1,
        0,
        0,
        0,
        212,
        1270,
        1,
        0,
        0,
        0,
        214,
        1278,
        1,
        0,
        0,
        0,
        216,
        1286,
        1,
        0,
        0,
        0,
        218,
        1299,
        1,
        0,
        0,
        0,
        220,
        1303,
        1,
        0,
        0,
        0,
        222,
        1305,
        1,
        0,
        0,
        0,
        224,
        1312,
        1,
        0,
        0,
        0,
        226,
        1319,
        1,
        0,
        0,
        0,
        228,
        1327,
        1,
        0,
        0,
        0,
        230,
        1338,
        1,
        0,
        0,
        0,
        232,
        1340,
        1,
        0,
        0,
        0,
        234,
        1362,
        1,
        0,
        0,
        0,
        236,
        1364,
        1,
        0,
        0,
        0,
        238,
        1376,
        1,
        0,
        0,
        0,
        240,
        1405,
        1,
        0,
        0,
        0,
        242,
        1441,
        1,
        0,
        0,
        0,
        244,
        1443,
        1,
        0,
        0,
        0,
        246,
        1447,
        1,
        0,
        0,
        0,
        248,
        1476,
        1,
        0,
        0,
        0,
        250,
        1478,
        1,
        0,
        0,
        0,
        252,
        1500,
        1,
        0,
        0,
        0,
        254,
        1502,
        1,
        0,
        0,
        0,
        256,
        1508,
        1,
        0,
        0,
        0,
        258,
        1523,
        1,
        0,
        0,
        0,
        260,
        1582,
        1,
        0,
        0,
        0,
        262,
        1584,
        1,
        0,
        0,
        0,
        264,
        1596,
        1,
        0,
        0,
        0,
        266,
        1619,
        1,
        0,
        0,
        0,
        268,
        1623,
        1,
        0,
        0,
        0,
        270,
        1626,
        1,
        0,
        0,
        0,
        272,
        1635,
        1,
        0,
        0,
        0,
        274,
        1640,
        1,
        0,
        0,
        0,
        276,
        1647,
        1,
        0,
        0,
        0,
        278,
        1650,
        1,
        0,
        0,
        0,
        280,
        281,
        3,
        2,
        1,
        0,
        281,
        282,
        5,
        0,
        0,
        1,
        282,
        1,
        1,
        0,
        0,
        0,
        283,
        285,
        5,
        107,
        0,
        0,
        284,
        283,
        1,
        0,
        0,
        0,
        285,
        288,
        1,
        0,
        0,
        0,
        286,
        284,
        1,
        0,
        0,
        0,
        286,
        287,
        1,
        0,
        0,
        0,
        287,
        298,
        1,
        0,
        0,
        0,
        288,
        286,
        1,
        0,
        0,
        0,
        289,
        293,
        3,
        4,
        2,
        0,
        290,
        292,
        5,
        107,
        0,
        0,
        291,
        290,
        1,
        0,
        0,
        0,
        292,
        295,
        1,
        0,
        0,
        0,
        293,
        291,
        1,
        0,
        0,
        0,
        293,
        294,
        1,
        0,
        0,
        0,
        294,
        297,
        1,
        0,
        0,
        0,
        295,
        293,
        1,
        0,
        0,
        0,
        296,
        289,
        1,
        0,
        0,
        0,
        297,
        300,
        1,
        0,
        0,
        0,
        298,
        296,
        1,
        0,
        0,
        0,
        298,
        299,
        1,
        0,
        0,
        0,
        299,
        3,
        1,
        0,
        0,
        0,
        300,
        298,
        1,
        0,
        0,
        0,
        301,
        305,
        3,
        6,
        3,
        0,
        302,
        305,
        3,
        26,
        13,
        0,
        303,
        305,
        3,
        46,
        23,
        0,
        304,
        301,
        1,
        0,
        0,
        0,
        304,
        302,
        1,
        0,
        0,
        0,
        304,
        303,
        1,
        0,
        0,
        0,
        305,
        5,
        1,
        0,
        0,
        0,
        306,
        307,
        5,
        6,
        0,
        0,
        307,
        308,
        5,
        56,
        0,
        0,
        308,
        311,
        3,
        8,
        4,
        0,
        309,
        310,
        5,
        65,
        0,
        0,
        310,
        312,
        5,
        47,
        0,
        0,
        311,
        309,
        1,
        0,
        0,
        0,
        311,
        312,
        1,
        0,
        0,
        0,
        312,
        313,
        1,
        0,
        0,
        0,
        313,
        314,
        5,
        66,
        0,
        0,
        314,
        7,
        1,
        0,
        0,
        0,
        315,
        320,
        3,
        10,
        5,
        0,
        316,
        317,
        5,
        71,
        0,
        0,
        317,
        319,
        3,
        10,
        5,
        0,
        318,
        316,
        1,
        0,
        0,
        0,
        319,
        322,
        1,
        0,
        0,
        0,
        320,
        318,
        1,
        0,
        0,
        0,
        320,
        321,
        1,
        0,
        0,
        0,
        321,
        9,
        1,
        0,
        0,
        0,
        322,
        320,
        1,
        0,
        0,
        0,
        323,
        327,
        3,
        12,
        6,
        0,
        324,
        326,
        3,
        12,
        6,
        0,
        325,
        324,
        1,
        0,
        0,
        0,
        326,
        329,
        1,
        0,
        0,
        0,
        327,
        325,
        1,
        0,
        0,
        0,
        327,
        328,
        1,
        0,
        0,
        0,
        328,
        11,
        1,
        0,
        0,
        0,
        329,
        327,
        1,
        0,
        0,
        0,
        330,
        336,
        3,
        22,
        11,
        0,
        331,
        336,
        3,
        14,
        7,
        0,
        332,
        336,
        3,
        16,
        8,
        0,
        333,
        336,
        3,
        18,
        9,
        0,
        334,
        336,
        3,
        20,
        10,
        0,
        335,
        330,
        1,
        0,
        0,
        0,
        335,
        331,
        1,
        0,
        0,
        0,
        335,
        332,
        1,
        0,
        0,
        0,
        335,
        333,
        1,
        0,
        0,
        0,
        335,
        334,
        1,
        0,
        0,
        0,
        336,
        13,
        1,
        0,
        0,
        0,
        337,
        338,
        3,
        22,
        11,
        0,
        338,
        339,
        5,
        61,
        0,
        0,
        339,
        15,
        1,
        0,
        0,
        0,
        340,
        341,
        3,
        22,
        11,
        0,
        341,
        342,
        5,
        76,
        0,
        0,
        342,
        17,
        1,
        0,
        0,
        0,
        343,
        344,
        3,
        22,
        11,
        0,
        344,
        345,
        5,
        57,
        0,
        0,
        345,
        19,
        1,
        0,
        0,
        0,
        346,
        347,
        3,
        22,
        11,
        0,
        347,
        348,
        5,
        82,
        0,
        0,
        348,
        351,
        5,
        2,
        0,
        0,
        349,
        350,
        5,
        64,
        0,
        0,
        350,
        352,
        5,
        2,
        0,
        0,
        351,
        349,
        1,
        0,
        0,
        0,
        351,
        352,
        1,
        0,
        0,
        0,
        352,
        353,
        1,
        0,
        0,
        0,
        353,
        354,
        5,
        83,
        0,
        0,
        354,
        21,
        1,
        0,
        0,
        0,
        355,
        357,
        5,
        107,
        0,
        0,
        356,
        355,
        1,
        0,
        0,
        0,
        357,
        360,
        1,
        0,
        0,
        0,
        358,
        356,
        1,
        0,
        0,
        0,
        358,
        359,
        1,
        0,
        0,
        0,
        359,
        368,
        1,
        0,
        0,
        0,
        360,
        358,
        1,
        0,
        0,
        0,
        361,
        369,
        5,
        6,
        0,
        0,
        362,
        369,
        5,
        1,
        0,
        0,
        363,
        364,
        5,
        62,
        0,
        0,
        364,
        365,
        3,
        8,
        4,
        0,
        365,
        366,
        5,
        63,
        0,
        0,
        366,
        369,
        1,
        0,
        0,
        0,
        367,
        369,
        3,
        24,
        12,
        0,
        368,
        361,
        1,
        0,
        0,
        0,
        368,
        362,
        1,
        0,
        0,
        0,
        368,
        363,
        1,
        0,
        0,
        0,
        368,
        367,
        1,
        0,
        0,
        0,
        369,
        373,
        1,
        0,
        0,
        0,
        370,
        372,
        5,
        107,
        0,
        0,
        371,
        370,
        1,
        0,
        0,
        0,
        372,
        375,
        1,
        0,
        0,
        0,
        373,
        371,
        1,
        0,
        0,
        0,
        373,
        374,
        1,
        0,
        0,
        0,
        374,
        23,
        1,
        0,
        0,
        0,
        375,
        373,
        1,
        0,
        0,
        0,
        376,
        378,
        5,
        69,
        0,
        0,
        377,
        379,
        5,
        72,
        0,
        0,
        378,
        377,
        1,
        0,
        0,
        0,
        378,
        379,
        1,
        0,
        0,
        0,
        379,
        380,
        1,
        0,
        0,
        0,
        380,
        381,
        5,
        1,
        0,
        0,
        381,
        382,
        5,
        70,
        0,
        0,
        382,
        25,
        1,
        0,
        0,
        0,
        383,
        384,
        3,
        28,
        14,
        0,
        384,
        385,
        5,
        66,
        0,
        0,
        385,
        27,
        1,
        0,
        0,
        0,
        386,
        387,
        3,
        30,
        15,
        0,
        387,
        388,
        5,
        92,
        0,
        0,
        388,
        389,
        3,
        28,
        14,
        0,
        389,
        392,
        1,
        0,
        0,
        0,
        390,
        392,
        3,
        30,
        15,
        0,
        391,
        386,
        1,
        0,
        0,
        0,
        391,
        390,
        1,
        0,
        0,
        0,
        392,
        29,
        1,
        0,
        0,
        0,
        393,
        394,
        5,
        45,
        0,
        0,
        394,
        395,
        5,
        6,
        0,
        0,
        395,
        396,
        5,
        28,
        0,
        0,
        396,
        397,
        3,
        42,
        21,
        0,
        397,
        398,
        5,
        65,
        0,
        0,
        398,
        399,
        3,
        30,
        15,
        0,
        399,
        409,
        1,
        0,
        0,
        0,
        400,
        401,
        5,
        46,
        0,
        0,
        401,
        402,
        5,
        6,
        0,
        0,
        402,
        403,
        5,
        28,
        0,
        0,
        403,
        404,
        3,
        42,
        21,
        0,
        404,
        405,
        5,
        65,
        0,
        0,
        405,
        406,
        3,
        30,
        15,
        0,
        406,
        409,
        1,
        0,
        0,
        0,
        407,
        409,
        3,
        32,
        16,
        0,
        408,
        393,
        1,
        0,
        0,
        0,
        408,
        400,
        1,
        0,
        0,
        0,
        408,
        407,
        1,
        0,
        0,
        0,
        409,
        31,
        1,
        0,
        0,
        0,
        410,
        415,
        3,
        34,
        17,
        0,
        411,
        412,
        5,
        35,
        0,
        0,
        412,
        414,
        3,
        34,
        17,
        0,
        413,
        411,
        1,
        0,
        0,
        0,
        414,
        417,
        1,
        0,
        0,
        0,
        415,
        413,
        1,
        0,
        0,
        0,
        415,
        416,
        1,
        0,
        0,
        0,
        416,
        33,
        1,
        0,
        0,
        0,
        417,
        415,
        1,
        0,
        0,
        0,
        418,
        423,
        3,
        36,
        18,
        0,
        419,
        420,
        5,
        7,
        0,
        0,
        420,
        422,
        3,
        36,
        18,
        0,
        421,
        419,
        1,
        0,
        0,
        0,
        422,
        425,
        1,
        0,
        0,
        0,
        423,
        421,
        1,
        0,
        0,
        0,
        423,
        424,
        1,
        0,
        0,
        0,
        424,
        35,
        1,
        0,
        0,
        0,
        425,
        423,
        1,
        0,
        0,
        0,
        426,
        432,
        3,
        38,
        19,
        0,
        427,
        428,
        5,
        62,
        0,
        0,
        428,
        429,
        3,
        28,
        14,
        0,
        429,
        430,
        5,
        63,
        0,
        0,
        430,
        432,
        1,
        0,
        0,
        0,
        431,
        426,
        1,
        0,
        0,
        0,
        431,
        427,
        1,
        0,
        0,
        0,
        432,
        37,
        1,
        0,
        0,
        0,
        433,
        438,
        3,
        40,
        20,
        0,
        434,
        435,
        7,
        0,
        0,
        0,
        435,
        437,
        3,
        40,
        20,
        0,
        436,
        434,
        1,
        0,
        0,
        0,
        437,
        440,
        1,
        0,
        0,
        0,
        438,
        436,
        1,
        0,
        0,
        0,
        438,
        439,
        1,
        0,
        0,
        0,
        439,
        39,
        1,
        0,
        0,
        0,
        440,
        438,
        1,
        0,
        0,
        0,
        441,
        444,
        3,
        42,
        21,
        0,
        442,
        444,
        3,
        238,
        119,
        0,
        443,
        441,
        1,
        0,
        0,
        0,
        443,
        442,
        1,
        0,
        0,
        0,
        444,
        41,
        1,
        0,
        0,
        0,
        445,
        446,
        6,
        21,
        -1,
        0,
        446,
        447,
        3,
        44,
        22,
        0,
        447,
        453,
        1,
        0,
        0,
        0,
        448,
        449,
        10,
        1,
        0,
        0,
        449,
        450,
        5,
        59,
        0,
        0,
        450,
        452,
        3,
        44,
        22,
        0,
        451,
        448,
        1,
        0,
        0,
        0,
        452,
        455,
        1,
        0,
        0,
        0,
        453,
        451,
        1,
        0,
        0,
        0,
        453,
        454,
        1,
        0,
        0,
        0,
        454,
        43,
        1,
        0,
        0,
        0,
        455,
        453,
        1,
        0,
        0,
        0,
        456,
        467,
        5,
        6,
        0,
        0,
        457,
        458,
        5,
        69,
        0,
        0,
        458,
        459,
        3,
        250,
        125,
        0,
        459,
        460,
        5,
        70,
        0,
        0,
        460,
        466,
        1,
        0,
        0,
        0,
        461,
        462,
        5,
        82,
        0,
        0,
        462,
        463,
        3,
        250,
        125,
        0,
        463,
        464,
        5,
        83,
        0,
        0,
        464,
        466,
        1,
        0,
        0,
        0,
        465,
        457,
        1,
        0,
        0,
        0,
        465,
        461,
        1,
        0,
        0,
        0,
        466,
        469,
        1,
        0,
        0,
        0,
        467,
        465,
        1,
        0,
        0,
        0,
        467,
        468,
        1,
        0,
        0,
        0,
        468,
        45,
        1,
        0,
        0,
        0,
        469,
        467,
        1,
        0,
        0,
        0,
        470,
        475,
        5,
        4,
        0,
        0,
        471,
        474,
        3,
        48,
        24,
        0,
        472,
        474,
        5,
        107,
        0,
        0,
        473,
        471,
        1,
        0,
        0,
        0,
        473,
        472,
        1,
        0,
        0,
        0,
        474,
        477,
        1,
        0,
        0,
        0,
        475,
        473,
        1,
        0,
        0,
        0,
        475,
        476,
        1,
        0,
        0,
        0,
        476,
        478,
        1,
        0,
        0,
        0,
        477,
        475,
        1,
        0,
        0,
        0,
        478,
        479,
        5,
        5,
        0,
        0,
        479,
        47,
        1,
        0,
        0,
        0,
        480,
        482,
        5,
        107,
        0,
        0,
        481,
        480,
        1,
        0,
        0,
        0,
        482,
        485,
        1,
        0,
        0,
        0,
        483,
        481,
        1,
        0,
        0,
        0,
        483,
        484,
        1,
        0,
        0,
        0,
        484,
        488,
        1,
        0,
        0,
        0,
        485,
        483,
        1,
        0,
        0,
        0,
        486,
        489,
        3,
        72,
        36,
        0,
        487,
        489,
        3,
        122,
        61,
        0,
        488,
        486,
        1,
        0,
        0,
        0,
        488,
        487,
        1,
        0,
        0,
        0,
        489,
        493,
        1,
        0,
        0,
        0,
        490,
        492,
        5,
        107,
        0,
        0,
        491,
        490,
        1,
        0,
        0,
        0,
        492,
        495,
        1,
        0,
        0,
        0,
        493,
        491,
        1,
        0,
        0,
        0,
        493,
        494,
        1,
        0,
        0,
        0,
        494,
        49,
        1,
        0,
        0,
        0,
        495,
        493,
        1,
        0,
        0,
        0,
        496,
        497,
        5,
        91,
        0,
        0,
        497,
        503,
        3,
        114,
        57,
        0,
        498,
        500,
        5,
        62,
        0,
        0,
        499,
        501,
        3,
        264,
        132,
        0,
        500,
        499,
        1,
        0,
        0,
        0,
        500,
        501,
        1,
        0,
        0,
        0,
        501,
        502,
        1,
        0,
        0,
        0,
        502,
        504,
        5,
        63,
        0,
        0,
        503,
        498,
        1,
        0,
        0,
        0,
        503,
        504,
        1,
        0,
        0,
        0,
        504,
        505,
        1,
        0,
        0,
        0,
        505,
        506,
        5,
        107,
        0,
        0,
        506,
        51,
        1,
        0,
        0,
        0,
        507,
        509,
        3,
        50,
        25,
        0,
        508,
        507,
        1,
        0,
        0,
        0,
        509,
        510,
        1,
        0,
        0,
        0,
        510,
        508,
        1,
        0,
        0,
        0,
        510,
        511,
        1,
        0,
        0,
        0,
        511,
        53,
        1,
        0,
        0,
        0,
        512,
        516,
        3,
        52,
        26,
        0,
        513,
        517,
        3,
        262,
        131,
        0,
        514,
        517,
        3,
        58,
        29,
        0,
        515,
        517,
        3,
        56,
        28,
        0,
        516,
        513,
        1,
        0,
        0,
        0,
        516,
        514,
        1,
        0,
        0,
        0,
        516,
        515,
        1,
        0,
        0,
        0,
        517,
        55,
        1,
        0,
        0,
        0,
        518,
        519,
        5,
        10,
        0,
        0,
        519,
        520,
        3,
        58,
        29,
        0,
        520,
        57,
        1,
        0,
        0,
        0,
        521,
        522,
        5,
        16,
        0,
        0,
        522,
        523,
        3,
        244,
        122,
        0,
        523,
        526,
        3,
        60,
        30,
        0,
        524,
        525,
        5,
        92,
        0,
        0,
        525,
        527,
        3,
        218,
        109,
        0,
        526,
        524,
        1,
        0,
        0,
        0,
        526,
        527,
        1,
        0,
        0,
        0,
        527,
        528,
        1,
        0,
        0,
        0,
        528,
        529,
        5,
        65,
        0,
        0,
        529,
        530,
        3,
        140,
        70,
        0,
        530,
        59,
        1,
        0,
        0,
        0,
        531,
        533,
        5,
        62,
        0,
        0,
        532,
        534,
        3,
        62,
        31,
        0,
        533,
        532,
        1,
        0,
        0,
        0,
        533,
        534,
        1,
        0,
        0,
        0,
        534,
        535,
        1,
        0,
        0,
        0,
        535,
        536,
        5,
        63,
        0,
        0,
        536,
        61,
        1,
        0,
        0,
        0,
        537,
        540,
        3,
        64,
        32,
        0,
        538,
        539,
        5,
        68,
        0,
        0,
        539,
        541,
        3,
        218,
        109,
        0,
        540,
        538,
        1,
        0,
        0,
        0,
        540,
        541,
        1,
        0,
        0,
        0,
        541,
        550,
        1,
        0,
        0,
        0,
        542,
        543,
        5,
        64,
        0,
        0,
        543,
        546,
        3,
        64,
        32,
        0,
        544,
        545,
        5,
        68,
        0,
        0,
        545,
        547,
        3,
        218,
        109,
        0,
        546,
        544,
        1,
        0,
        0,
        0,
        546,
        547,
        1,
        0,
        0,
        0,
        547,
        549,
        1,
        0,
        0,
        0,
        548,
        542,
        1,
        0,
        0,
        0,
        549,
        552,
        1,
        0,
        0,
        0,
        550,
        548,
        1,
        0,
        0,
        0,
        550,
        551,
        1,
        0,
        0,
        0,
        551,
        586,
        1,
        0,
        0,
        0,
        552,
        550,
        1,
        0,
        0,
        0,
        553,
        584,
        5,
        64,
        0,
        0,
        554,
        556,
        5,
        61,
        0,
        0,
        555,
        557,
        3,
        64,
        32,
        0,
        556,
        555,
        1,
        0,
        0,
        0,
        556,
        557,
        1,
        0,
        0,
        0,
        557,
        566,
        1,
        0,
        0,
        0,
        558,
        559,
        5,
        64,
        0,
        0,
        559,
        562,
        3,
        64,
        32,
        0,
        560,
        561,
        5,
        68,
        0,
        0,
        561,
        563,
        3,
        218,
        109,
        0,
        562,
        560,
        1,
        0,
        0,
        0,
        562,
        563,
        1,
        0,
        0,
        0,
        563,
        565,
        1,
        0,
        0,
        0,
        564,
        558,
        1,
        0,
        0,
        0,
        565,
        568,
        1,
        0,
        0,
        0,
        566,
        564,
        1,
        0,
        0,
        0,
        566,
        567,
        1,
        0,
        0,
        0,
        567,
        577,
        1,
        0,
        0,
        0,
        568,
        566,
        1,
        0,
        0,
        0,
        569,
        575,
        5,
        64,
        0,
        0,
        570,
        571,
        5,
        67,
        0,
        0,
        571,
        573,
        3,
        64,
        32,
        0,
        572,
        574,
        5,
        64,
        0,
        0,
        573,
        572,
        1,
        0,
        0,
        0,
        573,
        574,
        1,
        0,
        0,
        0,
        574,
        576,
        1,
        0,
        0,
        0,
        575,
        570,
        1,
        0,
        0,
        0,
        575,
        576,
        1,
        0,
        0,
        0,
        576,
        578,
        1,
        0,
        0,
        0,
        577,
        569,
        1,
        0,
        0,
        0,
        577,
        578,
        1,
        0,
        0,
        0,
        578,
        585,
        1,
        0,
        0,
        0,
        579,
        580,
        5,
        67,
        0,
        0,
        580,
        582,
        3,
        64,
        32,
        0,
        581,
        583,
        5,
        64,
        0,
        0,
        582,
        581,
        1,
        0,
        0,
        0,
        582,
        583,
        1,
        0,
        0,
        0,
        583,
        585,
        1,
        0,
        0,
        0,
        584,
        554,
        1,
        0,
        0,
        0,
        584,
        579,
        1,
        0,
        0,
        0,
        584,
        585,
        1,
        0,
        0,
        0,
        585,
        587,
        1,
        0,
        0,
        0,
        586,
        553,
        1,
        0,
        0,
        0,
        586,
        587,
        1,
        0,
        0,
        0,
        587,
        619,
        1,
        0,
        0,
        0,
        588,
        590,
        5,
        61,
        0,
        0,
        589,
        591,
        3,
        64,
        32,
        0,
        590,
        589,
        1,
        0,
        0,
        0,
        590,
        591,
        1,
        0,
        0,
        0,
        591,
        600,
        1,
        0,
        0,
        0,
        592,
        593,
        5,
        64,
        0,
        0,
        593,
        596,
        3,
        64,
        32,
        0,
        594,
        595,
        5,
        68,
        0,
        0,
        595,
        597,
        3,
        218,
        109,
        0,
        596,
        594,
        1,
        0,
        0,
        0,
        596,
        597,
        1,
        0,
        0,
        0,
        597,
        599,
        1,
        0,
        0,
        0,
        598,
        592,
        1,
        0,
        0,
        0,
        599,
        602,
        1,
        0,
        0,
        0,
        600,
        598,
        1,
        0,
        0,
        0,
        600,
        601,
        1,
        0,
        0,
        0,
        601,
        611,
        1,
        0,
        0,
        0,
        602,
        600,
        1,
        0,
        0,
        0,
        603,
        609,
        5,
        64,
        0,
        0,
        604,
        605,
        5,
        67,
        0,
        0,
        605,
        607,
        3,
        64,
        32,
        0,
        606,
        608,
        5,
        64,
        0,
        0,
        607,
        606,
        1,
        0,
        0,
        0,
        607,
        608,
        1,
        0,
        0,
        0,
        608,
        610,
        1,
        0,
        0,
        0,
        609,
        604,
        1,
        0,
        0,
        0,
        609,
        610,
        1,
        0,
        0,
        0,
        610,
        612,
        1,
        0,
        0,
        0,
        611,
        603,
        1,
        0,
        0,
        0,
        611,
        612,
        1,
        0,
        0,
        0,
        612,
        619,
        1,
        0,
        0,
        0,
        613,
        614,
        5,
        67,
        0,
        0,
        614,
        616,
        3,
        64,
        32,
        0,
        615,
        617,
        5,
        64,
        0,
        0,
        616,
        615,
        1,
        0,
        0,
        0,
        616,
        617,
        1,
        0,
        0,
        0,
        617,
        619,
        1,
        0,
        0,
        0,
        618,
        537,
        1,
        0,
        0,
        0,
        618,
        588,
        1,
        0,
        0,
        0,
        618,
        613,
        1,
        0,
        0,
        0,
        619,
        63,
        1,
        0,
        0,
        0,
        620,
        623,
        3,
        244,
        122,
        0,
        621,
        622,
        5,
        65,
        0,
        0,
        622,
        624,
        3,
        218,
        109,
        0,
        623,
        621,
        1,
        0,
        0,
        0,
        623,
        624,
        1,
        0,
        0,
        0,
        624,
        65,
        1,
        0,
        0,
        0,
        625,
        628,
        3,
        68,
        34,
        0,
        626,
        627,
        5,
        68,
        0,
        0,
        627,
        629,
        3,
        218,
        109,
        0,
        628,
        626,
        1,
        0,
        0,
        0,
        628,
        629,
        1,
        0,
        0,
        0,
        629,
        638,
        1,
        0,
        0,
        0,
        630,
        631,
        5,
        64,
        0,
        0,
        631,
        634,
        3,
        68,
        34,
        0,
        632,
        633,
        5,
        68,
        0,
        0,
        633,
        635,
        3,
        218,
        109,
        0,
        634,
        632,
        1,
        0,
        0,
        0,
        634,
        635,
        1,
        0,
        0,
        0,
        635,
        637,
        1,
        0,
        0,
        0,
        636,
        630,
        1,
        0,
        0,
        0,
        637,
        640,
        1,
        0,
        0,
        0,
        638,
        636,
        1,
        0,
        0,
        0,
        638,
        639,
        1,
        0,
        0,
        0,
        639,
        674,
        1,
        0,
        0,
        0,
        640,
        638,
        1,
        0,
        0,
        0,
        641,
        672,
        5,
        64,
        0,
        0,
        642,
        644,
        5,
        61,
        0,
        0,
        643,
        645,
        3,
        68,
        34,
        0,
        644,
        643,
        1,
        0,
        0,
        0,
        644,
        645,
        1,
        0,
        0,
        0,
        645,
        654,
        1,
        0,
        0,
        0,
        646,
        647,
        5,
        64,
        0,
        0,
        647,
        650,
        3,
        68,
        34,
        0,
        648,
        649,
        5,
        68,
        0,
        0,
        649,
        651,
        3,
        218,
        109,
        0,
        650,
        648,
        1,
        0,
        0,
        0,
        650,
        651,
        1,
        0,
        0,
        0,
        651,
        653,
        1,
        0,
        0,
        0,
        652,
        646,
        1,
        0,
        0,
        0,
        653,
        656,
        1,
        0,
        0,
        0,
        654,
        652,
        1,
        0,
        0,
        0,
        654,
        655,
        1,
        0,
        0,
        0,
        655,
        665,
        1,
        0,
        0,
        0,
        656,
        654,
        1,
        0,
        0,
        0,
        657,
        663,
        5,
        64,
        0,
        0,
        658,
        659,
        5,
        67,
        0,
        0,
        659,
        661,
        3,
        68,
        34,
        0,
        660,
        662,
        5,
        64,
        0,
        0,
        661,
        660,
        1,
        0,
        0,
        0,
        661,
        662,
        1,
        0,
        0,
        0,
        662,
        664,
        1,
        0,
        0,
        0,
        663,
        658,
        1,
        0,
        0,
        0,
        663,
        664,
        1,
        0,
        0,
        0,
        664,
        666,
        1,
        0,
        0,
        0,
        665,
        657,
        1,
        0,
        0,
        0,
        665,
        666,
        1,
        0,
        0,
        0,
        666,
        673,
        1,
        0,
        0,
        0,
        667,
        668,
        5,
        67,
        0,
        0,
        668,
        670,
        3,
        68,
        34,
        0,
        669,
        671,
        5,
        64,
        0,
        0,
        670,
        669,
        1,
        0,
        0,
        0,
        670,
        671,
        1,
        0,
        0,
        0,
        671,
        673,
        1,
        0,
        0,
        0,
        672,
        642,
        1,
        0,
        0,
        0,
        672,
        667,
        1,
        0,
        0,
        0,
        672,
        673,
        1,
        0,
        0,
        0,
        673,
        675,
        1,
        0,
        0,
        0,
        674,
        641,
        1,
        0,
        0,
        0,
        674,
        675,
        1,
        0,
        0,
        0,
        675,
        707,
        1,
        0,
        0,
        0,
        676,
        678,
        5,
        61,
        0,
        0,
        677,
        679,
        3,
        68,
        34,
        0,
        678,
        677,
        1,
        0,
        0,
        0,
        678,
        679,
        1,
        0,
        0,
        0,
        679,
        688,
        1,
        0,
        0,
        0,
        680,
        681,
        5,
        64,
        0,
        0,
        681,
        684,
        3,
        68,
        34,
        0,
        682,
        683,
        5,
        68,
        0,
        0,
        683,
        685,
        3,
        218,
        109,
        0,
        684,
        682,
        1,
        0,
        0,
        0,
        684,
        685,
        1,
        0,
        0,
        0,
        685,
        687,
        1,
        0,
        0,
        0,
        686,
        680,
        1,
        0,
        0,
        0,
        687,
        690,
        1,
        0,
        0,
        0,
        688,
        686,
        1,
        0,
        0,
        0,
        688,
        689,
        1,
        0,
        0,
        0,
        689,
        699,
        1,
        0,
        0,
        0,
        690,
        688,
        1,
        0,
        0,
        0,
        691,
        697,
        5,
        64,
        0,
        0,
        692,
        693,
        5,
        67,
        0,
        0,
        693,
        695,
        3,
        68,
        34,
        0,
        694,
        696,
        5,
        64,
        0,
        0,
        695,
        694,
        1,
        0,
        0,
        0,
        695,
        696,
        1,
        0,
        0,
        0,
        696,
        698,
        1,
        0,
        0,
        0,
        697,
        692,
        1,
        0,
        0,
        0,
        697,
        698,
        1,
        0,
        0,
        0,
        698,
        700,
        1,
        0,
        0,
        0,
        699,
        691,
        1,
        0,
        0,
        0,
        699,
        700,
        1,
        0,
        0,
        0,
        700,
        707,
        1,
        0,
        0,
        0,
        701,
        702,
        5,
        67,
        0,
        0,
        702,
        704,
        3,
        68,
        34,
        0,
        703,
        705,
        5,
        64,
        0,
        0,
        704,
        703,
        1,
        0,
        0,
        0,
        704,
        705,
        1,
        0,
        0,
        0,
        705,
        707,
        1,
        0,
        0,
        0,
        706,
        625,
        1,
        0,
        0,
        0,
        706,
        676,
        1,
        0,
        0,
        0,
        706,
        701,
        1,
        0,
        0,
        0,
        707,
        67,
        1,
        0,
        0,
        0,
        708,
        709,
        3,
        244,
        122,
        0,
        709,
        69,
        1,
        0,
        0,
        0,
        710,
        713,
        3,
        72,
        36,
        0,
        711,
        713,
        3,
        122,
        61,
        0,
        712,
        710,
        1,
        0,
        0,
        0,
        712,
        711,
        1,
        0,
        0,
        0,
        713,
        71,
        1,
        0,
        0,
        0,
        714,
        719,
        3,
        74,
        37,
        0,
        715,
        716,
        5,
        66,
        0,
        0,
        716,
        718,
        3,
        74,
        37,
        0,
        717,
        715,
        1,
        0,
        0,
        0,
        718,
        721,
        1,
        0,
        0,
        0,
        719,
        717,
        1,
        0,
        0,
        0,
        719,
        720,
        1,
        0,
        0,
        0,
        720,
        723,
        1,
        0,
        0,
        0,
        721,
        719,
        1,
        0,
        0,
        0,
        722,
        724,
        5,
        66,
        0,
        0,
        723,
        722,
        1,
        0,
        0,
        0,
        723,
        724,
        1,
        0,
        0,
        0,
        724,
        725,
        1,
        0,
        0,
        0,
        725,
        726,
        5,
        107,
        0,
        0,
        726,
        73,
        1,
        0,
        0,
        0,
        727,
        736,
        3,
        76,
        38,
        0,
        728,
        736,
        3,
        84,
        42,
        0,
        729,
        736,
        3,
        86,
        43,
        0,
        730,
        736,
        3,
        88,
        44,
        0,
        731,
        736,
        3,
        100,
        50,
        0,
        732,
        736,
        3,
        116,
        58,
        0,
        733,
        736,
        3,
        118,
        59,
        0,
        734,
        736,
        3,
        120,
        60,
        0,
        735,
        727,
        1,
        0,
        0,
        0,
        735,
        728,
        1,
        0,
        0,
        0,
        735,
        729,
        1,
        0,
        0,
        0,
        735,
        730,
        1,
        0,
        0,
        0,
        735,
        731,
        1,
        0,
        0,
        0,
        735,
        732,
        1,
        0,
        0,
        0,
        735,
        733,
        1,
        0,
        0,
        0,
        735,
        734,
        1,
        0,
        0,
        0,
        736,
        75,
        1,
        0,
        0,
        0,
        737,
        754,
        3,
        80,
        40,
        0,
        738,
        755,
        3,
        78,
        39,
        0,
        739,
        742,
        3,
        82,
        41,
        0,
        740,
        743,
        3,
        274,
        137,
        0,
        741,
        743,
        3,
        258,
        129,
        0,
        742,
        740,
        1,
        0,
        0,
        0,
        742,
        741,
        1,
        0,
        0,
        0,
        743,
        755,
        1,
        0,
        0,
        0,
        744,
        747,
        5,
        68,
        0,
        0,
        745,
        748,
        3,
        274,
        137,
        0,
        746,
        748,
        3,
        80,
        40,
        0,
        747,
        745,
        1,
        0,
        0,
        0,
        747,
        746,
        1,
        0,
        0,
        0,
        748,
        750,
        1,
        0,
        0,
        0,
        749,
        744,
        1,
        0,
        0,
        0,
        750,
        753,
        1,
        0,
        0,
        0,
        751,
        749,
        1,
        0,
        0,
        0,
        751,
        752,
        1,
        0,
        0,
        0,
        752,
        755,
        1,
        0,
        0,
        0,
        753,
        751,
        1,
        0,
        0,
        0,
        754,
        738,
        1,
        0,
        0,
        0,
        754,
        739,
        1,
        0,
        0,
        0,
        754,
        751,
        1,
        0,
        0,
        0,
        755,
        77,
        1,
        0,
        0,
        0,
        756,
        757,
        5,
        65,
        0,
        0,
        757,
        760,
        3,
        218,
        109,
        0,
        758,
        759,
        5,
        68,
        0,
        0,
        759,
        761,
        3,
        218,
        109,
        0,
        760,
        758,
        1,
        0,
        0,
        0,
        760,
        761,
        1,
        0,
        0,
        0,
        761,
        79,
        1,
        0,
        0,
        0,
        762,
        765,
        3,
        218,
        109,
        0,
        763,
        765,
        3,
        236,
        118,
        0,
        764,
        762,
        1,
        0,
        0,
        0,
        764,
        763,
        1,
        0,
        0,
        0,
        765,
        773,
        1,
        0,
        0,
        0,
        766,
        769,
        5,
        64,
        0,
        0,
        767,
        770,
        3,
        218,
        109,
        0,
        768,
        770,
        3,
        236,
        118,
        0,
        769,
        767,
        1,
        0,
        0,
        0,
        769,
        768,
        1,
        0,
        0,
        0,
        770,
        772,
        1,
        0,
        0,
        0,
        771,
        766,
        1,
        0,
        0,
        0,
        772,
        775,
        1,
        0,
        0,
        0,
        773,
        771,
        1,
        0,
        0,
        0,
        773,
        774,
        1,
        0,
        0,
        0,
        774,
        777,
        1,
        0,
        0,
        0,
        775,
        773,
        1,
        0,
        0,
        0,
        776,
        778,
        5,
        64,
        0,
        0,
        777,
        776,
        1,
        0,
        0,
        0,
        777,
        778,
        1,
        0,
        0,
        0,
        778,
        81,
        1,
        0,
        0,
        0,
        779,
        780,
        7,
        1,
        0,
        0,
        780,
        83,
        1,
        0,
        0,
        0,
        781,
        782,
        5,
        17,
        0,
        0,
        782,
        783,
        3,
        256,
        128,
        0,
        783,
        85,
        1,
        0,
        0,
        0,
        784,
        785,
        5,
        36,
        0,
        0,
        785,
        87,
        1,
        0,
        0,
        0,
        786,
        792,
        3,
        90,
        45,
        0,
        787,
        792,
        3,
        92,
        46,
        0,
        788,
        792,
        3,
        94,
        47,
        0,
        789,
        792,
        3,
        98,
        49,
        0,
        790,
        792,
        3,
        96,
        48,
        0,
        791,
        786,
        1,
        0,
        0,
        0,
        791,
        787,
        1,
        0,
        0,
        0,
        791,
        788,
        1,
        0,
        0,
        0,
        791,
        789,
        1,
        0,
        0,
        0,
        791,
        790,
        1,
        0,
        0,
        0,
        792,
        89,
        1,
        0,
        0,
        0,
        793,
        794,
        5,
        12,
        0,
        0,
        794,
        91,
        1,
        0,
        0,
        0,
        795,
        796,
        5,
        15,
        0,
        0,
        796,
        93,
        1,
        0,
        0,
        0,
        797,
        799,
        5,
        38,
        0,
        0,
        798,
        800,
        3,
        258,
        129,
        0,
        799,
        798,
        1,
        0,
        0,
        0,
        799,
        800,
        1,
        0,
        0,
        0,
        800,
        95,
        1,
        0,
        0,
        0,
        801,
        802,
        3,
        274,
        137,
        0,
        802,
        97,
        1,
        0,
        0,
        0,
        803,
        809,
        5,
        37,
        0,
        0,
        804,
        807,
        3,
        218,
        109,
        0,
        805,
        806,
        5,
        24,
        0,
        0,
        806,
        808,
        3,
        218,
        109,
        0,
        807,
        805,
        1,
        0,
        0,
        0,
        807,
        808,
        1,
        0,
        0,
        0,
        808,
        810,
        1,
        0,
        0,
        0,
        809,
        804,
        1,
        0,
        0,
        0,
        809,
        810,
        1,
        0,
        0,
        0,
        810,
        99,
        1,
        0,
        0,
        0,
        811,
        814,
        3,
        102,
        51,
        0,
        812,
        814,
        3,
        104,
        52,
        0,
        813,
        811,
        1,
        0,
        0,
        0,
        813,
        812,
        1,
        0,
        0,
        0,
        814,
        101,
        1,
        0,
        0,
        0,
        815,
        816,
        5,
        27,
        0,
        0,
        816,
        817,
        3,
        112,
        56,
        0,
        817,
        103,
        1,
        0,
        0,
        0,
        818,
        831,
        5,
        24,
        0,
        0,
        819,
        821,
        7,
        2,
        0,
        0,
        820,
        819,
        1,
        0,
        0,
        0,
        821,
        824,
        1,
        0,
        0,
        0,
        822,
        820,
        1,
        0,
        0,
        0,
        822,
        823,
        1,
        0,
        0,
        0,
        823,
        825,
        1,
        0,
        0,
        0,
        824,
        822,
        1,
        0,
        0,
        0,
        825,
        832,
        3,
        114,
        57,
        0,
        826,
        828,
        7,
        2,
        0,
        0,
        827,
        826,
        1,
        0,
        0,
        0,
        828,
        829,
        1,
        0,
        0,
        0,
        829,
        827,
        1,
        0,
        0,
        0,
        829,
        830,
        1,
        0,
        0,
        0,
        830,
        832,
        1,
        0,
        0,
        0,
        831,
        822,
        1,
        0,
        0,
        0,
        831,
        827,
        1,
        0,
        0,
        0,
        832,
        833,
        1,
        0,
        0,
        0,
        833,
        840,
        5,
        27,
        0,
        0,
        834,
        841,
        5,
        61,
        0,
        0,
        835,
        836,
        5,
        62,
        0,
        0,
        836,
        837,
        3,
        110,
        55,
        0,
        837,
        838,
        5,
        63,
        0,
        0,
        838,
        841,
        1,
        0,
        0,
        0,
        839,
        841,
        3,
        110,
        55,
        0,
        840,
        834,
        1,
        0,
        0,
        0,
        840,
        835,
        1,
        0,
        0,
        0,
        840,
        839,
        1,
        0,
        0,
        0,
        841,
        105,
        1,
        0,
        0,
        0,
        842,
        845,
        3,
        244,
        122,
        0,
        843,
        844,
        5,
        8,
        0,
        0,
        844,
        846,
        3,
        244,
        122,
        0,
        845,
        843,
        1,
        0,
        0,
        0,
        845,
        846,
        1,
        0,
        0,
        0,
        846,
        107,
        1,
        0,
        0,
        0,
        847,
        850,
        3,
        114,
        57,
        0,
        848,
        849,
        5,
        8,
        0,
        0,
        849,
        851,
        3,
        244,
        122,
        0,
        850,
        848,
        1,
        0,
        0,
        0,
        850,
        851,
        1,
        0,
        0,
        0,
        851,
        109,
        1,
        0,
        0,
        0,
        852,
        857,
        3,
        106,
        53,
        0,
        853,
        854,
        5,
        64,
        0,
        0,
        854,
        856,
        3,
        106,
        53,
        0,
        855,
        853,
        1,
        0,
        0,
        0,
        856,
        859,
        1,
        0,
        0,
        0,
        857,
        855,
        1,
        0,
        0,
        0,
        857,
        858,
        1,
        0,
        0,
        0,
        858,
        861,
        1,
        0,
        0,
        0,
        859,
        857,
        1,
        0,
        0,
        0,
        860,
        862,
        5,
        64,
        0,
        0,
        861,
        860,
        1,
        0,
        0,
        0,
        861,
        862,
        1,
        0,
        0,
        0,
        862,
        111,
        1,
        0,
        0,
        0,
        863,
        868,
        3,
        108,
        54,
        0,
        864,
        865,
        5,
        64,
        0,
        0,
        865,
        867,
        3,
        108,
        54,
        0,
        866,
        864,
        1,
        0,
        0,
        0,
        867,
        870,
        1,
        0,
        0,
        0,
        868,
        866,
        1,
        0,
        0,
        0,
        868,
        869,
        1,
        0,
        0,
        0,
        869,
        113,
        1,
        0,
        0,
        0,
        870,
        868,
        1,
        0,
        0,
        0,
        871,
        876,
        3,
        244,
        122,
        0,
        872,
        873,
        5,
        59,
        0,
        0,
        873,
        875,
        3,
        244,
        122,
        0,
        874,
        872,
        1,
        0,
        0,
        0,
        875,
        878,
        1,
        0,
        0,
        0,
        876,
        874,
        1,
        0,
        0,
        0,
        876,
        877,
        1,
        0,
        0,
        0,
        877,
        115,
        1,
        0,
        0,
        0,
        878,
        876,
        1,
        0,
        0,
        0,
        879,
        880,
        5,
        25,
        0,
        0,
        880,
        885,
        3,
        244,
        122,
        0,
        881,
        882,
        5,
        64,
        0,
        0,
        882,
        884,
        3,
        244,
        122,
        0,
        883,
        881,
        1,
        0,
        0,
        0,
        884,
        887,
        1,
        0,
        0,
        0,
        885,
        883,
        1,
        0,
        0,
        0,
        885,
        886,
        1,
        0,
        0,
        0,
        886,
        117,
        1,
        0,
        0,
        0,
        887,
        885,
        1,
        0,
        0,
        0,
        888,
        889,
        5,
        33,
        0,
        0,
        889,
        894,
        3,
        244,
        122,
        0,
        890,
        891,
        5,
        64,
        0,
        0,
        891,
        893,
        3,
        244,
        122,
        0,
        892,
        890,
        1,
        0,
        0,
        0,
        893,
        896,
        1,
        0,
        0,
        0,
        894,
        892,
        1,
        0,
        0,
        0,
        894,
        895,
        1,
        0,
        0,
        0,
        895,
        119,
        1,
        0,
        0,
        0,
        896,
        894,
        1,
        0,
        0,
        0,
        897,
        898,
        5,
        9,
        0,
        0,
        898,
        901,
        3,
        218,
        109,
        0,
        899,
        900,
        5,
        64,
        0,
        0,
        900,
        902,
        3,
        218,
        109,
        0,
        901,
        899,
        1,
        0,
        0,
        0,
        901,
        902,
        1,
        0,
        0,
        0,
        902,
        121,
        1,
        0,
        0,
        0,
        903,
        914,
        3,
        126,
        63,
        0,
        904,
        914,
        3,
        128,
        64,
        0,
        905,
        914,
        3,
        130,
        65,
        0,
        906,
        914,
        3,
        132,
        66,
        0,
        907,
        914,
        3,
        134,
        67,
        0,
        908,
        914,
        3,
        58,
        29,
        0,
        909,
        914,
        3,
        262,
        131,
        0,
        910,
        914,
        3,
        54,
        27,
        0,
        911,
        914,
        3,
        124,
        62,
        0,
        912,
        914,
        3,
        142,
        71,
        0,
        913,
        903,
        1,
        0,
        0,
        0,
        913,
        904,
        1,
        0,
        0,
        0,
        913,
        905,
        1,
        0,
        0,
        0,
        913,
        906,
        1,
        0,
        0,
        0,
        913,
        907,
        1,
        0,
        0,
        0,
        913,
        908,
        1,
        0,
        0,
        0,
        913,
        909,
        1,
        0,
        0,
        0,
        913,
        910,
        1,
        0,
        0,
        0,
        913,
        911,
        1,
        0,
        0,
        0,
        913,
        912,
        1,
        0,
        0,
        0,
        914,
        123,
        1,
        0,
        0,
        0,
        915,
        919,
        5,
        10,
        0,
        0,
        916,
        920,
        3,
        58,
        29,
        0,
        917,
        920,
        3,
        134,
        67,
        0,
        918,
        920,
        3,
        130,
        65,
        0,
        919,
        916,
        1,
        0,
        0,
        0,
        919,
        917,
        1,
        0,
        0,
        0,
        919,
        918,
        1,
        0,
        0,
        0,
        920,
        125,
        1,
        0,
        0,
        0,
        921,
        922,
        5,
        26,
        0,
        0,
        922,
        923,
        3,
        218,
        109,
        0,
        923,
        924,
        5,
        65,
        0,
        0,
        924,
        932,
        3,
        140,
        70,
        0,
        925,
        926,
        5,
        18,
        0,
        0,
        926,
        927,
        3,
        218,
        109,
        0,
        927,
        928,
        5,
        65,
        0,
        0,
        928,
        929,
        3,
        140,
        70,
        0,
        929,
        931,
        1,
        0,
        0,
        0,
        930,
        925,
        1,
        0,
        0,
        0,
        931,
        934,
        1,
        0,
        0,
        0,
        932,
        930,
        1,
        0,
        0,
        0,
        932,
        933,
        1,
        0,
        0,
        0,
        933,
        938,
        1,
        0,
        0,
        0,
        934,
        932,
        1,
        0,
        0,
        0,
        935,
        936,
        5,
        19,
        0,
        0,
        936,
        937,
        5,
        65,
        0,
        0,
        937,
        939,
        3,
        140,
        70,
        0,
        938,
        935,
        1,
        0,
        0,
        0,
        938,
        939,
        1,
        0,
        0,
        0,
        939,
        127,
        1,
        0,
        0,
        0,
        940,
        941,
        5,
        42,
        0,
        0,
        941,
        942,
        3,
        218,
        109,
        0,
        942,
        943,
        5,
        65,
        0,
        0,
        943,
        947,
        3,
        140,
        70,
        0,
        944,
        945,
        5,
        19,
        0,
        0,
        945,
        946,
        5,
        65,
        0,
        0,
        946,
        948,
        3,
        140,
        70,
        0,
        947,
        944,
        1,
        0,
        0,
        0,
        947,
        948,
        1,
        0,
        0,
        0,
        948,
        129,
        1,
        0,
        0,
        0,
        949,
        950,
        5,
        23,
        0,
        0,
        950,
        951,
        3,
        256,
        128,
        0,
        951,
        952,
        5,
        28,
        0,
        0,
        952,
        953,
        3,
        258,
        129,
        0,
        953,
        954,
        5,
        65,
        0,
        0,
        954,
        958,
        3,
        140,
        70,
        0,
        955,
        956,
        5,
        19,
        0,
        0,
        956,
        957,
        5,
        65,
        0,
        0,
        957,
        959,
        3,
        140,
        70,
        0,
        958,
        955,
        1,
        0,
        0,
        0,
        958,
        959,
        1,
        0,
        0,
        0,
        959,
        131,
        1,
        0,
        0,
        0,
        960,
        961,
        5,
        40,
        0,
        0,
        961,
        962,
        5,
        65,
        0,
        0,
        962,
        984,
        3,
        140,
        70,
        0,
        963,
        964,
        3,
        138,
        69,
        0,
        964,
        965,
        5,
        65,
        0,
        0,
        965,
        966,
        3,
        140,
        70,
        0,
        966,
        968,
        1,
        0,
        0,
        0,
        967,
        963,
        1,
        0,
        0,
        0,
        968,
        969,
        1,
        0,
        0,
        0,
        969,
        967,
        1,
        0,
        0,
        0,
        969,
        970,
        1,
        0,
        0,
        0,
        970,
        974,
        1,
        0,
        0,
        0,
        971,
        972,
        5,
        19,
        0,
        0,
        972,
        973,
        5,
        65,
        0,
        0,
        973,
        975,
        3,
        140,
        70,
        0,
        974,
        971,
        1,
        0,
        0,
        0,
        974,
        975,
        1,
        0,
        0,
        0,
        975,
        979,
        1,
        0,
        0,
        0,
        976,
        977,
        5,
        22,
        0,
        0,
        977,
        978,
        5,
        65,
        0,
        0,
        978,
        980,
        3,
        140,
        70,
        0,
        979,
        976,
        1,
        0,
        0,
        0,
        979,
        980,
        1,
        0,
        0,
        0,
        980,
        985,
        1,
        0,
        0,
        0,
        981,
        982,
        5,
        22,
        0,
        0,
        982,
        983,
        5,
        65,
        0,
        0,
        983,
        985,
        3,
        140,
        70,
        0,
        984,
        967,
        1,
        0,
        0,
        0,
        984,
        981,
        1,
        0,
        0,
        0,
        985,
        133,
        1,
        0,
        0,
        0,
        986,
        987,
        5,
        43,
        0,
        0,
        987,
        992,
        3,
        136,
        68,
        0,
        988,
        989,
        5,
        64,
        0,
        0,
        989,
        991,
        3,
        136,
        68,
        0,
        990,
        988,
        1,
        0,
        0,
        0,
        991,
        994,
        1,
        0,
        0,
        0,
        992,
        990,
        1,
        0,
        0,
        0,
        992,
        993,
        1,
        0,
        0,
        0,
        993,
        995,
        1,
        0,
        0,
        0,
        994,
        992,
        1,
        0,
        0,
        0,
        995,
        996,
        5,
        65,
        0,
        0,
        996,
        997,
        3,
        140,
        70,
        0,
        997,
        135,
        1,
        0,
        0,
        0,
        998,
        1001,
        3,
        218,
        109,
        0,
        999,
        1000,
        5,
        8,
        0,
        0,
        1000,
        1002,
        3,
        238,
        119,
        0,
        1001,
        999,
        1,
        0,
        0,
        0,
        1001,
        1002,
        1,
        0,
        0,
        0,
        1002,
        137,
        1,
        0,
        0,
        0,
        1003,
        1009,
        5,
        20,
        0,
        0,
        1004,
        1007,
        3,
        218,
        109,
        0,
        1005,
        1006,
        5,
        8,
        0,
        0,
        1006,
        1008,
        3,
        244,
        122,
        0,
        1007,
        1005,
        1,
        0,
        0,
        0,
        1007,
        1008,
        1,
        0,
        0,
        0,
        1008,
        1010,
        1,
        0,
        0,
        0,
        1009,
        1004,
        1,
        0,
        0,
        0,
        1009,
        1010,
        1,
        0,
        0,
        0,
        1010,
        139,
        1,
        0,
        0,
        0,
        1011,
        1019,
        3,
        72,
        36,
        0,
        1012,
        1014,
        5,
        107,
        0,
        0,
        1013,
        1015,
        3,
        70,
        35,
        0,
        1014,
        1013,
        1,
        0,
        0,
        0,
        1015,
        1016,
        1,
        0,
        0,
        0,
        1016,
        1014,
        1,
        0,
        0,
        0,
        1016,
        1017,
        1,
        0,
        0,
        0,
        1017,
        1019,
        1,
        0,
        0,
        0,
        1018,
        1011,
        1,
        0,
        0,
        0,
        1018,
        1012,
        1,
        0,
        0,
        0,
        1019,
        141,
        1,
        0,
        0,
        0,
        1020,
        1021,
        5,
        31,
        0,
        0,
        1021,
        1022,
        3,
        144,
        72,
        0,
        1022,
        1023,
        5,
        65,
        0,
        0,
        1023,
        1025,
        5,
        107,
        0,
        0,
        1024,
        1026,
        3,
        150,
        75,
        0,
        1025,
        1024,
        1,
        0,
        0,
        0,
        1026,
        1027,
        1,
        0,
        0,
        0,
        1027,
        1025,
        1,
        0,
        0,
        0,
        1027,
        1028,
        1,
        0,
        0,
        0,
        1028,
        143,
        1,
        0,
        0,
        0,
        1029,
        1030,
        3,
        148,
        74,
        0,
        1030,
        1032,
        5,
        64,
        0,
        0,
        1031,
        1033,
        3,
        146,
        73,
        0,
        1032,
        1031,
        1,
        0,
        0,
        0,
        1032,
        1033,
        1,
        0,
        0,
        0,
        1033,
        1036,
        1,
        0,
        0,
        0,
        1034,
        1036,
        3,
        218,
        109,
        0,
        1035,
        1029,
        1,
        0,
        0,
        0,
        1035,
        1034,
        1,
        0,
        0,
        0,
        1036,
        145,
        1,
        0,
        0,
        0,
        1037,
        1039,
        5,
        64,
        0,
        0,
        1038,
        1040,
        3,
        148,
        74,
        0,
        1039,
        1038,
        1,
        0,
        0,
        0,
        1040,
        1041,
        1,
        0,
        0,
        0,
        1041,
        1039,
        1,
        0,
        0,
        0,
        1041,
        1042,
        1,
        0,
        0,
        0,
        1042,
        1044,
        1,
        0,
        0,
        0,
        1043,
        1045,
        5,
        64,
        0,
        0,
        1044,
        1043,
        1,
        0,
        0,
        0,
        1044,
        1045,
        1,
        0,
        0,
        0,
        1045,
        147,
        1,
        0,
        0,
        0,
        1046,
        1047,
        5,
        61,
        0,
        0,
        1047,
        1050,
        3,
        238,
        119,
        0,
        1048,
        1050,
        3,
        218,
        109,
        0,
        1049,
        1046,
        1,
        0,
        0,
        0,
        1049,
        1048,
        1,
        0,
        0,
        0,
        1050,
        149,
        1,
        0,
        0,
        0,
        1051,
        1052,
        5,
        13,
        0,
        0,
        1052,
        1054,
        3,
        154,
        77,
        0,
        1053,
        1055,
        3,
        152,
        76,
        0,
        1054,
        1053,
        1,
        0,
        0,
        0,
        1054,
        1055,
        1,
        0,
        0,
        0,
        1055,
        1056,
        1,
        0,
        0,
        0,
        1056,
        1057,
        5,
        65,
        0,
        0,
        1057,
        1058,
        3,
        140,
        70,
        0,
        1058,
        151,
        1,
        0,
        0,
        0,
        1059,
        1060,
        5,
        26,
        0,
        0,
        1060,
        1061,
        3,
        218,
        109,
        0,
        1061,
        153,
        1,
        0,
        0,
        0,
        1062,
        1065,
        3,
        194,
        97,
        0,
        1063,
        1065,
        3,
        156,
        78,
        0,
        1064,
        1062,
        1,
        0,
        0,
        0,
        1064,
        1063,
        1,
        0,
        0,
        0,
        1065,
        155,
        1,
        0,
        0,
        0,
        1066,
        1069,
        3,
        158,
        79,
        0,
        1067,
        1069,
        3,
        160,
        80,
        0,
        1068,
        1066,
        1,
        0,
        0,
        0,
        1068,
        1067,
        1,
        0,
        0,
        0,
        1069,
        157,
        1,
        0,
        0,
        0,
        1070,
        1071,
        3,
        160,
        80,
        0,
        1071,
        1072,
        5,
        8,
        0,
        0,
        1072,
        1073,
        3,
        180,
        90,
        0,
        1073,
        159,
        1,
        0,
        0,
        0,
        1074,
        1079,
        3,
        162,
        81,
        0,
        1075,
        1076,
        5,
        71,
        0,
        0,
        1076,
        1078,
        3,
        162,
        81,
        0,
        1077,
        1075,
        1,
        0,
        0,
        0,
        1078,
        1081,
        1,
        0,
        0,
        0,
        1079,
        1077,
        1,
        0,
        0,
        0,
        1079,
        1080,
        1,
        0,
        0,
        0,
        1080,
        161,
        1,
        0,
        0,
        0,
        1081,
        1079,
        1,
        0,
        0,
        0,
        1082,
        1091,
        3,
        164,
        82,
        0,
        1083,
        1091,
        3,
        178,
        89,
        0,
        1084,
        1091,
        3,
        182,
        91,
        0,
        1085,
        1091,
        3,
        184,
        92,
        0,
        1086,
        1091,
        3,
        190,
        95,
        0,
        1087,
        1091,
        3,
        192,
        96,
        0,
        1088,
        1091,
        3,
        202,
        101,
        0,
        1089,
        1091,
        3,
        210,
        105,
        0,
        1090,
        1082,
        1,
        0,
        0,
        0,
        1090,
        1083,
        1,
        0,
        0,
        0,
        1090,
        1084,
        1,
        0,
        0,
        0,
        1090,
        1085,
        1,
        0,
        0,
        0,
        1090,
        1086,
        1,
        0,
        0,
        0,
        1090,
        1087,
        1,
        0,
        0,
        0,
        1090,
        1088,
        1,
        0,
        0,
        0,
        1090,
        1089,
        1,
        0,
        0,
        0,
        1091,
        163,
        1,
        0,
        0,
        0,
        1092,
        1099,
        3,
        170,
        85,
        0,
        1093,
        1099,
        3,
        168,
        84,
        0,
        1094,
        1099,
        3,
        278,
        139,
        0,
        1095,
        1099,
        5,
        32,
        0,
        0,
        1096,
        1099,
        5,
        39,
        0,
        0,
        1097,
        1099,
        5,
        21,
        0,
        0,
        1098,
        1092,
        1,
        0,
        0,
        0,
        1098,
        1093,
        1,
        0,
        0,
        0,
        1098,
        1094,
        1,
        0,
        0,
        0,
        1098,
        1095,
        1,
        0,
        0,
        0,
        1098,
        1096,
        1,
        0,
        0,
        0,
        1098,
        1097,
        1,
        0,
        0,
        0,
        1099,
        165,
        1,
        0,
        0,
        0,
        1100,
        1107,
        3,
        170,
        85,
        0,
        1101,
        1107,
        3,
        168,
        84,
        0,
        1102,
        1107,
        3,
        278,
        139,
        0,
        1103,
        1107,
        5,
        32,
        0,
        0,
        1104,
        1107,
        5,
        39,
        0,
        0,
        1105,
        1107,
        5,
        21,
        0,
        0,
        1106,
        1100,
        1,
        0,
        0,
        0,
        1106,
        1101,
        1,
        0,
        0,
        0,
        1106,
        1102,
        1,
        0,
        0,
        0,
        1106,
        1103,
        1,
        0,
        0,
        0,
        1106,
        1104,
        1,
        0,
        0,
        0,
        1106,
        1105,
        1,
        0,
        0,
        0,
        1107,
        167,
        1,
        0,
        0,
        0,
        1108,
        1109,
        3,
        172,
        86,
        0,
        1109,
        1110,
        5,
        76,
        0,
        0,
        1110,
        1111,
        3,
        176,
        88,
        0,
        1111,
        1117,
        1,
        0,
        0,
        0,
        1112,
        1113,
        3,
        172,
        86,
        0,
        1113,
        1114,
        5,
        77,
        0,
        0,
        1114,
        1115,
        3,
        176,
        88,
        0,
        1115,
        1117,
        1,
        0,
        0,
        0,
        1116,
        1108,
        1,
        0,
        0,
        0,
        1116,
        1112,
        1,
        0,
        0,
        0,
        1117,
        169,
        1,
        0,
        0,
        0,
        1118,
        1122,
        5,
        2,
        0,
        0,
        1119,
        1120,
        5,
        77,
        0,
        0,
        1120,
        1122,
        5,
        2,
        0,
        0,
        1121,
        1118,
        1,
        0,
        0,
        0,
        1121,
        1119,
        1,
        0,
        0,
        0,
        1122,
        171,
        1,
        0,
        0,
        0,
        1123,
        1127,
        3,
        174,
        87,
        0,
        1124,
        1125,
        5,
        77,
        0,
        0,
        1125,
        1127,
        3,
        174,
        87,
        0,
        1126,
        1123,
        1,
        0,
        0,
        0,
        1126,
        1124,
        1,
        0,
        0,
        0,
        1127,
        173,
        1,
        0,
        0,
        0,
        1128,
        1129,
        5,
        2,
        0,
        0,
        1129,
        175,
        1,
        0,
        0,
        0,
        1130,
        1131,
        5,
        2,
        0,
        0,
        1131,
        177,
        1,
        0,
        0,
        0,
        1132,
        1133,
        3,
        180,
        90,
        0,
        1133,
        179,
        1,
        0,
        0,
        0,
        1134,
        1135,
        3,
        244,
        122,
        0,
        1135,
        181,
        1,
        0,
        0,
        0,
        1136,
        1137,
        5,
        41,
        0,
        0,
        1137,
        183,
        1,
        0,
        0,
        0,
        1138,
        1139,
        3,
        186,
        93,
        0,
        1139,
        185,
        1,
        0,
        0,
        0,
        1140,
        1143,
        3,
        244,
        122,
        0,
        1141,
        1142,
        5,
        59,
        0,
        0,
        1142,
        1144,
        3,
        244,
        122,
        0,
        1143,
        1141,
        1,
        0,
        0,
        0,
        1144,
        1145,
        1,
        0,
        0,
        0,
        1145,
        1143,
        1,
        0,
        0,
        0,
        1145,
        1146,
        1,
        0,
        0,
        0,
        1146,
        187,
        1,
        0,
        0,
        0,
        1147,
        1150,
        3,
        186,
        93,
        0,
        1148,
        1150,
        3,
        244,
        122,
        0,
        1149,
        1147,
        1,
        0,
        0,
        0,
        1149,
        1148,
        1,
        0,
        0,
        0,
        1150,
        189,
        1,
        0,
        0,
        0,
        1151,
        1152,
        5,
        62,
        0,
        0,
        1152,
        1153,
        3,
        156,
        78,
        0,
        1153,
        1154,
        5,
        63,
        0,
        0,
        1154,
        191,
        1,
        0,
        0,
        0,
        1155,
        1157,
        5,
        69,
        0,
        0,
        1156,
        1158,
        3,
        196,
        98,
        0,
        1157,
        1156,
        1,
        0,
        0,
        0,
        1157,
        1158,
        1,
        0,
        0,
        0,
        1158,
        1159,
        1,
        0,
        0,
        0,
        1159,
        1166,
        5,
        70,
        0,
        0,
        1160,
        1162,
        5,
        62,
        0,
        0,
        1161,
        1163,
        3,
        194,
        97,
        0,
        1162,
        1161,
        1,
        0,
        0,
        0,
        1162,
        1163,
        1,
        0,
        0,
        0,
        1163,
        1164,
        1,
        0,
        0,
        0,
        1164,
        1166,
        5,
        63,
        0,
        0,
        1165,
        1155,
        1,
        0,
        0,
        0,
        1165,
        1160,
        1,
        0,
        0,
        0,
        1166,
        193,
        1,
        0,
        0,
        0,
        1167,
        1168,
        3,
        198,
        99,
        0,
        1168,
        1170,
        5,
        64,
        0,
        0,
        1169,
        1171,
        3,
        196,
        98,
        0,
        1170,
        1169,
        1,
        0,
        0,
        0,
        1170,
        1171,
        1,
        0,
        0,
        0,
        1171,
        195,
        1,
        0,
        0,
        0,
        1172,
        1177,
        3,
        198,
        99,
        0,
        1173,
        1174,
        5,
        64,
        0,
        0,
        1174,
        1176,
        3,
        198,
        99,
        0,
        1175,
        1173,
        1,
        0,
        0,
        0,
        1176,
        1179,
        1,
        0,
        0,
        0,
        1177,
        1175,
        1,
        0,
        0,
        0,
        1177,
        1178,
        1,
        0,
        0,
        0,
        1178,
        1181,
        1,
        0,
        0,
        0,
        1179,
        1177,
        1,
        0,
        0,
        0,
        1180,
        1182,
        5,
        64,
        0,
        0,
        1181,
        1180,
        1,
        0,
        0,
        0,
        1181,
        1182,
        1,
        0,
        0,
        0,
        1182,
        197,
        1,
        0,
        0,
        0,
        1183,
        1186,
        3,
        200,
        100,
        0,
        1184,
        1186,
        3,
        156,
        78,
        0,
        1185,
        1183,
        1,
        0,
        0,
        0,
        1185,
        1184,
        1,
        0,
        0,
        0,
        1186,
        199,
        1,
        0,
        0,
        0,
        1187,
        1188,
        5,
        61,
        0,
        0,
        1188,
        1192,
        3,
        180,
        90,
        0,
        1189,
        1190,
        5,
        61,
        0,
        0,
        1190,
        1192,
        3,
        182,
        91,
        0,
        1191,
        1187,
        1,
        0,
        0,
        0,
        1191,
        1189,
        1,
        0,
        0,
        0,
        1192,
        201,
        1,
        0,
        0,
        0,
        1193,
        1194,
        5,
        82,
        0,
        0,
        1194,
        1219,
        5,
        83,
        0,
        0,
        1195,
        1196,
        5,
        82,
        0,
        0,
        1196,
        1198,
        3,
        208,
        104,
        0,
        1197,
        1199,
        5,
        64,
        0,
        0,
        1198,
        1197,
        1,
        0,
        0,
        0,
        1198,
        1199,
        1,
        0,
        0,
        0,
        1199,
        1200,
        1,
        0,
        0,
        0,
        1200,
        1201,
        5,
        83,
        0,
        0,
        1201,
        1219,
        1,
        0,
        0,
        0,
        1202,
        1203,
        5,
        82,
        0,
        0,
        1203,
        1204,
        3,
        204,
        102,
        0,
        1204,
        1205,
        5,
        64,
        0,
        0,
        1205,
        1207,
        3,
        208,
        104,
        0,
        1206,
        1208,
        5,
        64,
        0,
        0,
        1207,
        1206,
        1,
        0,
        0,
        0,
        1207,
        1208,
        1,
        0,
        0,
        0,
        1208,
        1209,
        1,
        0,
        0,
        0,
        1209,
        1210,
        5,
        83,
        0,
        0,
        1210,
        1219,
        1,
        0,
        0,
        0,
        1211,
        1212,
        5,
        82,
        0,
        0,
        1212,
        1214,
        3,
        204,
        102,
        0,
        1213,
        1215,
        5,
        64,
        0,
        0,
        1214,
        1213,
        1,
        0,
        0,
        0,
        1214,
        1215,
        1,
        0,
        0,
        0,
        1215,
        1216,
        1,
        0,
        0,
        0,
        1216,
        1217,
        5,
        83,
        0,
        0,
        1217,
        1219,
        1,
        0,
        0,
        0,
        1218,
        1193,
        1,
        0,
        0,
        0,
        1218,
        1195,
        1,
        0,
        0,
        0,
        1218,
        1202,
        1,
        0,
        0,
        0,
        1218,
        1211,
        1,
        0,
        0,
        0,
        1219,
        203,
        1,
        0,
        0,
        0,
        1220,
        1225,
        3,
        206,
        103,
        0,
        1221,
        1222,
        5,
        64,
        0,
        0,
        1222,
        1224,
        3,
        206,
        103,
        0,
        1223,
        1221,
        1,
        0,
        0,
        0,
        1224,
        1227,
        1,
        0,
        0,
        0,
        1225,
        1223,
        1,
        0,
        0,
        0,
        1225,
        1226,
        1,
        0,
        0,
        0,
        1226,
        205,
        1,
        0,
        0,
        0,
        1227,
        1225,
        1,
        0,
        0,
        0,
        1228,
        1231,
        3,
        166,
        83,
        0,
        1229,
        1231,
        3,
        186,
        93,
        0,
        1230,
        1228,
        1,
        0,
        0,
        0,
        1230,
        1229,
        1,
        0,
        0,
        0,
        1231,
        1232,
        1,
        0,
        0,
        0,
        1232,
        1233,
        5,
        65,
        0,
        0,
        1233,
        1234,
        3,
        156,
        78,
        0,
        1234,
        207,
        1,
        0,
        0,
        0,
        1235,
        1236,
        5,
        67,
        0,
        0,
        1236,
        1237,
        3,
        180,
        90,
        0,
        1237,
        209,
        1,
        0,
        0,
        0,
        1238,
        1239,
        3,
        188,
        94,
        0,
        1239,
        1240,
        5,
        62,
        0,
        0,
        1240,
        1241,
        5,
        63,
        0,
        0,
        1241,
        1269,
        1,
        0,
        0,
        0,
        1242,
        1243,
        3,
        188,
        94,
        0,
        1243,
        1244,
        5,
        62,
        0,
        0,
        1244,
        1246,
        3,
        212,
        106,
        0,
        1245,
        1247,
        5,
        64,
        0,
        0,
        1246,
        1245,
        1,
        0,
        0,
        0,
        1246,
        1247,
        1,
        0,
        0,
        0,
        1247,
        1248,
        1,
        0,
        0,
        0,
        1248,
        1249,
        5,
        63,
        0,
        0,
        1249,
        1269,
        1,
        0,
        0,
        0,
        1250,
        1251,
        3,
        188,
        94,
        0,
        1251,
        1252,
        5,
        62,
        0,
        0,
        1252,
        1254,
        3,
        214,
        107,
        0,
        1253,
        1255,
        5,
        64,
        0,
        0,
        1254,
        1253,
        1,
        0,
        0,
        0,
        1254,
        1255,
        1,
        0,
        0,
        0,
        1255,
        1256,
        1,
        0,
        0,
        0,
        1256,
        1257,
        5,
        63,
        0,
        0,
        1257,
        1269,
        1,
        0,
        0,
        0,
        1258,
        1259,
        3,
        188,
        94,
        0,
        1259,
        1260,
        5,
        62,
        0,
        0,
        1260,
        1261,
        3,
        212,
        106,
        0,
        1261,
        1262,
        5,
        64,
        0,
        0,
        1262,
        1264,
        3,
        214,
        107,
        0,
        1263,
        1265,
        5,
        64,
        0,
        0,
        1264,
        1263,
        1,
        0,
        0,
        0,
        1264,
        1265,
        1,
        0,
        0,
        0,
        1265,
        1266,
        1,
        0,
        0,
        0,
        1266,
        1267,
        5,
        63,
        0,
        0,
        1267,
        1269,
        1,
        0,
        0,
        0,
        1268,
        1238,
        1,
        0,
        0,
        0,
        1268,
        1242,
        1,
        0,
        0,
        0,
        1268,
        1250,
        1,
        0,
        0,
        0,
        1268,
        1258,
        1,
        0,
        0,
        0,
        1269,
        211,
        1,
        0,
        0,
        0,
        1270,
        1275,
        3,
        156,
        78,
        0,
        1271,
        1272,
        5,
        64,
        0,
        0,
        1272,
        1274,
        3,
        156,
        78,
        0,
        1273,
        1271,
        1,
        0,
        0,
        0,
        1274,
        1277,
        1,
        0,
        0,
        0,
        1275,
        1273,
        1,
        0,
        0,
        0,
        1275,
        1276,
        1,
        0,
        0,
        0,
        1276,
        213,
        1,
        0,
        0,
        0,
        1277,
        1275,
        1,
        0,
        0,
        0,
        1278,
        1283,
        3,
        216,
        108,
        0,
        1279,
        1280,
        5,
        64,
        0,
        0,
        1280,
        1282,
        3,
        216,
        108,
        0,
        1281,
        1279,
        1,
        0,
        0,
        0,
        1282,
        1285,
        1,
        0,
        0,
        0,
        1283,
        1281,
        1,
        0,
        0,
        0,
        1283,
        1284,
        1,
        0,
        0,
        0,
        1284,
        215,
        1,
        0,
        0,
        0,
        1285,
        1283,
        1,
        0,
        0,
        0,
        1286,
        1287,
        3,
        244,
        122,
        0,
        1287,
        1288,
        5,
        68,
        0,
        0,
        1288,
        1289,
        3,
        156,
        78,
        0,
        1289,
        217,
        1,
        0,
        0,
        0,
        1290,
        1296,
        3,
        226,
        113,
        0,
        1291,
        1292,
        5,
        26,
        0,
        0,
        1292,
        1293,
        3,
        226,
        113,
        0,
        1293,
        1294,
        5,
        19,
        0,
        0,
        1294,
        1295,
        3,
        218,
        109,
        0,
        1295,
        1297,
        1,
        0,
        0,
        0,
        1296,
        1291,
        1,
        0,
        0,
        0,
        1296,
        1297,
        1,
        0,
        0,
        0,
        1297,
        1300,
        1,
        0,
        0,
        0,
        1298,
        1300,
        3,
        222,
        111,
        0,
        1299,
        1290,
        1,
        0,
        0,
        0,
        1299,
        1298,
        1,
        0,
        0,
        0,
        1300,
        219,
        1,
        0,
        0,
        0,
        1301,
        1304,
        3,
        226,
        113,
        0,
        1302,
        1304,
        3,
        224,
        112,
        0,
        1303,
        1301,
        1,
        0,
        0,
        0,
        1303,
        1302,
        1,
        0,
        0,
        0,
        1304,
        221,
        1,
        0,
        0,
        0,
        1305,
        1307,
        5,
        30,
        0,
        0,
        1306,
        1308,
        3,
        66,
        33,
        0,
        1307,
        1306,
        1,
        0,
        0,
        0,
        1307,
        1308,
        1,
        0,
        0,
        0,
        1308,
        1309,
        1,
        0,
        0,
        0,
        1309,
        1310,
        5,
        65,
        0,
        0,
        1310,
        1311,
        3,
        218,
        109,
        0,
        1311,
        223,
        1,
        0,
        0,
        0,
        1312,
        1314,
        5,
        30,
        0,
        0,
        1313,
        1315,
        3,
        66,
        33,
        0,
        1314,
        1313,
        1,
        0,
        0,
        0,
        1314,
        1315,
        1,
        0,
        0,
        0,
        1315,
        1316,
        1,
        0,
        0,
        0,
        1316,
        1317,
        5,
        65,
        0,
        0,
        1317,
        1318,
        3,
        220,
        110,
        0,
        1318,
        225,
        1,
        0,
        0,
        0,
        1319,
        1324,
        3,
        228,
        114,
        0,
        1320,
        1321,
        5,
        35,
        0,
        0,
        1321,
        1323,
        3,
        228,
        114,
        0,
        1322,
        1320,
        1,
        0,
        0,
        0,
        1323,
        1326,
        1,
        0,
        0,
        0,
        1324,
        1322,
        1,
        0,
        0,
        0,
        1324,
        1325,
        1,
        0,
        0,
        0,
        1325,
        227,
        1,
        0,
        0,
        0,
        1326,
        1324,
        1,
        0,
        0,
        0,
        1327,
        1332,
        3,
        230,
        115,
        0,
        1328,
        1329,
        5,
        7,
        0,
        0,
        1329,
        1331,
        3,
        230,
        115,
        0,
        1330,
        1328,
        1,
        0,
        0,
        0,
        1331,
        1334,
        1,
        0,
        0,
        0,
        1332,
        1330,
        1,
        0,
        0,
        0,
        1332,
        1333,
        1,
        0,
        0,
        0,
        1333,
        229,
        1,
        0,
        0,
        0,
        1334,
        1332,
        1,
        0,
        0,
        0,
        1335,
        1336,
        5,
        34,
        0,
        0,
        1336,
        1339,
        3,
        230,
        115,
        0,
        1337,
        1339,
        3,
        232,
        116,
        0,
        1338,
        1335,
        1,
        0,
        0,
        0,
        1338,
        1337,
        1,
        0,
        0,
        0,
        1339,
        231,
        1,
        0,
        0,
        0,
        1340,
        1346,
        3,
        238,
        119,
        0,
        1341,
        1342,
        3,
        234,
        117,
        0,
        1342,
        1343,
        3,
        238,
        119,
        0,
        1343,
        1345,
        1,
        0,
        0,
        0,
        1344,
        1341,
        1,
        0,
        0,
        0,
        1345,
        1348,
        1,
        0,
        0,
        0,
        1346,
        1344,
        1,
        0,
        0,
        0,
        1346,
        1347,
        1,
        0,
        0,
        0,
        1347,
        233,
        1,
        0,
        0,
        0,
        1348,
        1346,
        1,
        0,
        0,
        0,
        1349,
        1363,
        5,
        84,
        0,
        0,
        1350,
        1363,
        5,
        85,
        0,
        0,
        1351,
        1363,
        5,
        86,
        0,
        0,
        1352,
        1363,
        5,
        87,
        0,
        0,
        1353,
        1363,
        5,
        88,
        0,
        0,
        1354,
        1363,
        5,
        89,
        0,
        0,
        1355,
        1363,
        5,
        90,
        0,
        0,
        1356,
        1363,
        5,
        28,
        0,
        0,
        1357,
        1358,
        5,
        34,
        0,
        0,
        1358,
        1363,
        5,
        28,
        0,
        0,
        1359,
        1363,
        5,
        29,
        0,
        0,
        1360,
        1361,
        5,
        29,
        0,
        0,
        1361,
        1363,
        5,
        34,
        0,
        0,
        1362,
        1349,
        1,
        0,
        0,
        0,
        1362,
        1350,
        1,
        0,
        0,
        0,
        1362,
        1351,
        1,
        0,
        0,
        0,
        1362,
        1352,
        1,
        0,
        0,
        0,
        1362,
        1353,
        1,
        0,
        0,
        0,
        1362,
        1354,
        1,
        0,
        0,
        0,
        1362,
        1355,
        1,
        0,
        0,
        0,
        1362,
        1356,
        1,
        0,
        0,
        0,
        1362,
        1357,
        1,
        0,
        0,
        0,
        1362,
        1359,
        1,
        0,
        0,
        0,
        1362,
        1360,
        1,
        0,
        0,
        0,
        1363,
        235,
        1,
        0,
        0,
        0,
        1364,
        1365,
        5,
        61,
        0,
        0,
        1365,
        1366,
        3,
        238,
        119,
        0,
        1366,
        237,
        1,
        0,
        0,
        0,
        1367,
        1368,
        6,
        119,
        -1,
        0,
        1368,
        1377,
        3,
        42,
        21,
        0,
        1369,
        1377,
        3,
        240,
        120,
        0,
        1370,
        1372,
        7,
        3,
        0,
        0,
        1371,
        1370,
        1,
        0,
        0,
        0,
        1372,
        1373,
        1,
        0,
        0,
        0,
        1373,
        1371,
        1,
        0,
        0,
        0,
        1373,
        1374,
        1,
        0,
        0,
        0,
        1374,
        1375,
        1,
        0,
        0,
        0,
        1375,
        1377,
        3,
        238,
        119,
        7,
        1376,
        1367,
        1,
        0,
        0,
        0,
        1376,
        1369,
        1,
        0,
        0,
        0,
        1376,
        1371,
        1,
        0,
        0,
        0,
        1377,
        1401,
        1,
        0,
        0,
        0,
        1378,
        1379,
        10,
        8,
        0,
        0,
        1379,
        1380,
        5,
        67,
        0,
        0,
        1380,
        1400,
        3,
        238,
        119,
        9,
        1381,
        1382,
        10,
        6,
        0,
        0,
        1382,
        1383,
        7,
        4,
        0,
        0,
        1383,
        1400,
        3,
        238,
        119,
        7,
        1384,
        1385,
        10,
        5,
        0,
        0,
        1385,
        1386,
        7,
        5,
        0,
        0,
        1386,
        1400,
        3,
        238,
        119,
        6,
        1387,
        1388,
        10,
        4,
        0,
        0,
        1388,
        1389,
        7,
        6,
        0,
        0,
        1389,
        1400,
        3,
        238,
        119,
        5,
        1390,
        1391,
        10,
        3,
        0,
        0,
        1391,
        1392,
        5,
        73,
        0,
        0,
        1392,
        1400,
        3,
        238,
        119,
        4,
        1393,
        1394,
        10,
        2,
        0,
        0,
        1394,
        1395,
        5,
        72,
        0,
        0,
        1395,
        1400,
        3,
        238,
        119,
        3,
        1396,
        1397,
        10,
        1,
        0,
        0,
        1397,
        1398,
        5,
        71,
        0,
        0,
        1398,
        1400,
        3,
        238,
        119,
        2,
        1399,
        1378,
        1,
        0,
        0,
        0,
        1399,
        1381,
        1,
        0,
        0,
        0,
        1399,
        1384,
        1,
        0,
        0,
        0,
        1399,
        1387,
        1,
        0,
        0,
        0,
        1399,
        1390,
        1,
        0,
        0,
        0,
        1399,
        1393,
        1,
        0,
        0,
        0,
        1399,
        1396,
        1,
        0,
        0,
        0,
        1400,
        1403,
        1,
        0,
        0,
        0,
        1401,
        1399,
        1,
        0,
        0,
        0,
        1401,
        1402,
        1,
        0,
        0,
        0,
        1402,
        239,
        1,
        0,
        0,
        0,
        1403,
        1401,
        1,
        0,
        0,
        0,
        1404,
        1406,
        5,
        11,
        0,
        0,
        1405,
        1404,
        1,
        0,
        0,
        0,
        1405,
        1406,
        1,
        0,
        0,
        0,
        1406,
        1407,
        1,
        0,
        0,
        0,
        1407,
        1411,
        3,
        242,
        121,
        0,
        1408,
        1410,
        3,
        248,
        124,
        0,
        1409,
        1408,
        1,
        0,
        0,
        0,
        1410,
        1413,
        1,
        0,
        0,
        0,
        1411,
        1409,
        1,
        0,
        0,
        0,
        1411,
        1412,
        1,
        0,
        0,
        0,
        1412,
        241,
        1,
        0,
        0,
        0,
        1413,
        1411,
        1,
        0,
        0,
        0,
        1414,
        1417,
        5,
        62,
        0,
        0,
        1415,
        1418,
        3,
        274,
        137,
        0,
        1416,
        1418,
        3,
        246,
        123,
        0,
        1417,
        1415,
        1,
        0,
        0,
        0,
        1417,
        1416,
        1,
        0,
        0,
        0,
        1417,
        1418,
        1,
        0,
        0,
        0,
        1418,
        1419,
        1,
        0,
        0,
        0,
        1419,
        1442,
        5,
        63,
        0,
        0,
        1420,
        1422,
        5,
        69,
        0,
        0,
        1421,
        1423,
        3,
        246,
        123,
        0,
        1422,
        1421,
        1,
        0,
        0,
        0,
        1422,
        1423,
        1,
        0,
        0,
        0,
        1423,
        1424,
        1,
        0,
        0,
        0,
        1424,
        1442,
        5,
        70,
        0,
        0,
        1425,
        1427,
        5,
        82,
        0,
        0,
        1426,
        1428,
        3,
        260,
        130,
        0,
        1427,
        1426,
        1,
        0,
        0,
        0,
        1427,
        1428,
        1,
        0,
        0,
        0,
        1428,
        1429,
        1,
        0,
        0,
        0,
        1429,
        1442,
        5,
        83,
        0,
        0,
        1430,
        1442,
        3,
        244,
        122,
        0,
        1431,
        1442,
        5,
        2,
        0,
        0,
        1432,
        1434,
        5,
        1,
        0,
        0,
        1433,
        1432,
        1,
        0,
        0,
        0,
        1434,
        1435,
        1,
        0,
        0,
        0,
        1435,
        1433,
        1,
        0,
        0,
        0,
        1435,
        1436,
        1,
        0,
        0,
        0,
        1436,
        1442,
        1,
        0,
        0,
        0,
        1437,
        1442,
        5,
        60,
        0,
        0,
        1438,
        1442,
        5,
        32,
        0,
        0,
        1439,
        1442,
        5,
        39,
        0,
        0,
        1440,
        1442,
        5,
        21,
        0,
        0,
        1441,
        1414,
        1,
        0,
        0,
        0,
        1441,
        1420,
        1,
        0,
        0,
        0,
        1441,
        1425,
        1,
        0,
        0,
        0,
        1441,
        1430,
        1,
        0,
        0,
        0,
        1441,
        1431,
        1,
        0,
        0,
        0,
        1441,
        1433,
        1,
        0,
        0,
        0,
        1441,
        1437,
        1,
        0,
        0,
        0,
        1441,
        1438,
        1,
        0,
        0,
        0,
        1441,
        1439,
        1,
        0,
        0,
        0,
        1441,
        1440,
        1,
        0,
        0,
        0,
        1442,
        243,
        1,
        0,
        0,
        0,
        1443,
        1444,
        7,
        7,
        0,
        0,
        1444,
        245,
        1,
        0,
        0,
        0,
        1445,
        1448,
        3,
        218,
        109,
        0,
        1446,
        1448,
        3,
        236,
        118,
        0,
        1447,
        1445,
        1,
        0,
        0,
        0,
        1447,
        1446,
        1,
        0,
        0,
        0,
        1448,
        1463,
        1,
        0,
        0,
        0,
        1449,
        1464,
        3,
        270,
        135,
        0,
        1450,
        1453,
        5,
        64,
        0,
        0,
        1451,
        1454,
        3,
        218,
        109,
        0,
        1452,
        1454,
        3,
        236,
        118,
        0,
        1453,
        1451,
        1,
        0,
        0,
        0,
        1453,
        1452,
        1,
        0,
        0,
        0,
        1454,
        1456,
        1,
        0,
        0,
        0,
        1455,
        1450,
        1,
        0,
        0,
        0,
        1456,
        1459,
        1,
        0,
        0,
        0,
        1457,
        1455,
        1,
        0,
        0,
        0,
        1457,
        1458,
        1,
        0,
        0,
        0,
        1458,
        1461,
        1,
        0,
        0,
        0,
        1459,
        1457,
        1,
        0,
        0,
        0,
        1460,
        1462,
        5,
        64,
        0,
        0,
        1461,
        1460,
        1,
        0,
        0,
        0,
        1461,
        1462,
        1,
        0,
        0,
        0,
        1462,
        1464,
        1,
        0,
        0,
        0,
        1463,
        1449,
        1,
        0,
        0,
        0,
        1463,
        1457,
        1,
        0,
        0,
        0,
        1464,
        247,
        1,
        0,
        0,
        0,
        1465,
        1467,
        5,
        62,
        0,
        0,
        1466,
        1468,
        3,
        264,
        132,
        0,
        1467,
        1466,
        1,
        0,
        0,
        0,
        1467,
        1468,
        1,
        0,
        0,
        0,
        1468,
        1469,
        1,
        0,
        0,
        0,
        1469,
        1477,
        5,
        63,
        0,
        0,
        1470,
        1471,
        5,
        69,
        0,
        0,
        1471,
        1472,
        3,
        250,
        125,
        0,
        1472,
        1473,
        5,
        70,
        0,
        0,
        1473,
        1477,
        1,
        0,
        0,
        0,
        1474,
        1475,
        5,
        59,
        0,
        0,
        1475,
        1477,
        3,
        244,
        122,
        0,
        1476,
        1465,
        1,
        0,
        0,
        0,
        1476,
        1470,
        1,
        0,
        0,
        0,
        1476,
        1474,
        1,
        0,
        0,
        0,
        1477,
        249,
        1,
        0,
        0,
        0,
        1478,
        1483,
        3,
        252,
        126,
        0,
        1479,
        1480,
        5,
        64,
        0,
        0,
        1480,
        1482,
        3,
        252,
        126,
        0,
        1481,
        1479,
        1,
        0,
        0,
        0,
        1482,
        1485,
        1,
        0,
        0,
        0,
        1483,
        1481,
        1,
        0,
        0,
        0,
        1483,
        1484,
        1,
        0,
        0,
        0,
        1484,
        1487,
        1,
        0,
        0,
        0,
        1485,
        1483,
        1,
        0,
        0,
        0,
        1486,
        1488,
        5,
        64,
        0,
        0,
        1487,
        1486,
        1,
        0,
        0,
        0,
        1487,
        1488,
        1,
        0,
        0,
        0,
        1488,
        251,
        1,
        0,
        0,
        0,
        1489,
        1501,
        3,
        218,
        109,
        0,
        1490,
        1492,
        3,
        218,
        109,
        0,
        1491,
        1490,
        1,
        0,
        0,
        0,
        1491,
        1492,
        1,
        0,
        0,
        0,
        1492,
        1493,
        1,
        0,
        0,
        0,
        1493,
        1495,
        5,
        65,
        0,
        0,
        1494,
        1496,
        3,
        218,
        109,
        0,
        1495,
        1494,
        1,
        0,
        0,
        0,
        1495,
        1496,
        1,
        0,
        0,
        0,
        1496,
        1498,
        1,
        0,
        0,
        0,
        1497,
        1499,
        3,
        254,
        127,
        0,
        1498,
        1497,
        1,
        0,
        0,
        0,
        1498,
        1499,
        1,
        0,
        0,
        0,
        1499,
        1501,
        1,
        0,
        0,
        0,
        1500,
        1489,
        1,
        0,
        0,
        0,
        1500,
        1491,
        1,
        0,
        0,
        0,
        1501,
        253,
        1,
        0,
        0,
        0,
        1502,
        1504,
        5,
        65,
        0,
        0,
        1503,
        1505,
        3,
        218,
        109,
        0,
        1504,
        1503,
        1,
        0,
        0,
        0,
        1504,
        1505,
        1,
        0,
        0,
        0,
        1505,
        255,
        1,
        0,
        0,
        0,
        1506,
        1509,
        3,
        238,
        119,
        0,
        1507,
        1509,
        3,
        236,
        118,
        0,
        1508,
        1506,
        1,
        0,
        0,
        0,
        1508,
        1507,
        1,
        0,
        0,
        0,
        1509,
        1517,
        1,
        0,
        0,
        0,
        1510,
        1513,
        5,
        64,
        0,
        0,
        1511,
        1514,
        3,
        238,
        119,
        0,
        1512,
        1514,
        3,
        236,
        118,
        0,
        1513,
        1511,
        1,
        0,
        0,
        0,
        1513,
        1512,
        1,
        0,
        0,
        0,
        1514,
        1516,
        1,
        0,
        0,
        0,
        1515,
        1510,
        1,
        0,
        0,
        0,
        1516,
        1519,
        1,
        0,
        0,
        0,
        1517,
        1515,
        1,
        0,
        0,
        0,
        1517,
        1518,
        1,
        0,
        0,
        0,
        1518,
        1521,
        1,
        0,
        0,
        0,
        1519,
        1517,
        1,
        0,
        0,
        0,
        1520,
        1522,
        5,
        64,
        0,
        0,
        1521,
        1520,
        1,
        0,
        0,
        0,
        1521,
        1522,
        1,
        0,
        0,
        0,
        1522,
        257,
        1,
        0,
        0,
        0,
        1523,
        1528,
        3,
        218,
        109,
        0,
        1524,
        1525,
        5,
        64,
        0,
        0,
        1525,
        1527,
        3,
        218,
        109,
        0,
        1526,
        1524,
        1,
        0,
        0,
        0,
        1527,
        1530,
        1,
        0,
        0,
        0,
        1528,
        1526,
        1,
        0,
        0,
        0,
        1528,
        1529,
        1,
        0,
        0,
        0,
        1529,
        1532,
        1,
        0,
        0,
        0,
        1530,
        1528,
        1,
        0,
        0,
        0,
        1531,
        1533,
        5,
        64,
        0,
        0,
        1532,
        1531,
        1,
        0,
        0,
        0,
        1532,
        1533,
        1,
        0,
        0,
        0,
        1533,
        259,
        1,
        0,
        0,
        0,
        1534,
        1535,
        3,
        218,
        109,
        0,
        1535,
        1536,
        5,
        65,
        0,
        0,
        1536,
        1537,
        3,
        218,
        109,
        0,
        1537,
        1541,
        1,
        0,
        0,
        0,
        1538,
        1539,
        5,
        67,
        0,
        0,
        1539,
        1541,
        3,
        238,
        119,
        0,
        1540,
        1534,
        1,
        0,
        0,
        0,
        1540,
        1538,
        1,
        0,
        0,
        0,
        1541,
        1560,
        1,
        0,
        0,
        0,
        1542,
        1561,
        3,
        270,
        135,
        0,
        1543,
        1550,
        5,
        64,
        0,
        0,
        1544,
        1545,
        3,
        218,
        109,
        0,
        1545,
        1546,
        5,
        65,
        0,
        0,
        1546,
        1547,
        3,
        218,
        109,
        0,
        1547,
        1551,
        1,
        0,
        0,
        0,
        1548,
        1549,
        5,
        67,
        0,
        0,
        1549,
        1551,
        3,
        238,
        119,
        0,
        1550,
        1544,
        1,
        0,
        0,
        0,
        1550,
        1548,
        1,
        0,
        0,
        0,
        1551,
        1553,
        1,
        0,
        0,
        0,
        1552,
        1543,
        1,
        0,
        0,
        0,
        1553,
        1556,
        1,
        0,
        0,
        0,
        1554,
        1552,
        1,
        0,
        0,
        0,
        1554,
        1555,
        1,
        0,
        0,
        0,
        1555,
        1558,
        1,
        0,
        0,
        0,
        1556,
        1554,
        1,
        0,
        0,
        0,
        1557,
        1559,
        5,
        64,
        0,
        0,
        1558,
        1557,
        1,
        0,
        0,
        0,
        1558,
        1559,
        1,
        0,
        0,
        0,
        1559,
        1561,
        1,
        0,
        0,
        0,
        1560,
        1542,
        1,
        0,
        0,
        0,
        1560,
        1554,
        1,
        0,
        0,
        0,
        1561,
        1583,
        1,
        0,
        0,
        0,
        1562,
        1565,
        3,
        218,
        109,
        0,
        1563,
        1565,
        3,
        236,
        118,
        0,
        1564,
        1562,
        1,
        0,
        0,
        0,
        1564,
        1563,
        1,
        0,
        0,
        0,
        1565,
        1580,
        1,
        0,
        0,
        0,
        1566,
        1581,
        3,
        270,
        135,
        0,
        1567,
        1570,
        5,
        64,
        0,
        0,
        1568,
        1571,
        3,
        218,
        109,
        0,
        1569,
        1571,
        3,
        236,
        118,
        0,
        1570,
        1568,
        1,
        0,
        0,
        0,
        1570,
        1569,
        1,
        0,
        0,
        0,
        1571,
        1573,
        1,
        0,
        0,
        0,
        1572,
        1567,
        1,
        0,
        0,
        0,
        1573,
        1576,
        1,
        0,
        0,
        0,
        1574,
        1572,
        1,
        0,
        0,
        0,
        1574,
        1575,
        1,
        0,
        0,
        0,
        1575,
        1578,
        1,
        0,
        0,
        0,
        1576,
        1574,
        1,
        0,
        0,
        0,
        1577,
        1579,
        5,
        64,
        0,
        0,
        1578,
        1577,
        1,
        0,
        0,
        0,
        1578,
        1579,
        1,
        0,
        0,
        0,
        1579,
        1581,
        1,
        0,
        0,
        0,
        1580,
        1566,
        1,
        0,
        0,
        0,
        1580,
        1574,
        1,
        0,
        0,
        0,
        1581,
        1583,
        1,
        0,
        0,
        0,
        1582,
        1540,
        1,
        0,
        0,
        0,
        1582,
        1564,
        1,
        0,
        0,
        0,
        1583,
        261,
        1,
        0,
        0,
        0,
        1584,
        1585,
        5,
        14,
        0,
        0,
        1585,
        1591,
        3,
        244,
        122,
        0,
        1586,
        1588,
        5,
        62,
        0,
        0,
        1587,
        1589,
        3,
        264,
        132,
        0,
        1588,
        1587,
        1,
        0,
        0,
        0,
        1588,
        1589,
        1,
        0,
        0,
        0,
        1589,
        1590,
        1,
        0,
        0,
        0,
        1590,
        1592,
        5,
        63,
        0,
        0,
        1591,
        1586,
        1,
        0,
        0,
        0,
        1591,
        1592,
        1,
        0,
        0,
        0,
        1592,
        1593,
        1,
        0,
        0,
        0,
        1593,
        1594,
        5,
        65,
        0,
        0,
        1594,
        1595,
        3,
        140,
        70,
        0,
        1595,
        263,
        1,
        0,
        0,
        0,
        1596,
        1601,
        3,
        266,
        133,
        0,
        1597,
        1598,
        5,
        64,
        0,
        0,
        1598,
        1600,
        3,
        266,
        133,
        0,
        1599,
        1597,
        1,
        0,
        0,
        0,
        1600,
        1603,
        1,
        0,
        0,
        0,
        1601,
        1599,
        1,
        0,
        0,
        0,
        1601,
        1602,
        1,
        0,
        0,
        0,
        1602,
        1605,
        1,
        0,
        0,
        0,
        1603,
        1601,
        1,
        0,
        0,
        0,
        1604,
        1606,
        5,
        64,
        0,
        0,
        1605,
        1604,
        1,
        0,
        0,
        0,
        1605,
        1606,
        1,
        0,
        0,
        0,
        1606,
        265,
        1,
        0,
        0,
        0,
        1607,
        1609,
        3,
        218,
        109,
        0,
        1608,
        1610,
        3,
        270,
        135,
        0,
        1609,
        1608,
        1,
        0,
        0,
        0,
        1609,
        1610,
        1,
        0,
        0,
        0,
        1610,
        1620,
        1,
        0,
        0,
        0,
        1611,
        1612,
        3,
        218,
        109,
        0,
        1612,
        1613,
        5,
        68,
        0,
        0,
        1613,
        1614,
        3,
        218,
        109,
        0,
        1614,
        1620,
        1,
        0,
        0,
        0,
        1615,
        1616,
        5,
        67,
        0,
        0,
        1616,
        1620,
        3,
        218,
        109,
        0,
        1617,
        1618,
        5,
        61,
        0,
        0,
        1618,
        1620,
        3,
        218,
        109,
        0,
        1619,
        1607,
        1,
        0,
        0,
        0,
        1619,
        1611,
        1,
        0,
        0,
        0,
        1619,
        1615,
        1,
        0,
        0,
        0,
        1619,
        1617,
        1,
        0,
        0,
        0,
        1620,
        267,
        1,
        0,
        0,
        0,
        1621,
        1624,
        3,
        270,
        135,
        0,
        1622,
        1624,
        3,
        272,
        136,
        0,
        1623,
        1621,
        1,
        0,
        0,
        0,
        1623,
        1622,
        1,
        0,
        0,
        0,
        1624,
        269,
        1,
        0,
        0,
        0,
        1625,
        1627,
        5,
        10,
        0,
        0,
        1626,
        1625,
        1,
        0,
        0,
        0,
        1626,
        1627,
        1,
        0,
        0,
        0,
        1627,
        1628,
        1,
        0,
        0,
        0,
        1628,
        1629,
        5,
        23,
        0,
        0,
        1629,
        1630,
        3,
        256,
        128,
        0,
        1630,
        1631,
        5,
        28,
        0,
        0,
        1631,
        1633,
        3,
        226,
        113,
        0,
        1632,
        1634,
        3,
        268,
        134,
        0,
        1633,
        1632,
        1,
        0,
        0,
        0,
        1633,
        1634,
        1,
        0,
        0,
        0,
        1634,
        271,
        1,
        0,
        0,
        0,
        1635,
        1636,
        5,
        26,
        0,
        0,
        1636,
        1638,
        3,
        220,
        110,
        0,
        1637,
        1639,
        3,
        268,
        134,
        0,
        1638,
        1637,
        1,
        0,
        0,
        0,
        1638,
        1639,
        1,
        0,
        0,
        0,
        1639,
        273,
        1,
        0,
        0,
        0,
        1640,
        1642,
        5,
        44,
        0,
        0,
        1641,
        1643,
        3,
        276,
        138,
        0,
        1642,
        1641,
        1,
        0,
        0,
        0,
        1642,
        1643,
        1,
        0,
        0,
        0,
        1643,
        275,
        1,
        0,
        0,
        0,
        1644,
        1645,
        5,
        24,
        0,
        0,
        1645,
        1648,
        3,
        218,
        109,
        0,
        1646,
        1648,
        3,
        258,
        129,
        0,
        1647,
        1644,
        1,
        0,
        0,
        0,
        1647,
        1646,
        1,
        0,
        0,
        0,
        1648,
        277,
        1,
        0,
        0,
        0,
        1649,
        1651,
        5,
        1,
        0,
        0,
        1650,
        1649,
        1,
        0,
        0,
        0,
        1651,
        1652,
        1,
        0,
        0,
        0,
        1652,
        1650,
        1,
        0,
        0,
        0,
        1652,
        1653,
        1,
        0,
        0,
        0,
        1653,
        279,
        1,
        0,
        0,
        0,
        225,
        286,
        293,
        298,
        304,
        311,
        320,
        327,
        335,
        351,
        358,
        368,
        373,
        378,
        391,
        408,
        415,
        423,
        431,
        438,
        443,
        453,
        465,
        467,
        473,
        475,
        483,
        488,
        493,
        500,
        503,
        510,
        516,
        526,
        533,
        540,
        546,
        550,
        556,
        562,
        566,
        573,
        575,
        577,
        582,
        584,
        586,
        590,
        596,
        600,
        607,
        609,
        611,
        616,
        618,
        623,
        628,
        634,
        638,
        644,
        650,
        654,
        661,
        663,
        665,
        670,
        672,
        674,
        678,
        684,
        688,
        695,
        697,
        699,
        704,
        706,
        712,
        719,
        723,
        735,
        742,
        747,
        751,
        754,
        760,
        764,
        769,
        773,
        777,
        791,
        799,
        807,
        809,
        813,
        822,
        829,
        831,
        840,
        845,
        850,
        857,
        861,
        868,
        876,
        885,
        894,
        901,
        913,
        919,
        932,
        938,
        947,
        958,
        969,
        974,
        979,
        984,
        992,
        1001,
        1007,
        1009,
        1016,
        1018,
        1027,
        1032,
        1035,
        1041,
        1044,
        1049,
        1054,
        1064,
        1068,
        1079,
        1090,
        1098,
        1106,
        1116,
        1121,
        1126,
        1145,
        1149,
        1157,
        1162,
        1165,
        1170,
        1177,
        1181,
        1185,
        1191,
        1198,
        1207,
        1214,
        1218,
        1225,
        1230,
        1246,
        1254,
        1264,
        1268,
        1275,
        1283,
        1296,
        1299,
        1303,
        1307,
        1314,
        1324,
        1332,
        1338,
        1346,
        1362,
        1373,
        1376,
        1399,
        1401,
        1405,
        1411,
        1417,
        1422,
        1427,
        1435,
        1441,
        1447,
        1453,
        1457,
        1461,
        1463,
        1467,
        1476,
        1483,
        1487,
        1491,
        1495,
        1498,
        1500,
        1504,
        1508,
        1513,
        1517,
        1521,
        1528,
        1532,
        1540,
        1550,
        1554,
        1558,
        1560,
        1564,
        1570,
        1574,
        1578,
        1580,
        1582,
        1588,
        1591,
        1601,
        1605,
        1609,
        1619,
        1623,
        1626,
        1633,
        1638,
        1642,
        1647,
        1652,
    ]


class FandangoParser(Parser):
    grammarFileName = "FandangoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'<py>'",
        "'</py>'",
        "<INVALID>",
        "'and'",
        "'as'",
        "'assert'",
        "'async'",
        "'await'",
        "'break'",
        "'case'",
        "'class'",
        "'continue'",
        "'def'",
        "'del'",
        "'elif'",
        "'else'",
        "'except'",
        "'False'",
        "'finally'",
        "'for'",
        "'from'",
        "'global'",
        "'if'",
        "'import'",
        "'in'",
        "'is'",
        "'lambda'",
        "'match'",
        "'None'",
        "'nonlocal'",
        "'not'",
        "'or'",
        "'pass'",
        "'raise'",
        "'return'",
        "'True'",
        "'try'",
        "'_'",
        "'while'",
        "'with'",
        "'yield'",
        "'forall'",
        "'exists'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'::='",
        "'?'",
        "'\\'",
        "'.'",
        "'...'",
        "'*'",
        "'('",
        "')'",
        "','",
        "':'",
        "';'",
        "'**'",
        "'='",
        "'['",
        "']'",
        "'|'",
        "'^'",
        "'&'",
        "'<<'",
        "'>>'",
        "'+'",
        "'-'",
        "'/'",
        "'%'",
        "'//'",
        "'~'",
        "'{'",
        "'}'",
        "'<'",
        "'>'",
        "'=='",
        "'>='",
        "'<='",
        "'<>'",
        "'!='",
        "'@'",
        "'->'",
        "'+='",
        "'-='",
        "'*='",
        "'@='",
        "'/='",
        "'%='",
        "'&='",
        "'|='",
        "'^='",
        "'<<='",
        "'>>='",
        "'**='",
        "'//='",
    ]

    symbolicNames = [
        "<INVALID>",
        "STRING",
        "NUMBER",
        "INTEGER",
        "PYTHON_START",
        "PYTHON_END",
        "RULE_NAME",
        "AND",
        "AS",
        "ASSERT",
        "ASYNC",
        "AWAIT",
        "BREAK",
        "CASE",
        "CLASS",
        "CONTINUE",
        "DEF",
        "DEL",
        "ELIF",
        "ELSE",
        "EXCEPT",
        "FALSE",
        "FINALLY",
        "FOR",
        "FROM",
        "GLOBAL",
        "IF",
        "IMPORT",
        "IN",
        "IS",
        "LAMBDA",
        "MATCH",
        "NONE",
        "NONLOCAL",
        "NOT",
        "OR",
        "PASS",
        "RAISE",
        "RETURN",
        "TRUE",
        "TRY",
        "UNDERSCORE",
        "WHILE",
        "WITH",
        "YIELD",
        "FORALL",
        "EXISTS",
        "NAME",
        "STRING_LITERAL",
        "BYTES_LITERAL",
        "DECIMAL_INTEGER",
        "OCT_INTEGER",
        "HEX_INTEGER",
        "BIN_INTEGER",
        "FLOAT_NUMBER",
        "IMAG_NUMBER",
        "GRAMMAR_ASSIGN",
        "QUESTION",
        "BACKSLASH",
        "DOT",
        "ELLIPSIS",
        "STAR",
        "OPEN_PAREN",
        "CLOSE_PAREN",
        "COMMA",
        "COLON",
        "SEMI_COLON",
        "POWER",
        "ASSIGN",
        "OPEN_BRACK",
        "CLOSE_BRACK",
        "OR_OP",
        "XOR",
        "AND_OP",
        "LEFT_SHIFT",
        "RIGHT_SHIFT",
        "ADD",
        "MINUS",
        "DIV",
        "MOD",
        "IDIV",
        "NOT_OP",
        "OPEN_BRACE",
        "CLOSE_BRACE",
        "LESS_THAN",
        "GREATER_THAN",
        "EQUALS",
        "GT_EQ",
        "LT_EQ",
        "NOT_EQ_1",
        "NOT_EQ_2",
        "AT",
        "ARROW",
        "ADD_ASSIGN",
        "SUB_ASSIGN",
        "MULT_ASSIGN",
        "AT_ASSIGN",
        "DIV_ASSIGN",
        "MOD_ASSIGN",
        "AND_ASSIGN",
        "OR_ASSIGN",
        "XOR_ASSIGN",
        "LEFT_SHIFT_ASSIGN",
        "RIGHT_SHIFT_ASSIGN",
        "POWER_ASSIGN",
        "IDIV_ASSIGN",
        "SKIP_",
        "NEWLINE",
    ]

    RULE_fandango = 0
    RULE_program = 1
    RULE_statement = 2
    RULE_production = 3
    RULE_alternative = 4
    RULE_concatenation = 5
    RULE_operator = 6
    RULE_kleene = 7
    RULE_plus = 8
    RULE_option = 9
    RULE_repeat = 10
    RULE_symbol = 11
    RULE_char_set = 12
    RULE_constraint = 13
    RULE_implies = 14
    RULE_quantifier = 15
    RULE_disjunction = 16
    RULE_conjunction = 17
    RULE_formula_atom = 18
    RULE_formula_comparison = 19
    RULE_expression = 20
    RULE_selector = 21
    RULE_selection = 22
    RULE_python = 23
    RULE_python_tag = 24
    RULE_decorator = 25
    RULE_decorators = 26
    RULE_decorated = 27
    RULE_async_funcdef = 28
    RULE_funcdef = 29
    RULE_parameters = 30
    RULE_typedargslist = 31
    RULE_tfpdef = 32
    RULE_varargslist = 33
    RULE_vfpdef = 34
    RULE_stmt = 35
    RULE_simple_stmts = 36
    RULE_simple_stmt = 37
    RULE_expr_stmt = 38
    RULE_annassign = 39
    RULE_testlist_star_expr = 40
    RULE_augassign = 41
    RULE_del_stmt = 42
    RULE_pass_stmt = 43
    RULE_flow_stmt = 44
    RULE_break_stmt = 45
    RULE_continue_stmt = 46
    RULE_return_stmt = 47
    RULE_yield_stmt = 48
    RULE_raise_stmt = 49
    RULE_import_stmt = 50
    RULE_import_name = 51
    RULE_import_from = 52
    RULE_import_as_name = 53
    RULE_dotted_as_name = 54
    RULE_import_as_names = 55
    RULE_dotted_as_names = 56
    RULE_dotted_name = 57
    RULE_global_stmt = 58
    RULE_nonlocal_stmt = 59
    RULE_assert_stmt = 60
    RULE_compound_stmt = 61
    RULE_async_stmt = 62
    RULE_if_stmt = 63
    RULE_while_stmt = 64
    RULE_for_stmt = 65
    RULE_try_stmt = 66
    RULE_with_stmt = 67
    RULE_with_item = 68
    RULE_except_clause = 69
    RULE_block = 70
    RULE_match_stmt = 71
    RULE_subject_expr = 72
    RULE_star_named_expressions = 73
    RULE_star_named_expression = 74
    RULE_case_block = 75
    RULE_guard = 76
    RULE_patterns = 77
    RULE_pattern = 78
    RULE_as_pattern = 79
    RULE_or_pattern = 80
    RULE_closed_pattern = 81
    RULE_literal_pattern = 82
    RULE_literal_expr = 83
    RULE_complex_number = 84
    RULE_signed_number = 85
    RULE_signed_real_number = 86
    RULE_real_number = 87
    RULE_imaginary_number = 88
    RULE_capture_pattern = 89
    RULE_pattern_capture_target = 90
    RULE_wildcard_pattern = 91
    RULE_value_pattern = 92
    RULE_attr = 93
    RULE_name_or_attr = 94
    RULE_group_pattern = 95
    RULE_sequence_pattern = 96
    RULE_open_sequence_pattern = 97
    RULE_maybe_sequence_pattern = 98
    RULE_maybe_star_pattern = 99
    RULE_star_pattern = 100
    RULE_mapping_pattern = 101
    RULE_items_pattern = 102
    RULE_key_value_pattern = 103
    RULE_double_star_pattern = 104
    RULE_class_pattern = 105
    RULE_positional_patterns = 106
    RULE_keyword_patterns = 107
    RULE_keyword_pattern = 108
    RULE_test = 109
    RULE_test_nocond = 110
    RULE_lambdef = 111
    RULE_lambdef_nocond = 112
    RULE_or_test = 113
    RULE_and_test = 114
    RULE_not_test = 115
    RULE_comparison = 116
    RULE_comp_op = 117
    RULE_star_expr = 118
    RULE_expr = 119
    RULE_atom_expr = 120
    RULE_atom = 121
    RULE_name = 122
    RULE_testlist_comp = 123
    RULE_trailer = 124
    RULE_subscriptlist = 125
    RULE_subscript_ = 126
    RULE_sliceop = 127
    RULE_exprlist = 128
    RULE_testlist = 129
    RULE_dictorsetmaker = 130
    RULE_classdef = 131
    RULE_arglist = 132
    RULE_argument = 133
    RULE_comp_iter = 134
    RULE_comp_for = 135
    RULE_comp_if = 136
    RULE_yield_expr = 137
    RULE_yield_arg = 138
    RULE_strings = 139

    ruleNames = [
        "fandango",
        "program",
        "statement",
        "production",
        "alternative",
        "concatenation",
        "operator",
        "kleene",
        "plus",
        "option",
        "repeat",
        "symbol",
        "char_set",
        "constraint",
        "implies",
        "quantifier",
        "disjunction",
        "conjunction",
        "formula_atom",
        "formula_comparison",
        "expression",
        "selector",
        "selection",
        "python",
        "python_tag",
        "decorator",
        "decorators",
        "decorated",
        "async_funcdef",
        "funcdef",
        "parameters",
        "typedargslist",
        "tfpdef",
        "varargslist",
        "vfpdef",
        "stmt",
        "simple_stmts",
        "simple_stmt",
        "expr_stmt",
        "annassign",
        "testlist_star_expr",
        "augassign",
        "del_stmt",
        "pass_stmt",
        "flow_stmt",
        "break_stmt",
        "continue_stmt",
        "return_stmt",
        "yield_stmt",
        "raise_stmt",
        "import_stmt",
        "import_name",
        "import_from",
        "import_as_name",
        "dotted_as_name",
        "import_as_names",
        "dotted_as_names",
        "dotted_name",
        "global_stmt",
        "nonlocal_stmt",
        "assert_stmt",
        "compound_stmt",
        "async_stmt",
        "if_stmt",
        "while_stmt",
        "for_stmt",
        "try_stmt",
        "with_stmt",
        "with_item",
        "except_clause",
        "block",
        "match_stmt",
        "subject_expr",
        "star_named_expressions",
        "star_named_expression",
        "case_block",
        "guard",
        "patterns",
        "pattern",
        "as_pattern",
        "or_pattern",
        "closed_pattern",
        "literal_pattern",
        "literal_expr",
        "complex_number",
        "signed_number",
        "signed_real_number",
        "real_number",
        "imaginary_number",
        "capture_pattern",
        "pattern_capture_target",
        "wildcard_pattern",
        "value_pattern",
        "attr",
        "name_or_attr",
        "group_pattern",
        "sequence_pattern",
        "open_sequence_pattern",
        "maybe_sequence_pattern",
        "maybe_star_pattern",
        "star_pattern",
        "mapping_pattern",
        "items_pattern",
        "key_value_pattern",
        "double_star_pattern",
        "class_pattern",
        "positional_patterns",
        "keyword_patterns",
        "keyword_pattern",
        "test",
        "test_nocond",
        "lambdef",
        "lambdef_nocond",
        "or_test",
        "and_test",
        "not_test",
        "comparison",
        "comp_op",
        "star_expr",
        "expr",
        "atom_expr",
        "atom",
        "name",
        "testlist_comp",
        "trailer",
        "subscriptlist",
        "subscript_",
        "sliceop",
        "exprlist",
        "testlist",
        "dictorsetmaker",
        "classdef",
        "arglist",
        "argument",
        "comp_iter",
        "comp_for",
        "comp_if",
        "yield_expr",
        "yield_arg",
        "strings",
    ]

    EOF = Token.EOF
    STRING = 1
    NUMBER = 2
    INTEGER = 3
    PYTHON_START = 4
    PYTHON_END = 5
    RULE_NAME = 6
    AND = 7
    AS = 8
    ASSERT = 9
    ASYNC = 10
    AWAIT = 11
    BREAK = 12
    CASE = 13
    CLASS = 14
    CONTINUE = 15
    DEF = 16
    DEL = 17
    ELIF = 18
    ELSE = 19
    EXCEPT = 20
    FALSE = 21
    FINALLY = 22
    FOR = 23
    FROM = 24
    GLOBAL = 25
    IF = 26
    IMPORT = 27
    IN = 28
    IS = 29
    LAMBDA = 30
    MATCH = 31
    NONE = 32
    NONLOCAL = 33
    NOT = 34
    OR = 35
    PASS = 36
    RAISE = 37
    RETURN = 38
    TRUE = 39
    TRY = 40
    UNDERSCORE = 41
    WHILE = 42
    WITH = 43
    YIELD = 44
    FORALL = 45
    EXISTS = 46
    NAME = 47
    STRING_LITERAL = 48
    BYTES_LITERAL = 49
    DECIMAL_INTEGER = 50
    OCT_INTEGER = 51
    HEX_INTEGER = 52
    BIN_INTEGER = 53
    FLOAT_NUMBER = 54
    IMAG_NUMBER = 55
    GRAMMAR_ASSIGN = 56
    QUESTION = 57
    BACKSLASH = 58
    DOT = 59
    ELLIPSIS = 60
    STAR = 61
    OPEN_PAREN = 62
    CLOSE_PAREN = 63
    COMMA = 64
    COLON = 65
    SEMI_COLON = 66
    POWER = 67
    ASSIGN = 68
    OPEN_BRACK = 69
    CLOSE_BRACK = 70
    OR_OP = 71
    XOR = 72
    AND_OP = 73
    LEFT_SHIFT = 74
    RIGHT_SHIFT = 75
    ADD = 76
    MINUS = 77
    DIV = 78
    MOD = 79
    IDIV = 80
    NOT_OP = 81
    OPEN_BRACE = 82
    CLOSE_BRACE = 83
    LESS_THAN = 84
    GREATER_THAN = 85
    EQUALS = 86
    GT_EQ = 87
    LT_EQ = 88
    NOT_EQ_1 = 89
    NOT_EQ_2 = 90
    AT = 91
    ARROW = 92
    ADD_ASSIGN = 93
    SUB_ASSIGN = 94
    MULT_ASSIGN = 95
    AT_ASSIGN = 96
    DIV_ASSIGN = 97
    MOD_ASSIGN = 98
    AND_ASSIGN = 99
    OR_ASSIGN = 100
    XOR_ASSIGN = 101
    LEFT_SHIFT_ASSIGN = 102
    RIGHT_SHIFT_ASSIGN = 103
    POWER_ASSIGN = 104
    IDIV_ASSIGN = 105
    SKIP_ = 106
    NEWLINE = 107

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class FandangoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program(self):
            return self.getTypedRuleContext(FandangoParser.ProgramContext, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fandango

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFandango"):
                listener.enterFandango(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFandango"):
                listener.exitFandango(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFandango"):
                return visitor.visitFandango(self)
            else:
                return visitor.visitChildren(self)

    def fandango(self):
        localctx = FandangoParser.FandangoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fandango)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.program()
            self.state = 281
            self.match(FandangoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StatementContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StatementContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_program

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProgram"):
                listener.enterProgram(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProgram"):
                listener.exitProgram(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProgram"):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)

    def program(self):
        localctx = FandangoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 107:
                self.state = 283
                self.match(FandangoParser.NEWLINE)
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0 and ((1 << _la) & 5764856568862476374) != 0
            ) or ((((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0):
                self.state = 289
                self.statement()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 107:
                    self.state = 290
                    self.match(FandangoParser.NEWLINE)
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def production(self):
            return self.getTypedRuleContext(FandangoParser.ProductionContext, 0)

        def constraint(self):
            return self.getTypedRuleContext(FandangoParser.ConstraintContext, 0)

        def python(self):
            return self.getTypedRuleContext(FandangoParser.PythonContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):
        localctx = FandangoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.production()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 303
                self.python()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProductionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_NAME(self):
            return self.getToken(FandangoParser.RULE_NAME, 0)

        def GRAMMAR_ASSIGN(self):
            return self.getToken(FandangoParser.GRAMMAR_ASSIGN, 0)

        def alternative(self):
            return self.getTypedRuleContext(FandangoParser.AlternativeContext, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_production

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProduction"):
                listener.enterProduction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProduction"):
                listener.exitProduction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProduction"):
                return visitor.visitProduction(self)
            else:
                return visitor.visitChildren(self)

    def production(self):
        localctx = FandangoParser.ProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_production)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(FandangoParser.RULE_NAME)
            self.state = 307
            self.match(FandangoParser.GRAMMAR_ASSIGN)
            self.state = 308
            self.alternative()
            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 65:
                self.state = 309
                self.match(FandangoParser.COLON)
                self.state = 310
                self.match(FandangoParser.NAME)

            self.state = 313
            self.match(FandangoParser.SEMI_COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlternativeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ConcatenationContext, i)

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_alternative

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlternative"):
                listener.enterAlternative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlternative"):
                listener.exitAlternative(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAlternative"):
                return visitor.visitAlternative(self)
            else:
                return visitor.visitChildren(self)

    def alternative(self):
        localctx = FandangoParser.AlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alternative)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.concatenation()
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 71:
                self.state = 316
                self.match(FandangoParser.OR_OP)
                self.state = 317
                self.concatenation()
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.OperatorContext)
            else:
                return self.getTypedRuleContext(FandangoParser.OperatorContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_concatenation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConcatenation"):
                listener.enterConcatenation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConcatenation"):
                listener.exitConcatenation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConcatenation"):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)

    def concatenation(self):
        localctx = FandangoParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_concatenation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.operator()
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la) & ~0x3F) == 0 and ((1 << _la) & 4611686018427387970) != 0)
                or _la == 69
                or _la == 107
            ):
                self.state = 324
                self.operator()
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def kleene(self):
            return self.getTypedRuleContext(FandangoParser.KleeneContext, 0)

        def plus(self):
            return self.getTypedRuleContext(FandangoParser.PlusContext, 0)

        def option(self):
            return self.getTypedRuleContext(FandangoParser.OptionContext, 0)

        def repeat(self):
            return self.getTypedRuleContext(FandangoParser.RepeatContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOperator"):
                listener.enterOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOperator"):
                listener.exitOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOperator"):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)

    def operator(self):
        localctx = FandangoParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_operator)
        try:
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.kleene()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.plus()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 334
                self.repeat()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KleeneContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kleene

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKleene"):
                listener.enterKleene(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKleene"):
                listener.exitKleene(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKleene"):
                return visitor.visitKleene(self)
            else:
                return visitor.visitChildren(self)

    def kleene(self):
        localctx = FandangoParser.KleeneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_kleene)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.symbol()
            self.state = 338
            self.match(FandangoParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_plus

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPlus"):
                listener.enterPlus(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPlus"):
                listener.exitPlus(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPlus"):
                return visitor.visitPlus(self)
            else:
                return visitor.visitChildren(self)

    def plus(self):
        localctx = FandangoParser.PlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_plus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.symbol()
            self.state = 341
            self.match(FandangoParser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def QUESTION(self):
            return self.getToken(FandangoParser.QUESTION, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_option

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOption"):
                listener.enterOption(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOption"):
                listener.exitOption(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOption"):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)

    def option(self):
        localctx = FandangoParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.symbol()
            self.state = 344
            self.match(FandangoParser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RepeatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def NUMBER(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NUMBER)
            else:
                return self.getToken(FandangoParser.NUMBER, i)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_repeat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRepeat"):
                listener.enterRepeat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRepeat"):
                listener.exitRepeat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRepeat"):
                return visitor.visitRepeat(self)
            else:
                return visitor.visitChildren(self)

    def repeat(self):
        localctx = FandangoParser.RepeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_repeat)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.symbol()
            self.state = 347
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 348
            self.match(FandangoParser.NUMBER)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 349
                self.match(FandangoParser.COMMA)
                self.state = 350
                self.match(FandangoParser.NUMBER)

            self.state = 353
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_NAME(self):
            return self.getToken(FandangoParser.RULE_NAME, 0)

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def alternative(self):
            return self.getTypedRuleContext(FandangoParser.AlternativeContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def char_set(self):
            return self.getTypedRuleContext(FandangoParser.Char_setContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_symbol

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSymbol"):
                listener.enterSymbol(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSymbol"):
                listener.exitSymbol(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSymbol"):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)

    def symbol(self):
        localctx = FandangoParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_symbol)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 107:
                self.state = 355
                self.match(FandangoParser.NEWLINE)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.state = 361
                self.match(FandangoParser.RULE_NAME)
                pass
            elif token in [1]:
                self.state = 362
                self.match(FandangoParser.STRING)
                pass
            elif token in [62]:
                self.state = 363
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 364
                self.alternative()
                self.state = 365
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [69]:
                self.state = 367
                self.char_set()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 373
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 370
                    self.match(FandangoParser.NEWLINE)
                self.state = 375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Char_setContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_char_set

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterChar_set"):
                listener.enterChar_set(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitChar_set"):
                listener.exitChar_set(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitChar_set"):
                return visitor.visitChar_set(self)
            else:
                return visitor.visitChildren(self)

    def char_set(self):
        localctx = FandangoParser.Char_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_char_set)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 72:
                self.state = 377
                self.match(FandangoParser.XOR)

            self.state = 380
            self.match(FandangoParser.STRING)
            self.state = 381
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraint"):
                listener.enterConstraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraint"):
                listener.exitConstraint(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraint"):
                return visitor.visitConstraint(self)
            else:
                return visitor.visitChildren(self)

    def constraint(self):
        localctx = FandangoParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.implies()
            self.state = 384
            self.match(FandangoParser.SEMI_COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImpliesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext, 0)

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_implies

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImplies"):
                listener.enterImplies(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImplies"):
                listener.exitImplies(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImplies"):
                return visitor.visitImplies(self)
            else:
                return visitor.visitChildren(self)

    def implies(self):
        localctx = FandangoParser.ImpliesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_implies)
        try:
            self.state = 391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 386
                self.quantifier()
                self.state = 387
                self.match(FandangoParser.ARROW)
                self.state = 388
                self.implies()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self.quantifier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(FandangoParser.FORALL, 0)

        def RULE_NAME(self):
            return self.getToken(FandangoParser.RULE_NAME, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext, 0)

        def EXISTS(self):
            return self.getToken(FandangoParser.EXISTS, 0)

        def disjunction(self):
            return self.getTypedRuleContext(FandangoParser.DisjunctionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_quantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantifier"):
                listener.enterQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantifier"):
                listener.exitQuantifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQuantifier"):
                return visitor.visitQuantifier(self)
            else:
                return visitor.visitChildren(self)

    def quantifier(self):
        localctx = FandangoParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_quantifier)
        try:
            self.state = 408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.match(FandangoParser.FORALL)
                self.state = 394
                self.match(FandangoParser.RULE_NAME)
                self.state = 395
                self.match(FandangoParser.IN)
                self.state = 396
                self.selector(0)
                self.state = 397
                self.match(FandangoParser.COLON)
                self.state = 398
                self.quantifier()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 400
                self.match(FandangoParser.EXISTS)
                self.state = 401
                self.match(FandangoParser.RULE_NAME)
                self.state = 402
                self.match(FandangoParser.IN)
                self.state = 403
                self.selector(0)
                self.state = 404
                self.match(FandangoParser.COLON)
                self.state = 405
                self.quantifier()
                pass
            elif token in [
                1,
                2,
                6,
                11,
                21,
                31,
                32,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.disjunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ConjunctionContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_disjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisjunction"):
                listener.enterDisjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisjunction"):
                listener.exitDisjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDisjunction"):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)

    def disjunction(self):
        localctx = FandangoParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_disjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.conjunction()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 35:
                self.state = 411
                self.match(FandangoParser.OR)
                self.state = 412
                self.conjunction()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_atom(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Formula_atomContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Formula_atomContext, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_conjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConjunction"):
                listener.enterConjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConjunction"):
                listener.exitConjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConjunction"):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)

    def conjunction(self):
        localctx = FandangoParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_conjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.formula_atom()
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 7:
                self.state = 419
                self.match(FandangoParser.AND)
                self.state = 420
                self.formula_atom()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_comparison(self):
            return self.getTypedRuleContext(FandangoParser.Formula_comparisonContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormula_atom"):
                listener.enterFormula_atom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormula_atom"):
                listener.exitFormula_atom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_atom"):
                return visitor.visitFormula_atom(self)
            else:
                return visitor.visitChildren(self)

    def formula_atom(self):
        localctx = FandangoParser.Formula_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_formula_atom)
        try:
            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 426
                self.formula_comparison()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 428
                self.implies()
                self.state = 429
                self.match(FandangoParser.CLOSE_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_comparisonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def LESS_THAN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LESS_THAN)
            else:
                return self.getToken(FandangoParser.LESS_THAN, i)

        def GREATER_THAN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.GREATER_THAN)
            else:
                return self.getToken(FandangoParser.GREATER_THAN, i)

        def EQUALS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.EQUALS)
            else:
                return self.getToken(FandangoParser.EQUALS, i)

        def GT_EQ(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.GT_EQ)
            else:
                return self.getToken(FandangoParser.GT_EQ, i)

        def LT_EQ(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LT_EQ)
            else:
                return self.getToken(FandangoParser.LT_EQ, i)

        def NOT_EQ_1(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_EQ_1)
            else:
                return self.getToken(FandangoParser.NOT_EQ_1, i)

        def NOT_EQ_2(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_EQ_2)
            else:
                return self.getToken(FandangoParser.NOT_EQ_2, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_comparison

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormula_comparison"):
                listener.enterFormula_comparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormula_comparison"):
                listener.exitFormula_comparison(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_comparison"):
                return visitor.visitFormula_comparison(self)
            else:
                return visitor.visitChildren(self)

    def formula_comparison(self):
        localctx = FandangoParser.Formula_comparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_formula_comparison)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.expression()
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 84)) & ~0x3F) == 0 and ((1 << (_la - 84)) & 127) != 0:
                self.state = 434
                _la = self._input.LA(1)
                if not (
                    ((((_la - 84)) & ~0x3F) == 0 and ((1 << (_la - 84)) & 127) != 0)
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 435
                self.expression()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self):
        localctx = FandangoParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_expression)
        try:
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.selector(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.expr(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selection(self):
            return self.getTypedRuleContext(FandangoParser.SelectionContext, 0)

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_selector

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelector"):
                listener.enterSelector(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelector"):
                listener.exitSelector(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelector"):
                return visitor.visitSelector(self)
            else:
                return visitor.visitChildren(self)

    def selector(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.SelectorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_selector, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.selection()
            self._ctx.stop = self._input.LT(-1)
            self.state = 453
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.SelectorContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_selector
                    )
                    self.state = 448
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 1)"
                        )
                    self.state = 449
                    self.match(FandangoParser.DOT)
                    self.state = 450
                    self.selection()
                self.state = 455
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SelectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_NAME(self):
            return self.getToken(FandangoParser.RULE_NAME, 0)

        def OPEN_BRACK(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OPEN_BRACK)
            else:
                return self.getToken(FandangoParser.OPEN_BRACK, i)

        def subscriptlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.SubscriptlistContext)
            else:
                return self.getTypedRuleContext(FandangoParser.SubscriptlistContext, i)

        def CLOSE_BRACK(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLOSE_BRACK)
            else:
                return self.getToken(FandangoParser.CLOSE_BRACK, i)

        def OPEN_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OPEN_BRACE)
            else:
                return self.getToken(FandangoParser.OPEN_BRACE, i)

        def CLOSE_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLOSE_BRACE)
            else:
                return self.getToken(FandangoParser.CLOSE_BRACE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_selection

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelection"):
                listener.enterSelection(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelection"):
                listener.exitSelection(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelection"):
                return visitor.visitSelection(self)
            else:
                return visitor.visitChildren(self)

    def selection(self):
        localctx = FandangoParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(FandangoParser.RULE_NAME)
            self.state = 467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 465
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [69]:
                        self.state = 457
                        self.match(FandangoParser.OPEN_BRACK)
                        self.state = 458
                        self.subscriptlist()
                        self.state = 459
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass
                    elif token in [82]:
                        self.state = 461
                        self.match(FandangoParser.OPEN_BRACE)
                        self.state = 462
                        self.subscriptlist()
                        self.state = 463
                        self.match(FandangoParser.CLOSE_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PythonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTHON_START(self):
            return self.getToken(FandangoParser.PYTHON_START, 0)

        def PYTHON_END(self):
            return self.getToken(FandangoParser.PYTHON_END, 0)

        def python_tag(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Python_tagContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Python_tagContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_python

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPython"):
                listener.enterPython(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPython"):
                listener.exitPython(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython"):
                return visitor.visitPython(self)
            else:
                return visitor.visitChildren(self)

    def python(self):
        localctx = FandangoParser.PythonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_python)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(FandangoParser.PYTHON_START)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0 and ((1 << _la) & 8070626418937290310) != 0
            ) or (
                (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 274882113921) != 0
            ):
                self.state = 473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                if la_ == 1:
                    self.state = 471
                    self.python_tag()
                    pass

                elif la_ == 2:
                    self.state = 472
                    self.match(FandangoParser.NEWLINE)
                    pass

                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.match(FandangoParser.PYTHON_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_tagContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_python_tag

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPython_tag"):
                listener.enterPython_tag(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPython_tag"):
                listener.exitPython_tag(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython_tag"):
                return visitor.visitPython_tag(self)
            else:
                return visitor.visitChildren(self)

    def python_tag(self):
        localctx = FandangoParser.Python_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_python_tag)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 107:
                self.state = 480
                self.match(FandangoParser.NEWLINE)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 26, self._ctx)
            if la_ == 1:
                self.state = 486
                self.simple_stmts()
                pass

            elif la_ == 2:
                self.state = 487
                self.compound_stmt()
                pass

            self.state = 493
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 490
                    self.match(FandangoParser.NEWLINE)
                self.state = 495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FandangoParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FandangoParser.ArglistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_decorator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecorator"):
                listener.enterDecorator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecorator"):
                listener.exitDecorator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorator"):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)

    def decorator(self):
        localctx = FandangoParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_decorator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(FandangoParser.AT)
            self.state = 497
            self.dotted_name()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 62:
                self.state = 498
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 8070594043213514822) != 0
                ) or ((((_la - 67)) & ~0x3F) == 0 and ((1 << (_la - 67)) & 50693) != 0):
                    self.state = 499
                    self.arglist()

                self.state = 502
                self.match(FandangoParser.CLOSE_PAREN)

            self.state = 505
            self.match(FandangoParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FandangoParser.DecoratorContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_decorators

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecorators"):
                listener.enterDecorators(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecorators"):
                listener.exitDecorators(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorators"):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)

    def decorators(self):
        localctx = FandangoParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_decorators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 507
                self.decorator()
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 91):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(FandangoParser.DecoratorsContext, 0)

        def classdef(self):
            return self.getTypedRuleContext(FandangoParser.ClassdefContext, 0)

        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext, 0)

        def async_funcdef(self):
            return self.getTypedRuleContext(FandangoParser.Async_funcdefContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_decorated

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecorated"):
                listener.enterDecorated(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecorated"):
                listener.exitDecorated(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorated"):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)

    def decorated(self):
        localctx = FandangoParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.decorators()
            self.state = 516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 513
                self.classdef()
                pass
            elif token in [16]:
                self.state = 514
                self.funcdef()
                pass
            elif token in [10]:
                self.state = 515
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_funcdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_async_funcdef

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAsync_funcdef"):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAsync_funcdef"):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAsync_funcdef"):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)

    def async_funcdef(self):
        localctx = FandangoParser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(FandangoParser.ASYNC)
            self.state = 519
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FandangoParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def parameters(self):
            return self.getTypedRuleContext(FandangoParser.ParametersContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_funcdef

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFuncdef"):
                listener.enterFuncdef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFuncdef"):
                listener.exitFuncdef(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFuncdef"):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)

    def funcdef(self):
        localctx = FandangoParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_funcdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(FandangoParser.DEF)
            self.state = 522
            self.name()
            self.state = 523
            self.parameters()
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92:
                self.state = 524
                self.match(FandangoParser.ARROW)
                self.state = 525
                self.test()

            self.state = 528
            self.match(FandangoParser.COLON)
            self.state = 529
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FandangoParser.TypedargslistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_parameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameters"):
                listener.enterParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameters"):
                listener.exitParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)

    def parameters(self):
        localctx = FandangoParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_parameters)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 31)) & ~0x3F) == 0 and ((1 << (_la - 31)) & 69793285121) != 0:
                self.state = 532
                self.typedargslist()

            self.state = 535
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TfpdefContext, i)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_typedargslist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypedargslist"):
                listener.enterTypedargslist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypedargslist"):
                listener.exitTypedargslist(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypedargslist"):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)

    def typedargslist(self):
        localctx = FandangoParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typedargslist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31, 41, 47]:
                self.state = 537
                self.tfpdef()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 68:
                    self.state = 538
                    self.match(FandangoParser.ASSIGN)
                    self.state = 539
                    self.test()

                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 542
                        self.match(FandangoParser.COMMA)
                        self.state = 543
                        self.tfpdef()
                        self.state = 546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 68:
                            self.state = 544
                            self.match(FandangoParser.ASSIGN)
                            self.state = 545
                            self.test()

                    self.state = 552
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)

                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 553
                    self.match(FandangoParser.COMMA)
                    self.state = 584
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [61]:
                        self.state = 554
                        self.match(FandangoParser.STAR)
                        self.state = 556
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((_la) & ~0x3F) == 0 and ((1 << _la) & 142938659094528) != 0:
                            self.state = 555
                            self.tfpdef()

                        self.state = 566
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 39, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 558
                                self.match(FandangoParser.COMMA)
                                self.state = 559
                                self.tfpdef()
                                self.state = 562
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == 68:
                                    self.state = 560
                                    self.match(FandangoParser.ASSIGN)
                                    self.state = 561
                                    self.test()

                            self.state = 568
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(
                                self._input, 39, self._ctx
                            )

                        self.state = 577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 64:
                            self.state = 569
                            self.match(FandangoParser.COMMA)
                            self.state = 575
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == 67:
                                self.state = 570
                                self.match(FandangoParser.POWER)
                                self.state = 571
                                self.tfpdef()
                                self.state = 573
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == 64:
                                    self.state = 572
                                    self.match(FandangoParser.COMMA)

                        pass
                    elif token in [67]:
                        self.state = 579
                        self.match(FandangoParser.POWER)
                        self.state = 580
                        self.tfpdef()
                        self.state = 582
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 64:
                            self.state = 581
                            self.match(FandangoParser.COMMA)

                        pass
                    elif token in [63]:
                        pass
                    else:
                        pass

                pass
            elif token in [61]:
                self.state = 588
                self.match(FandangoParser.STAR)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and ((1 << _la) & 142938659094528) != 0:
                    self.state = 589
                    self.tfpdef()

                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 592
                        self.match(FandangoParser.COMMA)
                        self.state = 593
                        self.tfpdef()
                        self.state = 596
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 68:
                            self.state = 594
                            self.match(FandangoParser.ASSIGN)
                            self.state = 595
                            self.test()

                    self.state = 602
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)

                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 603
                    self.match(FandangoParser.COMMA)
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 67:
                        self.state = 604
                        self.match(FandangoParser.POWER)
                        self.state = 605
                        self.tfpdef()
                        self.state = 607
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 64:
                            self.state = 606
                            self.match(FandangoParser.COMMA)

                pass
            elif token in [67]:
                self.state = 613
                self.match(FandangoParser.POWER)
                self.state = 614
                self.tfpdef()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 615
                    self.match(FandangoParser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_tfpdef

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTfpdef"):
                listener.enterTfpdef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTfpdef"):
                listener.exitTfpdef(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTfpdef"):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)

    def tfpdef(self):
        localctx = FandangoParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_tfpdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.name()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 65:
                self.state = 621
                self.match(FandangoParser.COLON)
                self.state = 622
                self.test()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(FandangoParser.VfpdefContext, i)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_varargslist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVarargslist"):
                listener.enterVarargslist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVarargslist"):
                listener.exitVarargslist(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarargslist"):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)

    def varargslist(self):
        localctx = FandangoParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_varargslist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31, 41, 47]:
                self.state = 625
                self.vfpdef()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 68:
                    self.state = 626
                    self.match(FandangoParser.ASSIGN)
                    self.state = 627
                    self.test()

                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 630
                        self.match(FandangoParser.COMMA)
                        self.state = 631
                        self.vfpdef()
                        self.state = 634
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 68:
                            self.state = 632
                            self.match(FandangoParser.ASSIGN)
                            self.state = 633
                            self.test()

                    self.state = 640
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)

                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 641
                    self.match(FandangoParser.COMMA)
                    self.state = 672
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [61]:
                        self.state = 642
                        self.match(FandangoParser.STAR)
                        self.state = 644
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((_la) & ~0x3F) == 0 and ((1 << _la) & 142938659094528) != 0:
                            self.state = 643
                            self.vfpdef()

                        self.state = 654
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 646
                                self.match(FandangoParser.COMMA)
                                self.state = 647
                                self.vfpdef()
                                self.state = 650
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == 68:
                                    self.state = 648
                                    self.match(FandangoParser.ASSIGN)
                                    self.state = 649
                                    self.test()

                            self.state = 656
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(
                                self._input, 60, self._ctx
                            )

                        self.state = 665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 64:
                            self.state = 657
                            self.match(FandangoParser.COMMA)
                            self.state = 663
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == 67:
                                self.state = 658
                                self.match(FandangoParser.POWER)
                                self.state = 659
                                self.vfpdef()
                                self.state = 661
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == 64:
                                    self.state = 660
                                    self.match(FandangoParser.COMMA)

                        pass
                    elif token in [67]:
                        self.state = 667
                        self.match(FandangoParser.POWER)
                        self.state = 668
                        self.vfpdef()
                        self.state = 670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 64:
                            self.state = 669
                            self.match(FandangoParser.COMMA)

                        pass
                    elif token in [65]:
                        pass
                    else:
                        pass

                pass
            elif token in [61]:
                self.state = 676
                self.match(FandangoParser.STAR)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and ((1 << _la) & 142938659094528) != 0:
                    self.state = 677
                    self.vfpdef()

                self.state = 688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 680
                        self.match(FandangoParser.COMMA)
                        self.state = 681
                        self.vfpdef()
                        self.state = 684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 68:
                            self.state = 682
                            self.match(FandangoParser.ASSIGN)
                            self.state = 683
                            self.test()

                    self.state = 690
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)

                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 691
                    self.match(FandangoParser.COMMA)
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 67:
                        self.state = 692
                        self.match(FandangoParser.POWER)
                        self.state = 693
                        self.vfpdef()
                        self.state = 695
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 64:
                            self.state = 694
                            self.match(FandangoParser.COMMA)

                pass
            elif token in [67]:
                self.state = 701
                self.match(FandangoParser.POWER)
                self.state = 702
                self.vfpdef()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 703
                    self.match(FandangoParser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_vfpdef

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVfpdef"):
                listener.enterVfpdef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVfpdef"):
                listener.exitVfpdef(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVfpdef"):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)

    def vfpdef(self):
        localctx = FandangoParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStmt"):
                listener.enterStmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStmt"):
                listener.exitStmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStmt"):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)

    def stmt(self):
        localctx = FandangoParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_stmt)
        try:
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 710
                self.simple_stmts()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.compound_stmt()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Simple_stmtContext, i)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def SEMI_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.SEMI_COLON)
            else:
                return self.getToken(FandangoParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_stmts"):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_stmts"):
                listener.exitSimple_stmts(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_stmts"):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)

    def simple_stmts(self):
        localctx = FandangoParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_simple_stmts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.simple_stmt()
            self.state = 719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 76, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 715
                    self.match(FandangoParser.SEMI_COLON)
                    self.state = 716
                    self.simple_stmt()
                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 76, self._ctx)

            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 66:
                self.state = 722
                self.match(FandangoParser.SEMI_COLON)

            self.state = 725
            self.match(FandangoParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Expr_stmtContext, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Del_stmtContext, 0)

        def pass_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Pass_stmtContext, 0)

        def flow_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Flow_stmtContext, 0)

        def import_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Import_stmtContext, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Global_stmtContext, 0)

        def nonlocal_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Nonlocal_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Assert_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_stmt"):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_stmt"):
                listener.exitSimple_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_stmt"):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)

    def simple_stmt(self):
        localctx = FandangoParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_simple_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                2,
                6,
                11,
                21,
                30,
                31,
                32,
                34,
                39,
                41,
                47,
                60,
                61,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.state = 727
                self.expr_stmt()
                pass
            elif token in [17]:
                self.state = 728
                self.del_stmt()
                pass
            elif token in [36]:
                self.state = 729
                self.pass_stmt()
                pass
            elif token in [12, 15, 37, 38, 44]:
                self.state = 730
                self.flow_stmt()
                pass
            elif token in [24, 27]:
                self.state = 731
                self.import_stmt()
                pass
            elif token in [25]:
                self.state = 732
                self.global_stmt()
                pass
            elif token in [33]:
                self.state = 733
                self.nonlocal_stmt()
                pass
            elif token in [9]:
                self.state = 734
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Testlist_star_exprContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Testlist_star_exprContext, i
                )

        def annassign(self):
            return self.getTypedRuleContext(FandangoParser.AnnassignContext, 0)

        def augassign(self):
            return self.getTypedRuleContext(FandangoParser.AugassignContext, 0)

        def yield_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Yield_exprContext, i)

        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext, 0)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_expr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_stmt"):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_stmt"):
                listener.exitExpr_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr_stmt"):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)

    def expr_stmt(self):
        localctx = FandangoParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_expr_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.testlist_star_expr()
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.state = 738
                self.annassign()
                pass
            elif token in [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105]:
                self.state = 739
                self.augassign()
                self.state = 742
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 740
                    self.yield_expr()
                    pass
                elif token in [
                    1,
                    2,
                    6,
                    11,
                    21,
                    30,
                    31,
                    32,
                    34,
                    39,
                    41,
                    47,
                    60,
                    62,
                    69,
                    76,
                    77,
                    81,
                    82,
                ]:
                    self.state = 741
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [66, 68, 107]:
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 68:
                    self.state = 744
                    self.match(FandangoParser.ASSIGN)
                    self.state = 747
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [44]:
                        self.state = 745
                        self.yield_expr()
                        pass
                    elif token in [
                        1,
                        2,
                        6,
                        11,
                        21,
                        30,
                        31,
                        32,
                        34,
                        39,
                        41,
                        47,
                        60,
                        61,
                        62,
                        69,
                        76,
                        77,
                        81,
                        82,
                    ]:
                        self.state = 746
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnassignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_annassign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnassign"):
                listener.enterAnnassign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnassign"):
                listener.exitAnnassign(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnassign"):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)

    def annassign(self):
        localctx = FandangoParser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_annassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(FandangoParser.COLON)
            self.state = 757
            self.test()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 68:
                self.state = 758
                self.match(FandangoParser.ASSIGN)
                self.state = 759
                self.test()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_testlist_star_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestlist_star_expr"):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestlist_star_expr"):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist_star_expr"):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)

    def testlist_star_expr(self):
        localctx = FandangoParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_testlist_star_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                2,
                6,
                11,
                21,
                30,
                31,
                32,
                34,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.state = 762
                self.test()
                pass
            elif token in [61]:
                self.state = 763
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 766
                    self.match(FandangoParser.COMMA)
                    self.state = 769
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        1,
                        2,
                        6,
                        11,
                        21,
                        30,
                        31,
                        32,
                        34,
                        39,
                        41,
                        47,
                        60,
                        62,
                        69,
                        76,
                        77,
                        81,
                        82,
                    ]:
                        self.state = 767
                        self.test()
                        pass
                    elif token in [61]:
                        self.state = 768
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 776
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(FandangoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FandangoParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FandangoParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FandangoParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FandangoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FandangoParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FandangoParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FandangoParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FandangoParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FandangoParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FandangoParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_augassign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAugassign"):
                listener.enterAugassign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAugassign"):
                listener.exitAugassign(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):
        localctx = FandangoParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            _la = self._input.LA(1)
            if not (((((_la - 93)) & ~0x3F) == 0 and ((1 << (_la - 93)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(FandangoParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FandangoParser.ExprlistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDel_stmt"):
                listener.enterDel_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDel_stmt"):
                listener.exitDel_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_stmt"):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)

    def del_stmt(self):
        localctx = FandangoParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(FandangoParser.DEL)
            self.state = 782
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(FandangoParser.PASS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pass_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPass_stmt"):
                listener.enterPass_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPass_stmt"):
                listener.exitPass_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPass_stmt"):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)

    def pass_stmt(self):
        localctx = FandangoParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(FandangoParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Break_stmtContext, 0)

        def continue_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Continue_stmtContext, 0)

        def return_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Return_stmtContext, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Raise_stmtContext, 0)

        def yield_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Yield_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_flow_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFlow_stmt"):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFlow_stmt"):
                listener.exitFlow_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFlow_stmt"):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)

    def flow_stmt(self):
        localctx = FandangoParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_flow_stmt)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.break_stmt()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.continue_stmt()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.return_stmt()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 4)
                self.state = 789
                self.raise_stmt()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 5)
                self.state = 790
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(FandangoParser.BREAK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_break_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBreak_stmt"):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBreak_stmt"):
                listener.exitBreak_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreak_stmt"):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)

    def break_stmt(self):
        localctx = FandangoParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(FandangoParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(FandangoParser.CONTINUE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_continue_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterContinue_stmt"):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitContinue_stmt"):
                listener.exitContinue_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContinue_stmt"):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)

    def continue_stmt(self):
        localctx = FandangoParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(FandangoParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(FandangoParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_return_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturn_stmt"):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturn_stmt"):
                listener.exitReturn_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturn_stmt"):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)

    def return_stmt(self):
        localctx = FandangoParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_return_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(FandangoParser.RETURN)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 5764751033999820870) != 0) or (
                (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0
            ):
                self.state = 798
                self.testlist()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_yield_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_stmt"):
                listener.enterYield_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_stmt"):
                listener.exitYield_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_stmt"):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)

    def yield_stmt(self):
        localctx = FandangoParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(FandangoParser.RAISE, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_raise_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRaise_stmt"):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRaise_stmt"):
                listener.exitRaise_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):
        localctx = FandangoParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_raise_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(FandangoParser.RAISE)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 5764751033999820870) != 0) or (
                (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0
            ):
                self.state = 804
                self.test()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 805
                    self.match(FandangoParser.FROM)
                    self.state = 806
                    self.test()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(FandangoParser.Import_nameContext, 0)

        def import_from(self):
            return self.getTypedRuleContext(FandangoParser.Import_fromContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_stmt"):
                listener.enterImport_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_stmt"):
                listener.exitImport_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_stmt"):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)

    def import_stmt(self):
        localctx = FandangoParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_import_stmt)
        try:
            self.state = 813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.import_name()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_as_namesContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_name"):
                listener.enterImport_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_name"):
                listener.exitImport_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_name"):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)

    def import_name(self):
        localctx = FandangoParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(FandangoParser.IMPORT)
            self.state = 816
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(FandangoParser.Import_as_namesContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def ELLIPSIS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ELLIPSIS)
            else:
                return self.getToken(FandangoParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_from"):
                listener.enterImport_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_from"):
                listener.exitImport_from(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from"):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)

    def import_from(self):
        localctx = FandangoParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_import_from)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(FandangoParser.FROM)
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
            if la_ == 1:
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 59 or _la == 60:
                    self.state = 819
                    _la = self._input.LA(1)
                    if not (_la == 59 or _la == 60):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 825
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 826
                    _la = self._input.LA(1)
                    if not (_la == 59 or _la == 60):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 59 or _la == 60):
                        break

                pass

            self.state = 833
            self.match(FandangoParser.IMPORT)
            self.state = 840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.state = 834
                self.match(FandangoParser.STAR)
                pass
            elif token in [62]:
                self.state = 835
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 836
                self.import_as_names()
                self.state = 837
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [31, 41, 47]:
                self.state = 839
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext, i)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_as_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_as_name"):
                listener.enterImport_as_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_as_name"):
                listener.exitImport_as_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_as_name"):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)

    def import_as_name(self):
        localctx = FandangoParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_import_as_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.name()
            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 8:
                self.state = 843
                self.match(FandangoParser.AS)
                self.state = 844
                self.name()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_as_name"):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_as_name"):
                listener.exitDotted_as_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_name"):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_name(self):
        localctx = FandangoParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dotted_as_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.dotted_name()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 8:
                self.state = 848
                self.match(FandangoParser.AS)
                self.state = 849
                self.name()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Import_as_nameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_as_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_as_names"):
                listener.enterImport_as_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_as_names"):
                listener.exitImport_as_names(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_as_names"):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)

    def import_as_names(self):
        localctx = FandangoParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_import_as_names)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.import_as_name()
            self.state = 857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 853
                    self.match(FandangoParser.COMMA)
                    self.state = 854
                    self.import_as_name()
                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)

            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 860
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Dotted_as_nameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_as_names"):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_as_names"):
                listener.exitDotted_as_names(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_names"):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_names(self):
        localctx = FandangoParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dotted_as_names)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.dotted_as_name()
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 64:
                self.state = 864
                self.match(FandangoParser.COMMA)
                self.state = 865
                self.dotted_as_name()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_name"):
                listener.enterDotted_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_name"):
                listener.exitDotted_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_name"):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_name(self):
        localctx = FandangoParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_dotted_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.name()
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 59:
                self.state = 872
                self.match(FandangoParser.DOT)
                self.state = 873
                self.name()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(FandangoParser.GLOBAL, 0)

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_global_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_stmt"):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_stmt"):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGlobal_stmt"):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def global_stmt(self):
        localctx = FandangoParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_global_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(FandangoParser.GLOBAL)
            self.state = 880
            self.name()
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 64:
                self.state = 881
                self.match(FandangoParser.COMMA)
                self.state = 882
                self.name()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(FandangoParser.NONLOCAL, 0)

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_nonlocal_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonlocal_stmt"):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonlocal_stmt"):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonlocal_stmt"):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def nonlocal_stmt(self):
        localctx = FandangoParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_nonlocal_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(FandangoParser.NONLOCAL)
            self.state = 889
            self.name()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 64:
                self.state = 890
                self.match(FandangoParser.COMMA)
                self.state = 891
                self.name()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(FandangoParser.ASSERT, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssert_stmt"):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssert_stmt"):
                listener.exitAssert_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssert_stmt"):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)

    def assert_stmt(self):
        localctx = FandangoParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_assert_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(FandangoParser.ASSERT)
            self.state = 898
            self.test()
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 899
                self.match(FandangoParser.COMMA)
                self.state = 900
                self.test()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(FandangoParser.If_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(FandangoParser.While_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(FandangoParser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Try_stmtContext, 0)

        def with_stmt(self):
            return self.getTypedRuleContext(FandangoParser.With_stmtContext, 0)

        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext, 0)

        def classdef(self):
            return self.getTypedRuleContext(FandangoParser.ClassdefContext, 0)

        def decorated(self):
            return self.getTypedRuleContext(FandangoParser.DecoratedContext, 0)

        def async_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Async_stmtContext, 0)

        def match_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Match_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_compound_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompound_stmt"):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompound_stmt"):
                listener.exitCompound_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompound_stmt"):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)

    def compound_stmt(self):
        localctx = FandangoParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_compound_stmt)
        try:
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 903
                self.if_stmt()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self.while_stmt()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 3)
                self.state = 905
                self.for_stmt()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 4)
                self.state = 906
                self.try_stmt()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 907
                self.with_stmt()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 908
                self.funcdef()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 7)
                self.state = 909
                self.classdef()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 8)
                self.state = 910
                self.decorated()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 9)
                self.state = 911
                self.async_stmt()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 10)
                self.state = 912
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext, 0)

        def with_stmt(self):
            return self.getTypedRuleContext(FandangoParser.With_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(FandangoParser.For_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_async_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAsync_stmt"):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAsync_stmt"):
                listener.exitAsync_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAsync_stmt"):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)

    def async_stmt(self):
        localctx = FandangoParser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(FandangoParser.ASYNC)
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.state = 916
                self.funcdef()
                pass
            elif token in [43]:
                self.state = 917
                self.with_stmt()
                pass
            elif token in [23]:
                self.state = 918
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext, i)

        def ELIF(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ELIF)
            else:
                return self.getToken(FandangoParser.ELIF, i)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_if_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_stmt"):
                listener.enterIf_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_stmt"):
                listener.exitIf_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):
        localctx = FandangoParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(FandangoParser.IF)
            self.state = 922
            self.test()
            self.state = 923
            self.match(FandangoParser.COLON)
            self.state = 924
            self.block()
            self.state = 932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 925
                    self.match(FandangoParser.ELIF)
                    self.state = 926
                    self.test()
                    self.state = 927
                    self.match(FandangoParser.COLON)
                    self.state = 928
                    self.block()
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)

            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
            if la_ == 1:
                self.state = 935
                self.match(FandangoParser.ELSE)
                self.state = 936
                self.match(FandangoParser.COLON)
                self.state = 937
                self.block()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(FandangoParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext, i)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_while_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_stmt"):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_stmt"):
                listener.exitWhile_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):
        localctx = FandangoParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(FandangoParser.WHILE)
            self.state = 941
            self.test()
            self.state = 942
            self.match(FandangoParser.COLON)
            self.state = 943
            self.block()
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
            if la_ == 1:
                self.state = 944
                self.match(FandangoParser.ELSE)
                self.state = 945
                self.match(FandangoParser.COLON)
                self.state = 946
                self.block()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FandangoParser.ExprlistContext, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext, i)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_stmt"):
                listener.enterFor_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_stmt"):
                listener.exitFor_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):
        localctx = FandangoParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_for_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(FandangoParser.FOR)
            self.state = 950
            self.exprlist()
            self.state = 951
            self.match(FandangoParser.IN)
            self.state = 952
            self.testlist()
            self.state = 953
            self.match(FandangoParser.COLON)
            self.state = 954
            self.block()
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
            if la_ == 1:
                self.state = 955
                self.match(FandangoParser.ELSE)
                self.state = 956
                self.match(FandangoParser.COLON)
                self.state = 957
                self.block()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(FandangoParser.TRY, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext, i)

        def FINALLY(self):
            return self.getToken(FandangoParser.FINALLY, 0)

        def except_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Except_clauseContext, i)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_try_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTry_stmt"):
                listener.enterTry_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTry_stmt"):
                listener.exitTry_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):
        localctx = FandangoParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(FandangoParser.TRY)
            self.state = 961
            self.match(FandangoParser.COLON)
            self.state = 962
            self.block()
            self.state = 984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.state = 967
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 963
                        self.except_clause()
                        self.state = 964
                        self.match(FandangoParser.COLON)
                        self.state = 965
                        self.block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 969
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 112, self._ctx)

                self.state = 974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
                if la_ == 1:
                    self.state = 971
                    self.match(FandangoParser.ELSE)
                    self.state = 972
                    self.match(FandangoParser.COLON)
                    self.state = 973
                    self.block()

                self.state = 979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
                if la_ == 1:
                    self.state = 976
                    self.match(FandangoParser.FINALLY)
                    self.state = 977
                    self.match(FandangoParser.COLON)
                    self.state = 978
                    self.block()

                pass
            elif token in [22]:
                self.state = 981
                self.match(FandangoParser.FINALLY)
                self.state = 982
                self.match(FandangoParser.COLON)
                self.state = 983
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FandangoParser.WITH, 0)

        def with_item(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FandangoParser.With_itemContext, i)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_with_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWith_stmt"):
                listener.enterWith_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWith_stmt"):
                listener.exitWith_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_stmt"):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)

    def with_stmt(self):
        localctx = FandangoParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_with_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(FandangoParser.WITH)
            self.state = 987
            self.with_item()
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 64:
                self.state = 988
                self.match(FandangoParser.COMMA)
                self.state = 989
                self.with_item()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 995
            self.match(FandangoParser.COLON)
            self.state = 996
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_with_item

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWith_item"):
                listener.enterWith_item(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWith_item"):
                listener.exitWith_item(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_item"):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)

    def with_item(self):
        localctx = FandangoParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_with_item)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.test()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 8:
                self.state = 999
                self.match(FandangoParser.AS)
                self.state = 1000
                self.expr(0)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FandangoParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_except_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExcept_clause"):
                listener.enterExcept_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExcept_clause"):
                listener.exitExcept_clause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_clause"):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)

    def except_clause(self):
        localctx = FandangoParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_except_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(FandangoParser.EXCEPT)
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 5764751033999820870) != 0) or (
                (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0
            ):
                self.state = 1004
                self.test()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 8:
                    self.state = 1005
                    self.match(FandangoParser.AS)
                    self.state = 1006
                    self.name()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StmtContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlock"):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)

    def block(self):
        localctx = FandangoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_block)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                2,
                6,
                9,
                11,
                12,
                15,
                17,
                21,
                24,
                25,
                27,
                30,
                31,
                32,
                33,
                34,
                36,
                37,
                38,
                39,
                41,
                44,
                47,
                60,
                61,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.simple_stmts()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1012
                self.match(FandangoParser.NEWLINE)
                self.state = 1014
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1013
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1016
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(FandangoParser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(FandangoParser.Subject_exprContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def case_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Case_blockContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_match_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMatch_stmt"):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMatch_stmt"):
                listener.exitMatch_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMatch_stmt"):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)

    def match_stmt(self):
        localctx = FandangoParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_match_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(FandangoParser.MATCH)
            self.state = 1021
            self.subject_expr()
            self.state = 1022
            self.match(FandangoParser.COLON)
            self.state = 1023
            self.match(FandangoParser.NEWLINE)
            self.state = 1025
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1024
                    self.case_block()

                else:
                    raise NoViableAltException(self)
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 122, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subject_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_subject_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubject_expr"):
                listener.enterSubject_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubject_expr"):
                listener.exitSubject_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubject_expr"):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)

    def subject_expr(self):
        localctx = FandangoParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_subject_expr)
        self._la = 0  # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 124, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1029
                self.star_named_expression()
                self.state = 1030
                self.match(FandangoParser.COMMA)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1031
                    self.star_named_expressions()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.test()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def star_named_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Star_named_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Star_named_expressionContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expressions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_named_expressions"):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_named_expressions"):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_named_expressions"):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)

    def star_named_expressions(self):
        localctx = FandangoParser.Star_named_expressionsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 146, self.RULE_star_named_expressions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(FandangoParser.COMMA)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1038
                self.star_named_expression()
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 8070594043213514822) != 0)
                    or (
                        (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0
                    )
                ):
                    break

            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 1043
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_named_expression"):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_named_expression"):
                listener.exitStar_named_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_named_expression"):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)

    def star_named_expression(self):
        localctx = FandangoParser.Star_named_expressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 148, self.RULE_star_named_expression)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1046
                self.match(FandangoParser.STAR)
                self.state = 1047
                self.expr(0)
                pass
            elif token in [
                1,
                2,
                6,
                11,
                21,
                30,
                31,
                32,
                34,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1048
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(FandangoParser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(FandangoParser.PatternsContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def guard(self):
            return self.getTypedRuleContext(FandangoParser.GuardContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_case_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCase_block"):
                listener.enterCase_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCase_block"):
                listener.exitCase_block(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCase_block"):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)

    def case_block(self):
        localctx = FandangoParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_case_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(FandangoParser.CASE)
            self.state = 1052
            self.patterns()
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 26:
                self.state = 1053
                self.guard()

            self.state = 1056
            self.match(FandangoParser.COLON)
            self.state = 1057
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_guard

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGuard"):
                listener.enterGuard(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGuard"):
                listener.exitGuard(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGuard"):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)

    def guard(self):
        localctx = FandangoParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(FandangoParser.IF)
            self.state = 1060
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Open_sequence_patternContext, 0
            )

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_patterns

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPatterns"):
                listener.enterPatterns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPatterns"):
                listener.exitPatterns(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPatterns"):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)

    def patterns(self):
        localctx = FandangoParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_patterns)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(FandangoParser.As_patternContext, 0)

        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPattern"):
                listener.enterPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPattern"):
                listener.exitPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPattern"):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)

    def pattern(self):
        localctx = FandangoParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pattern)
        try:
            self.state = 1068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.or_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_as_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAs_pattern"):
                listener.enterAs_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAs_pattern"):
                listener.exitAs_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAs_pattern"):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)

    def as_pattern(self):
        localctx = FandangoParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.or_pattern()
            self.state = 1071
            self.match(FandangoParser.AS)
            self.state = 1072
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Closed_patternContext, i)

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_or_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOr_pattern"):
                listener.enterOr_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOr_pattern"):
                listener.exitOr_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_pattern"):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)

    def or_pattern(self):
        localctx = FandangoParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_or_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.closed_pattern()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 71:
                self.state = 1075
                self.match(FandangoParser.OR_OP)
                self.state = 1076
                self.closed_pattern()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closed_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Literal_patternContext, 0)

        def capture_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Capture_patternContext, 0)

        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext, 0)

        def value_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Value_patternContext, 0)

        def group_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Group_patternContext, 0)

        def sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Sequence_patternContext, 0)

        def mapping_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Mapping_patternContext, 0)

        def class_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Class_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_closed_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClosed_pattern"):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClosed_pattern"):
                listener.exitClosed_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosed_pattern"):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)

    def closed_pattern(self):
        localctx = FandangoParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_closed_pattern)
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1084
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1085
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1086
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1087
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1088
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1089
                self.class_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext, 0)

        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral_pattern"):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral_pattern"):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral_pattern"):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)

    def literal_pattern(self):
        localctx = FandangoParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_literal_pattern)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1095
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1096
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1097
                self.match(FandangoParser.FALSE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext, 0)

        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral_expr"):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral_expr"):
                listener.exitLiteral_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral_expr"):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)

    def literal_expr(self):
        localctx = FandangoParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_literal_expr)
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1102
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1103
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1104
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1105
                self.match(FandangoParser.FALSE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Complex_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_real_numberContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(FandangoParser.Imaginary_numberContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_complex_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComplex_number"):
                listener.enterComplex_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComplex_number"):
                listener.exitComplex_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComplex_number"):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)

    def complex_number(self):
        localctx = FandangoParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_complex_number)
        try:
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 135, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.signed_real_number()
                self.state = 1109
                self.match(FandangoParser.ADD)
                self.state = 1110
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.signed_real_number()
                self.state = 1113
                self.match(FandangoParser.MINUS)
                self.state = 1114
                self.imaginary_number()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_number"):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)

    def signed_number(self):
        localctx = FandangoParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_signed_number)
        try:
            self.state = 1121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.match(FandangoParser.MINUS)
                self.state = 1120
                self.match(FandangoParser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(FandangoParser.Real_numberContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_real_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSigned_real_number"):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSigned_real_number"):
                listener.exitSigned_real_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_real_number"):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)

    def signed_real_number(self):
        localctx = FandangoParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_signed_real_number)
        try:
            self.state = 1126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                self.real_number()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.match(FandangoParser.MINUS)
                self.state = 1125
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Real_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_real_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReal_number"):
                listener.enterReal_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReal_number"):
                listener.exitReal_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReal_number"):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)

    def real_number(self):
        localctx = FandangoParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_imaginary_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImaginary_number"):
                listener.enterImaginary_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImaginary_number"):
                listener.exitImaginary_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImaginary_number"):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)

    def imaginary_number(self):
        localctx = FandangoParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Capture_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_capture_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapture_pattern"):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapture_pattern"):
                listener.exitCapture_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCapture_pattern"):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)

    def capture_pattern(self):
        localctx = FandangoParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pattern_capture_target

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPattern_capture_target"):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPattern_capture_target"):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPattern_capture_target"):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)

    def pattern_capture_target(self):
        localctx = FandangoParser.Pattern_capture_targetContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 180, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(FandangoParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_wildcard_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWildcard_pattern"):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWildcard_pattern"):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWildcard_pattern"):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)

    def wildcard_pattern(self):
        localctx = FandangoParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(FandangoParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_value_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValue_pattern"):
                listener.enterValue_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValue_pattern"):
                listener.exitValue_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValue_pattern"):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)

    def value_pattern(self):
        localctx = FandangoParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_attr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr"):
                listener.enterAttr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr"):
                listener.exitAttr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAttr"):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)

    def attr(self):
        localctx = FandangoParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_attr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.name()
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1141
                self.match(FandangoParser.DOT)
                self.state = 1142
                self.name()
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 59):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_or_attrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_name_or_attr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName_or_attr"):
                listener.enterName_or_attr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName_or_attr"):
                listener.exitName_or_attr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitName_or_attr"):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)

    def name_or_attr(self):
        localctx = FandangoParser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_name_or_attr)
        try:
            self.state = 1149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1148
                self.name()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_group_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroup_pattern"):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroup_pattern"):
                listener.exitGroup_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroup_pattern"):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)

    def group_pattern(self):
        localctx = FandangoParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 1152
            self.pattern()
            self.state = 1153
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Maybe_sequence_patternContext, 0
            )

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Open_sequence_patternContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_sequence_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSequence_pattern"):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSequence_pattern"):
                listener.exitSequence_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSequence_pattern"):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def sequence_pattern(self):
        localctx = FandangoParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.state = 1165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 6917672520353054726) != 0
                ) or ((((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 8449) != 0):
                    self.state = 1156
                    self.maybe_sequence_pattern()

                self.state = 1159
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 6917672520353054726) != 0
                ) or ((((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 8449) != 0):
                    self.state = 1161
                    self.open_sequence_pattern()

                self.state = 1164
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Maybe_star_patternContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Maybe_sequence_patternContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_open_sequence_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOpen_sequence_pattern"):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOpen_sequence_pattern"):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpen_sequence_pattern"):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def open_sequence_pattern(self):
        localctx = FandangoParser.Open_sequence_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 194, self.RULE_open_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.maybe_star_pattern()
            self.state = 1168
            self.match(FandangoParser.COMMA)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 6917672520353054726) != 0) or (
                (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 8449) != 0
            ):
                self.state = 1169
                self.maybe_sequence_pattern()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Maybe_star_patternContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Maybe_star_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_sequence_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMaybe_sequence_pattern"):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMaybe_sequence_pattern"):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaybe_sequence_pattern"):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def maybe_sequence_pattern(self):
        localctx = FandangoParser.Maybe_sequence_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 196, self.RULE_maybe_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.maybe_star_pattern()
            self.state = 1177
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1173
                    self.match(FandangoParser.COMMA)
                    self.state = 1174
                    self.maybe_star_pattern()
                self.state = 1179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)

            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 1180
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Star_patternContext, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_star_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMaybe_star_pattern"):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMaybe_star_pattern"):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaybe_star_pattern"):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)

    def maybe_star_pattern(self):
        localctx = FandangoParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_maybe_star_pattern)
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.star_pattern()
                pass
            elif token in [1, 2, 21, 31, 32, 39, 41, 47, 62, 69, 77, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_pattern"):
                listener.enterStar_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_pattern"):
                listener.exitStar_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_pattern"):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)

    def star_pattern(self):
        localctx = FandangoParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_star_pattern)
        try:
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.match(FandangoParser.STAR)
                self.state = 1188
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.match(FandangoParser.STAR)
                self.state = 1190
                self.wildcard_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mapping_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Double_star_patternContext, 0
            )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Items_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_mapping_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMapping_pattern"):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMapping_pattern"):
                listener.exitMapping_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMapping_pattern"):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)

    def mapping_pattern(self):
        localctx = FandangoParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_mapping_pattern)
        self._la = 0  # Token type
        try:
            self.state = 1218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1194
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1195
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1196
                self.double_star_pattern()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1197
                    self.match(FandangoParser.COMMA)

                self.state = 1200
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1202
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1203
                self.items_pattern()
                self.state = 1204
                self.match(FandangoParser.COMMA)
                self.state = 1205
                self.double_star_pattern()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1206
                    self.match(FandangoParser.COMMA)

                self.state = 1209
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1211
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1212
                self.items_pattern()
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1213
                    self.match(FandangoParser.COMMA)

                self.state = 1216
                self.match(FandangoParser.CLOSE_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Items_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Key_value_patternContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Key_value_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_items_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterItems_pattern"):
                listener.enterItems_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitItems_pattern"):
                listener.exitItems_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitItems_pattern"):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)

    def items_pattern(self):
        localctx = FandangoParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.key_value_pattern()
            self.state = 1225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 152, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1221
                    self.match(FandangoParser.COMMA)
                    self.state = 1222
                    self.key_value_pattern()
                self.state = 1227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 152, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_value_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def literal_expr(self):
            return self.getTypedRuleContext(FandangoParser.Literal_exprContext, 0)

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_key_value_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKey_value_pattern"):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKey_value_pattern"):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKey_value_pattern"):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)

    def key_value_pattern(self):
        localctx = FandangoParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 21, 32, 39, 77]:
                self.state = 1228
                self.literal_expr()
                pass
            elif token in [31, 41, 47]:
                self.state = 1229
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1232
            self.match(FandangoParser.COLON)
            self.state = 1233
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_double_star_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDouble_star_pattern"):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDouble_star_pattern"):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDouble_star_pattern"):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)

    def double_star_pattern(self):
        localctx = FandangoParser.Double_star_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 208, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(FandangoParser.POWER)
            self.state = 1236
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(
                FandangoParser.Positional_patternsContext, 0
            )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(FandangoParser.Keyword_patternsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_class_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_pattern"):
                listener.enterClass_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_pattern"):
                listener.exitClass_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClass_pattern"):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)

    def class_pattern(self):
        localctx = FandangoParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_class_pattern)
        self._la = 0  # Token type
        try:
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 157, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.name_or_attr()
                self.state = 1239
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1240
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1242
                self.name_or_attr()
                self.state = 1243
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1244
                self.positional_patterns()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1245
                    self.match(FandangoParser.COMMA)

                self.state = 1248
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1250
                self.name_or_attr()
                self.state = 1251
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1252
                self.keyword_patterns()
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1253
                    self.match(FandangoParser.COMMA)

                self.state = 1256
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1258
                self.name_or_attr()
                self.state = 1259
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1260
                self.positional_patterns()
                self.state = 1261
                self.match(FandangoParser.COMMA)
                self.state = 1262
                self.keyword_patterns()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1263
                    self.match(FandangoParser.COMMA)

                self.state = 1266
                self.match(FandangoParser.CLOSE_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_patternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.PatternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.PatternContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_positional_patterns

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPositional_patterns"):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPositional_patterns"):
                listener.exitPositional_patterns(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPositional_patterns"):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)

    def positional_patterns(self):
        localctx = FandangoParser.Positional_patternsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 212, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.pattern()
            self.state = 1275
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1271
                    self.match(FandangoParser.COMMA)
                    self.state = 1272
                    self.pattern()
                self.state = 1277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Keyword_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_patterns

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword_patterns"):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword_patterns"):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword_patterns"):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)

    def keyword_patterns(self):
        localctx = FandangoParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.keyword_pattern()
            self.state = 1283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 159, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1279
                    self.match(FandangoParser.COMMA)
                    self.state = 1280
                    self.keyword_pattern()
                self.state = 1285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 159, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword_pattern"):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword_pattern"):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword_pattern"):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)

    def keyword_pattern(self):
        localctx = FandangoParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.name()
            self.state = 1287
            self.match(FandangoParser.ASSIGN)
            self.state = 1288
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Or_testContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Or_testContext, i)

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def lambdef(self):
            return self.getTypedRuleContext(FandangoParser.LambdefContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTest"):
                listener.enterTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTest"):
                listener.exitTest(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest"):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)

    def test(self):
        localctx = FandangoParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.state = 1299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                2,
                6,
                11,
                21,
                31,
                32,
                34,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1290
                self.or_test()
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 26:
                    self.state = 1291
                    self.match(FandangoParser.IF)
                    self.state = 1292
                    self.or_test()
                    self.state = 1293
                    self.match(FandangoParser.ELSE)
                    self.state = 1294
                    self.test()

                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1298
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(FandangoParser.Or_testContext, 0)

        def lambdef_nocond(self):
            return self.getTypedRuleContext(FandangoParser.Lambdef_nocondContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_test_nocond

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTest_nocond"):
                listener.enterTest_nocond(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTest_nocond"):
                listener.exitTest_nocond(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest_nocond"):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)

    def test_nocond(self):
        localctx = FandangoParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_test_nocond)
        try:
            self.state = 1303
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                2,
                6,
                11,
                21,
                31,
                32,
                34,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.or_test()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(FandangoParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FandangoParser.VarargslistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambdef

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdef"):
                listener.enterLambdef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdef"):
                listener.exitLambdef(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdef"):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)

    def lambdef(self):
        localctx = FandangoParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_lambdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(FandangoParser.LAMBDA)
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 31)) & ~0x3F) == 0 and ((1 << (_la - 31)) & 69793285121) != 0:
                self.state = 1306
                self.varargslist()

            self.state = 1309
            self.match(FandangoParser.COLON)
            self.state = 1310
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(FandangoParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(FandangoParser.Test_nocondContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FandangoParser.VarargslistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambdef_nocond

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdef_nocond"):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdef_nocond"):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdef_nocond"):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)

    def lambdef_nocond(self):
        localctx = FandangoParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_lambdef_nocond)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(FandangoParser.LAMBDA)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 31)) & ~0x3F) == 0 and ((1 << (_la - 31)) & 69793285121) != 0:
                self.state = 1313
                self.varargslist()

            self.state = 1316
            self.match(FandangoParser.COLON)
            self.state = 1317
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.And_testContext)
            else:
                return self.getTypedRuleContext(FandangoParser.And_testContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_or_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOr_test"):
                listener.enterOr_test(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOr_test"):
                listener.exitOr_test(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_test"):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)

    def or_test(self):
        localctx = FandangoParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_or_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.and_test()
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 35:
                self.state = 1320
                self.match(FandangoParser.OR)
                self.state = 1321
                self.and_test()
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Not_testContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Not_testContext, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_and_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnd_test"):
                listener.enterAnd_test(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnd_test"):
                listener.exitAnd_test(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnd_test"):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)

    def and_test(self):
        localctx = FandangoParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_and_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.not_test()
            self.state = 1332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 7:
                self.state = 1328
                self.match(FandangoParser.AND)
                self.state = 1329
                self.not_test()
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(FandangoParser.Not_testContext, 0)

        def comparison(self):
            return self.getTypedRuleContext(FandangoParser.ComparisonContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_not_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNot_test"):
                listener.enterNot_test(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNot_test"):
                listener.exitNot_test(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNot_test"):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)

    def not_test(self):
        localctx = FandangoParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_not_test)
        try:
            self.state = 1338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self.match(FandangoParser.NOT)
                self.state = 1336
                self.not_test()
                pass
            elif token in [
                1,
                2,
                6,
                11,
                21,
                31,
                32,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1337
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext, i)

        def comp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Comp_opContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_comparison

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparison"):
                listener.enterComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparison"):
                listener.exitComparison(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)

    def comparison(self):
        localctx = FandangoParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self.expr(0)
            self.state = 1346
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 168, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1341
                    self.comp_op()
                    self.state = 1342
                    self.expr(0)
                self.state = 1348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 168, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FandangoParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FandangoParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FandangoParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FandangoParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FandangoParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def IS(self):
            return self.getToken(FandangoParser.IS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_comp_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComp_op"):
                listener.enterComp_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComp_op"):
                listener.exitComp_op(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_op"):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)

    def comp_op(self):
        localctx = FandangoParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_comp_op)
        try:
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 169, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                self.match(FandangoParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1350
                self.match(FandangoParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1351
                self.match(FandangoParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1352
                self.match(FandangoParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1353
                self.match(FandangoParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1354
                self.match(FandangoParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1355
                self.match(FandangoParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1356
                self.match(FandangoParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1357
                self.match(FandangoParser.NOT)
                self.state = 1358
                self.match(FandangoParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1359
                self.match(FandangoParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1360
                self.match(FandangoParser.IS)
                self.state = 1361
                self.match(FandangoParser.NOT)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar_expr"):
                listener.enterStar_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar_expr"):
                listener.exitStar_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_expr"):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)

    def star_expr(self):
        localctx = FandangoParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(FandangoParser.STAR)
            self.state = 1365
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext, 0)

        def atom_expr(self):
            return self.getTypedRuleContext(FandangoParser.Atom_exprContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext, i)

        def ADD(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ADD)
            else:
                return self.getToken(FandangoParser.ADD, i)

        def MINUS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MINUS)
            else:
                return self.getToken(FandangoParser.MINUS, i)

        def NOT_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_OP)
            else:
                return self.getToken(FandangoParser.NOT_OP, i)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def AT(self):
            return self.getToken(FandangoParser.AT, 0)

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def MOD(self):
            return self.getToken(FandangoParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FandangoParser.IDIV, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FandangoParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FandangoParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FandangoParser.OR_OP, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr"):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)

    def expr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 238
        self.enterRecursionRule(localctx, 238, self.RULE_expr, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.state = 1368
                self.selector(0)
                pass
            elif token in [1, 2, 11, 21, 31, 32, 39, 41, 47, 60, 62, 69, 82]:
                self.state = 1369
                self.atom_expr()
                pass
            elif token in [76, 77, 81]:
                self.state = 1371
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1370
                        _la = self._input.LA(1)
                        if not (
                            (
                                (((_la - 76)) & ~0x3F) == 0
                                and ((1 << (_la - 76)) & 35) != 0
                            )
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1373
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 170, self._ctx)

                self.state = 1375
                self.expr(7)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1401
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1399
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 172, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1378
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 8)"
                            )
                        self.state = 1379
                        self.match(FandangoParser.POWER)
                        self.state = 1380
                        self.expr(9)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1381
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 1382
                        _la = self._input.LA(1)
                        if not (
                            (
                                (((_la - 61)) & ~0x3F) == 0
                                and ((1 << (_la - 61)) & 1074659329) != 0
                            )
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1383
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1384
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 1385
                        _la = self._input.LA(1)
                        if not (_la == 76 or _la == 77):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1386
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1387
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 1388
                        _la = self._input.LA(1)
                        if not (_la == 74 or _la == 75):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1389
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FandangoParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1390
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 1391
                        self.match(FandangoParser.AND_OP)
                        self.state = 1392
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FandangoParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1393
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1394
                        self.match(FandangoParser.XOR)
                        self.state = 1395
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FandangoParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1396
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 1397
                        self.match(FandangoParser.OR_OP)
                        self.state = 1398
                        self.expr(2)
                        pass

                self.state = 1403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(FandangoParser.AtomContext, 0)

        def AWAIT(self):
            return self.getToken(FandangoParser.AWAIT, 0)

        def trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TrailerContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_atom_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom_expr"):
                listener.enterAtom_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom_expr"):
                listener.exitAtom_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtom_expr"):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)

    def atom_expr(self):
        localctx = FandangoParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_atom_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 11:
                self.state = 1404
                self.match(FandangoParser.AWAIT)

            self.state = 1407
            self.atom()
            self.state = 1411
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1408
                    self.trailer()
                self.state = 1413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def testlist_comp(self):
            return self.getTypedRuleContext(FandangoParser.Testlist_compContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FandangoParser.DictorsetmakerContext, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.STRING)
            else:
                return self.getToken(FandangoParser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(FandangoParser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)

    def atom(self):
        localctx = FandangoParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 1441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1417
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 1415
                    self.yield_expr()
                    pass
                elif token in [
                    1,
                    2,
                    6,
                    11,
                    21,
                    30,
                    31,
                    32,
                    34,
                    39,
                    41,
                    47,
                    60,
                    61,
                    62,
                    69,
                    76,
                    77,
                    81,
                    82,
                ]:
                    self.state = 1416
                    self.testlist_comp()
                    pass
                elif token in [63]:
                    pass
                else:
                    pass
                self.state = 1419
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1420
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 8070594043213514822) != 0
                ) or ((((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0):
                    self.state = 1421
                    self.testlist_comp()

                self.state = 1424
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1425
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 8070594043213514822) != 0
                ) or ((((_la - 67)) & ~0x3F) == 0 and ((1 << (_la - 67)) & 50693) != 0):
                    self.state = 1426
                    self.dictorsetmaker()

                self.state = 1429
                self.match(FandangoParser.CLOSE_BRACE)
                pass
            elif token in [31, 41, 47]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1430
                self.name()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1431
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1433
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1432
                        self.match(FandangoParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1435
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 179, self._ctx)

                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1437
                self.match(FandangoParser.ELLIPSIS)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1438
                self.match(FandangoParser.NONE)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1439
                self.match(FandangoParser.TRUE)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1440
                self.match(FandangoParser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(FandangoParser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(FandangoParser.MATCH, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitName"):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)

    def name(self):
        localctx = FandangoParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 142938659094528) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_testlist_comp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestlist_comp"):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestlist_comp"):
                listener.exitTestlist_comp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist_comp"):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)

    def testlist_comp(self):
        localctx = FandangoParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_testlist_comp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                2,
                6,
                11,
                21,
                30,
                31,
                32,
                34,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.state = 1445
                self.test()
                pass
            elif token in [61]:
                self.state = 1446
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 23]:
                self.state = 1449
                self.comp_for()
                pass
            elif token in [63, 64, 70]:
                self.state = 1457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1450
                        self.match(FandangoParser.COMMA)
                        self.state = 1453
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [
                            1,
                            2,
                            6,
                            11,
                            21,
                            30,
                            31,
                            32,
                            34,
                            39,
                            41,
                            47,
                            60,
                            62,
                            69,
                            76,
                            77,
                            81,
                            82,
                        ]:
                            self.state = 1451
                            self.test()
                            pass
                        elif token in [61]:
                            self.state = 1452
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 1459
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)

                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 1460
                    self.match(FandangoParser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FandangoParser.ArglistContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FandangoParser.SubscriptlistContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_trailer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailer"):
                listener.enterTrailer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailer"):
                listener.exitTrailer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrailer"):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)

    def trailer(self):
        localctx = FandangoParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_trailer)
        self._la = 0  # Token type
        try:
            self.state = 1476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 8070594043213514822) != 0
                ) or ((((_la - 67)) & ~0x3F) == 0 and ((1 << (_la - 67)) & 50693) != 0):
                    self.state = 1466
                    self.arglist()

                self.state = 1469
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1471
                self.subscriptlist()
                self.state = 1472
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1474
                self.match(FandangoParser.DOT)
                self.state = 1475
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Subscript_Context)
            else:
                return self.getTypedRuleContext(FandangoParser.Subscript_Context, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_subscriptlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubscriptlist"):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubscriptlist"):
                listener.exitSubscriptlist(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubscriptlist"):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)

    def subscriptlist(self):
        localctx = FandangoParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_subscriptlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.subscript_()
            self.state = 1483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 188, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1479
                    self.match(FandangoParser.COMMA)
                    self.state = 1480
                    self.subscript_()
                self.state = 1485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 188, self._ctx)

            self.state = 1487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 1486
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subscript_Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FandangoParser.SliceopContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_subscript_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubscript_"):
                listener.enterSubscript_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubscript_"):
                listener.exitSubscript_(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubscript_"):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)

    def subscript_(self):
        localctx = FandangoParser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_subscript_)
        self._la = 0  # Token type
        try:
            self.state = 1500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 5764751033999820870) != 0
                ) or ((((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0):
                    self.state = 1490
                    self.test()

                self.state = 1493
                self.match(FandangoParser.COLON)
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 5764751033999820870) != 0
                ) or ((((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0):
                    self.state = 1494
                    self.test()

                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 65:
                    self.state = 1497
                    self.sliceop()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_sliceop

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSliceop"):
                listener.enterSliceop(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSliceop"):
                listener.exitSliceop(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSliceop"):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)

    def sliceop(self):
        localctx = FandangoParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_sliceop)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(FandangoParser.COLON)
            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 5764751033999820870) != 0) or (
                (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0
            ):
                self.state = 1503
                self.test()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext, i)

        def star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_exprlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExprlist"):
                listener.enterExprlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExprlist"):
                listener.exitExprlist(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExprlist"):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)

    def exprlist(self):
        localctx = FandangoParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_exprlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                2,
                6,
                11,
                21,
                31,
                32,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.state = 1506
                self.expr(0)
                pass
            elif token in [61]:
                self.state = 1507
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 197, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1510
                    self.match(FandangoParser.COMMA)
                    self.state = 1513
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        1,
                        2,
                        6,
                        11,
                        21,
                        31,
                        32,
                        39,
                        41,
                        47,
                        60,
                        62,
                        69,
                        76,
                        77,
                        81,
                        82,
                    ]:
                        self.state = 1511
                        self.expr(0)
                        pass
                    elif token in [61]:
                        self.state = 1512
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 1519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 197, self._ctx)

            self.state = 1521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 1520
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_testlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestlist"):
                listener.enterTestlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestlist"):
                listener.exitTestlist(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist"):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)

    def testlist(self):
        localctx = FandangoParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_testlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.test()
            self.state = 1528
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 199, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1524
                    self.match(FandangoParser.COMMA)
                    self.state = 1525
                    self.test()
                self.state = 1530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 199, self._ctx)

            self.state = 1532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 1531
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def POWER(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.POWER)
            else:
                return self.getToken(FandangoParser.POWER, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext, 0)

        def star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dictorsetmaker

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDictorsetmaker"):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDictorsetmaker"):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDictorsetmaker"):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)

    def dictorsetmaker(self):
        localctx = FandangoParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_dictorsetmaker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
            if la_ == 1:
                self.state = 1540
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    1,
                    2,
                    6,
                    11,
                    21,
                    30,
                    31,
                    32,
                    34,
                    39,
                    41,
                    47,
                    60,
                    62,
                    69,
                    76,
                    77,
                    81,
                    82,
                ]:
                    self.state = 1534
                    self.test()
                    self.state = 1535
                    self.match(FandangoParser.COLON)
                    self.state = 1536
                    self.test()
                    pass
                elif token in [67]:
                    self.state = 1538
                    self.match(FandangoParser.POWER)
                    self.state = 1539
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1560
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 23]:
                    self.state = 1542
                    self.comp_for()
                    pass
                elif token in [64, 83]:
                    self.state = 1554
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1543
                            self.match(FandangoParser.COMMA)
                            self.state = 1550
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [
                                1,
                                2,
                                6,
                                11,
                                21,
                                30,
                                31,
                                32,
                                34,
                                39,
                                41,
                                47,
                                60,
                                62,
                                69,
                                76,
                                77,
                                81,
                                82,
                            ]:
                                self.state = 1544
                                self.test()
                                self.state = 1545
                                self.match(FandangoParser.COLON)
                                self.state = 1546
                                self.test()
                                pass
                            elif token in [67]:
                                self.state = 1548
                                self.match(FandangoParser.POWER)
                                self.state = 1549
                                self.expr(0)
                                pass
                            else:
                                raise NoViableAltException(self)

                        self.state = 1556
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)

                    self.state = 1558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 64:
                        self.state = 1557
                        self.match(FandangoParser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    1,
                    2,
                    6,
                    11,
                    21,
                    30,
                    31,
                    32,
                    34,
                    39,
                    41,
                    47,
                    60,
                    62,
                    69,
                    76,
                    77,
                    81,
                    82,
                ]:
                    self.state = 1562
                    self.test()
                    pass
                elif token in [61]:
                    self.state = 1563
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1580
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 23]:
                    self.state = 1566
                    self.comp_for()
                    pass
                elif token in [64, 83]:
                    self.state = 1574
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1567
                            self.match(FandangoParser.COMMA)
                            self.state = 1570
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [
                                1,
                                2,
                                6,
                                11,
                                21,
                                30,
                                31,
                                32,
                                34,
                                39,
                                41,
                                47,
                                60,
                                62,
                                69,
                                76,
                                77,
                                81,
                                82,
                            ]:
                                self.state = 1568
                                self.test()
                                pass
                            elif token in [61]:
                                self.state = 1569
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)

                        self.state = 1576
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)

                    self.state = 1578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 64:
                        self.state = 1577
                        self.match(FandangoParser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FandangoParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FandangoParser.ArglistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_classdef

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassdef"):
                listener.enterClassdef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassdef"):
                listener.exitClassdef(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassdef"):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)

    def classdef(self):
        localctx = FandangoParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_classdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.match(FandangoParser.CLASS)
            self.state = 1585
            self.name()
            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 62:
                self.state = 1586
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 8070594043213514822) != 0
                ) or ((((_la - 67)) & ~0x3F) == 0 and ((1 << (_la - 67)) & 50693) != 0):
                    self.state = 1587
                    self.arglist()

                self.state = 1590
                self.match(FandangoParser.CLOSE_PAREN)

            self.state = 1593
            self.match(FandangoParser.COLON)
            self.state = 1594
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ArgumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_arglist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArglist"):
                listener.enterArglist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArglist"):
                listener.exitArglist(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArglist"):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)

    def arglist(self):
        localctx = FandangoParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_arglist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self.argument()
            self.state = 1601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 214, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1597
                    self.match(FandangoParser.COMMA)
                    self.state = 1598
                    self.argument()
                self.state = 1603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 214, self._ctx)

            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 64:
                self.state = 1604
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext, i)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgument"):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)

    def argument(self):
        localctx = FandangoParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_argument)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                self.state = 1607
                self.test()
                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 10 or _la == 23:
                    self.state = 1608
                    self.comp_for()

                pass

            elif la_ == 2:
                self.state = 1611
                self.test()
                self.state = 1612
                self.match(FandangoParser.ASSIGN)
                self.state = 1613
                self.test()
                pass

            elif la_ == 3:
                self.state = 1615
                self.match(FandangoParser.POWER)
                self.state = 1616
                self.test()
                pass

            elif la_ == 4:
                self.state = 1617
                self.match(FandangoParser.STAR)
                self.state = 1618
                self.test()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext, 0)

        def comp_if(self):
            return self.getTypedRuleContext(FandangoParser.Comp_ifContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_comp_iter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComp_iter"):
                listener.enterComp_iter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComp_iter"):
                listener.exitComp_iter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_iter"):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)

    def comp_iter(self):
        localctx = FandangoParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_comp_iter)
        try:
            self.state = 1623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1621
                self.comp_for()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1622
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FandangoParser.ExprlistContext, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(FandangoParser.Or_testContext, 0)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(FandangoParser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_comp_for

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComp_for"):
                listener.enterComp_for(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComp_for"):
                listener.exitComp_for(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_for"):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)

    def comp_for(self):
        localctx = FandangoParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_comp_for)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 10:
                self.state = 1625
                self.match(FandangoParser.ASYNC)

            self.state = 1628
            self.match(FandangoParser.FOR)
            self.state = 1629
            self.exprlist()
            self.state = 1630
            self.match(FandangoParser.IN)
            self.state = 1631
            self.or_test()
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 75498496) != 0:
                self.state = 1632
                self.comp_iter()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(FandangoParser.Test_nocondContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(FandangoParser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_comp_if

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComp_if"):
                listener.enterComp_if(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComp_if"):
                listener.exitComp_if(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_if"):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)

    def comp_if(self):
        localctx = FandangoParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_comp_if)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(FandangoParser.IF)
            self.state = 1636
            self.test_nocond()
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 75498496) != 0:
                self.state = 1637
                self.comp_iter()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FandangoParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FandangoParser.Yield_argContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_yield_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_expr"):
                listener.enterYield_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_expr"):
                listener.exitYield_expr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_expr"):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)

    def yield_expr(self):
        localctx = FandangoParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_yield_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(FandangoParser.YIELD)
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 5764751034016598086) != 0) or (
                (((_la - 69)) & ~0x3F) == 0 and ((1 << (_la - 69)) & 12673) != 0
            ):
                self.state = 1641
                self.yield_arg()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext, 0)

        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_yield_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_arg"):
                listener.enterYield_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_arg"):
                listener.exitYield_arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_arg"):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)

    def yield_arg(self):
        localctx = FandangoParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_yield_arg)
        try:
            self.state = 1647
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1644
                self.match(FandangoParser.FROM)
                self.state = 1645
                self.test()
                pass
            elif token in [
                1,
                2,
                6,
                11,
                21,
                30,
                31,
                32,
                34,
                39,
                41,
                47,
                60,
                62,
                69,
                76,
                77,
                81,
                82,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1646
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.STRING)
            else:
                return self.getToken(FandangoParser.STRING, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_strings

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStrings"):
                listener.enterStrings(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStrings"):
                listener.exitStrings(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStrings"):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)

    def strings(self):
        localctx = FandangoParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_strings)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1649
                self.match(FandangoParser.STRING)
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 1):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[21] = self.selector_sempred
        self._predicates[119] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def selector_sempred(self, localctx: SelectorContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def expr_sempred(self, localctx: ExprContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 8)

        if predIndex == 2:
            return self.precpred(self._ctx, 6)

        if predIndex == 3:
            return self.precpred(self._ctx, 5)

        if predIndex == 4:
            return self.precpred(self._ctx, 4)

        if predIndex == 5:
            return self.precpred(self._ctx, 3)

        if predIndex == 6:
            return self.precpred(self._ctx, 2)

        if predIndex == 7:
            return self.precpred(self._ctx, 1)
