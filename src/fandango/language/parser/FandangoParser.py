# Generated from FandangoParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3k")
        buf.write("\u0682\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\3\2\3\2\5\2\u011f\n\2\3\3\7\3\u0122\n\3\f\3\16\3\u0125")
        buf.write("\13\3\3\3\3\3\7\3\u0129\n\3\f\3\16\3\u012c\13\3\7\3\u012e")
        buf.write("\n\3\f\3\16\3\u0131\13\3\3\4\3\4\3\4\5\4\u0136\n\4\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u013d\n\5\3\5\3\5\3\6\3\6\3\6\7\6")
        buf.write("\u0144\n\6\f\6\16\6\u0147\13\6\3\7\3\7\7\7\u014b\n\7\f")
        buf.write("\7\16\7\u014e\13\7\3\b\3\b\3\b\3\b\3\b\5\b\u0155\n\b\3")
        buf.write("\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f")
        buf.write("\3\f\5\f\u0165\n\f\3\f\3\f\3\r\7\r\u016a\n\r\f\r\16\r")
        buf.write("\u016d\13\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0176\n\r")
        buf.write("\3\r\7\r\u0179\n\r\f\r\16\r\u017c\13\r\3\16\3\16\5\16")
        buf.write("\u0180\n\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\21\3\21\3\21\3\21\3\21\5\21\u018f\n\21\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u01a0\n\22\3\23\3\23\3\23\7\23\u01a5\n\23\f")
        buf.write("\23\16\23\u01a8\13\23\3\24\3\24\3\24\7\24\u01ad\n\24\f")
        buf.write("\24\16\24\u01b0\13\24\3\25\3\25\3\25\3\25\3\25\5\25\u01b7")
        buf.write("\n\25\3\26\3\26\3\26\7\26\u01bc\n\26\f\26\16\26\u01bf")
        buf.write("\13\26\3\27\3\27\5\27\u01c3\n\27\3\30\3\30\3\30\7\30\u01c8")
        buf.write("\n\30\f\30\16\30\u01cb\13\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u01d6\n\31\3\32\3\32\3\32\3")
        buf.write("\32\5\32\u01dc\n\32\3\33\3\33\7\33\u01e0\n\33\f\33\16")
        buf.write("\33\u01e3\13\33\3\33\3\33\5\33\u01e7\n\33\3\33\7\33\u01ea")
        buf.write("\n\33\f\33\16\33\u01ed\13\33\7\33\u01ef\n\33\f\33\16\33")
        buf.write("\u01f2\13\33\3\33\3\33\3\34\3\34\3\34\3\34\5\34\u01fa")
        buf.write("\n\34\3\34\5\34\u01fd\n\34\3\34\3\34\3\35\6\35\u0202\n")
        buf.write("\35\r\35\16\35\u0203\3\36\3\36\3\36\3\36\5\36\u020a\n")
        buf.write("\36\3\37\3\37\3\37\3 \3 \3 \3 \3 \5 \u0214\n \3 \3 \3")
        buf.write(" \3!\3!\5!\u021b\n!\3!\3!\3\"\3\"\3\"\5\"\u0222\n\"\3")
        buf.write("\"\3\"\3\"\3\"\5\"\u0228\n\"\7\"\u022a\n\"\f\"\16\"\u022d")
        buf.write("\13\"\3\"\3\"\3\"\5\"\u0232\n\"\3\"\3\"\3\"\3\"\5\"\u0238")
        buf.write("\n\"\7\"\u023a\n\"\f\"\16\"\u023d\13\"\3\"\3\"\3\"\3\"")
        buf.write("\5\"\u0243\n\"\5\"\u0245\n\"\5\"\u0247\n\"\3\"\3\"\3\"")
        buf.write("\5\"\u024c\n\"\5\"\u024e\n\"\5\"\u0250\n\"\3\"\3\"\5\"")
        buf.write("\u0254\n\"\3\"\3\"\3\"\3\"\5\"\u025a\n\"\7\"\u025c\n\"")
        buf.write("\f\"\16\"\u025f\13\"\3\"\3\"\3\"\3\"\5\"\u0265\n\"\5\"")
        buf.write("\u0267\n\"\5\"\u0269\n\"\3\"\3\"\3\"\5\"\u026e\n\"\5\"")
        buf.write("\u0270\n\"\3#\3#\3#\5#\u0275\n#\3$\3$\3$\5$\u027a\n$\3")
        buf.write("$\3$\3$\3$\5$\u0280\n$\7$\u0282\n$\f$\16$\u0285\13$\3")
        buf.write("$\3$\3$\5$\u028a\n$\3$\3$\3$\3$\5$\u0290\n$\7$\u0292\n")
        buf.write("$\f$\16$\u0295\13$\3$\3$\3$\3$\5$\u029b\n$\5$\u029d\n")
        buf.write("$\5$\u029f\n$\3$\3$\3$\5$\u02a4\n$\5$\u02a6\n$\5$\u02a8")
        buf.write("\n$\3$\3$\5$\u02ac\n$\3$\3$\3$\3$\5$\u02b2\n$\7$\u02b4")
        buf.write("\n$\f$\16$\u02b7\13$\3$\3$\3$\3$\5$\u02bd\n$\5$\u02bf")
        buf.write("\n$\5$\u02c1\n$\3$\3$\3$\5$\u02c6\n$\5$\u02c8\n$\3%\3")
        buf.write("%\3&\3&\5&\u02ce\n&\3\'\3\'\3\'\7\'\u02d3\n\'\f\'\16\'")
        buf.write("\u02d6\13\'\3\'\5\'\u02d9\n\'\3\'\3\'\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\5(\u02e5\n(\3)\3)\3)\3)\3)\5)\u02ec\n)\3)\3)\3")
        buf.write(")\5)\u02f1\n)\7)\u02f3\n)\f)\16)\u02f6\13)\5)\u02f8\n")
        buf.write(")\3*\3*\3*\3*\5*\u02fe\n*\3+\3+\5+\u0302\n+\3+\3+\3+\5")
        buf.write("+\u0307\n+\7+\u0309\n+\f+\16+\u030c\13+\3+\5+\u030f\n")
        buf.write("+\3,\3,\3-\3-\3-\3.\3.\3/\3/\3/\3/\3/\5/\u031d\n/\3\60")
        buf.write("\3\60\3\61\3\61\3\62\3\62\5\62\u0325\n\62\3\63\3\63\3")
        buf.write("\64\3\64\3\64\3\64\5\64\u032d\n\64\5\64\u032f\n\64\3\65")
        buf.write("\3\65\5\65\u0333\n\65\3\66\3\66\3\66\3\67\3\67\7\67\u033a")
        buf.write("\n\67\f\67\16\67\u033d\13\67\3\67\3\67\6\67\u0341\n\67")
        buf.write("\r\67\16\67\u0342\5\67\u0345\n\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u034e\n\67\38\38\38\58\u0353\n8\3")
        buf.write("9\39\39\59\u0358\n9\3:\3:\3:\7:\u035d\n:\f:\16:\u0360")
        buf.write("\13:\3:\5:\u0363\n:\3;\3;\3;\7;\u0368\n;\f;\16;\u036b")
        buf.write("\13;\3<\3<\3<\7<\u0370\n<\f<\16<\u0373\13<\3=\3=\3=\3")
        buf.write("=\7=\u0379\n=\f=\16=\u037c\13=\3>\3>\3>\3>\7>\u0382\n")
        buf.write(">\f>\16>\u0385\13>\3?\3?\3?\3?\5?\u038b\n?\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\5@\u0397\n@\3A\3A\3A\3A\5A\u039d\n")
        buf.write("A\3B\3B\3B\3B\3B\3B\3B\3B\3B\7B\u03a8\nB\fB\16B\u03ab")
        buf.write("\13B\3B\3B\3B\5B\u03b0\nB\3C\3C\3C\3C\3C\3C\3C\5C\u03b9")
        buf.write("\nC\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u03c4\nD\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\6E\u03cd\nE\rE\16E\u03ce\3E\3E\3E\5E\u03d4")
        buf.write("\nE\3E\3E\3E\5E\u03d9\nE\3E\3E\3E\5E\u03de\nE\3F\3F\3")
        buf.write("F\3F\7F\u03e4\nF\fF\16F\u03e7\13F\3F\3F\3F\3G\3G\3G\5")
        buf.write("G\u03ef\nG\3H\3H\3H\3H\5H\u03f5\nH\5H\u03f7\nH\3I\3I\3")
        buf.write("I\6I\u03fc\nI\rI\16I\u03fd\5I\u0400\nI\3J\3J\3J\3J\3J")
        buf.write("\6J\u0407\nJ\rJ\16J\u0408\3K\3K\3K\5K\u040e\nK\3K\5K\u0411")
        buf.write("\nK\3L\3L\6L\u0415\nL\rL\16L\u0416\3L\5L\u041a\nL\3M\3")
        buf.write("M\3M\5M\u041f\nM\3N\3N\3N\5N\u0424\nN\3N\3N\3N\3O\3O\3")
        buf.write("O\3P\3P\5P\u042e\nP\3Q\3Q\5Q\u0432\nQ\3R\3R\3R\3R\3S\3")
        buf.write("S\3S\7S\u043b\nS\fS\16S\u043e\13S\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\5T\u0448\nT\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0452\nU\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\5V\u045c\nV\3W\3W\3W\3W\3W\3W\3")
        buf.write("W\3W\5W\u0466\nW\3X\3X\3X\5X\u046b\nX\3Y\3Y\3Y\5Y\u0470")
        buf.write("\nY\3Z\3Z\3[\3[\3\\\3\\\3]\3]\3]\3^\3^\3_\3_\3_\3`\3`")
        buf.write("\3`\6`\u0483\n`\r`\16`\u0484\3a\3a\5a\u0489\na\3b\3b\3")
        buf.write("b\3b\3c\3c\5c\u0491\nc\3c\3c\3c\5c\u0496\nc\3c\5c\u0499")
        buf.write("\nc\3d\3d\3d\5d\u049e\nd\3e\3e\3e\7e\u04a3\ne\fe\16e\u04a6")
        buf.write("\13e\3e\5e\u04a9\ne\3f\3f\5f\u04ad\nf\3g\3g\3g\3g\5g\u04b3")
        buf.write("\ng\3h\3h\3h\3h\3h\5h\u04ba\nh\3h\3h\3h\3h\3h\3h\3h\5")
        buf.write("h\u04c3\nh\3h\3h\3h\3h\3h\5h\u04ca\nh\3h\3h\5h\u04ce\n")
        buf.write("h\3i\3i\3i\7i\u04d3\ni\fi\16i\u04d6\13i\3j\3j\5j\u04da")
        buf.write("\nj\3j\3j\3j\3k\3k\3k\3l\3l\3l\3l\3l\3l\3l\3l\5l\u04ea")
        buf.write("\nl\3l\3l\3l\3l\3l\3l\5l\u04f2\nl\3l\3l\3l\3l\3l\3l\3")
        buf.write("l\3l\5l\u04fc\nl\3l\3l\5l\u0500\nl\3m\3m\3m\7m\u0505\n")
        buf.write("m\fm\16m\u0508\13m\3n\3n\3n\7n\u050d\nn\fn\16n\u0510\13")
        buf.write("n\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\5p\u051c\np\3p\5p\u051f")
        buf.write("\np\3q\3q\5q\u0523\nq\3r\3r\5r\u0527\nr\3r\3r\3r\3s\3")
        buf.write("s\5s\u052e\ns\3s\3s\3s\3t\3t\3t\7t\u0536\nt\ft\16t\u0539")
        buf.write("\13t\3u\3u\3u\7u\u053e\nu\fu\16u\u0541\13u\3v\3v\3v\5")
        buf.write("v\u0546\nv\3w\3w\3w\3w\7w\u054c\nw\fw\16w\u054f\13w\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u055e\nx\3y\3")
        buf.write("y\3y\3z\3z\3z\3z\6z\u0567\nz\rz\16z\u0568\3z\5z\u056c")
        buf.write("\nz\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\7z\u0583\nz\fz\16z\u0586\13z\3{\5{\u0589")
        buf.write("\n{\3{\3{\7{\u058d\n{\f{\16{\u0590\13{\3|\3|\3|\5|\u0595")
        buf.write("\n|\3|\3|\3|\5|\u059a\n|\3|\3|\3|\5|\u059f\n|\3|\3|\3")
        buf.write("|\3|\6|\u05a5\n|\r|\16|\u05a6\3|\3|\3|\3|\5|\u05ad\n|")
        buf.write("\3}\3}\3~\3~\5~\u05b3\n~\3~\3~\3~\3~\5~\u05b9\n~\7~\u05bb")
        buf.write("\n~\f~\16~\u05be\13~\3~\5~\u05c1\n~\5~\u05c3\n~\3\177")
        buf.write("\3\177\5\177\u05c7\n\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\5\177\u05d0\n\177\3\u0080\3\u0080\3\u0080")
        buf.write("\7\u0080\u05d5\n\u0080\f\u0080\16\u0080\u05d8\13\u0080")
        buf.write("\3\u0080\5\u0080\u05db\n\u0080\3\u0081\3\u0081\5\u0081")
        buf.write("\u05df\n\u0081\3\u0081\3\u0081\5\u0081\u05e3\n\u0081\3")
        buf.write("\u0081\5\u0081\u05e6\n\u0081\5\u0081\u05e8\n\u0081\3\u0082")
        buf.write("\3\u0082\5\u0082\u05ec\n\u0082\3\u0083\3\u0083\5\u0083")
        buf.write("\u05f0\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u05f5\n")
        buf.write("\u0083\7\u0083\u05f7\n\u0083\f\u0083\16\u0083\u05fa\13")
        buf.write("\u0083\3\u0083\5\u0083\u05fd\n\u0083\3\u0084\3\u0084\3")
        buf.write("\u0084\7\u0084\u0602\n\u0084\f\u0084\16\u0084\u0605\13")
        buf.write("\u0084\3\u0084\5\u0084\u0608\n\u0084\3\u0085\3\u0085\3")
        buf.write("\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0610\n\u0085\3")
        buf.write("\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\5\u0085\u061a\n\u0085\7\u0085\u061c\n\u0085\f")
        buf.write("\u0085\16\u0085\u061f\13\u0085\3\u0085\5\u0085\u0622\n")
        buf.write("\u0085\5\u0085\u0624\n\u0085\3\u0085\3\u0085\5\u0085\u0628")
        buf.write("\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u062e")
        buf.write("\n\u0085\7\u0085\u0630\n\u0085\f\u0085\16\u0085\u0633")
        buf.write("\13\u0085\3\u0085\5\u0085\u0636\n\u0085\5\u0085\u0638")
        buf.write("\n\u0085\5\u0085\u063a\n\u0085\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u0640\n\u0086\3\u0086\5\u0086\u0643\n")
        buf.write("\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087")
        buf.write("\7\u0087\u064b\n\u0087\f\u0087\16\u0087\u064e\13\u0087")
        buf.write("\3\u0087\5\u0087\u0651\n\u0087\3\u0088\3\u0088\5\u0088")
        buf.write("\u0655\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\5\u0088\u065f\n\u0088\3\u0089")
        buf.write("\3\u0089\5\u0089\u0663\n\u0089\3\u008a\5\u008a\u0666\n")
        buf.write("\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a")
        buf.write("\u066d\n\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u0672\n")
        buf.write("\u008b\3\u008c\3\u008c\5\u008c\u0676\n\u008c\3\u008d\3")
        buf.write("\u008d\3\u008d\5\u008d\u067b\n\u008d\3\u008e\6\u008e\u067e")
        buf.write("\n\u008e\r\u008e\16\u008e\u067f\3\u008e\2\3\u00f2\u008f")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\2\f\4\2\6\').\3\3kk\3\2RX\3\2")
        buf.write("[g\3\29:\4\2JKOO\5\2;;LNYY\3\2JK\3\2HI\5\2\36\36((..\2")
        buf.write("\u0723\2\u011c\3\2\2\2\4\u0123\3\2\2\2\6\u0135\3\2\2\2")
        buf.write("\b\u0137\3\2\2\2\n\u0140\3\2\2\2\f\u0148\3\2\2\2\16\u0154")
        buf.write("\3\2\2\2\20\u0156\3\2\2\2\22\u0159\3\2\2\2\24\u015c\3")
        buf.write("\2\2\2\26\u015f\3\2\2\2\30\u016b\3\2\2\2\32\u017d\3\2")
        buf.write("\2\2\34\u0184\3\2\2\2\36\u0186\3\2\2\2 \u018e\3\2\2\2")
        buf.write("\"\u019f\3\2\2\2$\u01a1\3\2\2\2&\u01a9\3\2\2\2(\u01b6")
        buf.write("\3\2\2\2*\u01b8\3\2\2\2,\u01c2\3\2\2\2.\u01c4\3\2\2\2")
        buf.write("\60\u01cc\3\2\2\2\62\u01db\3\2\2\2\64\u01dd\3\2\2\2\66")
        buf.write("\u01f5\3\2\2\28\u0201\3\2\2\2:\u0205\3\2\2\2<\u020b\3")
        buf.write("\2\2\2>\u020e\3\2\2\2@\u0218\3\2\2\2B\u026f\3\2\2\2D\u0271")
        buf.write("\3\2\2\2F\u02c7\3\2\2\2H\u02c9\3\2\2\2J\u02cd\3\2\2\2")
        buf.write("L\u02cf\3\2\2\2N\u02e4\3\2\2\2P\u02e6\3\2\2\2R\u02f9\3")
        buf.write("\2\2\2T\u0301\3\2\2\2V\u0310\3\2\2\2X\u0312\3\2\2\2Z\u0315")
        buf.write("\3\2\2\2\\\u031c\3\2\2\2^\u031e\3\2\2\2`\u0320\3\2\2\2")
        buf.write("b\u0322\3\2\2\2d\u0326\3\2\2\2f\u0328\3\2\2\2h\u0332\3")
        buf.write("\2\2\2j\u0334\3\2\2\2l\u0337\3\2\2\2n\u034f\3\2\2\2p\u0354")
        buf.write("\3\2\2\2r\u0359\3\2\2\2t\u0364\3\2\2\2v\u036c\3\2\2\2")
        buf.write("x\u0374\3\2\2\2z\u037d\3\2\2\2|\u0386\3\2\2\2~\u0396\3")
        buf.write("\2\2\2\u0080\u0398\3\2\2\2\u0082\u039e\3\2\2\2\u0084\u03b1")
        buf.write("\3\2\2\2\u0086\u03ba\3\2\2\2\u0088\u03c5\3\2\2\2\u008a")
        buf.write("\u03df\3\2\2\2\u008c\u03eb\3\2\2\2\u008e\u03f0\3\2\2\2")
        buf.write("\u0090\u03ff\3\2\2\2\u0092\u0401\3\2\2\2\u0094\u0410\3")
        buf.write("\2\2\2\u0096\u0412\3\2\2\2\u0098\u041e\3\2\2\2\u009a\u0420")
        buf.write("\3\2\2\2\u009c\u0428\3\2\2\2\u009e\u042d\3\2\2\2\u00a0")
        buf.write("\u0431\3\2\2\2\u00a2\u0433\3\2\2\2\u00a4\u0437\3\2\2\2")
        buf.write("\u00a6\u0447\3\2\2\2\u00a8\u0451\3\2\2\2\u00aa\u045b\3")
        buf.write("\2\2\2\u00ac\u0465\3\2\2\2\u00ae\u046a\3\2\2\2\u00b0\u046f")
        buf.write("\3\2\2\2\u00b2\u0471\3\2\2\2\u00b4\u0473\3\2\2\2\u00b6")
        buf.write("\u0475\3\2\2\2\u00b8\u0477\3\2\2\2\u00ba\u047a\3\2\2\2")
        buf.write("\u00bc\u047c\3\2\2\2\u00be\u047f\3\2\2\2\u00c0\u0488\3")
        buf.write("\2\2\2\u00c2\u048a\3\2\2\2\u00c4\u0498\3\2\2\2\u00c6\u049a")
        buf.write("\3\2\2\2\u00c8\u049f\3\2\2\2\u00ca\u04ac\3\2\2\2\u00cc")
        buf.write("\u04b2\3\2\2\2\u00ce\u04cd\3\2\2\2\u00d0\u04cf\3\2\2\2")
        buf.write("\u00d2\u04d9\3\2\2\2\u00d4\u04de\3\2\2\2\u00d6\u04ff\3")
        buf.write("\2\2\2\u00d8\u0501\3\2\2\2\u00da\u0509\3\2\2\2\u00dc\u0511")
        buf.write("\3\2\2\2\u00de\u051e\3\2\2\2\u00e0\u0522\3\2\2\2\u00e2")
        buf.write("\u0524\3\2\2\2\u00e4\u052b\3\2\2\2\u00e6\u0532\3\2\2\2")
        buf.write("\u00e8\u053a\3\2\2\2\u00ea\u0545\3\2\2\2\u00ec\u0547\3")
        buf.write("\2\2\2\u00ee\u055d\3\2\2\2\u00f0\u055f\3\2\2\2\u00f2\u056b")
        buf.write("\3\2\2\2\u00f4\u0588\3\2\2\2\u00f6\u05ac\3\2\2\2\u00f8")
        buf.write("\u05ae\3\2\2\2\u00fa\u05b2\3\2\2\2\u00fc\u05cf\3\2\2\2")
        buf.write("\u00fe\u05d1\3\2\2\2\u0100\u05e7\3\2\2\2\u0102\u05e9\3")
        buf.write("\2\2\2\u0104\u05ef\3\2\2\2\u0106\u05fe\3\2\2\2\u0108\u0639")
        buf.write("\3\2\2\2\u010a\u063b\3\2\2\2\u010c\u0647\3\2\2\2\u010e")
        buf.write("\u065e\3\2\2\2\u0110\u0662\3\2\2\2\u0112\u0665\3\2\2\2")
        buf.write("\u0114\u066e\3\2\2\2\u0116\u0673\3\2\2\2\u0118\u067a\3")
        buf.write("\2\2\2\u011a\u067d\3\2\2\2\u011c\u011e\5\4\3\2\u011d\u011f")
        buf.write("\7\2\2\3\u011e\u011d\3\2\2\2\u011e\u011f\3\2\2\2\u011f")
        buf.write("\3\3\2\2\2\u0120\u0122\7k\2\2\u0121\u0120\3\2\2\2\u0122")
        buf.write("\u0125\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2")
        buf.write("\u0124\u012f\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u012a\5")
        buf.write("\6\4\2\u0127\u0129\7k\2\2\u0128\u0127\3\2\2\2\u0129\u012c")
        buf.write("\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\u012e\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u0126\3\2\2\2")
        buf.write("\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130\3")
        buf.write("\2\2\2\u0130\5\3\2\2\2\u0131\u012f\3\2\2\2\u0132\u0136")
        buf.write("\5\b\5\2\u0133\u0136\5\36\20\2\u0134\u0136\5\62\32\2\u0135")
        buf.write("\u0132\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0134\3\2\2\2")
        buf.write("\u0136\7\3\2\2\2\u0137\u0138\5\34\17\2\u0138\u0139\7?")
        buf.write("\2\2\u0139\u013c\5\n\6\2\u013a\u013b\7?\2\2\u013b\u013d")
        buf.write("\7.\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d")
        buf.write("\u013e\3\2\2\2\u013e\u013f\7@\2\2\u013f\t\3\2\2\2\u0140")
        buf.write("\u0145\5\f\7\2\u0141\u0142\7E\2\2\u0142\u0144\5\f\7\2")
        buf.write("\u0143\u0141\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3")
        buf.write("\2\2\2\u0145\u0146\3\2\2\2\u0146\13\3\2\2\2\u0147\u0145")
        buf.write("\3\2\2\2\u0148\u014c\5\16\b\2\u0149\u014b\5\16\b\2\u014a")
        buf.write("\u0149\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a\3\2\2\2")
        buf.write("\u014c\u014d\3\2\2\2\u014d\r\3\2\2\2\u014e\u014c\3\2\2")
        buf.write("\2\u014f\u0155\5\30\r\2\u0150\u0155\5\20\t\2\u0151\u0155")
        buf.write("\5\22\n\2\u0152\u0155\5\24\13\2\u0153\u0155\5\26\f\2\u0154")
        buf.write("\u014f\3\2\2\2\u0154\u0150\3\2\2\2\u0154\u0151\3\2\2\2")
        buf.write("\u0154\u0152\3\2\2\2\u0154\u0153\3\2\2\2\u0155\17\3\2")
        buf.write("\2\2\u0156\u0157\5\30\r\2\u0157\u0158\7;\2\2\u0158\21")
        buf.write("\3\2\2\2\u0159\u015a\5\30\r\2\u015a\u015b\7J\2\2\u015b")
        buf.write("\23\3\2\2\2\u015c\u015d\5\30\r\2\u015d\u015e\7\67\2\2")
        buf.write("\u015e\25\3\2\2\2\u015f\u0160\5\30\r\2\u0160\u0161\7P")
        buf.write("\2\2\u0161\u0164\7\4\2\2\u0162\u0163\7>\2\2\u0163\u0165")
        buf.write("\7\4\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165")
        buf.write("\u0166\3\2\2\2\u0166\u0167\7Q\2\2\u0167\27\3\2\2\2\u0168")
        buf.write("\u016a\7k\2\2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u0175\3")
        buf.write("\2\2\2\u016d\u016b\3\2\2\2\u016e\u0176\7.\2\2\u016f\u0176")
        buf.write("\7\3\2\2\u0170\u0171\7<\2\2\u0171\u0172\5\n\6\2\u0172")
        buf.write("\u0173\7=\2\2\u0173\u0176\3\2\2\2\u0174\u0176\5\32\16")
        buf.write("\2\u0175\u016e\3\2\2\2\u0175\u016f\3\2\2\2\u0175\u0170")
        buf.write("\3\2\2\2\u0175\u0174\3\2\2\2\u0176\u017a\3\2\2\2\u0177")
        buf.write("\u0179\7k\2\2\u0178\u0177\3\2\2\2\u0179\u017c\3\2\2\2")
        buf.write("\u017a\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\31\3\2")
        buf.write("\2\2\u017c\u017a\3\2\2\2\u017d\u017f\7C\2\2\u017e\u0180")
        buf.write("\7F\2\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180")
        buf.write("\u0181\3\2\2\2\u0181\u0182\7\3\2\2\u0182\u0183\7D\2\2")
        buf.write("\u0183\33\3\2\2\2\u0184\u0185\t\2\2\2\u0185\35\3\2\2\2")
        buf.write("\u0186\u0187\5 \21\2\u0187\u0188\t\3\2\2\u0188\37\3\2")
        buf.write("\2\2\u0189\u018a\5\"\22\2\u018a\u018b\7Z\2\2\u018b\u018c")
        buf.write("\5 \21\2\u018c\u018f\3\2\2\2\u018d\u018f\5\"\22\2\u018e")
        buf.write("\u0189\3\2\2\2\u018e\u018d\3\2\2\2\u018f!\3\2\2\2\u0190")
        buf.write("\u0191\7,\2\2\u0191\u0192\7.\2\2\u0192\u0193\7\33\2\2")
        buf.write("\u0193\u0194\5.\30\2\u0194\u0195\7?\2\2\u0195\u0196\5")
        buf.write("\"\22\2\u0196\u01a0\3\2\2\2\u0197\u0198\7-\2\2\u0198\u0199")
        buf.write("\7.\2\2\u0199\u019a\7\33\2\2\u019a\u019b\5.\30\2\u019b")
        buf.write("\u019c\7?\2\2\u019c\u019d\5\"\22\2\u019d\u01a0\3\2\2\2")
        buf.write("\u019e\u01a0\5$\23\2\u019f\u0190\3\2\2\2\u019f\u0197\3")
        buf.write("\2\2\2\u019f\u019e\3\2\2\2\u01a0#\3\2\2\2\u01a1\u01a6")
        buf.write("\5&\24\2\u01a2\u01a3\7\"\2\2\u01a3\u01a5\5&\24\2\u01a4")
        buf.write("\u01a2\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2")
        buf.write("\u01a6\u01a7\3\2\2\2\u01a7%\3\2\2\2\u01a8\u01a6\3\2\2")
        buf.write("\2\u01a9\u01ae\5(\25\2\u01aa\u01ab\7\6\2\2\u01ab\u01ad")
        buf.write("\5(\25\2\u01ac\u01aa\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae")
        buf.write("\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\'\3\2\2\2\u01b0")
        buf.write("\u01ae\3\2\2\2\u01b1\u01b7\5*\26\2\u01b2\u01b3\7<\2\2")
        buf.write("\u01b3\u01b4\5 \21\2\u01b4\u01b5\7=\2\2\u01b5\u01b7\3")
        buf.write("\2\2\2\u01b6\u01b1\3\2\2\2\u01b6\u01b2\3\2\2\2\u01b7)")
        buf.write("\3\2\2\2\u01b8\u01bd\5,\27\2\u01b9\u01ba\t\4\2\2\u01ba")
        buf.write("\u01bc\5,\27\2\u01bb\u01b9\3\2\2\2\u01bc\u01bf\3\2\2\2")
        buf.write("\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be+\3\2\2")
        buf.write("\2\u01bf\u01bd\3\2\2\2\u01c0\u01c3\5.\30\2\u01c1\u01c3")
        buf.write("\5\u00f2z\2\u01c2\u01c0\3\2\2\2\u01c2\u01c1\3\2\2\2\u01c3")
        buf.write("-\3\2\2\2\u01c4\u01c9\5\60\31\2\u01c5\u01c6\79\2\2\u01c6")
        buf.write("\u01c8\5\60\31\2\u01c7\u01c5\3\2\2\2\u01c8\u01cb\3\2\2")
        buf.write("\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca/\3\2")
        buf.write("\2\2\u01cb\u01c9\3\2\2\2\u01cc\u01d5\5\34\17\2\u01cd\u01ce")
        buf.write("\7C\2\2\u01ce\u01cf\5\u00fe\u0080\2\u01cf\u01d0\7D\2\2")
        buf.write("\u01d0\u01d6\3\2\2\2\u01d1\u01d2\7P\2\2\u01d2\u01d3\5")
        buf.write("\u00fe\u0080\2\u01d3\u01d4\7Q\2\2\u01d4\u01d6\3\2\2\2")
        buf.write("\u01d5\u01cd\3\2\2\2\u01d5\u01d1\3\2\2\2\u01d5\u01d6\3")
        buf.write("\2\2\2\u01d6\61\3\2\2\2\u01d7\u01dc\5\64\33\2\u01d8\u01d9")
        buf.write("\5~@\2\u01d9\u01da\t\3\2\2\u01da\u01dc\3\2\2\2\u01db\u01d7")
        buf.write("\3\2\2\2\u01db\u01d8\3\2\2\2\u01dc\63\3\2\2\2\u01dd\u01f0")
        buf.write("\7h\2\2\u01de\u01e0\7k\2\2\u01df\u01de\3\2\2\2\u01e0\u01e3")
        buf.write("\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2")
        buf.write("\u01e6\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e7\5L\'\2")
        buf.write("\u01e5\u01e7\5~@\2\u01e6\u01e4\3\2\2\2\u01e6\u01e5\3\2")
        buf.write("\2\2\u01e7\u01eb\3\2\2\2\u01e8\u01ea\7k\2\2\u01e9\u01e8")
        buf.write("\3\2\2\2\u01ea\u01ed\3\2\2\2\u01eb\u01e9\3\2\2\2\u01eb")
        buf.write("\u01ec\3\2\2\2\u01ec\u01ef\3\2\2\2\u01ed\u01eb\3\2\2\2")
        buf.write("\u01ee\u01e1\3\2\2\2\u01ef\u01f2\3\2\2\2\u01f0\u01ee\3")
        buf.write("\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\3\2\2\2\u01f2\u01f0")
        buf.write("\3\2\2\2\u01f3\u01f4\7i\2\2\u01f4\65\3\2\2\2\u01f5\u01f6")
        buf.write("\7Y\2\2\u01f6\u01fc\5v<\2\u01f7\u01f9\7<\2\2\u01f8\u01fa")
        buf.write("\5\u010c\u0087\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2")
        buf.write("\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\7=\2\2\u01fc\u01f7")
        buf.write("\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe")
        buf.write("\u01ff\7k\2\2\u01ff\67\3\2\2\2\u0200\u0202\5\66\34\2\u0201")
        buf.write("\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0201\3\2\2\2")
        buf.write("\u0203\u0204\3\2\2\2\u02049\3\2\2\2\u0205\u0209\58\35")
        buf.write("\2\u0206\u020a\5\u010a\u0086\2\u0207\u020a\5> \2\u0208")
        buf.write("\u020a\5<\37\2\u0209\u0206\3\2\2\2\u0209\u0207\3\2\2\2")
        buf.write("\u0209\u0208\3\2\2\2\u020a;\3\2\2\2\u020b\u020c\7\t\2")
        buf.write("\2\u020c\u020d\5> \2\u020d=\3\2\2\2\u020e\u020f\7\17\2")
        buf.write("\2\u020f\u0210\5\u00f8}\2\u0210\u0213\5@!\2\u0211\u0212")
        buf.write("\7Z\2\2\u0212\u0214\5\u00dep\2\u0213\u0211\3\2\2\2\u0213")
        buf.write("\u0214\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0216\7?\2\2")
        buf.write("\u0216\u0217\5\u0090I\2\u0217?\3\2\2\2\u0218\u021a\7<")
        buf.write("\2\2\u0219\u021b\5B\"\2\u021a\u0219\3\2\2\2\u021a\u021b")
        buf.write("\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d\7=\2\2\u021d")
        buf.write("A\3\2\2\2\u021e\u0221\5D#\2\u021f\u0220\7B\2\2\u0220\u0222")
        buf.write("\5\u00dep\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u022b\3\2\2\2\u0223\u0224\7>\2\2\u0224\u0227\5D#\2\u0225")
        buf.write("\u0226\7B\2\2\u0226\u0228\5\u00dep\2\u0227\u0225\3\2\2")
        buf.write("\2\u0227\u0228\3\2\2\2\u0228\u022a\3\2\2\2\u0229\u0223")
        buf.write("\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229\3\2\2\2\u022b")
        buf.write("\u022c\3\2\2\2\u022c\u024f\3\2\2\2\u022d\u022b\3\2\2\2")
        buf.write("\u022e\u024d\7>\2\2\u022f\u0231\7;\2\2\u0230\u0232\5D")
        buf.write("#\2\u0231\u0230\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u023b")
        buf.write("\3\2\2\2\u0233\u0234\7>\2\2\u0234\u0237\5D#\2\u0235\u0236")
        buf.write("\7B\2\2\u0236\u0238\5\u00dep\2\u0237\u0235\3\2\2\2\u0237")
        buf.write("\u0238\3\2\2\2\u0238\u023a\3\2\2\2\u0239\u0233\3\2\2\2")
        buf.write("\u023a\u023d\3\2\2\2\u023b\u0239\3\2\2\2\u023b\u023c\3")
        buf.write("\2\2\2\u023c\u0246\3\2\2\2\u023d\u023b\3\2\2\2\u023e\u0244")
        buf.write("\7>\2\2\u023f\u0240\7A\2\2\u0240\u0242\5D#\2\u0241\u0243")
        buf.write("\7>\2\2\u0242\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243")
        buf.write("\u0245\3\2\2\2\u0244\u023f\3\2\2\2\u0244\u0245\3\2\2\2")
        buf.write("\u0245\u0247\3\2\2\2\u0246\u023e\3\2\2\2\u0246\u0247\3")
        buf.write("\2\2\2\u0247\u024e\3\2\2\2\u0248\u0249\7A\2\2\u0249\u024b")
        buf.write("\5D#\2\u024a\u024c\7>\2\2\u024b\u024a\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u024e\3\2\2\2\u024d\u022f\3\2\2\2\u024d")
        buf.write("\u0248\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250\3\2\2\2")
        buf.write("\u024f\u022e\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0270\3")
        buf.write("\2\2\2\u0251\u0253\7;\2\2\u0252\u0254\5D#\2\u0253\u0252")
        buf.write("\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u025d\3\2\2\2\u0255")
        buf.write("\u0256\7>\2\2\u0256\u0259\5D#\2\u0257\u0258\7B\2\2\u0258")
        buf.write("\u025a\5\u00dep\2\u0259\u0257\3\2\2\2\u0259\u025a\3\2")
        buf.write("\2\2\u025a\u025c\3\2\2\2\u025b\u0255\3\2\2\2\u025c\u025f")
        buf.write("\3\2\2\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("\u0268\3\2\2\2\u025f\u025d\3\2\2\2\u0260\u0266\7>\2\2")
        buf.write("\u0261\u0262\7A\2\2\u0262\u0264\5D#\2\u0263\u0265\7>\2")
        buf.write("\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0267")
        buf.write("\3\2\2\2\u0266\u0261\3\2\2\2\u0266\u0267\3\2\2\2\u0267")
        buf.write("\u0269\3\2\2\2\u0268\u0260\3\2\2\2\u0268\u0269\3\2\2\2")
        buf.write("\u0269\u0270\3\2\2\2\u026a\u026b\7A\2\2\u026b\u026d\5")
        buf.write("D#\2\u026c\u026e\7>\2\2\u026d\u026c\3\2\2\2\u026d\u026e")
        buf.write("\3\2\2\2\u026e\u0270\3\2\2\2\u026f\u021e\3\2\2\2\u026f")
        buf.write("\u0251\3\2\2\2\u026f\u026a\3\2\2\2\u0270C\3\2\2\2\u0271")
        buf.write("\u0274\5\u00f8}\2\u0272\u0273\7?\2\2\u0273\u0275\5\u00de")
        buf.write("p\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275E\3\2")
        buf.write("\2\2\u0276\u0279\5H%\2\u0277\u0278\7B\2\2\u0278\u027a")
        buf.write("\5\u00dep\2\u0279\u0277\3\2\2\2\u0279\u027a\3\2\2\2\u027a")
        buf.write("\u0283\3\2\2\2\u027b\u027c\7>\2\2\u027c\u027f\5H%\2\u027d")
        buf.write("\u027e\7B\2\2\u027e\u0280\5\u00dep\2\u027f\u027d\3\2\2")
        buf.write("\2\u027f\u0280\3\2\2\2\u0280\u0282\3\2\2\2\u0281\u027b")
        buf.write("\3\2\2\2\u0282\u0285\3\2\2\2\u0283\u0281\3\2\2\2\u0283")
        buf.write("\u0284\3\2\2\2\u0284\u02a7\3\2\2\2\u0285\u0283\3\2\2\2")
        buf.write("\u0286\u02a5\7>\2\2\u0287\u0289\7;\2\2\u0288\u028a\5H")
        buf.write("%\2\u0289\u0288\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u0293")
        buf.write("\3\2\2\2\u028b\u028c\7>\2\2\u028c\u028f\5H%\2\u028d\u028e")
        buf.write("\7B\2\2\u028e\u0290\5\u00dep\2\u028f\u028d\3\2\2\2\u028f")
        buf.write("\u0290\3\2\2\2\u0290\u0292\3\2\2\2\u0291\u028b\3\2\2\2")
        buf.write("\u0292\u0295\3\2\2\2\u0293\u0291\3\2\2\2\u0293\u0294\3")
        buf.write("\2\2\2\u0294\u029e\3\2\2\2\u0295\u0293\3\2\2\2\u0296\u029c")
        buf.write("\7>\2\2\u0297\u0298\7A\2\2\u0298\u029a\5H%\2\u0299\u029b")
        buf.write("\7>\2\2\u029a\u0299\3\2\2\2\u029a\u029b\3\2\2\2\u029b")
        buf.write("\u029d\3\2\2\2\u029c\u0297\3\2\2\2\u029c\u029d\3\2\2\2")
        buf.write("\u029d\u029f\3\2\2\2\u029e\u0296\3\2\2\2\u029e\u029f\3")
        buf.write("\2\2\2\u029f\u02a6\3\2\2\2\u02a0\u02a1\7A\2\2\u02a1\u02a3")
        buf.write("\5H%\2\u02a2\u02a4\7>\2\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4")
        buf.write("\3\2\2\2\u02a4\u02a6\3\2\2\2\u02a5\u0287\3\2\2\2\u02a5")
        buf.write("\u02a0\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8\3\2\2\2")
        buf.write("\u02a7\u0286\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02c8\3")
        buf.write("\2\2\2\u02a9\u02ab\7;\2\2\u02aa\u02ac\5H%\2\u02ab\u02aa")
        buf.write("\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02b5\3\2\2\2\u02ad")
        buf.write("\u02ae\7>\2\2\u02ae\u02b1\5H%\2\u02af\u02b0\7B\2\2\u02b0")
        buf.write("\u02b2\5\u00dep\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2")
        buf.write("\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02ad\3\2\2\2\u02b4\u02b7")
        buf.write("\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6")
        buf.write("\u02c0\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b8\u02be\7>\2\2")
        buf.write("\u02b9\u02ba\7A\2\2\u02ba\u02bc\5H%\2\u02bb\u02bd\7>\2")
        buf.write("\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02bf")
        buf.write("\3\2\2\2\u02be\u02b9\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf")
        buf.write("\u02c1\3\2\2\2\u02c0\u02b8\3\2\2\2\u02c0\u02c1\3\2\2\2")
        buf.write("\u02c1\u02c8\3\2\2\2\u02c2\u02c3\7A\2\2\u02c3\u02c5\5")
        buf.write("H%\2\u02c4\u02c6\7>\2\2\u02c5\u02c4\3\2\2\2\u02c5\u02c6")
        buf.write("\3\2\2\2\u02c6\u02c8\3\2\2\2\u02c7\u0276\3\2\2\2\u02c7")
        buf.write("\u02a9\3\2\2\2\u02c7\u02c2\3\2\2\2\u02c8G\3\2\2\2\u02c9")
        buf.write("\u02ca\5\u00f8}\2\u02caI\3\2\2\2\u02cb\u02ce\5L\'\2\u02cc")
        buf.write("\u02ce\5~@\2\u02cd\u02cb\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ce")
        buf.write("K\3\2\2\2\u02cf\u02d4\5N(\2\u02d0\u02d1\7@\2\2\u02d1\u02d3")
        buf.write("\5N(\2\u02d2\u02d0\3\2\2\2\u02d3\u02d6\3\2\2\2\u02d4\u02d2")
        buf.write("\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d8\3\2\2\2\u02d6")
        buf.write("\u02d4\3\2\2\2\u02d7\u02d9\7@\2\2\u02d8\u02d7\3\2\2\2")
        buf.write("\u02d8\u02d9\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\7")
        buf.write("k\2\2\u02dbM\3\2\2\2\u02dc\u02e5\5P)\2\u02dd\u02e5\5X")
        buf.write("-\2\u02de\u02e5\5Z.\2\u02df\u02e5\5\\/\2\u02e0\u02e5\5")
        buf.write("h\65\2\u02e1\u02e5\5x=\2\u02e2\u02e5\5z>\2\u02e3\u02e5")
        buf.write("\5|?\2\u02e4\u02dc\3\2\2\2\u02e4\u02dd\3\2\2\2\u02e4\u02de")
        buf.write("\3\2\2\2\u02e4\u02df\3\2\2\2\u02e4\u02e0\3\2\2\2\u02e4")
        buf.write("\u02e1\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e3\3\2\2\2")
        buf.write("\u02e5O\3\2\2\2\u02e6\u02f7\5T+\2\u02e7\u02f8\5R*\2\u02e8")
        buf.write("\u02eb\5V,\2\u02e9\u02ec\5\u0116\u008c\2\u02ea\u02ec\5")
        buf.write("\u0106\u0084\2\u02eb\u02e9\3\2\2\2\u02eb\u02ea\3\2\2\2")
        buf.write("\u02ec\u02f8\3\2\2\2\u02ed\u02f0\7B\2\2\u02ee\u02f1\5")
        buf.write("\u0116\u008c\2\u02ef\u02f1\5T+\2\u02f0\u02ee\3\2\2\2\u02f0")
        buf.write("\u02ef\3\2\2\2\u02f1\u02f3\3\2\2\2\u02f2\u02ed\3\2\2\2")
        buf.write("\u02f3\u02f6\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3")
        buf.write("\2\2\2\u02f5\u02f8\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f7\u02e7")
        buf.write("\3\2\2\2\u02f7\u02e8\3\2\2\2\u02f7\u02f4\3\2\2\2\u02f8")
        buf.write("Q\3\2\2\2\u02f9\u02fa\7?\2\2\u02fa\u02fd\5\u00dep\2\u02fb")
        buf.write("\u02fc\7B\2\2\u02fc\u02fe\5\u00dep\2\u02fd\u02fb\3\2\2")
        buf.write("\2\u02fd\u02fe\3\2\2\2\u02feS\3\2\2\2\u02ff\u0302\5\u00de")
        buf.write("p\2\u0300\u0302\5\u00f0y\2\u0301\u02ff\3\2\2\2\u0301\u0300")
        buf.write("\3\2\2\2\u0302\u030a\3\2\2\2\u0303\u0306\7>\2\2\u0304")
        buf.write("\u0307\5\u00dep\2\u0305\u0307\5\u00f0y\2\u0306\u0304\3")
        buf.write("\2\2\2\u0306\u0305\3\2\2\2\u0307\u0309\3\2\2\2\u0308\u0303")
        buf.write("\3\2\2\2\u0309\u030c\3\2\2\2\u030a\u0308\3\2\2\2\u030a")
        buf.write("\u030b\3\2\2\2\u030b\u030e\3\2\2\2\u030c\u030a\3\2\2\2")
        buf.write("\u030d\u030f\7>\2\2\u030e\u030d\3\2\2\2\u030e\u030f\3")
        buf.write("\2\2\2\u030fU\3\2\2\2\u0310\u0311\t\5\2\2\u0311W\3\2\2")
        buf.write("\2\u0312\u0313\7\20\2\2\u0313\u0314\5\u0104\u0083\2\u0314")
        buf.write("Y\3\2\2\2\u0315\u0316\7#\2\2\u0316[\3\2\2\2\u0317\u031d")
        buf.write("\5^\60\2\u0318\u031d\5`\61\2\u0319\u031d\5b\62\2\u031a")
        buf.write("\u031d\5f\64\2\u031b\u031d\5d\63\2\u031c\u0317\3\2\2\2")
        buf.write("\u031c\u0318\3\2\2\2\u031c\u0319\3\2\2\2\u031c\u031a\3")
        buf.write("\2\2\2\u031c\u031b\3\2\2\2\u031d]\3\2\2\2\u031e\u031f")
        buf.write("\7\13\2\2\u031f_\3\2\2\2\u0320\u0321\7\16\2\2\u0321a\3")
        buf.write("\2\2\2\u0322\u0324\7%\2\2\u0323\u0325\5\u0106\u0084\2")
        buf.write("\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325c\3\2\2")
        buf.write("\2\u0326\u0327\5\u0116\u008c\2\u0327e\3\2\2\2\u0328\u032e")
        buf.write("\7$\2\2\u0329\u032c\5\u00dep\2\u032a\u032b\7\27\2\2\u032b")
        buf.write("\u032d\5\u00dep\2\u032c\u032a\3\2\2\2\u032c\u032d\3\2")
        buf.write("\2\2\u032d\u032f\3\2\2\2\u032e\u0329\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032fg\3\2\2\2\u0330\u0333\5j\66\2\u0331\u0333")
        buf.write("\5l\67\2\u0332\u0330\3\2\2\2\u0332\u0331\3\2\2\2\u0333")
        buf.write("i\3\2\2\2\u0334\u0335\7\32\2\2\u0335\u0336\5t;\2\u0336")
        buf.write("k\3\2\2\2\u0337\u0344\7\27\2\2\u0338\u033a\t\6\2\2\u0339")
        buf.write("\u0338\3\2\2\2\u033a\u033d\3\2\2\2\u033b\u0339\3\2\2\2")
        buf.write("\u033b\u033c\3\2\2\2\u033c\u033e\3\2\2\2\u033d\u033b\3")
        buf.write("\2\2\2\u033e\u0345\5v<\2\u033f\u0341\t\6\2\2\u0340\u033f")
        buf.write("\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0340\3\2\2\2\u0342")
        buf.write("\u0343\3\2\2\2\u0343\u0345\3\2\2\2\u0344\u033b\3\2\2\2")
        buf.write("\u0344\u0340\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u034d\7")
        buf.write("\32\2\2\u0347\u034e\7;\2\2\u0348\u0349\7<\2\2\u0349\u034a")
        buf.write("\5r:\2\u034a\u034b\7=\2\2\u034b\u034e\3\2\2\2\u034c\u034e")
        buf.write("\5r:\2\u034d\u0347\3\2\2\2\u034d\u0348\3\2\2\2\u034d\u034c")
        buf.write("\3\2\2\2\u034em\3\2\2\2\u034f\u0352\5\u00f8}\2\u0350\u0351")
        buf.write("\7\7\2\2\u0351\u0353\5\u00f8}\2\u0352\u0350\3\2\2\2\u0352")
        buf.write("\u0353\3\2\2\2\u0353o\3\2\2\2\u0354\u0357\5v<\2\u0355")
        buf.write("\u0356\7\7\2\2\u0356\u0358\5\u00f8}\2\u0357\u0355\3\2")
        buf.write("\2\2\u0357\u0358\3\2\2\2\u0358q\3\2\2\2\u0359\u035e\5")
        buf.write("n8\2\u035a\u035b\7>\2\2\u035b\u035d\5n8\2\u035c\u035a")
        buf.write("\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e")
        buf.write("\u035f\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2")
        buf.write("\u0361\u0363\7>\2\2\u0362\u0361\3\2\2\2\u0362\u0363\3")
        buf.write("\2\2\2\u0363s\3\2\2\2\u0364\u0369\5p9\2\u0365\u0366\7")
        buf.write(">\2\2\u0366\u0368\5p9\2\u0367\u0365\3\2\2\2\u0368\u036b")
        buf.write("\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a")
        buf.write("u\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u0371\5\u00f8}\2\u036d")
        buf.write("\u036e\79\2\2\u036e\u0370\5\u00f8}\2\u036f\u036d\3\2\2")
        buf.write("\2\u0370\u0373\3\2\2\2\u0371\u036f\3\2\2\2\u0371\u0372")
        buf.write("\3\2\2\2\u0372w\3\2\2\2\u0373\u0371\3\2\2\2\u0374\u0375")
        buf.write("\7\30\2\2\u0375\u037a\5\u00f8}\2\u0376\u0377\7>\2\2\u0377")
        buf.write("\u0379\5\u00f8}\2\u0378\u0376\3\2\2\2\u0379\u037c\3\2")
        buf.write("\2\2\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037by\3")
        buf.write("\2\2\2\u037c\u037a\3\2\2\2\u037d\u037e\7 \2\2\u037e\u0383")
        buf.write("\5\u00f8}\2\u037f\u0380\7>\2\2\u0380\u0382\5\u00f8}\2")
        buf.write("\u0381\u037f\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3")
        buf.write("\2\2\2\u0383\u0384\3\2\2\2\u0384{\3\2\2\2\u0385\u0383")
        buf.write("\3\2\2\2\u0386\u0387\7\b\2\2\u0387\u038a\5\u00dep\2\u0388")
        buf.write("\u0389\7>\2\2\u0389\u038b\5\u00dep\2\u038a\u0388\3\2\2")
        buf.write("\2\u038a\u038b\3\2\2\2\u038b}\3\2\2\2\u038c\u0397\5\u0082")
        buf.write("B\2\u038d\u0397\5\u0084C\2\u038e\u0397\5\u0086D\2\u038f")
        buf.write("\u0397\5\u0088E\2\u0390\u0397\5\u008aF\2\u0391\u0397\5")
        buf.write("> \2\u0392\u0397\5\u010a\u0086\2\u0393\u0397\5:\36\2\u0394")
        buf.write("\u0397\5\u0080A\2\u0395\u0397\5\u0092J\2\u0396\u038c\3")
        buf.write("\2\2\2\u0396\u038d\3\2\2\2\u0396\u038e\3\2\2\2\u0396\u038f")
        buf.write("\3\2\2\2\u0396\u0390\3\2\2\2\u0396\u0391\3\2\2\2\u0396")
        buf.write("\u0392\3\2\2\2\u0396\u0393\3\2\2\2\u0396\u0394\3\2\2\2")
        buf.write("\u0396\u0395\3\2\2\2\u0397\177\3\2\2\2\u0398\u039c\7\t")
        buf.write("\2\2\u0399\u039d\5> \2\u039a\u039d\5\u008aF\2\u039b\u039d")
        buf.write("\5\u0086D\2\u039c\u0399\3\2\2\2\u039c\u039a\3\2\2\2\u039c")
        buf.write("\u039b\3\2\2\2\u039d\u0081\3\2\2\2\u039e\u039f\7\31\2")
        buf.write("\2\u039f\u03a0\5\u00dep\2\u03a0\u03a1\7?\2\2\u03a1\u03a9")
        buf.write("\5\u0090I\2\u03a2\u03a3\7\21\2\2\u03a3\u03a4\5\u00dep")
        buf.write("\2\u03a4\u03a5\7?\2\2\u03a5\u03a6\5\u0090I\2\u03a6\u03a8")
        buf.write("\3\2\2\2\u03a7\u03a2\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9")
        buf.write("\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03af\3\2\2\2")
        buf.write("\u03ab\u03a9\3\2\2\2\u03ac\u03ad\7\22\2\2\u03ad\u03ae")
        buf.write("\7?\2\2\u03ae\u03b0\5\u0090I\2\u03af\u03ac\3\2\2\2\u03af")
        buf.write("\u03b0\3\2\2\2\u03b0\u0083\3\2\2\2\u03b1\u03b2\7)\2\2")
        buf.write("\u03b2\u03b3\5\u00dep\2\u03b3\u03b4\7?\2\2\u03b4\u03b8")
        buf.write("\5\u0090I\2\u03b5\u03b6\7\22\2\2\u03b6\u03b7\7?\2\2\u03b7")
        buf.write("\u03b9\5\u0090I\2\u03b8\u03b5\3\2\2\2\u03b8\u03b9\3\2")
        buf.write("\2\2\u03b9\u0085\3\2\2\2\u03ba\u03bb\7\26\2\2\u03bb\u03bc")
        buf.write("\5\u0104\u0083\2\u03bc\u03bd\7\33\2\2\u03bd\u03be\5\u0106")
        buf.write("\u0084\2\u03be\u03bf\7?\2\2\u03bf\u03c3\5\u0090I\2\u03c0")
        buf.write("\u03c1\7\22\2\2\u03c1\u03c2\7?\2\2\u03c2\u03c4\5\u0090")
        buf.write("I\2\u03c3\u03c0\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u0087")
        buf.write("\3\2\2\2\u03c5\u03c6\7\'\2\2\u03c6\u03c7\7?\2\2\u03c7")
        buf.write("\u03dd\5\u0090I\2\u03c8\u03c9\5\u008eH\2\u03c9\u03ca\7")
        buf.write("?\2\2\u03ca\u03cb\5\u0090I\2\u03cb\u03cd\3\2\2\2\u03cc")
        buf.write("\u03c8\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cc\3\2\2\2")
        buf.write("\u03ce\u03cf\3\2\2\2\u03cf\u03d3\3\2\2\2\u03d0\u03d1\7")
        buf.write("\22\2\2\u03d1\u03d2\7?\2\2\u03d2\u03d4\5\u0090I\2\u03d3")
        buf.write("\u03d0\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d8\3\2\2\2")
        buf.write("\u03d5\u03d6\7\25\2\2\u03d6\u03d7\7?\2\2\u03d7\u03d9\5")
        buf.write("\u0090I\2\u03d8\u03d5\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9")
        buf.write("\u03de\3\2\2\2\u03da\u03db\7\25\2\2\u03db\u03dc\7?\2\2")
        buf.write("\u03dc\u03de\5\u0090I\2\u03dd\u03cc\3\2\2\2\u03dd\u03da")
        buf.write("\3\2\2\2\u03de\u0089\3\2\2\2\u03df\u03e0\7*\2\2\u03e0")
        buf.write("\u03e5\5\u008cG\2\u03e1\u03e2\7>\2\2\u03e2\u03e4\5\u008c")
        buf.write("G\2\u03e3\u03e1\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5\u03e3")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\3\2\2\2\u03e7")
        buf.write("\u03e5\3\2\2\2\u03e8\u03e9\7?\2\2\u03e9\u03ea\5\u0090")
        buf.write("I\2\u03ea\u008b\3\2\2\2\u03eb\u03ee\5\u00dep\2\u03ec\u03ed")
        buf.write("\7\7\2\2\u03ed\u03ef\5\u00f2z\2\u03ee\u03ec\3\2\2\2\u03ee")
        buf.write("\u03ef\3\2\2\2\u03ef\u008d\3\2\2\2\u03f0\u03f6\7\23\2")
        buf.write("\2\u03f1\u03f4\5\u00dep\2\u03f2\u03f3\7\7\2\2\u03f3\u03f5")
        buf.write("\5\u00f8}\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5")
        buf.write("\u03f7\3\2\2\2\u03f6\u03f1\3\2\2\2\u03f6\u03f7\3\2\2\2")
        buf.write("\u03f7\u008f\3\2\2\2\u03f8\u0400\5L\'\2\u03f9\u03fb\7")
        buf.write("k\2\2\u03fa\u03fc\5J&\2\u03fb\u03fa\3\2\2\2\u03fc\u03fd")
        buf.write("\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe")
        buf.write("\u0400\3\2\2\2\u03ff\u03f8\3\2\2\2\u03ff\u03f9\3\2\2\2")
        buf.write("\u0400\u0091\3\2\2\2\u0401\u0402\7\36\2\2\u0402\u0403")
        buf.write("\5\u0094K\2\u0403\u0404\7?\2\2\u0404\u0406\7k\2\2\u0405")
        buf.write("\u0407\5\u009aN\2\u0406\u0405\3\2\2\2\u0407\u0408\3\2")
        buf.write("\2\2\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u0093")
        buf.write("\3\2\2\2\u040a\u040b\5\u0098M\2\u040b\u040d\7>\2\2\u040c")
        buf.write("\u040e\5\u0096L\2\u040d\u040c\3\2\2\2\u040d\u040e\3\2")
        buf.write("\2\2\u040e\u0411\3\2\2\2\u040f\u0411\5\u00dep\2\u0410")
        buf.write("\u040a\3\2\2\2\u0410\u040f\3\2\2\2\u0411\u0095\3\2\2\2")
        buf.write("\u0412\u0414\7>\2\2\u0413\u0415\5\u0098M\2\u0414\u0413")
        buf.write("\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0414\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0419\3\2\2\2\u0418\u041a\7>\2\2")
        buf.write("\u0419\u0418\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u0097\3")
        buf.write("\2\2\2\u041b\u041c\7;\2\2\u041c\u041f\5\u00f2z\2\u041d")
        buf.write("\u041f\5\u00dep\2\u041e\u041b\3\2\2\2\u041e\u041d\3\2")
        buf.write("\2\2\u041f\u0099\3\2\2\2\u0420\u0421\7\f\2\2\u0421\u0423")
        buf.write("\5\u009eP\2\u0422\u0424\5\u009cO\2\u0423\u0422\3\2\2\2")
        buf.write("\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\7")
        buf.write("?\2\2\u0426\u0427\5\u0090I\2\u0427\u009b\3\2\2\2\u0428")
        buf.write("\u0429\7\31\2\2\u0429\u042a\5\u00dep\2\u042a\u009d\3\2")
        buf.write("\2\2\u042b\u042e\5\u00c6d\2\u042c\u042e\5\u00a0Q\2\u042d")
        buf.write("\u042b\3\2\2\2\u042d\u042c\3\2\2\2\u042e\u009f\3\2\2\2")
        buf.write("\u042f\u0432\5\u00a2R\2\u0430\u0432\5\u00a4S\2\u0431\u042f")
        buf.write("\3\2\2\2\u0431\u0430\3\2\2\2\u0432\u00a1\3\2\2\2\u0433")
        buf.write("\u0434\5\u00a4S\2\u0434\u0435\7\7\2\2\u0435\u0436\5\u00b8")
        buf.write("]\2\u0436\u00a3\3\2\2\2\u0437\u043c\5\u00a6T\2\u0438\u0439")
        buf.write("\7E\2\2\u0439\u043b\5\u00a6T\2\u043a\u0438\3\2\2\2\u043b")
        buf.write("\u043e\3\2\2\2\u043c\u043a\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u00a5\3\2\2\2\u043e\u043c\3\2\2\2\u043f\u0448\5")
        buf.write("\u00a8U\2\u0440\u0448\5\u00b6\\\2\u0441\u0448\5\u00ba")
        buf.write("^\2\u0442\u0448\5\u00bc_\2\u0443\u0448\5\u00c2b\2\u0444")
        buf.write("\u0448\5\u00c4c\2\u0445\u0448\5\u00ceh\2\u0446\u0448\5")
        buf.write("\u00d6l\2\u0447\u043f\3\2\2\2\u0447\u0440\3\2\2\2\u0447")
        buf.write("\u0441\3\2\2\2\u0447\u0442\3\2\2\2\u0447\u0443\3\2\2\2")
        buf.write("\u0447\u0444\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0446\3")
        buf.write("\2\2\2\u0448\u00a7\3\2\2\2\u0449\u044a\5\u00aeX\2\u044a")
        buf.write("\u044b\6U\2\2\u044b\u0452\3\2\2\2\u044c\u0452\5\u00ac")
        buf.write("W\2\u044d\u0452\5\u011a\u008e\2\u044e\u0452\7\37\2\2\u044f")
        buf.write("\u0452\7&\2\2\u0450\u0452\7\24\2\2\u0451\u0449\3\2\2\2")
        buf.write("\u0451\u044c\3\2\2\2\u0451\u044d\3\2\2\2\u0451\u044e\3")
        buf.write("\2\2\2\u0451\u044f\3\2\2\2\u0451\u0450\3\2\2\2\u0452\u00a9")
        buf.write("\3\2\2\2\u0453\u0454\5\u00aeX\2\u0454\u0455\6V\3\2\u0455")
        buf.write("\u045c\3\2\2\2\u0456\u045c\5\u00acW\2\u0457\u045c\5\u011a")
        buf.write("\u008e\2\u0458\u045c\7\37\2\2\u0459\u045c\7&\2\2\u045a")
        buf.write("\u045c\7\24\2\2\u045b\u0453\3\2\2\2\u045b\u0456\3\2\2")
        buf.write("\2\u045b\u0457\3\2\2\2\u045b\u0458\3\2\2\2\u045b\u0459")
        buf.write("\3\2\2\2\u045b\u045a\3\2\2\2\u045c\u00ab\3\2\2\2\u045d")
        buf.write("\u045e\5\u00b0Y\2\u045e\u045f\7J\2\2\u045f\u0460\5\u00b4")
        buf.write("[\2\u0460\u0466\3\2\2\2\u0461\u0462\5\u00b0Y\2\u0462\u0463")
        buf.write("\7K\2\2\u0463\u0464\5\u00b4[\2\u0464\u0466\3\2\2\2\u0465")
        buf.write("\u045d\3\2\2\2\u0465\u0461\3\2\2\2\u0466\u00ad\3\2\2\2")
        buf.write("\u0467\u046b\7\4\2\2\u0468\u0469\7K\2\2\u0469\u046b\7")
        buf.write("\4\2\2\u046a\u0467\3\2\2\2\u046a\u0468\3\2\2\2\u046b\u00af")
        buf.write("\3\2\2\2\u046c\u0470\5\u00b2Z\2\u046d\u046e\7K\2\2\u046e")
        buf.write("\u0470\5\u00b2Z\2\u046f\u046c\3\2\2\2\u046f\u046d\3\2")
        buf.write("\2\2\u0470\u00b1\3\2\2\2\u0471\u0472\7\4\2\2\u0472\u00b3")
        buf.write("\3\2\2\2\u0473\u0474\7\4\2\2\u0474\u00b5\3\2\2\2\u0475")
        buf.write("\u0476\5\u00b8]\2\u0476\u00b7\3\2\2\2\u0477\u0478\5\u00f8")
        buf.write("}\2\u0478\u0479\6]\4\2\u0479\u00b9\3\2\2\2\u047a\u047b")
        buf.write("\7(\2\2\u047b\u00bb\3\2\2\2\u047c\u047d\5\u00be`\2\u047d")
        buf.write("\u047e\6_\5\2\u047e\u00bd\3\2\2\2\u047f\u0482\5\u00f8")
        buf.write("}\2\u0480\u0481\79\2\2\u0481\u0483\5\u00f8}\2\u0482\u0480")
        buf.write("\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0482\3\2\2\2\u0484")
        buf.write("\u0485\3\2\2\2\u0485\u00bf\3\2\2\2\u0486\u0489\5\u00be")
        buf.write("`\2\u0487\u0489\5\u00f8}\2\u0488\u0486\3\2\2\2\u0488\u0487")
        buf.write("\3\2\2\2\u0489\u00c1\3\2\2\2\u048a\u048b\7<\2\2\u048b")
        buf.write("\u048c\5\u00a0Q\2\u048c\u048d\7=\2\2\u048d\u00c3\3\2\2")
        buf.write("\2\u048e\u0490\7C\2\2\u048f\u0491\5\u00c8e\2\u0490\u048f")
        buf.write("\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0492\3\2\2\2\u0492")
        buf.write("\u0499\7D\2\2\u0493\u0495\7<\2\2\u0494\u0496\5\u00c6d")
        buf.write("\2\u0495\u0494\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0497")
        buf.write("\3\2\2\2\u0497\u0499\7=\2\2\u0498\u048e\3\2\2\2\u0498")
        buf.write("\u0493\3\2\2\2\u0499\u00c5\3\2\2\2\u049a\u049b\5\u00ca")
        buf.write("f\2\u049b\u049d\7>\2\2\u049c\u049e\5\u00c8e\2\u049d\u049c")
        buf.write("\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u00c7\3\2\2\2\u049f")
        buf.write("\u04a4\5\u00caf\2\u04a0\u04a1\7>\2\2\u04a1\u04a3\5\u00ca")
        buf.write("f\2\u04a2\u04a0\3\2\2\2\u04a3\u04a6\3\2\2\2\u04a4\u04a2")
        buf.write("\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a8\3\2\2\2\u04a6")
        buf.write("\u04a4\3\2\2\2\u04a7\u04a9\7>\2\2\u04a8\u04a7\3\2\2\2")
        buf.write("\u04a8\u04a9\3\2\2\2\u04a9\u00c9\3\2\2\2\u04aa\u04ad\5")
        buf.write("\u00ccg\2\u04ab\u04ad\5\u00a0Q\2\u04ac\u04aa\3\2\2\2\u04ac")
        buf.write("\u04ab\3\2\2\2\u04ad\u00cb\3\2\2\2\u04ae\u04af\7;\2\2")
        buf.write("\u04af\u04b3\5\u00b8]\2\u04b0\u04b1\7;\2\2\u04b1\u04b3")
        buf.write("\5\u00ba^\2\u04b2\u04ae\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b3")
        buf.write("\u00cd\3\2\2\2\u04b4\u04b5\7P\2\2\u04b5\u04ce\7Q\2\2\u04b6")
        buf.write("\u04b7\7P\2\2\u04b7\u04b9\5\u00d4k\2\u04b8\u04ba\7>\2")
        buf.write("\2\u04b9\u04b8\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bb")
        buf.write("\3\2\2\2\u04bb\u04bc\7Q\2\2\u04bc\u04ce\3\2\2\2\u04bd")
        buf.write("\u04be\7P\2\2\u04be\u04bf\5\u00d0i\2\u04bf\u04c0\7>\2")
        buf.write("\2\u04c0\u04c2\5\u00d4k\2\u04c1\u04c3\7>\2\2\u04c2\u04c1")
        buf.write("\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4")
        buf.write("\u04c5\7Q\2\2\u04c5\u04ce\3\2\2\2\u04c6\u04c7\7P\2\2\u04c7")
        buf.write("\u04c9\5\u00d0i\2\u04c8\u04ca\7>\2\2\u04c9\u04c8\3\2\2")
        buf.write("\2\u04c9\u04ca\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cc")
        buf.write("\7Q\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04b4\3\2\2\2\u04cd")
        buf.write("\u04b6\3\2\2\2\u04cd\u04bd\3\2\2\2\u04cd\u04c6\3\2\2\2")
        buf.write("\u04ce\u00cf\3\2\2\2\u04cf\u04d4\5\u00d2j\2\u04d0\u04d1")
        buf.write("\7>\2\2\u04d1\u04d3\5\u00d2j\2\u04d2\u04d0\3\2\2\2\u04d3")
        buf.write("\u04d6\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d4\u04d5\3\2\2\2")
        buf.write("\u04d5\u00d1\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d7\u04da\5")
        buf.write("\u00aaV\2\u04d8\u04da\5\u00be`\2\u04d9\u04d7\3\2\2\2\u04d9")
        buf.write("\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\7?\2\2")
        buf.write("\u04dc\u04dd\5\u00a0Q\2\u04dd\u00d3\3\2\2\2\u04de\u04df")
        buf.write("\7A\2\2\u04df\u04e0\5\u00b8]\2\u04e0\u00d5\3\2\2\2\u04e1")
        buf.write("\u04e2\5\u00c0a\2\u04e2\u04e3\7<\2\2\u04e3\u04e4\7=\2")
        buf.write("\2\u04e4\u0500\3\2\2\2\u04e5\u04e6\5\u00c0a\2\u04e6\u04e7")
        buf.write("\7<\2\2\u04e7\u04e9\5\u00d8m\2\u04e8\u04ea\7>\2\2\u04e9")
        buf.write("\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04eb\3\2\2\2")
        buf.write("\u04eb\u04ec\7=\2\2\u04ec\u0500\3\2\2\2\u04ed\u04ee\5")
        buf.write("\u00c0a\2\u04ee\u04ef\7<\2\2\u04ef\u04f1\5\u00dan\2\u04f0")
        buf.write("\u04f2\7>\2\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2")
        buf.write("\u04f2\u04f3\3\2\2\2\u04f3\u04f4\7=\2\2\u04f4\u0500\3")
        buf.write("\2\2\2\u04f5\u04f6\5\u00c0a\2\u04f6\u04f7\7<\2\2\u04f7")
        buf.write("\u04f8\5\u00d8m\2\u04f8\u04f9\7>\2\2\u04f9\u04fb\5\u00da")
        buf.write("n\2\u04fa\u04fc\7>\2\2\u04fb\u04fa\3\2\2\2\u04fb\u04fc")
        buf.write("\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04fe\7=\2\2\u04fe")
        buf.write("\u0500\3\2\2\2\u04ff\u04e1\3\2\2\2\u04ff\u04e5\3\2\2\2")
        buf.write("\u04ff\u04ed\3\2\2\2\u04ff\u04f5\3\2\2\2\u0500\u00d7\3")
        buf.write("\2\2\2\u0501\u0506\5\u00a0Q\2\u0502\u0503\7>\2\2\u0503")
        buf.write("\u0505\5\u00a0Q\2\u0504\u0502\3\2\2\2\u0505\u0508\3\2")
        buf.write("\2\2\u0506\u0504\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u00d9")
        buf.write("\3\2\2\2\u0508\u0506\3\2\2\2\u0509\u050e\5\u00dco\2\u050a")
        buf.write("\u050b\7>\2\2\u050b\u050d\5\u00dco\2\u050c\u050a\3\2\2")
        buf.write("\2\u050d\u0510\3\2\2\2\u050e\u050c\3\2\2\2\u050e\u050f")
        buf.write("\3\2\2\2\u050f\u00db\3\2\2\2\u0510\u050e\3\2\2\2\u0511")
        buf.write("\u0512\5\u00f8}\2\u0512\u0513\7B\2\2\u0513\u0514\5\u00a0")
        buf.write("Q\2\u0514\u00dd\3\2\2\2\u0515\u051b\5\u00e6t\2\u0516\u0517")
        buf.write("\7\31\2\2\u0517\u0518\5\u00e6t\2\u0518\u0519\7\22\2\2")
        buf.write("\u0519\u051a\5\u00dep\2\u051a\u051c\3\2\2\2\u051b\u0516")
        buf.write("\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051f\3\2\2\2\u051d")
        buf.write("\u051f\5\u00e2r\2\u051e\u0515\3\2\2\2\u051e\u051d\3\2")
        buf.write("\2\2\u051f\u00df\3\2\2\2\u0520\u0523\5\u00e6t\2\u0521")
        buf.write("\u0523\5\u00e4s\2\u0522\u0520\3\2\2\2\u0522\u0521\3\2")
        buf.write("\2\2\u0523\u00e1\3\2\2\2\u0524\u0526\7\35\2\2\u0525\u0527")
        buf.write("\5F$\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u0528")
        buf.write("\3\2\2\2\u0528\u0529\7?\2\2\u0529\u052a\5\u00dep\2\u052a")
        buf.write("\u00e3\3\2\2\2\u052b\u052d\7\35\2\2\u052c\u052e\5F$\2")
        buf.write("\u052d\u052c\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052f\3")
        buf.write("\2\2\2\u052f\u0530\7?\2\2\u0530\u0531\5\u00e0q\2\u0531")
        buf.write("\u00e5\3\2\2\2\u0532\u0537\5\u00e8u\2\u0533\u0534\7\"")
        buf.write("\2\2\u0534\u0536\5\u00e8u\2\u0535\u0533\3\2\2\2\u0536")
        buf.write("\u0539\3\2\2\2\u0537\u0535\3\2\2\2\u0537\u0538\3\2\2\2")
        buf.write("\u0538\u00e7\3\2\2\2\u0539\u0537\3\2\2\2\u053a\u053f\5")
        buf.write("\u00eav\2\u053b\u053c\7\6\2\2\u053c\u053e\5\u00eav\2\u053d")
        buf.write("\u053b\3\2\2\2\u053e\u0541\3\2\2\2\u053f\u053d\3\2\2\2")
        buf.write("\u053f\u0540\3\2\2\2\u0540\u00e9\3\2\2\2\u0541\u053f\3")
        buf.write("\2\2\2\u0542\u0543\7!\2\2\u0543\u0546\5\u00eav\2\u0544")
        buf.write("\u0546\5\u00ecw\2\u0545\u0542\3\2\2\2\u0545\u0544\3\2")
        buf.write("\2\2\u0546\u00eb\3\2\2\2\u0547\u054d\5\u00f2z\2\u0548")
        buf.write("\u0549\5\u00eex\2\u0549\u054a\5\u00f2z\2\u054a\u054c\3")
        buf.write("\2\2\2\u054b\u0548\3\2\2\2\u054c\u054f\3\2\2\2\u054d\u054b")
        buf.write("\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u00ed\3\2\2\2\u054f")
        buf.write("\u054d\3\2\2\2\u0550\u055e\7R\2\2\u0551\u055e\7S\2\2\u0552")
        buf.write("\u055e\7T\2\2\u0553\u055e\7U\2\2\u0554\u055e\7V\2\2\u0555")
        buf.write("\u055e\7W\2\2\u0556\u055e\7X\2\2\u0557\u055e\7\33\2\2")
        buf.write("\u0558\u0559\7!\2\2\u0559\u055e\7\33\2\2\u055a\u055e\7")
        buf.write("\34\2\2\u055b\u055c\7\34\2\2\u055c\u055e\7!\2\2\u055d")
        buf.write("\u0550\3\2\2\2\u055d\u0551\3\2\2\2\u055d\u0552\3\2\2\2")
        buf.write("\u055d\u0553\3\2\2\2\u055d\u0554\3\2\2\2\u055d\u0555\3")
        buf.write("\2\2\2\u055d\u0556\3\2\2\2\u055d\u0557\3\2\2\2\u055d\u0558")
        buf.write("\3\2\2\2\u055d\u055a\3\2\2\2\u055d\u055b\3\2\2\2\u055e")
        buf.write("\u00ef\3\2\2\2\u055f\u0560\7;\2\2\u0560\u0561\5\u00f2")
        buf.write("z\2\u0561\u00f1\3\2\2\2\u0562\u0563\bz\1\2\u0563\u056c")
        buf.write("\5.\30\2\u0564\u056c\5\u00f4{\2\u0565\u0567\t\7\2\2\u0566")
        buf.write("\u0565\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0566\3\2\2\2")
        buf.write("\u0568\u0569\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056c\5")
        buf.write("\u00f2z\t\u056b\u0562\3\2\2\2\u056b\u0564\3\2\2\2\u056b")
        buf.write("\u0566\3\2\2\2\u056c\u0584\3\2\2\2\u056d\u056e\f\n\2\2")
        buf.write("\u056e\u056f\7A\2\2\u056f\u0583\5\u00f2z\13\u0570\u0571")
        buf.write("\f\b\2\2\u0571\u0572\t\b\2\2\u0572\u0583\5\u00f2z\t\u0573")
        buf.write("\u0574\f\7\2\2\u0574\u0575\t\t\2\2\u0575\u0583\5\u00f2")
        buf.write("z\b\u0576\u0577\f\6\2\2\u0577\u0578\t\n\2\2\u0578\u0583")
        buf.write("\5\u00f2z\7\u0579\u057a\f\5\2\2\u057a\u057b\7G\2\2\u057b")
        buf.write("\u0583\5\u00f2z\6\u057c\u057d\f\4\2\2\u057d\u057e\7F\2")
        buf.write("\2\u057e\u0583\5\u00f2z\5\u057f\u0580\f\3\2\2\u0580\u0581")
        buf.write("\7E\2\2\u0581\u0583\5\u00f2z\4\u0582\u056d\3\2\2\2\u0582")
        buf.write("\u0570\3\2\2\2\u0582\u0573\3\2\2\2\u0582\u0576\3\2\2\2")
        buf.write("\u0582\u0579\3\2\2\2\u0582\u057c\3\2\2\2\u0582\u057f\3")
        buf.write("\2\2\2\u0583\u0586\3\2\2\2\u0584\u0582\3\2\2\2\u0584\u0585")
        buf.write("\3\2\2\2\u0585\u00f3\3\2\2\2\u0586\u0584\3\2\2\2\u0587")
        buf.write("\u0589\7\n\2\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2")
        buf.write("\u0589\u058a\3\2\2\2\u058a\u058e\5\u00f6|\2\u058b\u058d")
        buf.write("\5\u00fc\177\2\u058c\u058b\3\2\2\2\u058d\u0590\3\2\2\2")
        buf.write("\u058e\u058c\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u00f5\3")
        buf.write("\2\2\2\u0590\u058e\3\2\2\2\u0591\u0594\7<\2\2\u0592\u0595")
        buf.write("\5\u0116\u008c\2\u0593\u0595\5\u00fa~\2\u0594\u0592\3")
        buf.write("\2\2\2\u0594\u0593\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0596")
        buf.write("\3\2\2\2\u0596\u05ad\7=\2\2\u0597\u0599\7C\2\2\u0598\u059a")
        buf.write("\5\u00fa~\2\u0599\u0598\3\2\2\2\u0599\u059a\3\2\2\2\u059a")
        buf.write("\u059b\3\2\2\2\u059b\u05ad\7D\2\2\u059c\u059e\7P\2\2\u059d")
        buf.write("\u059f\5\u0108\u0085\2\u059e\u059d\3\2\2\2\u059e\u059f")
        buf.write("\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05ad\7Q\2\2\u05a1")
        buf.write("\u05ad\5\u00f8}\2\u05a2\u05ad\7\4\2\2\u05a3\u05a5\7\3")
        buf.write("\2\2\u05a4\u05a3\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05a4")
        buf.write("\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05ad\3\2\2\2\u05a8")
        buf.write("\u05ad\7:\2\2\u05a9\u05ad\7\37\2\2\u05aa\u05ad\7&\2\2")
        buf.write("\u05ab\u05ad\7\24\2\2\u05ac\u0591\3\2\2\2\u05ac\u0597")
        buf.write("\3\2\2\2\u05ac\u059c\3\2\2\2\u05ac\u05a1\3\2\2\2\u05ac")
        buf.write("\u05a2\3\2\2\2\u05ac\u05a4\3\2\2\2\u05ac\u05a8\3\2\2\2")
        buf.write("\u05ac\u05a9\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ab\3")
        buf.write("\2\2\2\u05ad\u00f7\3\2\2\2\u05ae\u05af\t\13\2\2\u05af")
        buf.write("\u00f9\3\2\2\2\u05b0\u05b3\5\u00dep\2\u05b1\u05b3\5\u00f0")
        buf.write("y\2\u05b2\u05b0\3\2\2\2\u05b2\u05b1\3\2\2\2\u05b3\u05c2")
        buf.write("\3\2\2\2\u05b4\u05c3\5\u0112\u008a\2\u05b5\u05b8\7>\2")
        buf.write("\2\u05b6\u05b9\5\u00dep\2\u05b7\u05b9\5\u00f0y\2\u05b8")
        buf.write("\u05b6\3\2\2\2\u05b8\u05b7\3\2\2\2\u05b9\u05bb\3\2\2\2")
        buf.write("\u05ba\u05b5\3\2\2\2\u05bb\u05be\3\2\2\2\u05bc\u05ba\3")
        buf.write("\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05c0\3\2\2\2\u05be\u05bc")
        buf.write("\3\2\2\2\u05bf\u05c1\7>\2\2\u05c0\u05bf\3\2\2\2\u05c0")
        buf.write("\u05c1\3\2\2\2\u05c1\u05c3\3\2\2\2\u05c2\u05b4\3\2\2\2")
        buf.write("\u05c2\u05bc\3\2\2\2\u05c3\u00fb\3\2\2\2\u05c4\u05c6\7")
        buf.write("<\2\2\u05c5\u05c7\5\u010c\u0087\2\u05c6\u05c5\3\2\2\2")
        buf.write("\u05c6\u05c7\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05d0\7")
        buf.write("=\2\2\u05c9\u05ca\7C\2\2\u05ca\u05cb\5\u00fe\u0080\2\u05cb")
        buf.write("\u05cc\7D\2\2\u05cc\u05d0\3\2\2\2\u05cd\u05ce\79\2\2\u05ce")
        buf.write("\u05d0\5\u00f8}\2\u05cf\u05c4\3\2\2\2\u05cf\u05c9\3\2")
        buf.write("\2\2\u05cf\u05cd\3\2\2\2\u05d0\u00fd\3\2\2\2\u05d1\u05d6")
        buf.write("\5\u0100\u0081\2\u05d2\u05d3\7>\2\2\u05d3\u05d5\5\u0100")
        buf.write("\u0081\2\u05d4\u05d2\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6")
        buf.write("\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05da\3\2\2\2")
        buf.write("\u05d8\u05d6\3\2\2\2\u05d9\u05db\7>\2\2\u05da\u05d9\3")
        buf.write("\2\2\2\u05da\u05db\3\2\2\2\u05db\u00ff\3\2\2\2\u05dc\u05e8")
        buf.write("\5\u00dep\2\u05dd\u05df\5\u00dep\2\u05de\u05dd\3\2\2\2")
        buf.write("\u05de\u05df\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\7")
        buf.write("?\2\2\u05e1\u05e3\5\u00dep\2\u05e2\u05e1\3\2\2\2\u05e2")
        buf.write("\u05e3\3\2\2\2\u05e3\u05e5\3\2\2\2\u05e4\u05e6\5\u0102")
        buf.write("\u0082\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6")
        buf.write("\u05e8\3\2\2\2\u05e7\u05dc\3\2\2\2\u05e7\u05de\3\2\2\2")
        buf.write("\u05e8\u0101\3\2\2\2\u05e9\u05eb\7?\2\2\u05ea\u05ec\5")
        buf.write("\u00dep\2\u05eb\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec")
        buf.write("\u0103\3\2\2\2\u05ed\u05f0\5\u00f2z\2\u05ee\u05f0\5\u00f0")
        buf.write("y\2\u05ef\u05ed\3\2\2\2\u05ef\u05ee\3\2\2\2\u05f0\u05f8")
        buf.write("\3\2\2\2\u05f1\u05f4\7>\2\2\u05f2\u05f5\5\u00f2z\2\u05f3")
        buf.write("\u05f5\5\u00f0y\2\u05f4\u05f2\3\2\2\2\u05f4\u05f3\3\2")
        buf.write("\2\2\u05f5\u05f7\3\2\2\2\u05f6\u05f1\3\2\2\2\u05f7\u05fa")
        buf.write("\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9")
        buf.write("\u05fc\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fb\u05fd\7>\2\2")
        buf.write("\u05fc\u05fb\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u0105\3")
        buf.write("\2\2\2\u05fe\u0603\5\u00dep\2\u05ff\u0600\7>\2\2\u0600")
        buf.write("\u0602\5\u00dep\2\u0601\u05ff\3\2\2\2\u0602\u0605\3\2")
        buf.write("\2\2\u0603\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u0607")
        buf.write("\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u0608\7>\2\2\u0607")
        buf.write("\u0606\3\2\2\2\u0607\u0608\3\2\2\2\u0608\u0107\3\2\2\2")
        buf.write("\u0609\u060a\5\u00dep\2\u060a\u060b\7?\2\2\u060b\u060c")
        buf.write("\5\u00dep\2\u060c\u0610\3\2\2\2\u060d\u060e\7A\2\2\u060e")
        buf.write("\u0610\5\u00f2z\2\u060f\u0609\3\2\2\2\u060f\u060d\3\2")
        buf.write("\2\2\u0610\u0623\3\2\2\2\u0611\u0624\5\u0112\u008a\2\u0612")
        buf.write("\u0619\7>\2\2\u0613\u0614\5\u00dep\2\u0614\u0615\7?\2")
        buf.write("\2\u0615\u0616\5\u00dep\2\u0616\u061a\3\2\2\2\u0617\u0618")
        buf.write("\7A\2\2\u0618\u061a\5\u00f2z\2\u0619\u0613\3\2\2\2\u0619")
        buf.write("\u0617\3\2\2\2\u061a\u061c\3\2\2\2\u061b\u0612\3\2\2\2")
        buf.write("\u061c\u061f\3\2\2\2\u061d\u061b\3\2\2\2\u061d\u061e\3")
        buf.write("\2\2\2\u061e\u0621\3\2\2\2\u061f\u061d\3\2\2\2\u0620\u0622")
        buf.write("\7>\2\2\u0621\u0620\3\2\2\2\u0621\u0622\3\2\2\2\u0622")
        buf.write("\u0624\3\2\2\2\u0623\u0611\3\2\2\2\u0623\u061d\3\2\2\2")
        buf.write("\u0624\u063a\3\2\2\2\u0625\u0628\5\u00dep\2\u0626\u0628")
        buf.write("\5\u00f0y\2\u0627\u0625\3\2\2\2\u0627\u0626\3\2\2\2\u0628")
        buf.write("\u0637\3\2\2\2\u0629\u0638\5\u0112\u008a\2\u062a\u062d")
        buf.write("\7>\2\2\u062b\u062e\5\u00dep\2\u062c\u062e\5\u00f0y\2")
        buf.write("\u062d\u062b\3\2\2\2\u062d\u062c\3\2\2\2\u062e\u0630\3")
        buf.write("\2\2\2\u062f\u062a\3\2\2\2\u0630\u0633\3\2\2\2\u0631\u062f")
        buf.write("\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0635\3\2\2\2\u0633")
        buf.write("\u0631\3\2\2\2\u0634\u0636\7>\2\2\u0635\u0634\3\2\2\2")
        buf.write("\u0635\u0636\3\2\2\2\u0636\u0638\3\2\2\2\u0637\u0629\3")
        buf.write("\2\2\2\u0637\u0631\3\2\2\2\u0638\u063a\3\2\2\2\u0639\u060f")
        buf.write("\3\2\2\2\u0639\u0627\3\2\2\2\u063a\u0109\3\2\2\2\u063b")
        buf.write("\u063c\7\r\2\2\u063c\u0642\5\u00f8}\2\u063d\u063f\7<\2")
        buf.write("\2\u063e\u0640\5\u010c\u0087\2\u063f\u063e\3\2\2\2\u063f")
        buf.write("\u0640\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0643\7=\2\2")
        buf.write("\u0642\u063d\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0644\3")
        buf.write("\2\2\2\u0644\u0645\7?\2\2\u0645\u0646\5\u0090I\2\u0646")
        buf.write("\u010b\3\2\2\2\u0647\u064c\5\u010e\u0088\2\u0648\u0649")
        buf.write("\7>\2\2\u0649\u064b\5\u010e\u0088\2\u064a\u0648\3\2\2")
        buf.write("\2\u064b\u064e\3\2\2\2\u064c\u064a\3\2\2\2\u064c\u064d")
        buf.write("\3\2\2\2\u064d\u0650\3\2\2\2\u064e\u064c\3\2\2\2\u064f")
        buf.write("\u0651\7>\2\2\u0650\u064f\3\2\2\2\u0650\u0651\3\2\2\2")
        buf.write("\u0651\u010d\3\2\2\2\u0652\u0654\5\u00dep\2\u0653\u0655")
        buf.write("\5\u0112\u008a\2\u0654\u0653\3\2\2\2\u0654\u0655\3\2\2")
        buf.write("\2\u0655\u065f\3\2\2\2\u0656\u0657\5\u00dep\2\u0657\u0658")
        buf.write("\7B\2\2\u0658\u0659\5\u00dep\2\u0659\u065f\3\2\2\2\u065a")
        buf.write("\u065b\7A\2\2\u065b\u065f\5\u00dep\2\u065c\u065d\7;\2")
        buf.write("\2\u065d\u065f\5\u00dep\2\u065e\u0652\3\2\2\2\u065e\u0656")
        buf.write("\3\2\2\2\u065e\u065a\3\2\2\2\u065e\u065c\3\2\2\2\u065f")
        buf.write("\u010f\3\2\2\2\u0660\u0663\5\u0112\u008a\2\u0661\u0663")
        buf.write("\5\u0114\u008b\2\u0662\u0660\3\2\2\2\u0662\u0661\3\2\2")
        buf.write("\2\u0663\u0111\3\2\2\2\u0664\u0666\7\t\2\2\u0665\u0664")
        buf.write("\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0667\3\2\2\2\u0667")
        buf.write("\u0668\7\26\2\2\u0668\u0669\5\u0104\u0083\2\u0669\u066a")
        buf.write("\7\33\2\2\u066a\u066c\5\u00e6t\2\u066b\u066d\5\u0110\u0089")
        buf.write("\2\u066c\u066b\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u0113")
        buf.write("\3\2\2\2\u066e\u066f\7\31\2\2\u066f\u0671\5\u00e0q\2\u0670")
        buf.write("\u0672\5\u0110\u0089\2\u0671\u0670\3\2\2\2\u0671\u0672")
        buf.write("\3\2\2\2\u0672\u0115\3\2\2\2\u0673\u0675\7+\2\2\u0674")
        buf.write("\u0676\5\u0118\u008d\2\u0675\u0674\3\2\2\2\u0675\u0676")
        buf.write("\3\2\2\2\u0676\u0117\3\2\2\2\u0677\u0678\7\27\2\2\u0678")
        buf.write("\u067b\5\u00dep\2\u0679\u067b\5\u0106\u0084\2\u067a\u0677")
        buf.write("\3\2\2\2\u067a\u0679\3\2\2\2\u067b\u0119\3\2\2\2\u067c")
        buf.write("\u067e\7\3\2\2\u067d\u067c\3\2\2\2\u067e\u067f\3\2\2\2")
        buf.write("\u067f\u067d\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u011b\3")
        buf.write("\2\2\2\u00e3\u011e\u0123\u012a\u012f\u0135\u013c\u0145")
        buf.write("\u014c\u0154\u0164\u016b\u0175\u017a\u017f\u018e\u019f")
        buf.write("\u01a6\u01ae\u01b6\u01bd\u01c2\u01c9\u01d5\u01db\u01e1")
        buf.write("\u01e6\u01eb\u01f0\u01f9\u01fc\u0203\u0209\u0213\u021a")
        buf.write("\u0221\u0227\u022b\u0231\u0237\u023b\u0242\u0244\u0246")
        buf.write("\u024b\u024d\u024f\u0253\u0259\u025d\u0264\u0266\u0268")
        buf.write("\u026d\u026f\u0274\u0279\u027f\u0283\u0289\u028f\u0293")
        buf.write("\u029a\u029c\u029e\u02a3\u02a5\u02a7\u02ab\u02b1\u02b5")
        buf.write("\u02bc\u02be\u02c0\u02c5\u02c7\u02cd\u02d4\u02d8\u02e4")
        buf.write("\u02eb\u02f0\u02f4\u02f7\u02fd\u0301\u0306\u030a\u030e")
        buf.write("\u031c\u0324\u032c\u032e\u0332\u033b\u0342\u0344\u034d")
        buf.write("\u0352\u0357\u035e\u0362\u0369\u0371\u037a\u0383\u038a")
        buf.write("\u0396\u039c\u03a9\u03af\u03b8\u03c3\u03ce\u03d3\u03d8")
        buf.write("\u03dd\u03e5\u03ee\u03f4\u03f6\u03fd\u03ff\u0408\u040d")
        buf.write("\u0410\u0416\u0419\u041e\u0423\u042d\u0431\u043c\u0447")
        buf.write("\u0451\u045b\u0465\u046a\u046f\u0484\u0488\u0490\u0495")
        buf.write("\u0498\u049d\u04a4\u04a8\u04ac\u04b2\u04b9\u04c2\u04c9")
        buf.write("\u04cd\u04d4\u04d9\u04e9\u04f1\u04fb\u04ff\u0506\u050e")
        buf.write("\u051b\u051e\u0522\u0526\u052d\u0537\u053f\u0545\u054d")
        buf.write("\u055d\u0568\u056b\u0582\u0584\u0588\u058e\u0594\u0599")
        buf.write("\u059e\u05a6\u05ac\u05b2\u05b8\u05bc\u05c0\u05c2\u05c6")
        buf.write("\u05cf\u05d6\u05da\u05de\u05e2\u05e5\u05e7\u05eb\u05ef")
        buf.write("\u05f4\u05f8\u05fc\u0603\u0607\u060f\u0619\u061d\u0621")
        buf.write("\u0623\u0627\u062d\u0631\u0635\u0637\u0639\u063f\u0642")
        buf.write("\u064c\u0650\u0654\u065e\u0662\u0665\u066c\u0671\u0675")
        buf.write("\u067a\u067f")
        return buf.getvalue()


class FandangoParser ( Parser ):

    grammarFileName = "FandangoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'and'", "'as'", "'assert'", "'async'", "'await'", 
                     "'break'", "'case'", "'class'", "'continue'", "'def'", 
                     "'del'", "'elif'", "'else'", "'except'", "'False'", 
                     "'finally'", "'for'", "'from'", "'global'", "'if'", 
                     "'import'", "'in'", "'is'", "'lambda'", "'match'", 
                     "'None'", "'nonlocal'", "'not'", "'or'", "'pass'", 
                     "'raise'", "'return'", "'True'", "'try'", "'_'", "'while'", 
                     "'with'", "'yield'", "'forall'", "'exists'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?'", "'\\'", "'.'", "'...'", "'*'", "'('", "')'", 
                     "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", 
                     "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", 
                     "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", 
                     "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                     "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//='", "'<py>'", 
                     "'</py>'" ]

    symbolicNames = [ "<INVALID>", "STRING", "NUMBER", "INTEGER", "AND", 
                      "AS", "ASSERT", "ASYNC", "AWAIT", "BREAK", "CASE", 
                      "CLASS", "CONTINUE", "DEF", "DEL", "ELIF", "ELSE", 
                      "EXCEPT", "FALSE", "FINALLY", "FOR", "FROM", "GLOBAL", 
                      "IF", "IMPORT", "IN", "IS", "LAMBDA", "MATCH", "NONE", 
                      "NONLOCAL", "NOT", "OR", "PASS", "RAISE", "RETURN", 
                      "TRUE", "TRY", "UNDERSCORE", "WHILE", "WITH", "YIELD", 
                      "FORALL", "EXISTS", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "FLOAT_NUMBER", "IMAG_NUMBER", "QUESTION", "BACKSLASH", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "PYTHON_START", "PYTHON_END", "SKIP_", 
                      "NEWLINE" ]

    RULE_fandango = 0
    RULE_program = 1
    RULE_statement = 2
    RULE_production = 3
    RULE_alternatives = 4
    RULE_alternative = 5
    RULE_operator = 6
    RULE_kleene = 7
    RULE_plus = 8
    RULE_option = 9
    RULE_repeat = 10
    RULE_symbol = 11
    RULE_char_set = 12
    RULE_rule_name = 13
    RULE_constraint = 14
    RULE_implies = 15
    RULE_quantifier = 16
    RULE_disjunction = 17
    RULE_conjunction = 18
    RULE_formula_atom = 19
    RULE_formula_comparison = 20
    RULE_expression = 21
    RULE_selector = 22
    RULE_selection = 23
    RULE_python = 24
    RULE_python_tag = 25
    RULE_decorator = 26
    RULE_decorators = 27
    RULE_decorated = 28
    RULE_async_funcdef = 29
    RULE_funcdef = 30
    RULE_parameters = 31
    RULE_typedargslist = 32
    RULE_tfpdef = 33
    RULE_varargslist = 34
    RULE_vfpdef = 35
    RULE_stmt = 36
    RULE_simple_stmts = 37
    RULE_simple_stmt = 38
    RULE_expr_stmt = 39
    RULE_annassign = 40
    RULE_testlist_star_expr = 41
    RULE_augassign = 42
    RULE_del_stmt = 43
    RULE_pass_stmt = 44
    RULE_flow_stmt = 45
    RULE_break_stmt = 46
    RULE_continue_stmt = 47
    RULE_return_stmt = 48
    RULE_yield_stmt = 49
    RULE_raise_stmt = 50
    RULE_import_stmt = 51
    RULE_import_name = 52
    RULE_import_from = 53
    RULE_import_as_name = 54
    RULE_dotted_as_name = 55
    RULE_import_as_names = 56
    RULE_dotted_as_names = 57
    RULE_dotted_name = 58
    RULE_global_stmt = 59
    RULE_nonlocal_stmt = 60
    RULE_assert_stmt = 61
    RULE_compound_stmt = 62
    RULE_async_stmt = 63
    RULE_if_stmt = 64
    RULE_while_stmt = 65
    RULE_for_stmt = 66
    RULE_try_stmt = 67
    RULE_with_stmt = 68
    RULE_with_item = 69
    RULE_except_clause = 70
    RULE_block = 71
    RULE_match_stmt = 72
    RULE_subject_expr = 73
    RULE_star_named_expressions = 74
    RULE_star_named_expression = 75
    RULE_case_block = 76
    RULE_guard = 77
    RULE_patterns = 78
    RULE_pattern = 79
    RULE_as_pattern = 80
    RULE_or_pattern = 81
    RULE_closed_pattern = 82
    RULE_literal_pattern = 83
    RULE_literal_expr = 84
    RULE_complex_number = 85
    RULE_signed_number = 86
    RULE_signed_real_number = 87
    RULE_real_number = 88
    RULE_imaginary_number = 89
    RULE_capture_pattern = 90
    RULE_pattern_capture_target = 91
    RULE_wildcard_pattern = 92
    RULE_value_pattern = 93
    RULE_attr = 94
    RULE_name_or_attr = 95
    RULE_group_pattern = 96
    RULE_sequence_pattern = 97
    RULE_open_sequence_pattern = 98
    RULE_maybe_sequence_pattern = 99
    RULE_maybe_star_pattern = 100
    RULE_star_pattern = 101
    RULE_mapping_pattern = 102
    RULE_items_pattern = 103
    RULE_key_value_pattern = 104
    RULE_double_star_pattern = 105
    RULE_class_pattern = 106
    RULE_positional_patterns = 107
    RULE_keyword_patterns = 108
    RULE_keyword_pattern = 109
    RULE_test = 110
    RULE_test_nocond = 111
    RULE_lambdef = 112
    RULE_lambdef_nocond = 113
    RULE_or_test = 114
    RULE_and_test = 115
    RULE_not_test = 116
    RULE_comparison = 117
    RULE_comp_op = 118
    RULE_star_expr = 119
    RULE_expr = 120
    RULE_atom_expr = 121
    RULE_atom = 122
    RULE_name = 123
    RULE_testlist_comp = 124
    RULE_trailer = 125
    RULE_subscriptlist = 126
    RULE_subscript_ = 127
    RULE_sliceop = 128
    RULE_exprlist = 129
    RULE_testlist = 130
    RULE_dictorsetmaker = 131
    RULE_classdef = 132
    RULE_arglist = 133
    RULE_argument = 134
    RULE_comp_iter = 135
    RULE_comp_for = 136
    RULE_comp_if = 137
    RULE_yield_expr = 138
    RULE_yield_arg = 139
    RULE_strings = 140

    ruleNames =  [ "fandango", "program", "statement", "production", "alternatives", 
                   "alternative", "operator", "kleene", "plus", "option", 
                   "repeat", "symbol", "char_set", "rule_name", "constraint", 
                   "implies", "quantifier", "disjunction", "conjunction", 
                   "formula_atom", "formula_comparison", "expression", "selector", 
                   "selection", "python", "python_tag", "decorator", "decorators", 
                   "decorated", "async_funcdef", "funcdef", "parameters", 
                   "typedargslist", "tfpdef", "varargslist", "vfpdef", "stmt", 
                   "simple_stmts", "simple_stmt", "expr_stmt", "annassign", 
                   "testlist_star_expr", "augassign", "del_stmt", "pass_stmt", 
                   "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", 
                   "yield_stmt", "raise_stmt", "import_stmt", "import_name", 
                   "import_from", "import_as_name", "dotted_as_name", "import_as_names", 
                   "dotted_as_names", "dotted_name", "global_stmt", "nonlocal_stmt", 
                   "assert_stmt", "compound_stmt", "async_stmt", "if_stmt", 
                   "while_stmt", "for_stmt", "try_stmt", "with_stmt", "with_item", 
                   "except_clause", "block", "match_stmt", "subject_expr", 
                   "star_named_expressions", "star_named_expression", "case_block", 
                   "guard", "patterns", "pattern", "as_pattern", "or_pattern", 
                   "closed_pattern", "literal_pattern", "literal_expr", 
                   "complex_number", "signed_number", "signed_real_number", 
                   "real_number", "imaginary_number", "capture_pattern", 
                   "pattern_capture_target", "wildcard_pattern", "value_pattern", 
                   "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
                   "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
                   "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "atom_expr", 
                   "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
                   "subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "yield_expr", "yield_arg", "strings" ]

    EOF = Token.EOF
    STRING=1
    NUMBER=2
    INTEGER=3
    AND=4
    AS=5
    ASSERT=6
    ASYNC=7
    AWAIT=8
    BREAK=9
    CASE=10
    CLASS=11
    CONTINUE=12
    DEF=13
    DEL=14
    ELIF=15
    ELSE=16
    EXCEPT=17
    FALSE=18
    FINALLY=19
    FOR=20
    FROM=21
    GLOBAL=22
    IF=23
    IMPORT=24
    IN=25
    IS=26
    LAMBDA=27
    MATCH=28
    NONE=29
    NONLOCAL=30
    NOT=31
    OR=32
    PASS=33
    RAISE=34
    RETURN=35
    TRUE=36
    TRY=37
    UNDERSCORE=38
    WHILE=39
    WITH=40
    YIELD=41
    FORALL=42
    EXISTS=43
    NAME=44
    STRING_LITERAL=45
    BYTES_LITERAL=46
    DECIMAL_INTEGER=47
    OCT_INTEGER=48
    HEX_INTEGER=49
    BIN_INTEGER=50
    FLOAT_NUMBER=51
    IMAG_NUMBER=52
    QUESTION=53
    BACKSLASH=54
    DOT=55
    ELLIPSIS=56
    STAR=57
    OPEN_PAREN=58
    CLOSE_PAREN=59
    COMMA=60
    COLON=61
    SEMI_COLON=62
    POWER=63
    ASSIGN=64
    OPEN_BRACK=65
    CLOSE_BRACK=66
    OR_OP=67
    XOR=68
    AND_OP=69
    LEFT_SHIFT=70
    RIGHT_SHIFT=71
    ADD=72
    MINUS=73
    DIV=74
    MOD=75
    IDIV=76
    NOT_OP=77
    OPEN_BRACE=78
    CLOSE_BRACE=79
    LESS_THAN=80
    GREATER_THAN=81
    EQUALS=82
    GT_EQ=83
    LT_EQ=84
    NOT_EQ_1=85
    NOT_EQ_2=86
    AT=87
    ARROW=88
    ADD_ASSIGN=89
    SUB_ASSIGN=90
    MULT_ASSIGN=91
    AT_ASSIGN=92
    DIV_ASSIGN=93
    MOD_ASSIGN=94
    AND_ASSIGN=95
    OR_ASSIGN=96
    XOR_ASSIGN=97
    LEFT_SHIFT_ASSIGN=98
    RIGHT_SHIFT_ASSIGN=99
    POWER_ASSIGN=100
    IDIV_ASSIGN=101
    PYTHON_START=102
    PYTHON_END=103
    SKIP_=104
    NEWLINE=105

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FandangoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program(self):
            return self.getTypedRuleContext(FandangoParser.ProgramContext,0)


        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fandango

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFandango" ):
                listener.enterFandango(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFandango" ):
                listener.exitFandango(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFandango" ):
                return visitor.visitFandango(self)
            else:
                return visitor.visitChildren(self)




    def fandango(self):

        localctx = FandangoParser.FandangoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fandango)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.program()
            self.state = 284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 283
                self.match(FandangoParser.EOF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StatementContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StatementContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = FandangoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.NEWLINE:
                self.state = 286
                self.match(FandangoParser.NEWLINE)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)) | (1 << (FandangoParser.AT - 65)) | (1 << (FandangoParser.PYTHON_START - 65)))) != 0):
                self.state = 292
                self.statement()
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FandangoParser.NEWLINE:
                    self.state = 293
                    self.match(FandangoParser.NEWLINE)
                    self.state = 298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def production(self):
            return self.getTypedRuleContext(FandangoParser.ProductionContext,0)


        def constraint(self):
            return self.getTypedRuleContext(FandangoParser.ConstraintContext,0)


        def python(self):
            return self.getTypedRuleContext(FandangoParser.PythonContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = FandangoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.production()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.python()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProductionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_name(self):
            return self.getTypedRuleContext(FandangoParser.Rule_nameContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def alternatives(self):
            return self.getTypedRuleContext(FandangoParser.AlternativesContext,0)


        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_production

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduction" ):
                listener.enterProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduction" ):
                listener.exitProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProduction" ):
                return visitor.visitProduction(self)
            else:
                return visitor.visitChildren(self)




    def production(self):

        localctx = FandangoParser.ProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_production)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.rule_name()
            self.state = 310
            self.match(FandangoParser.COLON)
            self.state = 311
            self.alternatives()
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COLON:
                self.state = 312
                self.match(FandangoParser.COLON)
                self.state = 313
                self.match(FandangoParser.NAME)


            self.state = 316
            self.match(FandangoParser.SEMI_COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternativesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.AlternativeContext)
            else:
                return self.getTypedRuleContext(FandangoParser.AlternativeContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_alternatives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternatives" ):
                listener.enterAlternatives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternatives" ):
                listener.exitAlternatives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlternatives" ):
                return visitor.visitAlternatives(self)
            else:
                return visitor.visitChildren(self)




    def alternatives(self):

        localctx = FandangoParser.AlternativesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alternatives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.alternative()
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.OR_OP:
                self.state = 319
                self.match(FandangoParser.OR_OP)
                self.state = 320
                self.alternative()
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.OperatorContext)
            else:
                return self.getTypedRuleContext(FandangoParser.OperatorContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_alternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternative" ):
                listener.enterAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternative" ):
                listener.exitAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlternative" ):
                return visitor.visitAlternative(self)
            else:
                return visitor.visitChildren(self)




    def alternative(self):

        localctx = FandangoParser.AlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.operator()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NAME) | (1 << FandangoParser.OPEN_PAREN))) != 0) or _la==FandangoParser.OPEN_BRACK or _la==FandangoParser.NEWLINE:
                self.state = 327
                self.operator()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext,0)


        def kleene(self):
            return self.getTypedRuleContext(FandangoParser.KleeneContext,0)


        def plus(self):
            return self.getTypedRuleContext(FandangoParser.PlusContext,0)


        def option(self):
            return self.getTypedRuleContext(FandangoParser.OptionContext,0)


        def repeat(self):
            return self.getTypedRuleContext(FandangoParser.RepeatContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator" ):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)




    def operator(self):

        localctx = FandangoParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_operator)
        try:
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.kleene()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                self.plus()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 336
                self.option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 337
                self.repeat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KleeneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext,0)


        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kleene

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKleene" ):
                listener.enterKleene(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKleene" ):
                listener.exitKleene(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKleene" ):
                return visitor.visitKleene(self)
            else:
                return visitor.visitChildren(self)




    def kleene(self):

        localctx = FandangoParser.KleeneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_kleene)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.symbol()
            self.state = 341
            self.match(FandangoParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext,0)


        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_plus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlus" ):
                listener.enterPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlus" ):
                listener.exitPlus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlus" ):
                return visitor.visitPlus(self)
            else:
                return visitor.visitChildren(self)




    def plus(self):

        localctx = FandangoParser.PlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_plus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.symbol()
            self.state = 344
            self.match(FandangoParser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext,0)


        def QUESTION(self):
            return self.getToken(FandangoParser.QUESTION, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = FandangoParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.symbol()
            self.state = 347
            self.match(FandangoParser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext,0)


        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.NUMBER)
            else:
                return self.getToken(FandangoParser.NUMBER, i)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_repeat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat" ):
                listener.enterRepeat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat" ):
                listener.exitRepeat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeat" ):
                return visitor.visitRepeat(self)
            else:
                return visitor.visitChildren(self)




    def repeat(self):

        localctx = FandangoParser.RepeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_repeat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.symbol()
            self.state = 350
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 351
            self.match(FandangoParser.NUMBER)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 352
                self.match(FandangoParser.COMMA)
                self.state = 353
                self.match(FandangoParser.NUMBER)


            self.state = 356
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def alternatives(self):
            return self.getTypedRuleContext(FandangoParser.AlternativesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def char_set(self):
            return self.getTypedRuleContext(FandangoParser.Char_setContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = FandangoParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.NEWLINE:
                self.state = 358
                self.match(FandangoParser.NEWLINE)
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.NAME]:
                self.state = 364
                self.match(FandangoParser.NAME)
                pass
            elif token in [FandangoParser.STRING]:
                self.state = 365
                self.match(FandangoParser.STRING)
                pass
            elif token in [FandangoParser.OPEN_PAREN]:
                self.state = 366
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 367
                self.alternatives()
                self.state = 368
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [FandangoParser.OPEN_BRACK]:
                self.state = 370
                self.char_set()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 373
                    self.match(FandangoParser.NEWLINE) 
                self.state = 378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_char_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_set" ):
                listener.enterChar_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_set" ):
                listener.exitChar_set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChar_set" ):
                return visitor.visitChar_set(self)
            else:
                return visitor.visitChildren(self)




    def char_set(self):

        localctx = FandangoParser.Char_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_char_set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.XOR:
                self.state = 380
                self.match(FandangoParser.XOR)


            self.state = 383
            self.match(FandangoParser.STRING)
            self.state = 384
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def AND(self):
            return self.getToken(FandangoParser.AND, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def ASSERT(self):
            return self.getToken(FandangoParser.ASSERT, 0)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(FandangoParser.AWAIT, 0)

        def BREAK(self):
            return self.getToken(FandangoParser.BREAK, 0)

        def CASE(self):
            return self.getToken(FandangoParser.CASE, 0)

        def CLASS(self):
            return self.getToken(FandangoParser.CLASS, 0)

        def CONTINUE(self):
            return self.getToken(FandangoParser.CONTINUE, 0)

        def DEF(self):
            return self.getToken(FandangoParser.DEF, 0)

        def DEL(self):
            return self.getToken(FandangoParser.DEL, 0)

        def ELIF(self):
            return self.getToken(FandangoParser.ELIF, 0)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def EXCEPT(self):
            return self.getToken(FandangoParser.EXCEPT, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(FandangoParser.FINALLY, 0)

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(FandangoParser.GLOBAL, 0)

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def IS(self):
            return self.getToken(FandangoParser.IS, 0)

        def LAMBDA(self):
            return self.getToken(FandangoParser.LAMBDA, 0)

        def MATCH(self):
            return self.getToken(FandangoParser.MATCH, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def NONLOCAL(self):
            return self.getToken(FandangoParser.NONLOCAL, 0)

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def OR(self):
            return self.getToken(FandangoParser.OR, 0)

        def PASS(self):
            return self.getToken(FandangoParser.PASS, 0)

        def RAISE(self):
            return self.getToken(FandangoParser.RAISE, 0)

        def RETURN(self):
            return self.getToken(FandangoParser.RETURN, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def TRY(self):
            return self.getToken(FandangoParser.TRY, 0)

        def WHILE(self):
            return self.getToken(FandangoParser.WHILE, 0)

        def WITH(self):
            return self.getToken(FandangoParser.WITH, 0)

        def YIELD(self):
            return self.getToken(FandangoParser.YIELD, 0)

        def FORALL(self):
            return self.getToken(FandangoParser.FORALL, 0)

        def EXISTS(self):
            return self.getToken(FandangoParser.EXISTS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_rule_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_name" ):
                listener.enterRule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_name" ):
                listener.exitRule_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_name" ):
                return visitor.visitRule_name(self)
            else:
                return visitor.visitChildren(self)




    def rule_name(self):

        localctx = FandangoParser.Rule_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_rule_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext,0)


        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint" ):
                listener.enterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint" ):
                listener.exitConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint" ):
                return visitor.visitConstraint(self)
            else:
                return visitor.visitChildren(self)




    def constraint(self):

        localctx = FandangoParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.implies()
            self.state = 389
            _la = self._input.LA(1)
            if not(_la==FandangoParser.EOF or _la==FandangoParser.NEWLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImpliesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext,0)


        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_implies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplies" ):
                listener.enterImplies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplies" ):
                listener.exitImplies(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplies" ):
                return visitor.visitImplies(self)
            else:
                return visitor.visitChildren(self)




    def implies(self):

        localctx = FandangoParser.ImpliesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_implies)
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.quantifier()
                self.state = 392
                self.match(FandangoParser.ARROW)
                self.state = 393
                self.implies()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.quantifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(FandangoParser.FORALL, 0)

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext,0)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext,0)


        def EXISTS(self):
            return self.getToken(FandangoParser.EXISTS, 0)

        def disjunction(self):
            return self.getTypedRuleContext(FandangoParser.DisjunctionContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifier" ):
                return visitor.visitQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def quantifier(self):

        localctx = FandangoParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_quantifier)
        try:
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 398
                self.match(FandangoParser.FORALL)
                self.state = 399
                self.match(FandangoParser.NAME)
                self.state = 400
                self.match(FandangoParser.IN)
                self.state = 401
                self.selector()
                self.state = 402
                self.match(FandangoParser.COLON)
                self.state = 403
                self.quantifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 405
                self.match(FandangoParser.EXISTS)
                self.state = 406
                self.match(FandangoParser.NAME)
                self.state = 407
                self.match(FandangoParser.IN)
                self.state = 408
                self.selector()
                self.state = 409
                self.match(FandangoParser.COLON)
                self.state = 410
                self.quantifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 412
                self.disjunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ConjunctionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = FandangoParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.conjunction()
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.OR:
                self.state = 416
                self.match(FandangoParser.OR)
                self.state = 417
                self.conjunction()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Formula_atomContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Formula_atomContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = FandangoParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.formula_atom()
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.AND:
                self.state = 424
                self.match(FandangoParser.AND)
                self.state = 425
                self.formula_atom()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formula_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_comparison(self):
            return self.getTypedRuleContext(FandangoParser.Formula_comparisonContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormula_atom" ):
                listener.enterFormula_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormula_atom" ):
                listener.exitFormula_atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormula_atom" ):
                return visitor.visitFormula_atom(self)
            else:
                return visitor.visitChildren(self)




    def formula_atom(self):

        localctx = FandangoParser.Formula_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_formula_atom)
        try:
            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.formula_comparison()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 433
                self.implies()
                self.state = 434
                self.match(FandangoParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formula_comparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext,i)


        def LESS_THAN(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.LESS_THAN)
            else:
                return self.getToken(FandangoParser.LESS_THAN, i)

        def GREATER_THAN(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.GREATER_THAN)
            else:
                return self.getToken(FandangoParser.GREATER_THAN, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.EQUALS)
            else:
                return self.getToken(FandangoParser.EQUALS, i)

        def GT_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.GT_EQ)
            else:
                return self.getToken(FandangoParser.GT_EQ, i)

        def LT_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.LT_EQ)
            else:
                return self.getToken(FandangoParser.LT_EQ, i)

        def NOT_EQ_1(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_EQ_1)
            else:
                return self.getToken(FandangoParser.NOT_EQ_1, i)

        def NOT_EQ_2(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_EQ_2)
            else:
                return self.getToken(FandangoParser.NOT_EQ_2, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormula_comparison" ):
                listener.enterFormula_comparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormula_comparison" ):
                listener.exitFormula_comparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormula_comparison" ):
                return visitor.visitFormula_comparison(self)
            else:
                return visitor.visitChildren(self)




    def formula_comparison(self):

        localctx = FandangoParser.Formula_comparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_formula_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.expression()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (FandangoParser.LESS_THAN - 80)) | (1 << (FandangoParser.GREATER_THAN - 80)) | (1 << (FandangoParser.EQUALS - 80)) | (1 << (FandangoParser.GT_EQ - 80)) | (1 << (FandangoParser.LT_EQ - 80)) | (1 << (FandangoParser.NOT_EQ_1 - 80)) | (1 << (FandangoParser.NOT_EQ_2 - 80)))) != 0):
                self.state = 439
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (FandangoParser.LESS_THAN - 80)) | (1 << (FandangoParser.GREATER_THAN - 80)) | (1 << (FandangoParser.EQUALS - 80)) | (1 << (FandangoParser.GT_EQ - 80)) | (1 << (FandangoParser.LT_EQ - 80)) | (1 << (FandangoParser.NOT_EQ_1 - 80)) | (1 << (FandangoParser.NOT_EQ_2 - 80)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 440
                self.expression()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext,0)


        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = FandangoParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expression)
        try:
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.selector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.SelectionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.SelectionContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector" ):
                listener.enterSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector" ):
                listener.exitSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelector" ):
                return visitor.visitSelector(self)
            else:
                return visitor.visitChildren(self)




    def selector(self):

        localctx = FandangoParser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_selector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.selection()
            self.state = 455
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 451
                    self.match(FandangoParser.DOT)
                    self.state = 452
                    self.selection() 
                self.state = 457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_name(self):
            return self.getTypedRuleContext(FandangoParser.Rule_nameContext,0)


        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FandangoParser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelection" ):
                return visitor.visitSelection(self)
            else:
                return visitor.visitChildren(self)




    def selection(self):

        localctx = FandangoParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.rule_name()
            self.state = 467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 459
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 460
                self.subscriptlist()
                self.state = 461
                self.match(FandangoParser.CLOSE_BRACK)

            elif la_ == 2:
                self.state = 463
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 464
                self.subscriptlist()
                self.state = 465
                self.match(FandangoParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PythonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def python_tag(self):
            return self.getTypedRuleContext(FandangoParser.Python_tagContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_python

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython" ):
                listener.enterPython(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython" ):
                listener.exitPython(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPython" ):
                return visitor.visitPython(self)
            else:
                return visitor.visitChildren(self)




    def python(self):

        localctx = FandangoParser.PythonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_python)
        self._la = 0 # Token type
        try:
            self.state = 473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.PYTHON_START]:
                self.enterOuterAlt(localctx, 1)
                self.state = 469
                self.python_tag()
                pass
            elif token in [FandangoParser.ASYNC, FandangoParser.CLASS, FandangoParser.DEF, FandangoParser.FOR, FandangoParser.IF, FandangoParser.MATCH, FandangoParser.TRY, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 470
                self.compound_stmt()
                self.state = 471
                _la = self._input.LA(1)
                if not(_la==FandangoParser.EOF or _la==FandangoParser.NEWLINE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Python_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTHON_START(self):
            return self.getToken(FandangoParser.PYTHON_START, 0)

        def PYTHON_END(self):
            return self.getToken(FandangoParser.PYTHON_END, 0)

        def simple_stmts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Simple_stmtsContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext,i)


        def compound_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Compound_stmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Compound_stmtContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_python_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_tag" ):
                listener.enterPython_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_tag" ):
                listener.exitPython_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPython_tag" ):
                return visitor.visitPython_tag(self)
            else:
                return visitor.visitChildren(self)




    def python_tag(self):

        localctx = FandangoParser.Python_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_python_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(FandangoParser.PYTHON_START)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)) | (1 << (FandangoParser.AT - 65)) | (1 << (FandangoParser.NEWLINE - 65)))) != 0):
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FandangoParser.NEWLINE:
                    self.state = 476
                    self.match(FandangoParser.NEWLINE)
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 482
                    self.simple_stmts()
                    pass

                elif la_ == 2:
                    self.state = 483
                    self.compound_stmt()
                    pass


                self.state = 489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 486
                        self.match(FandangoParser.NEWLINE) 
                    self.state = 491
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self.match(FandangoParser.PYTHON_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FandangoParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FandangoParser.ArglistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FandangoParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(FandangoParser.AT)
            self.state = 500
            self.dotted_name()
            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.OPEN_PAREN:
                self.state = 501
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN) | (1 << FandangoParser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 502
                    self.arglist()


                self.state = 505
                self.match(FandangoParser.CLOSE_PAREN)


            self.state = 508
            self.match(FandangoParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FandangoParser.DecoratorContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = FandangoParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 510
                self.decorator()
                self.state = 513 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FandangoParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(FandangoParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(FandangoParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(FandangoParser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = FandangoParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.decorators()
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.CLASS]:
                self.state = 516
                self.classdef()
                pass
            elif token in [FandangoParser.DEF]:
                self.state = 517
                self.funcdef()
                pass
            elif token in [FandangoParser.ASYNC]:
                self.state = 518
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = FandangoParser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(FandangoParser.ASYNC)
            self.state = 522
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FandangoParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def parameters(self):
            return self.getTypedRuleContext(FandangoParser.ParametersContext,0)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext,0)


        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FandangoParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(FandangoParser.DEF)
            self.state = 525
            self.name()
            self.state = 526
            self.parameters()
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.ARROW:
                self.state = 527
                self.match(FandangoParser.ARROW)
                self.state = 528
                self.test()


            self.state = 531
            self.match(FandangoParser.COLON)
            self.state = 532
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FandangoParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = FandangoParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME) | (1 << FandangoParser.STAR) | (1 << FandangoParser.POWER))) != 0):
                self.state = 535
                self.typedargslist()


            self.state = 538
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FandangoParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.MATCH, FandangoParser.UNDERSCORE, FandangoParser.NAME]:
                self.state = 540
                self.tfpdef()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.ASSIGN:
                    self.state = 541
                    self.match(FandangoParser.ASSIGN)
                    self.state = 542
                    self.test()


                self.state = 553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 545
                        self.match(FandangoParser.COMMA)
                        self.state = 546
                        self.tfpdef()
                        self.state = 549
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.ASSIGN:
                            self.state = 547
                            self.match(FandangoParser.ASSIGN)
                            self.state = 548
                            self.test()

                 
                    self.state = 555
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 556
                    self.match(FandangoParser.COMMA)
                    self.state = 587
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [FandangoParser.STAR]:
                        self.state = 557
                        self.match(FandangoParser.STAR)
                        self.state = 559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME))) != 0):
                            self.state = 558
                            self.tfpdef()


                        self.state = 569
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 561
                                self.match(FandangoParser.COMMA)
                                self.state = 562
                                self.tfpdef()
                                self.state = 565
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==FandangoParser.ASSIGN:
                                    self.state = 563
                                    self.match(FandangoParser.ASSIGN)
                                    self.state = 564
                                    self.test()

                         
                            self.state = 571
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                        self.state = 580
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.COMMA:
                            self.state = 572
                            self.match(FandangoParser.COMMA)
                            self.state = 578
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==FandangoParser.POWER:
                                self.state = 573
                                self.match(FandangoParser.POWER)
                                self.state = 574
                                self.tfpdef()
                                self.state = 576
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==FandangoParser.COMMA:
                                    self.state = 575
                                    self.match(FandangoParser.COMMA)






                        pass
                    elif token in [FandangoParser.POWER]:
                        self.state = 582
                        self.match(FandangoParser.POWER)
                        self.state = 583
                        self.tfpdef()
                        self.state = 585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.COMMA:
                            self.state = 584
                            self.match(FandangoParser.COMMA)


                        pass
                    elif token in [FandangoParser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [FandangoParser.STAR]:
                self.state = 591
                self.match(FandangoParser.STAR)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME))) != 0):
                    self.state = 592
                    self.tfpdef()


                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 595
                        self.match(FandangoParser.COMMA)
                        self.state = 596
                        self.tfpdef()
                        self.state = 599
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.ASSIGN:
                            self.state = 597
                            self.match(FandangoParser.ASSIGN)
                            self.state = 598
                            self.test()

                 
                    self.state = 605
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 606
                    self.match(FandangoParser.COMMA)
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==FandangoParser.POWER:
                        self.state = 607
                        self.match(FandangoParser.POWER)
                        self.state = 608
                        self.tfpdef()
                        self.state = 610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.COMMA:
                            self.state = 609
                            self.match(FandangoParser.COMMA)






                pass
            elif token in [FandangoParser.POWER]:
                self.state = 616
                self.match(FandangoParser.POWER)
                self.state = 617
                self.tfpdef()
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 618
                    self.match(FandangoParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = FandangoParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.name()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COLON:
                self.state = 624
                self.match(FandangoParser.COLON)
                self.state = 625
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(FandangoParser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FandangoParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.MATCH, FandangoParser.UNDERSCORE, FandangoParser.NAME]:
                self.state = 628
                self.vfpdef()
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.ASSIGN:
                    self.state = 629
                    self.match(FandangoParser.ASSIGN)
                    self.state = 630
                    self.test()


                self.state = 641
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 633
                        self.match(FandangoParser.COMMA)
                        self.state = 634
                        self.vfpdef()
                        self.state = 637
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.ASSIGN:
                            self.state = 635
                            self.match(FandangoParser.ASSIGN)
                            self.state = 636
                            self.test()

                 
                    self.state = 643
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 644
                    self.match(FandangoParser.COMMA)
                    self.state = 675
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [FandangoParser.STAR]:
                        self.state = 645
                        self.match(FandangoParser.STAR)
                        self.state = 647
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME))) != 0):
                            self.state = 646
                            self.vfpdef()


                        self.state = 657
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 649
                                self.match(FandangoParser.COMMA)
                                self.state = 650
                                self.vfpdef()
                                self.state = 653
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==FandangoParser.ASSIGN:
                                    self.state = 651
                                    self.match(FandangoParser.ASSIGN)
                                    self.state = 652
                                    self.test()

                         
                            self.state = 659
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                        self.state = 668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.COMMA:
                            self.state = 660
                            self.match(FandangoParser.COMMA)
                            self.state = 666
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==FandangoParser.POWER:
                                self.state = 661
                                self.match(FandangoParser.POWER)
                                self.state = 662
                                self.vfpdef()
                                self.state = 664
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==FandangoParser.COMMA:
                                    self.state = 663
                                    self.match(FandangoParser.COMMA)






                        pass
                    elif token in [FandangoParser.POWER]:
                        self.state = 670
                        self.match(FandangoParser.POWER)
                        self.state = 671
                        self.vfpdef()
                        self.state = 673
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.COMMA:
                            self.state = 672
                            self.match(FandangoParser.COMMA)


                        pass
                    elif token in [FandangoParser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [FandangoParser.STAR]:
                self.state = 679
                self.match(FandangoParser.STAR)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME))) != 0):
                    self.state = 680
                    self.vfpdef()


                self.state = 691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 683
                        self.match(FandangoParser.COMMA)
                        self.state = 684
                        self.vfpdef()
                        self.state = 687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.ASSIGN:
                            self.state = 685
                            self.match(FandangoParser.ASSIGN)
                            self.state = 686
                            self.test()

                 
                    self.state = 693
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 694
                    self.match(FandangoParser.COMMA)
                    self.state = 700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==FandangoParser.POWER:
                        self.state = 695
                        self.match(FandangoParser.POWER)
                        self.state = 696
                        self.vfpdef()
                        self.state = 698
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==FandangoParser.COMMA:
                            self.state = 697
                            self.match(FandangoParser.COMMA)






                pass
            elif token in [FandangoParser.POWER]:
                self.state = 704
                self.match(FandangoParser.POWER)
                self.state = 705
                self.vfpdef()
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 706
                    self.match(FandangoParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = FandangoParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FandangoParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_stmt)
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.simple_stmts()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.SEMI_COLON)
            else:
                return self.getToken(FandangoParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = FandangoParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.simple_stmt()
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 718
                    self.match(FandangoParser.SEMI_COLON)
                    self.state = 719
                    self.simple_stmt() 
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.SEMI_COLON:
                self.state = 725
                self.match(FandangoParser.SEMI_COLON)


            self.state = 728
            self.match(FandangoParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FandangoParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_simple_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 730
                self.expr_stmt()
                pass

            elif la_ == 2:
                self.state = 731
                self.del_stmt()
                pass

            elif la_ == 3:
                self.state = 732
                self.pass_stmt()
                pass

            elif la_ == 4:
                self.state = 733
                self.flow_stmt()
                pass

            elif la_ == 5:
                self.state = 734
                self.import_stmt()
                pass

            elif la_ == 6:
                self.state = 735
                self.global_stmt()
                pass

            elif la_ == 7:
                self.state = 736
                self.nonlocal_stmt()
                pass

            elif la_ == 8:
                self.state = 737
                self.assert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(FandangoParser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(FandangoParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = FandangoParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.testlist_star_expr()
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.COLON]:
                self.state = 741
                self.annassign()
                pass
            elif token in [FandangoParser.ADD_ASSIGN, FandangoParser.SUB_ASSIGN, FandangoParser.MULT_ASSIGN, FandangoParser.AT_ASSIGN, FandangoParser.DIV_ASSIGN, FandangoParser.MOD_ASSIGN, FandangoParser.AND_ASSIGN, FandangoParser.OR_ASSIGN, FandangoParser.XOR_ASSIGN, FandangoParser.LEFT_SHIFT_ASSIGN, FandangoParser.RIGHT_SHIFT_ASSIGN, FandangoParser.POWER_ASSIGN, FandangoParser.IDIV_ASSIGN]:
                self.state = 742
                self.augassign()
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 743
                    self.yield_expr()
                    pass

                elif la_ == 2:
                    self.state = 744
                    self.testlist()
                    pass


                pass
            elif token in [FandangoParser.SEMI_COLON, FandangoParser.ASSIGN, FandangoParser.NEWLINE]:
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FandangoParser.ASSIGN:
                    self.state = 747
                    self.match(FandangoParser.ASSIGN)
                    self.state = 750
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 748
                        self.yield_expr()
                        pass

                    elif la_ == 2:
                        self.state = 749
                        self.testlist_star_expr()
                        pass


                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = FandangoParser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(FandangoParser.COLON)
            self.state = 760
            self.test()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.ASSIGN:
                self.state = 761
                self.match(FandangoParser.ASSIGN)
                self.state = 762
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FandangoParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                self.state = 765
                self.test()
                pass
            elif token in [FandangoParser.STAR]:
                self.state = 766
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 769
                    self.match(FandangoParser.COMMA)
                    self.state = 772
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                        self.state = 770
                        self.test()
                        pass
                    elif token in [FandangoParser.STAR]:
                        self.state = 771
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 779
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(FandangoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FandangoParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FandangoParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FandangoParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FandangoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FandangoParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FandangoParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FandangoParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FandangoParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FandangoParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FandangoParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = FandangoParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (FandangoParser.ADD_ASSIGN - 89)) | (1 << (FandangoParser.SUB_ASSIGN - 89)) | (1 << (FandangoParser.MULT_ASSIGN - 89)) | (1 << (FandangoParser.AT_ASSIGN - 89)) | (1 << (FandangoParser.DIV_ASSIGN - 89)) | (1 << (FandangoParser.MOD_ASSIGN - 89)) | (1 << (FandangoParser.AND_ASSIGN - 89)) | (1 << (FandangoParser.OR_ASSIGN - 89)) | (1 << (FandangoParser.XOR_ASSIGN - 89)) | (1 << (FandangoParser.LEFT_SHIFT_ASSIGN - 89)) | (1 << (FandangoParser.RIGHT_SHIFT_ASSIGN - 89)) | (1 << (FandangoParser.POWER_ASSIGN - 89)) | (1 << (FandangoParser.IDIV_ASSIGN - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(FandangoParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FandangoParser.ExprlistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = FandangoParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(FandangoParser.DEL)
            self.state = 785
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(FandangoParser.PASS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = FandangoParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(FandangoParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = FandangoParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_flow_stmt)
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 789
                self.break_stmt()
                pass
            elif token in [FandangoParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 790
                self.continue_stmt()
                pass
            elif token in [FandangoParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 791
                self.return_stmt()
                pass
            elif token in [FandangoParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 792
                self.raise_stmt()
                pass
            elif token in [FandangoParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 793
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(FandangoParser.BREAK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = FandangoParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(FandangoParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(FandangoParser.CONTINUE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = FandangoParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(FandangoParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(FandangoParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = FandangoParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(FandangoParser.RETURN)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                self.state = 801
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = FandangoParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(FandangoParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = FandangoParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(FandangoParser.RAISE)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                self.state = 807
                self.test()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.FROM:
                    self.state = 808
                    self.match(FandangoParser.FROM)
                    self.state = 809
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(FandangoParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(FandangoParser.Import_fromContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = FandangoParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_import_stmt)
        try:
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.import_name()
                pass
            elif token in [FandangoParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = FandangoParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(FandangoParser.IMPORT)
            self.state = 819
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(FandangoParser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.ELLIPSIS)
            else:
                return self.getToken(FandangoParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = FandangoParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(FandangoParser.FROM)
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FandangoParser.DOT or _la==FandangoParser.ELLIPSIS:
                    self.state = 822
                    _la = self._input.LA(1)
                    if not(_la==FandangoParser.DOT or _la==FandangoParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 828
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 830 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 829
                    _la = self._input.LA(1)
                    if not(_la==FandangoParser.DOT or _la==FandangoParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 832 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==FandangoParser.DOT or _la==FandangoParser.ELLIPSIS):
                        break

                pass


            self.state = 836
            self.match(FandangoParser.IMPORT)
            self.state = 843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STAR]:
                self.state = 837
                self.match(FandangoParser.STAR)
                pass
            elif token in [FandangoParser.OPEN_PAREN]:
                self.state = 838
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 839
                self.import_as_names()
                self.state = 840
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [FandangoParser.MATCH, FandangoParser.UNDERSCORE, FandangoParser.NAME]:
                self.state = 842
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext,i)


        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FandangoParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.name()
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.AS:
                self.state = 846
                self.match(FandangoParser.AS)
                self.state = 847
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FandangoParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.dotted_name()
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.AS:
                self.state = 851
                self.match(FandangoParser.AS)
                self.state = 852
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FandangoParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.import_as_name()
            self.state = 860
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 856
                    self.match(FandangoParser.COMMA)
                    self.state = 857
                    self.import_as_name() 
                self.state = 862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 863
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FandangoParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.dotted_as_name()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.COMMA:
                self.state = 867
                self.match(FandangoParser.COMMA)
                self.state = 868
                self.dotted_as_name()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = FandangoParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.name()
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.DOT:
                self.state = 875
                self.match(FandangoParser.DOT)
                self.state = 876
                self.name()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(FandangoParser.GLOBAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = FandangoParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(FandangoParser.GLOBAL)
            self.state = 883
            self.name()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.COMMA:
                self.state = 884
                self.match(FandangoParser.COMMA)
                self.state = 885
                self.name()
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(FandangoParser.NONLOCAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = FandangoParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(FandangoParser.NONLOCAL)
            self.state = 892
            self.name()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.COMMA:
                self.state = 893
                self.match(FandangoParser.COMMA)
                self.state = 894
                self.name()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(FandangoParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = FandangoParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(FandangoParser.ASSERT)
            self.state = 901
            self.test()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 902
                self.match(FandangoParser.COMMA)
                self.state = 903
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(FandangoParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(FandangoParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(FandangoParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(FandangoParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(FandangoParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(FandangoParser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Async_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Match_stmtContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = FandangoParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_compound_stmt)
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.if_stmt()
                pass
            elif token in [FandangoParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 907
                self.while_stmt()
                pass
            elif token in [FandangoParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 908
                self.for_stmt()
                pass
            elif token in [FandangoParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 909
                self.try_stmt()
                pass
            elif token in [FandangoParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 910
                self.with_stmt()
                pass
            elif token in [FandangoParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 911
                self.funcdef()
                pass
            elif token in [FandangoParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 912
                self.classdef()
                pass
            elif token in [FandangoParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 913
                self.decorated()
                pass
            elif token in [FandangoParser.ASYNC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 914
                self.async_stmt()
                pass
            elif token in [FandangoParser.MATCH]:
                self.enterOuterAlt(localctx, 10)
                self.state = 915
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(FandangoParser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(FandangoParser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(FandangoParser.For_stmtContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = FandangoParser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(FandangoParser.ASYNC)
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.DEF]:
                self.state = 919
                self.funcdef()
                pass
            elif token in [FandangoParser.WITH]:
                self.state = 920
                self.with_stmt()
                pass
            elif token in [FandangoParser.FOR]:
                self.state = 921
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.ELIF)
            else:
                return self.getToken(FandangoParser.ELIF, i)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = FandangoParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(FandangoParser.IF)
            self.state = 925
            self.test()
            self.state = 926
            self.match(FandangoParser.COLON)
            self.state = 927
            self.block()
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 928
                    self.match(FandangoParser.ELIF)
                    self.state = 929
                    self.test()
                    self.state = 930
                    self.match(FandangoParser.COLON)
                    self.state = 931
                    self.block() 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 938
                self.match(FandangoParser.ELSE)
                self.state = 939
                self.match(FandangoParser.COLON)
                self.state = 940
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(FandangoParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext,i)


        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = FandangoParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(FandangoParser.WHILE)
            self.state = 944
            self.test()
            self.state = 945
            self.match(FandangoParser.COLON)
            self.state = 946
            self.block()
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 947
                self.match(FandangoParser.ELSE)
                self.state = 948
                self.match(FandangoParser.COLON)
                self.state = 949
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FandangoParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext,i)


        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = FandangoParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_for_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(FandangoParser.FOR)
            self.state = 953
            self.exprlist()
            self.state = 954
            self.match(FandangoParser.IN)
            self.state = 955
            self.testlist()
            self.state = 956
            self.match(FandangoParser.COLON)
            self.state = 957
            self.block()
            self.state = 961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 958
                self.match(FandangoParser.ELSE)
                self.state = 959
                self.match(FandangoParser.COLON)
                self.state = 960
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(FandangoParser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.BlockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.BlockContext,i)


        def FINALLY(self):
            return self.getToken(FandangoParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = FandangoParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(FandangoParser.TRY)
            self.state = 964
            self.match(FandangoParser.COLON)
            self.state = 965
            self.block()
            self.state = 987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.EXCEPT]:
                self.state = 970 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 966
                        self.except_clause()
                        self.state = 967
                        self.match(FandangoParser.COLON)
                        self.state = 968
                        self.block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 972 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 974
                    self.match(FandangoParser.ELSE)
                    self.state = 975
                    self.match(FandangoParser.COLON)
                    self.state = 976
                    self.block()


                self.state = 982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 979
                    self.match(FandangoParser.FINALLY)
                    self.state = 980
                    self.match(FandangoParser.COLON)
                    self.state = 981
                    self.block()


                pass
            elif token in [FandangoParser.FINALLY]:
                self.state = 984
                self.match(FandangoParser.FINALLY)
                self.state = 985
                self.match(FandangoParser.COLON)
                self.state = 986
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FandangoParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FandangoParser.With_itemContext,i)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = FandangoParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(FandangoParser.WITH)
            self.state = 990
            self.with_item()
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.COMMA:
                self.state = 991
                self.match(FandangoParser.COMMA)
                self.state = 992
                self.with_item()
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 998
            self.match(FandangoParser.COLON)
            self.state = 999
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FandangoParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.test()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.AS:
                self.state = 1002
                self.match(FandangoParser.AS)
                self.state = 1003
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FandangoParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FandangoParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(FandangoParser.EXCEPT)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                self.state = 1007
                self.test()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.AS:
                    self.state = 1008
                    self.match(FandangoParser.AS)
                    self.state = 1009
                    self.name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext,0)


        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StmtContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = FandangoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_block)
        try:
            self.state = 1021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.STAR, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.simple_stmts()
                pass
            elif token in [FandangoParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(FandangoParser.NEWLINE)
                self.state = 1017 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1016
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1019 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(FandangoParser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(FandangoParser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Case_blockContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = FandangoParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_match_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(FandangoParser.MATCH)
            self.state = 1024
            self.subject_expr()
            self.state = 1025
            self.match(FandangoParser.COLON)
            self.state = 1026
            self.match(FandangoParser.NEWLINE)
            self.state = 1028 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1027
                    self.case_block()

                else:
                    raise NoViableAltException(self)
                self.state = 1030 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_named_expressionsContext,0)


        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = FandangoParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.star_named_expression()
                self.state = 1033
                self.match(FandangoParser.COMMA)
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1034
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1037
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_named_expressionContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = FandangoParser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(FandangoParser.COMMA)
            self.state = 1042 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1041
                self.star_named_expression()
                self.state = 1044 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0)):
                    break

            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 1046
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext,0)


        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = FandangoParser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_star_named_expression)
        try:
            self.state = 1052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.match(FandangoParser.STAR)
                self.state = 1050
                self.expr(0)
                pass
            elif token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(FandangoParser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(FandangoParser.PatternsContext,0)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(FandangoParser.GuardContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = FandangoParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(FandangoParser.CASE)
            self.state = 1055
            self.patterns()
            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.IF:
                self.state = 1056
                self.guard()


            self.state = 1059
            self.match(FandangoParser.COLON)
            self.state = 1060
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = FandangoParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(FandangoParser.IF)
            self.state = 1063
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = FandangoParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_patterns)
        try:
            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1065
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(FandangoParser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = FandangoParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pattern)
        try:
            self.state = 1071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1070
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext,0)


        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(FandangoParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = FandangoParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.or_pattern()
            self.state = 1074
            self.match(FandangoParser.AS)
            self.state = 1075
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Closed_patternContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = FandangoParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.closed_pattern()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FandangoParser.OR_OP:
                self.state = 1078
                self.match(FandangoParser.OR_OP)
                self.state = 1079
                self.closed_pattern()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Class_patternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = FandangoParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_closed_pattern)
        try:
            self.state = 1093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1085
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1086
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1087
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1088
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1089
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1090
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1091
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1092
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext,0)


        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = FandangoParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_literal_pattern)
        try:
            self.state = 1103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self.signed_number()
                self.state = 1096
                if not  this.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " this.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1099
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1100
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1101
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1102
                self.match(FandangoParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext,0)


        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = FandangoParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_literal_expr)
        try:
            self.state = 1113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.signed_number()
                self.state = 1106
                if not  this.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " this.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1108
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1109
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1110
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1111
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1112
                self.match(FandangoParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_real_numberContext,0)


        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(FandangoParser.Imaginary_numberContext,0)


        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = FandangoParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_complex_number)
        try:
            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.signed_real_number()
                self.state = 1116
                self.match(FandangoParser.ADD)
                self.state = 1117
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.signed_real_number()
                self.state = 1120
                self.match(FandangoParser.MINUS)
                self.state = 1121
                self.imaginary_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = FandangoParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_signed_number)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [FandangoParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(FandangoParser.MINUS)
                self.state = 1127
                self.match(FandangoParser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(FandangoParser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = FandangoParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_signed_real_number)
        try:
            self.state = 1133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.real_number()
                pass
            elif token in [FandangoParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.match(FandangoParser.MINUS)
                self.state = 1132
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = FandangoParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = FandangoParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(FandangoParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = FandangoParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = FandangoParser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.name()
            self.state = 1142
            if not  this.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " this.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(FandangoParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = FandangoParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(FandangoParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = FandangoParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.attr()
            self.state = 1147
            if not  this.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " this.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.NameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = FandangoParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.name()
            self.state = 1152 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1150
                    self.match(FandangoParser.DOT)
                    self.state = 1151
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 1154 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext,0)


        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = FandangoParser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_name_or_attr)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = FandangoParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 1161
            self.pattern()
            self.state = 1162
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Maybe_sequence_patternContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = FandangoParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1165
                    self.maybe_sequence_pattern()


                self.state = 1168
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [FandangoParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1170
                    self.open_sequence_pattern()


                self.state = 1173
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = FandangoParser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_open_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.maybe_star_pattern()
            self.state = 1177
            self.match(FandangoParser.COMMA)
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                self.state = 1178
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = FandangoParser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.maybe_star_pattern()
            self.state = 1186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1182
                    self.match(FandangoParser.COMMA)
                    self.state = 1183
                    self.maybe_star_pattern() 
                self.state = 1188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 1189
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = FandangoParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_maybe_star_pattern)
        try:
            self.state = 1194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                self.star_pattern()
                pass
            elif token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.FALSE, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.TRUE, FandangoParser.UNDERSCORE, FandangoParser.NAME, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.MINUS, FandangoParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(FandangoParser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = FandangoParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_star_pattern)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1196
                self.match(FandangoParser.STAR)
                self.state = 1197
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self.match(FandangoParser.STAR)
                self.state = 1199
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Items_patternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = FandangoParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1203
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1205
                self.double_star_pattern()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1206
                    self.match(FandangoParser.COMMA)


                self.state = 1209
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1212
                self.items_pattern()
                self.state = 1213
                self.match(FandangoParser.COMMA)
                self.state = 1214
                self.double_star_pattern()
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1215
                    self.match(FandangoParser.COMMA)


                self.state = 1218
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1220
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1221
                self.items_pattern()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1222
                    self.match(FandangoParser.COMMA)


                self.state = 1225
                self.match(FandangoParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = FandangoParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.key_value_pattern()
            self.state = 1234
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1230
                    self.match(FandangoParser.COMMA)
                    self.state = 1231
                    self.key_value_pattern() 
                self.state = 1236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(FandangoParser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = FandangoParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.FALSE, FandangoParser.NONE, FandangoParser.TRUE, FandangoParser.MINUS]:
                self.state = 1237
                self.literal_expr()
                pass
            elif token in [FandangoParser.MATCH, FandangoParser.UNDERSCORE, FandangoParser.NAME]:
                self.state = 1238
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1241
            self.match(FandangoParser.COLON)
            self.state = 1242
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(FandangoParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = FandangoParser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(FandangoParser.POWER)
            self.state = 1245
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(FandangoParser.Positional_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(FandangoParser.Keyword_patternsContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = FandangoParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1247
                self.name_or_attr()
                self.state = 1248
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1249
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1251
                self.name_or_attr()
                self.state = 1252
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1253
                self.positional_patterns()
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1254
                    self.match(FandangoParser.COMMA)


                self.state = 1257
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1259
                self.name_or_attr()
                self.state = 1260
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1261
                self.keyword_patterns()
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1262
                    self.match(FandangoParser.COMMA)


                self.state = 1265
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1267
                self.name_or_attr()
                self.state = 1268
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1269
                self.positional_patterns()
                self.state = 1270
                self.match(FandangoParser.COMMA)
                self.state = 1271
                self.keyword_patterns()
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1272
                    self.match(FandangoParser.COMMA)


                self.state = 1275
                self.match(FandangoParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.PatternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = FandangoParser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.pattern()
            self.state = 1284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1280
                    self.match(FandangoParser.COMMA)
                    self.state = 1281
                    self.pattern() 
                self.state = 1286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = FandangoParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.keyword_pattern()
            self.state = 1292
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1288
                    self.match(FandangoParser.COMMA)
                    self.state = 1289
                    self.keyword_pattern() 
                self.state = 1294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = FandangoParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.name()
            self.state = 1296
            self.match(FandangoParser.ASSIGN)
            self.state = 1297
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Or_testContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Or_testContext,i)


        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(FandangoParser.LambdefContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FandangoParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_test)
        try:
            self.state = 1308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1299
                self.or_test()
                self.state = 1305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1300
                    self.match(FandangoParser.IF)
                    self.state = 1301
                    self.or_test()
                    self.state = 1302
                    self.match(FandangoParser.ELSE)
                    self.state = 1303
                    self.test()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.lambdef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(FandangoParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(FandangoParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = FandangoParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_test_nocond)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.or_test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.lambdef_nocond()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(FandangoParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(FandangoParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = FandangoParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(FandangoParser.LAMBDA)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME) | (1 << FandangoParser.STAR) | (1 << FandangoParser.POWER))) != 0):
                self.state = 1315
                self.varargslist()


            self.state = 1318
            self.match(FandangoParser.COLON)
            self.state = 1319
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(FandangoParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(FandangoParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(FandangoParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = FandangoParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(FandangoParser.LAMBDA)
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME) | (1 << FandangoParser.STAR) | (1 << FandangoParser.POWER))) != 0):
                self.state = 1322
                self.varargslist()


            self.state = 1325
            self.match(FandangoParser.COLON)
            self.state = 1326
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.And_testContext)
            else:
                return self.getTypedRuleContext(FandangoParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = FandangoParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_or_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.and_test()
            self.state = 1333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1329
                    self.match(FandangoParser.OR)
                    self.state = 1330
                    self.and_test() 
                self.state = 1335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Not_testContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = FandangoParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_and_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.not_test()
            self.state = 1341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1337
                    self.match(FandangoParser.AND)
                    self.state = 1338
                    self.not_test() 
                self.state = 1343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(FandangoParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(FandangoParser.ComparisonContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = FandangoParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_not_test)
        try:
            self.state = 1347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self.match(FandangoParser.NOT)
                self.state = 1345
                self.not_test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Comp_opContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = FandangoParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.expr(0)
            self.state = 1355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1350
                    self.comp_op()
                    self.state = 1351
                    self.expr(0) 
                self.state = 1357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FandangoParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FandangoParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FandangoParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FandangoParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FandangoParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def IS(self):
            return self.getToken(FandangoParser.IS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = FandangoParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_comp_op)
        try:
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.match(FandangoParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.match(FandangoParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1360
                self.match(FandangoParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1361
                self.match(FandangoParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1362
                self.match(FandangoParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1363
                self.match(FandangoParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1364
                self.match(FandangoParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1365
                self.match(FandangoParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1366
                self.match(FandangoParser.NOT)
                self.state = 1367
                self.match(FandangoParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1368
                self.match(FandangoParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1369
                self.match(FandangoParser.IS)
                self.state = 1370
                self.match(FandangoParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FandangoParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(FandangoParser.STAR)
            self.state = 1374
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(FandangoParser.SelectorContext,0)


        def atom_expr(self):
            return self.getTypedRuleContext(FandangoParser.Atom_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.ADD)
            else:
                return self.getToken(FandangoParser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.MINUS)
            else:
                return self.getToken(FandangoParser.MINUS, i)

        def NOT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_OP)
            else:
                return self.getToken(FandangoParser.NOT_OP, i)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def AT(self):
            return self.getToken(FandangoParser.AT, 0)

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def MOD(self):
            return self.getToken(FandangoParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FandangoParser.IDIV, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FandangoParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FandangoParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FandangoParser.OR_OP, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 240
        self.enterRecursionRule(localctx, 240, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1377
                self.selector()
                pass

            elif la_ == 2:
                self.state = 1378
                self.atom_expr()
                pass

            elif la_ == 3:
                self.state = 1380 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1379
                        _la = self._input.LA(1)
                        if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (FandangoParser.ADD - 72)) | (1 << (FandangoParser.MINUS - 72)) | (1 << (FandangoParser.NOT_OP - 72)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1382 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1384
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1410
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1408
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1387
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1388
                        self.match(FandangoParser.POWER)
                        self.state = 1389
                        self.expr(9)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1390
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1391
                        _la = self._input.LA(1)
                        if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (FandangoParser.STAR - 57)) | (1 << (FandangoParser.DIV - 57)) | (1 << (FandangoParser.MOD - 57)) | (1 << (FandangoParser.IDIV - 57)) | (1 << (FandangoParser.AT - 57)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1392
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1393
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1394
                        _la = self._input.LA(1)
                        if not(_la==FandangoParser.ADD or _la==FandangoParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1395
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1396
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1397
                        _la = self._input.LA(1)
                        if not(_la==FandangoParser.LEFT_SHIFT or _la==FandangoParser.RIGHT_SHIFT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1398
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FandangoParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1399
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1400
                        self.match(FandangoParser.AND_OP)
                        self.state = 1401
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FandangoParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1402
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1403
                        self.match(FandangoParser.XOR)
                        self.state = 1404
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FandangoParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1405
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1406
                        self.match(FandangoParser.OR_OP)
                        self.state = 1407
                        self.expr(2)
                        pass

             
                self.state = 1412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(FandangoParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FandangoParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TrailerContext,i)


        def getRuleIndex(self):
            return FandangoParser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = FandangoParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.AWAIT:
                self.state = 1413
                self.match(FandangoParser.AWAIT)


            self.state = 1416
            self.atom()
            self.state = 1420
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1417
                    self.trailer() 
                self.state = 1422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FandangoParser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FandangoParser.DictorsetmakerContext,0)


        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.STRING)
            else:
                return self.getToken(FandangoParser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(FandangoParser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FandangoParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 1450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1423
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1424
                    self.yield_expr()

                elif la_ == 2:
                    self.state = 1425
                    self.testlist_comp()


                self.state = 1428
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [FandangoParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1429
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1430
                    self.testlist_comp()


                self.state = 1433
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [FandangoParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1434
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN) | (1 << FandangoParser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1435
                    self.dictorsetmaker()


                self.state = 1438
                self.match(FandangoParser.CLOSE_BRACE)
                pass
            elif token in [FandangoParser.MATCH, FandangoParser.UNDERSCORE, FandangoParser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1439
                self.name()
                pass
            elif token in [FandangoParser.NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1440
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [FandangoParser.STRING]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1442 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1441
                        self.match(FandangoParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1444 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                pass
            elif token in [FandangoParser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1446
                self.match(FandangoParser.ELLIPSIS)
                pass
            elif token in [FandangoParser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1447
                self.match(FandangoParser.NONE)
                pass
            elif token in [FandangoParser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1448
                self.match(FandangoParser.TRUE)
                pass
            elif token in [FandangoParser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1449
                self.match(FandangoParser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(FandangoParser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(FandangoParser.MATCH, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FandangoParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.MATCH) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.NAME))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FandangoParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                self.state = 1454
                self.test()
                pass
            elif token in [FandangoParser.STAR]:
                self.state = 1455
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.ASYNC, FandangoParser.FOR]:
                self.state = 1458
                self.comp_for()
                pass
            elif token in [FandangoParser.CLOSE_PAREN, FandangoParser.COMMA, FandangoParser.CLOSE_BRACK]:
                self.state = 1466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1459
                        self.match(FandangoParser.COMMA)
                        self.state = 1462
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                            self.state = 1460
                            self.test()
                            pass
                        elif token in [FandangoParser.STAR]:
                            self.state = 1461
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1468
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COMMA:
                    self.state = 1469
                    self.match(FandangoParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FandangoParser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FandangoParser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FandangoParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1474
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN) | (1 << FandangoParser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1475
                    self.arglist()


                self.state = 1478
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [FandangoParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1479
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1480
                self.subscriptlist()
                self.state = 1481
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [FandangoParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1483
                self.match(FandangoParser.DOT)
                self.state = 1484
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Subscript_Context)
            else:
                return self.getTypedRuleContext(FandangoParser.Subscript_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FandangoParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.subscript_()
            self.state = 1492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1488
                    self.match(FandangoParser.COMMA)
                    self.state = 1489
                    self.subscript_() 
                self.state = 1494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

            self.state = 1496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 1495
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FandangoParser.SliceopContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = FandangoParser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.state = 1509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1498
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1499
                    self.test()


                self.state = 1502
                self.match(FandangoParser.COLON)
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1503
                    self.test()


                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.COLON:
                    self.state = 1506
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FandangoParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.match(FandangoParser.COLON)
            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                self.state = 1512
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FandangoParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                self.state = 1515
                self.expr(0)
                pass
            elif token in [FandangoParser.STAR]:
                self.state = 1516
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1526
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1519
                    self.match(FandangoParser.COMMA)
                    self.state = 1522
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                        self.state = 1520
                        self.expr(0)
                        pass
                    elif token in [FandangoParser.STAR]:
                        self.state = 1521
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 1529
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FandangoParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.test()
            self.state = 1537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1533
                    self.match(FandangoParser.COMMA)
                    self.state = 1534
                    self.test() 
                self.state = 1539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 1540
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.POWER)
            else:
                return self.getToken(FandangoParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FandangoParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1549
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                    self.state = 1543
                    self.test()
                    self.state = 1544
                    self.match(FandangoParser.COLON)
                    self.state = 1545
                    self.test()
                    pass
                elif token in [FandangoParser.POWER]:
                    self.state = 1547
                    self.match(FandangoParser.POWER)
                    self.state = 1548
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1569
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [FandangoParser.ASYNC, FandangoParser.FOR]:
                    self.state = 1551
                    self.comp_for()
                    pass
                elif token in [FandangoParser.COMMA, FandangoParser.CLOSE_BRACE]:
                    self.state = 1563
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1552
                            self.match(FandangoParser.COMMA)
                            self.state = 1559
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                                self.state = 1553
                                self.test()
                                self.state = 1554
                                self.match(FandangoParser.COLON)
                                self.state = 1555
                                self.test()
                                pass
                            elif token in [FandangoParser.POWER]:
                                self.state = 1557
                                self.match(FandangoParser.POWER)
                                self.state = 1558
                                self.expr(0)
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1565
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

                    self.state = 1567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==FandangoParser.COMMA:
                        self.state = 1566
                        self.match(FandangoParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1573
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                    self.state = 1571
                    self.test()
                    pass
                elif token in [FandangoParser.STAR]:
                    self.state = 1572
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1589
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [FandangoParser.ASYNC, FandangoParser.FOR]:
                    self.state = 1575
                    self.comp_for()
                    pass
                elif token in [FandangoParser.COMMA, FandangoParser.CLOSE_BRACE]:
                    self.state = 1583
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1576
                            self.match(FandangoParser.COMMA)
                            self.state = 1579
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [FandangoParser.STRING, FandangoParser.NUMBER, FandangoParser.AND, FandangoParser.AS, FandangoParser.ASSERT, FandangoParser.ASYNC, FandangoParser.AWAIT, FandangoParser.BREAK, FandangoParser.CASE, FandangoParser.CLASS, FandangoParser.CONTINUE, FandangoParser.DEF, FandangoParser.DEL, FandangoParser.ELIF, FandangoParser.ELSE, FandangoParser.EXCEPT, FandangoParser.FALSE, FandangoParser.FINALLY, FandangoParser.FOR, FandangoParser.FROM, FandangoParser.GLOBAL, FandangoParser.IF, FandangoParser.IMPORT, FandangoParser.IN, FandangoParser.IS, FandangoParser.LAMBDA, FandangoParser.MATCH, FandangoParser.NONE, FandangoParser.NONLOCAL, FandangoParser.NOT, FandangoParser.OR, FandangoParser.PASS, FandangoParser.RAISE, FandangoParser.RETURN, FandangoParser.TRUE, FandangoParser.TRY, FandangoParser.UNDERSCORE, FandangoParser.WHILE, FandangoParser.WITH, FandangoParser.YIELD, FandangoParser.FORALL, FandangoParser.EXISTS, FandangoParser.NAME, FandangoParser.ELLIPSIS, FandangoParser.OPEN_PAREN, FandangoParser.OPEN_BRACK, FandangoParser.ADD, FandangoParser.MINUS, FandangoParser.NOT_OP, FandangoParser.OPEN_BRACE]:
                                self.state = 1577
                                self.test()
                                pass
                            elif token in [FandangoParser.STAR]:
                                self.state = 1578
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1585
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

                    self.state = 1587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==FandangoParser.COMMA:
                        self.state = 1586
                        self.match(FandangoParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FandangoParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FandangoParser.NameContext,0)


        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FandangoParser.ArglistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FandangoParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.match(FandangoParser.CLASS)
            self.state = 1594
            self.name()
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.OPEN_PAREN:
                self.state = 1595
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.STAR) | (1 << FandangoParser.OPEN_PAREN) | (1 << FandangoParser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                    self.state = 1596
                    self.arglist()


                self.state = 1599
                self.match(FandangoParser.CLOSE_PAREN)


            self.state = 1602
            self.match(FandangoParser.COLON)
            self.state = 1603
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FandangoParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.argument()
            self.state = 1610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1606
                    self.match(FandangoParser.COMMA)
                    self.state = 1607
                    self.argument() 
                self.state = 1612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

            self.state = 1614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.COMMA:
                self.state = 1613
                self.match(FandangoParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.TestContext)
            else:
                return self.getTypedRuleContext(FandangoParser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FandangoParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1616
                self.test()
                self.state = 1618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==FandangoParser.ASYNC or _la==FandangoParser.FOR:
                    self.state = 1617
                    self.comp_for()


                pass

            elif la_ == 2:
                self.state = 1620
                self.test()
                self.state = 1621
                self.match(FandangoParser.ASSIGN)
                self.state = 1622
                self.test()
                pass

            elif la_ == 3:
                self.state = 1624
                self.match(FandangoParser.POWER)
                self.state = 1625
                self.test()
                pass

            elif la_ == 4:
                self.state = 1626
                self.match(FandangoParser.STAR)
                self.state = 1627
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FandangoParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(FandangoParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FandangoParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_comp_iter)
        try:
            self.state = 1632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [FandangoParser.ASYNC, FandangoParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1630
                self.comp_for()
                pass
            elif token in [FandangoParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1631
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FandangoParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(FandangoParser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(FandangoParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FandangoParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==FandangoParser.ASYNC:
                self.state = 1634
                self.match(FandangoParser.ASYNC)


            self.state = 1637
            self.match(FandangoParser.FOR)
            self.state = 1638
            self.exprlist()
            self.state = 1639
            self.match(FandangoParser.IN)
            self.state = 1640
            self.or_test()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.ASYNC) | (1 << FandangoParser.FOR) | (1 << FandangoParser.IF))) != 0):
                self.state = 1641
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(FandangoParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FandangoParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = FandangoParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.match(FandangoParser.IF)
            self.state = 1645
            self.test_nocond()
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.ASYNC) | (1 << FandangoParser.FOR) | (1 << FandangoParser.IF))) != 0):
                self.state = 1646
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FandangoParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FandangoParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FandangoParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(FandangoParser.YIELD)
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FandangoParser.STRING) | (1 << FandangoParser.NUMBER) | (1 << FandangoParser.AND) | (1 << FandangoParser.AS) | (1 << FandangoParser.ASSERT) | (1 << FandangoParser.ASYNC) | (1 << FandangoParser.AWAIT) | (1 << FandangoParser.BREAK) | (1 << FandangoParser.CASE) | (1 << FandangoParser.CLASS) | (1 << FandangoParser.CONTINUE) | (1 << FandangoParser.DEF) | (1 << FandangoParser.DEL) | (1 << FandangoParser.ELIF) | (1 << FandangoParser.ELSE) | (1 << FandangoParser.EXCEPT) | (1 << FandangoParser.FALSE) | (1 << FandangoParser.FINALLY) | (1 << FandangoParser.FOR) | (1 << FandangoParser.FROM) | (1 << FandangoParser.GLOBAL) | (1 << FandangoParser.IF) | (1 << FandangoParser.IMPORT) | (1 << FandangoParser.IN) | (1 << FandangoParser.IS) | (1 << FandangoParser.LAMBDA) | (1 << FandangoParser.MATCH) | (1 << FandangoParser.NONE) | (1 << FandangoParser.NONLOCAL) | (1 << FandangoParser.NOT) | (1 << FandangoParser.OR) | (1 << FandangoParser.PASS) | (1 << FandangoParser.RAISE) | (1 << FandangoParser.RETURN) | (1 << FandangoParser.TRUE) | (1 << FandangoParser.TRY) | (1 << FandangoParser.UNDERSCORE) | (1 << FandangoParser.WHILE) | (1 << FandangoParser.WITH) | (1 << FandangoParser.YIELD) | (1 << FandangoParser.FORALL) | (1 << FandangoParser.EXISTS) | (1 << FandangoParser.NAME) | (1 << FandangoParser.ELLIPSIS) | (1 << FandangoParser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (FandangoParser.OPEN_BRACK - 65)) | (1 << (FandangoParser.ADD - 65)) | (1 << (FandangoParser.MINUS - 65)) | (1 << (FandangoParser.NOT_OP - 65)) | (1 << (FandangoParser.OPEN_BRACE - 65)))) != 0):
                self.state = 1650
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FandangoParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FandangoParser.TestlistContext,0)


        def getRuleIndex(self):
            return FandangoParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FandangoParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_yield_arg)
        try:
            self.state = 1656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                self.match(FandangoParser.FROM)
                self.state = 1654
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FandangoParser.STRING)
            else:
                return self.getToken(FandangoParser.STRING, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = FandangoParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_strings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1658
                self.match(FandangoParser.STRING)
                self.state = 1661 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FandangoParser.STRING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[83] = self.literal_pattern_sempred
        self._predicates[84] = self.literal_expr_sempred
        self._predicates[91] = self.pattern_capture_target_sempred
        self._predicates[93] = self.value_pattern_sempred
        self._predicates[120] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def literal_pattern_sempred(self, localctx:Literal_patternContext, predIndex:int):
            if predIndex == 0:
                return  this.CannotBePlusMinus() 
         

    def literal_expr_sempred(self, localctx:Literal_exprContext, predIndex:int):
            if predIndex == 1:
                return  this.CannotBePlusMinus() 
         

    def pattern_capture_target_sempred(self, localctx:Pattern_capture_targetContext, predIndex:int):
            if predIndex == 2:
                return  this.CannotBeDotLpEq() 
         

    def value_pattern_sempred(self, localctx:Value_patternContext, predIndex:int):
            if predIndex == 3:
                return  this.CannotBeDotLpEq() 
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




