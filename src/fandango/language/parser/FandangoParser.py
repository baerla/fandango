# Generated from language/FandangoParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        129,
        3358,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        2,
        113,
        7,
        113,
        2,
        114,
        7,
        114,
        2,
        115,
        7,
        115,
        2,
        116,
        7,
        116,
        2,
        117,
        7,
        117,
        2,
        118,
        7,
        118,
        2,
        119,
        7,
        119,
        2,
        120,
        7,
        120,
        2,
        121,
        7,
        121,
        2,
        122,
        7,
        122,
        2,
        123,
        7,
        123,
        2,
        124,
        7,
        124,
        2,
        125,
        7,
        125,
        2,
        126,
        7,
        126,
        2,
        127,
        7,
        127,
        2,
        128,
        7,
        128,
        2,
        129,
        7,
        129,
        2,
        130,
        7,
        130,
        2,
        131,
        7,
        131,
        2,
        132,
        7,
        132,
        2,
        133,
        7,
        133,
        2,
        134,
        7,
        134,
        2,
        135,
        7,
        135,
        2,
        136,
        7,
        136,
        2,
        137,
        7,
        137,
        2,
        138,
        7,
        138,
        2,
        139,
        7,
        139,
        2,
        140,
        7,
        140,
        2,
        141,
        7,
        141,
        2,
        142,
        7,
        142,
        2,
        143,
        7,
        143,
        2,
        144,
        7,
        144,
        2,
        145,
        7,
        145,
        2,
        146,
        7,
        146,
        2,
        147,
        7,
        147,
        2,
        148,
        7,
        148,
        2,
        149,
        7,
        149,
        2,
        150,
        7,
        150,
        2,
        151,
        7,
        151,
        2,
        152,
        7,
        152,
        2,
        153,
        7,
        153,
        2,
        154,
        7,
        154,
        2,
        155,
        7,
        155,
        2,
        156,
        7,
        156,
        2,
        157,
        7,
        157,
        2,
        158,
        7,
        158,
        2,
        159,
        7,
        159,
        2,
        160,
        7,
        160,
        2,
        161,
        7,
        161,
        2,
        162,
        7,
        162,
        2,
        163,
        7,
        163,
        2,
        164,
        7,
        164,
        2,
        165,
        7,
        165,
        2,
        166,
        7,
        166,
        2,
        167,
        7,
        167,
        2,
        168,
        7,
        168,
        2,
        169,
        7,
        169,
        2,
        170,
        7,
        170,
        2,
        171,
        7,
        171,
        2,
        172,
        7,
        172,
        2,
        173,
        7,
        173,
        2,
        174,
        7,
        174,
        2,
        175,
        7,
        175,
        2,
        176,
        7,
        176,
        2,
        177,
        7,
        177,
        2,
        178,
        7,
        178,
        2,
        179,
        7,
        179,
        2,
        180,
        7,
        180,
        2,
        181,
        7,
        181,
        2,
        182,
        7,
        182,
        2,
        183,
        7,
        183,
        2,
        184,
        7,
        184,
        2,
        185,
        7,
        185,
        2,
        186,
        7,
        186,
        2,
        187,
        7,
        187,
        2,
        188,
        7,
        188,
        2,
        189,
        7,
        189,
        2,
        190,
        7,
        190,
        2,
        191,
        7,
        191,
        2,
        192,
        7,
        192,
        2,
        193,
        7,
        193,
        2,
        194,
        7,
        194,
        2,
        195,
        7,
        195,
        2,
        196,
        7,
        196,
        2,
        197,
        7,
        197,
        2,
        198,
        7,
        198,
        2,
        199,
        7,
        199,
        2,
        200,
        7,
        200,
        2,
        201,
        7,
        201,
        2,
        202,
        7,
        202,
        2,
        203,
        7,
        203,
        2,
        204,
        7,
        204,
        2,
        205,
        7,
        205,
        2,
        206,
        7,
        206,
        2,
        207,
        7,
        207,
        2,
        208,
        7,
        208,
        2,
        209,
        7,
        209,
        2,
        210,
        7,
        210,
        2,
        211,
        7,
        211,
        2,
        212,
        7,
        212,
        2,
        213,
        7,
        213,
        2,
        214,
        7,
        214,
        2,
        215,
        7,
        215,
        2,
        216,
        7,
        216,
        2,
        217,
        7,
        217,
        2,
        218,
        7,
        218,
        2,
        219,
        7,
        219,
        2,
        220,
        7,
        220,
        2,
        221,
        7,
        221,
        2,
        222,
        7,
        222,
        2,
        223,
        7,
        223,
        2,
        224,
        7,
        224,
        2,
        225,
        7,
        225,
        2,
        226,
        7,
        226,
        2,
        227,
        7,
        227,
        2,
        228,
        7,
        228,
        2,
        229,
        7,
        229,
        2,
        230,
        7,
        230,
        2,
        231,
        7,
        231,
        2,
        232,
        7,
        232,
        2,
        233,
        7,
        233,
        2,
        234,
        7,
        234,
        2,
        235,
        7,
        235,
        2,
        236,
        7,
        236,
        2,
        237,
        7,
        237,
        2,
        238,
        7,
        238,
        2,
        239,
        7,
        239,
        2,
        240,
        7,
        240,
        2,
        241,
        7,
        241,
        2,
        242,
        7,
        242,
        2,
        243,
        7,
        243,
        2,
        244,
        7,
        244,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        5,
        1,
        495,
        8,
        1,
        10,
        1,
        12,
        1,
        498,
        9,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        502,
        8,
        1,
        10,
        1,
        12,
        1,
        505,
        9,
        1,
        5,
        1,
        507,
        8,
        1,
        10,
        1,
        12,
        1,
        510,
        9,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        515,
        8,
        2,
        1,
        3,
        5,
        3,
        518,
        8,
        3,
        10,
        3,
        12,
        3,
        521,
        9,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        528,
        8,
        3,
        1,
        3,
        1,
        3,
        4,
        3,
        532,
        8,
        3,
        11,
        3,
        12,
        3,
        533,
        1,
        3,
        3,
        3,
        537,
        8,
        3,
        1,
        3,
        5,
        3,
        540,
        8,
        3,
        10,
        3,
        12,
        3,
        543,
        9,
        3,
        1,
        3,
        5,
        3,
        546,
        8,
        3,
        10,
        3,
        12,
        3,
        549,
        9,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        556,
        8,
        3,
        1,
        3,
        1,
        3,
        4,
        3,
        560,
        8,
        3,
        11,
        3,
        12,
        3,
        561,
        1,
        3,
        3,
        3,
        565,
        8,
        3,
        1,
        3,
        5,
        3,
        568,
        8,
        3,
        10,
        3,
        12,
        3,
        571,
        9,
        3,
        1,
        3,
        5,
        3,
        574,
        8,
        3,
        10,
        3,
        12,
        3,
        577,
        9,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        585,
        8,
        3,
        1,
        3,
        1,
        3,
        4,
        3,
        589,
        8,
        3,
        11,
        3,
        12,
        3,
        590,
        1,
        3,
        3,
        3,
        594,
        8,
        3,
        1,
        3,
        5,
        3,
        597,
        8,
        3,
        10,
        3,
        12,
        3,
        600,
        9,
        3,
        3,
        3,
        602,
        8,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        607,
        8,
        4,
        10,
        4,
        12,
        4,
        610,
        9,
        4,
        1,
        5,
        1,
        5,
        5,
        5,
        614,
        8,
        5,
        10,
        5,
        12,
        5,
        617,
        9,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        624,
        8,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        643,
        8,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        647,
        8,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        651,
        8,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        3,
        11,
        662,
        8,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        3,
        12,
        668,
        8,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        3,
        12,
        673,
        8,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        698,
        8,
        14,
        1,
        14,
        5,
        14,
        701,
        8,
        14,
        10,
        14,
        12,
        14,
        704,
        9,
        14,
        1,
        15,
        1,
        15,
        3,
        15,
        708,
        8,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        5,
        16,
        714,
        8,
        16,
        10,
        16,
        12,
        16,
        717,
        9,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        722,
        8,
        16,
        10,
        16,
        12,
        16,
        725,
        9,
        16,
        1,
        16,
        5,
        16,
        728,
        8,
        16,
        10,
        16,
        12,
        16,
        731,
        9,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        736,
        8,
        16,
        10,
        16,
        12,
        16,
        739,
        9,
        16,
        1,
        16,
        5,
        16,
        742,
        8,
        16,
        10,
        16,
        12,
        16,
        745,
        9,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        4,
        16,
        751,
        8,
        16,
        11,
        16,
        12,
        16,
        752,
        1,
        16,
        3,
        16,
        756,
        8,
        16,
        1,
        16,
        5,
        16,
        759,
        8,
        16,
        10,
        16,
        12,
        16,
        762,
        9,
        16,
        1,
        16,
        5,
        16,
        765,
        8,
        16,
        10,
        16,
        12,
        16,
        768,
        9,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        4,
        16,
        774,
        8,
        16,
        11,
        16,
        12,
        16,
        775,
        1,
        16,
        3,
        16,
        779,
        8,
        16,
        1,
        16,
        5,
        16,
        782,
        8,
        16,
        10,
        16,
        12,
        16,
        785,
        9,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        790,
        8,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        798,
        8,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        811,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        824,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        832,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        839,
        8,
        18,
        11,
        18,
        12,
        18,
        840,
        1,
        18,
        3,
        18,
        844,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        853,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        861,
        8,
        18,
        11,
        18,
        12,
        18,
        862,
        1,
        18,
        3,
        18,
        866,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        875,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        883,
        8,
        18,
        11,
        18,
        12,
        18,
        884,
        1,
        18,
        3,
        18,
        888,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        897,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        905,
        8,
        18,
        11,
        18,
        12,
        18,
        906,
        1,
        18,
        3,
        18,
        910,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        918,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        925,
        8,
        18,
        11,
        18,
        12,
        18,
        926,
        1,
        18,
        3,
        18,
        930,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        939,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        947,
        8,
        18,
        11,
        18,
        12,
        18,
        948,
        1,
        18,
        3,
        18,
        952,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        961,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        969,
        8,
        18,
        11,
        18,
        12,
        18,
        970,
        1,
        18,
        3,
        18,
        974,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        983,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        991,
        8,
        18,
        11,
        18,
        12,
        18,
        992,
        1,
        18,
        3,
        18,
        996,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        4,
        18,
        1001,
        8,
        18,
        11,
        18,
        12,
        18,
        1002,
        1,
        18,
        3,
        18,
        1006,
        8,
        18,
        3,
        18,
        1008,
        8,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1016,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1029,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1043,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1057,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1070,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1083,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1097,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1111,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1119,
        8,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        5,
        20,
        1124,
        8,
        20,
        10,
        20,
        12,
        20,
        1127,
        9,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        5,
        21,
        1132,
        8,
        21,
        10,
        21,
        12,
        21,
        1135,
        9,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        1143,
        8,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        3,
        24,
        1157,
        8,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        1169,
        8,
        25,
        1,
        26,
        1,
        26,
        3,
        26,
        1173,
        8,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        1179,
        8,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        5,
        28,
        1190,
        8,
        28,
        10,
        28,
        12,
        28,
        1193,
        9,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        1206,
        8,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        1213,
        8,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        5,
        31,
        1218,
        8,
        31,
        10,
        31,
        12,
        31,
        1221,
        9,
        31,
        1,
        31,
        3,
        31,
        1224,
        8,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        3,
        32,
        1230,
        8,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        5,
        33,
        1235,
        8,
        33,
        10,
        33,
        12,
        33,
        1238,
        9,
        33,
        1,
        33,
        3,
        33,
        1241,
        8,
        33,
        1,
        34,
        1,
        34,
        3,
        34,
        1245,
        8,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        1249,
        8,
        34,
        1,
        34,
        3,
        34,
        1252,
        8,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        1256,
        8,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        1260,
        8,
        34,
        3,
        34,
        1262,
        8,
        34,
        1,
        35,
        1,
        35,
        3,
        35,
        1266,
        8,
        35,
        1,
        36,
        5,
        36,
        1269,
        8,
        36,
        10,
        36,
        12,
        36,
        1272,
        9,
        36,
        1,
        36,
        1,
        36,
        5,
        36,
        1276,
        8,
        36,
        10,
        36,
        12,
        36,
        1279,
        9,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        5,
        37,
        1285,
        8,
        37,
        10,
        37,
        12,
        37,
        1288,
        9,
        37,
        1,
        38,
        1,
        38,
        1,
        39,
        1,
        39,
        3,
        39,
        1294,
        8,
        39,
        1,
        39,
        1,
        39,
        1,
        40,
        1,
        40,
        1,
        41,
        1,
        41,
        1,
        42,
        3,
        42,
        1303,
        8,
        42,
        1,
        42,
        3,
        42,
        1306,
        8,
        42,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        5,
        44,
        1312,
        8,
        44,
        10,
        44,
        12,
        44,
        1315,
        9,
        44,
        1,
        44,
        3,
        44,
        1318,
        8,
        44,
        1,
        45,
        1,
        45,
        3,
        45,
        1322,
        8,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        5,
        45,
        1328,
        8,
        45,
        10,
        45,
        12,
        45,
        1331,
        9,
        45,
        1,
        45,
        3,
        45,
        1334,
        8,
        45,
        1,
        46,
        1,
        46,
        4,
        46,
        1338,
        8,
        46,
        11,
        46,
        12,
        46,
        1339,
        1,
        47,
        1,
        47,
        3,
        47,
        1344,
        8,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        3,
        48,
        1351,
        8,
        48,
        1,
        49,
        1,
        49,
        1,
        49,
        5,
        49,
        1356,
        8,
        49,
        10,
        49,
        12,
        49,
        1359,
        9,
        49,
        1,
        49,
        3,
        49,
        1362,
        8,
        49,
        1,
        49,
        4,
        49,
        1365,
        8,
        49,
        11,
        49,
        12,
        49,
        1366,
        1,
        49,
        5,
        49,
        1370,
        8,
        49,
        10,
        49,
        12,
        49,
        1373,
        9,
        49,
        1,
        49,
        3,
        49,
        1376,
        8,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        1392,
        8,
        50,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        3,
        51,
        1402,
        8,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        1409,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        1416,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        1422,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        4,
        52,
        1427,
        8,
        52,
        11,
        52,
        12,
        52,
        1428,
        1,
        52,
        1,
        52,
        3,
        52,
        1433,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        1439,
        8,
        52,
        3,
        52,
        1441,
        8,
        52,
        1,
        53,
        1,
        53,
        3,
        53,
        1445,
        8,
        53,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        3,
        55,
        1451,
        8,
        55,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        1457,
        8,
        56,
        1,
        56,
        3,
        56,
        1460,
        8,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        5,
        57,
        1466,
        8,
        57,
        10,
        57,
        12,
        57,
        1469,
        9,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        5,
        58,
        1475,
        8,
        58,
        10,
        58,
        12,
        58,
        1478,
        9,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        60,
        1,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        3,
        61,
        1489,
        8,
        61,
        1,
        62,
        1,
        62,
        3,
        62,
        1493,
        8,
        62,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        64,
        1,
        64,
        5,
        64,
        1500,
        8,
        64,
        10,
        64,
        12,
        64,
        1503,
        9,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        4,
        64,
        1511,
        8,
        64,
        11,
        64,
        12,
        64,
        1512,
        1,
        64,
        1,
        64,
        3,
        64,
        1517,
        8,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        3,
        65,
        1522,
        8,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        3,
        65,
        1528,
        8,
        65,
        1,
        66,
        1,
        66,
        1,
        66,
        5,
        66,
        1533,
        8,
        66,
        10,
        66,
        12,
        66,
        1536,
        9,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1541,
        8,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        5,
        68,
        1546,
        8,
        68,
        10,
        68,
        12,
        68,
        1549,
        9,
        68,
        1,
        69,
        1,
        69,
        1,
        69,
        3,
        69,
        1554,
        8,
        69,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        5,
        70,
        1562,
        8,
        70,
        10,
        70,
        12,
        70,
        1565,
        9,
        70,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        3,
        71,
        1573,
        8,
        71,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        4,
        72,
        1579,
        8,
        72,
        11,
        72,
        12,
        72,
        1580,
        1,
        73,
        3,
        73,
        1584,
        8,
        73,
        1,
        73,
        1,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        3,
        74,
        1591,
        8,
        74,
        1,
        74,
        1,
        74,
        3,
        74,
        1595,
        8,
        74,
        1,
        74,
        3,
        74,
        1598,
        8,
        74,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        75,
        3,
        75,
        1604,
        8,
        75,
        1,
        75,
        1,
        75,
        1,
        76,
        3,
        76,
        1609,
        8,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        3,
        76,
        1614,
        8,
        76,
        1,
        76,
        1,
        76,
        3,
        76,
        1618,
        8,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        3,
        76,
        1623,
        8,
        76,
        1,
        76,
        1,
        76,
        3,
        76,
        1627,
        8,
        76,
        1,
        76,
        1,
        76,
        1,
        77,
        1,
        77,
        1,
        78,
        1,
        78,
        5,
        78,
        1635,
        8,
        78,
        10,
        78,
        12,
        78,
        1638,
        9,
        78,
        1,
        78,
        5,
        78,
        1641,
        8,
        78,
        10,
        78,
        12,
        78,
        1644,
        9,
        78,
        1,
        78,
        3,
        78,
        1647,
        8,
        78,
        1,
        78,
        1,
        78,
        5,
        78,
        1651,
        8,
        78,
        10,
        78,
        12,
        78,
        1654,
        9,
        78,
        1,
        78,
        3,
        78,
        1657,
        8,
        78,
        1,
        78,
        4,
        78,
        1660,
        8,
        78,
        11,
        78,
        12,
        78,
        1661,
        1,
        78,
        5,
        78,
        1665,
        8,
        78,
        10,
        78,
        12,
        78,
        1668,
        9,
        78,
        1,
        78,
        3,
        78,
        1671,
        8,
        78,
        1,
        78,
        4,
        78,
        1674,
        8,
        78,
        11,
        78,
        12,
        78,
        1675,
        1,
        78,
        3,
        78,
        1679,
        8,
        78,
        1,
        78,
        3,
        78,
        1682,
        8,
        78,
        1,
        79,
        4,
        79,
        1685,
        8,
        79,
        11,
        79,
        12,
        79,
        1686,
        1,
        79,
        1,
        79,
        3,
        79,
        1691,
        8,
        79,
        1,
        80,
        5,
        80,
        1694,
        8,
        80,
        10,
        80,
        12,
        80,
        1697,
        9,
        80,
        1,
        80,
        4,
        80,
        1700,
        8,
        80,
        11,
        80,
        12,
        80,
        1701,
        1,
        80,
        1,
        80,
        3,
        80,
        1706,
        8,
        80,
        1,
        81,
        1,
        81,
        1,
        81,
        5,
        81,
        1711,
        8,
        81,
        10,
        81,
        12,
        81,
        1714,
        9,
        81,
        1,
        81,
        3,
        81,
        1717,
        8,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        5,
        81,
        1722,
        8,
        81,
        10,
        81,
        12,
        81,
        1725,
        9,
        81,
        1,
        81,
        3,
        81,
        1728,
        8,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        4,
        81,
        1733,
        8,
        81,
        11,
        81,
        12,
        81,
        1734,
        1,
        81,
        3,
        81,
        1738,
        8,
        81,
        1,
        81,
        3,
        81,
        1741,
        8,
        81,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        3,
        83,
        1750,
        8,
        83,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        3,
        84,
        1756,
        8,
        84,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        3,
        85,
        1765,
        8,
        85,
        1,
        86,
        1,
        86,
        3,
        86,
        1769,
        8,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        3,
        86,
        1775,
        8,
        86,
        3,
        86,
        1777,
        8,
        86,
        1,
        87,
        1,
        87,
        3,
        87,
        1781,
        8,
        87,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        3,
        92,
        1806,
        8,
        92,
        3,
        92,
        1808,
        8,
        92,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        93,
        3,
        93,
        1821,
        8,
        93,
        3,
        93,
        1823,
        8,
        93,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        95,
        3,
        95,
        1834,
        8,
        95,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        3,
        96,
        1843,
        8,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        3,
        96,
        1853,
        8,
        96,
        3,
        96,
        1855,
        8,
        96,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        5,
        97,
        1862,
        8,
        97,
        10,
        97,
        12,
        97,
        1865,
        9,
        97,
        1,
        97,
        3,
        97,
        1868,
        8,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        5,
        97,
        1878,
        8,
        97,
        10,
        97,
        12,
        97,
        1881,
        9,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        5,
        97,
        1892,
        8,
        97,
        10,
        97,
        12,
        97,
        1895,
        9,
        97,
        1,
        97,
        3,
        97,
        1898,
        8,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        5,
        97,
        1909,
        8,
        97,
        10,
        97,
        12,
        97,
        1912,
        9,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        3,
        97,
        1917,
        8,
        97,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        3,
        98,
        1924,
        8,
        98,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        4,
        99,
        1935,
        8,
        99,
        11,
        99,
        12,
        99,
        1936,
        1,
        99,
        3,
        99,
        1940,
        8,
        99,
        1,
        99,
        3,
        99,
        1943,
        8,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        4,
        99,
        1949,
        8,
        99,
        11,
        99,
        12,
        99,
        1950,
        1,
        99,
        3,
        99,
        1954,
        8,
        99,
        1,
        99,
        3,
        99,
        1957,
        8,
        99,
        3,
        99,
        1959,
        8,
        99,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        3,
        100,
        1965,
        8,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        3,
        100,
        1973,
        8,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        3,
        101,
        1980,
        8,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        4,
        103,
        1995,
        8,
        103,
        11,
        103,
        12,
        103,
        1996,
        1,
        103,
        1,
        103,
        1,
        104,
        1,
        104,
        1,
        104,
        3,
        104,
        2004,
        8,
        104,
        1,
        104,
        3,
        104,
        2007,
        8,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        2012,
        8,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        107,
        1,
        107,
        3,
        107,
        2022,
        8,
        107,
        1,
        108,
        1,
        108,
        3,
        108,
        2026,
        8,
        108,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        110,
        1,
        110,
        1,
        110,
        5,
        110,
        2035,
        8,
        110,
        10,
        110,
        12,
        110,
        2038,
        9,
        110,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        3,
        111,
        2048,
        8,
        111,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        3,
        112,
        2056,
        8,
        112,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        3,
        113,
        2064,
        8,
        113,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        3,
        114,
        2074,
        8,
        114,
        1,
        115,
        1,
        115,
        1,
        115,
        3,
        115,
        2079,
        8,
        115,
        1,
        116,
        1,
        116,
        1,
        116,
        3,
        116,
        2084,
        8,
        116,
        1,
        117,
        1,
        117,
        1,
        118,
        1,
        118,
        1,
        119,
        1,
        119,
        1,
        120,
        1,
        120,
        1,
        121,
        1,
        121,
        1,
        122,
        1,
        122,
        1,
        123,
        1,
        123,
        1,
        123,
        1,
        123,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        5,
        124,
        2108,
        8,
        124,
        10,
        124,
        12,
        124,
        2111,
        9,
        124,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        126,
        1,
        126,
        3,
        126,
        2119,
        8,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        2124,
        8,
        126,
        1,
        126,
        3,
        126,
        2127,
        8,
        126,
        1,
        127,
        1,
        127,
        1,
        127,
        3,
        127,
        2132,
        8,
        127,
        1,
        128,
        1,
        128,
        1,
        128,
        5,
        128,
        2137,
        8,
        128,
        10,
        128,
        12,
        128,
        2140,
        9,
        128,
        1,
        128,
        3,
        128,
        2143,
        8,
        128,
        1,
        129,
        1,
        129,
        3,
        129,
        2147,
        8,
        129,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        2153,
        8,
        130,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        2160,
        8,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        2169,
        8,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        2176,
        8,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        2180,
        8,
        131,
        1,
        132,
        1,
        132,
        1,
        132,
        5,
        132,
        2185,
        8,
        132,
        10,
        132,
        12,
        132,
        2188,
        9,
        132,
        1,
        133,
        1,
        133,
        3,
        133,
        2192,
        8,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        134,
        1,
        134,
        1,
        134,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        3,
        135,
        2208,
        8,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        3,
        135,
        2216,
        8,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        3,
        135,
        2226,
        8,
        135,
        1,
        135,
        1,
        135,
        3,
        135,
        2230,
        8,
        135,
        1,
        136,
        1,
        136,
        1,
        136,
        5,
        136,
        2235,
        8,
        136,
        10,
        136,
        12,
        136,
        2238,
        9,
        136,
        1,
        137,
        1,
        137,
        1,
        137,
        5,
        137,
        2243,
        8,
        137,
        10,
        137,
        12,
        137,
        2246,
        9,
        137,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        139,
        1,
        139,
        1,
        139,
        3,
        139,
        2255,
        8,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        141,
        1,
        141,
        1,
        141,
        5,
        141,
        2267,
        8,
        141,
        10,
        141,
        12,
        141,
        2270,
        9,
        141,
        1,
        141,
        3,
        141,
        2273,
        8,
        141,
        1,
        142,
        1,
        142,
        3,
        142,
        2277,
        8,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        3,
        142,
        2283,
        8,
        142,
        1,
        143,
        1,
        143,
        1,
        143,
        1,
        144,
        1,
        144,
        1,
        144,
        5,
        144,
        2291,
        8,
        144,
        10,
        144,
        12,
        144,
        2294,
        9,
        144,
        1,
        144,
        3,
        144,
        2297,
        8,
        144,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        3,
        145,
        2307,
        8,
        145,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        3,
        146,
        2314,
        8,
        146,
        3,
        146,
        2316,
        8,
        146,
        1,
        147,
        1,
        147,
        1,
        147,
        5,
        147,
        2321,
        8,
        147,
        10,
        147,
        12,
        147,
        2324,
        9,
        147,
        1,
        147,
        3,
        147,
        2327,
        8,
        147,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        3,
        148,
        2333,
        8,
        148,
        1,
        149,
        1,
        149,
        1,
        149,
        5,
        149,
        2338,
        8,
        149,
        10,
        149,
        12,
        149,
        2341,
        9,
        149,
        1,
        149,
        3,
        149,
        2344,
        8,
        149,
        1,
        150,
        1,
        150,
        1,
        150,
        3,
        150,
        2349,
        8,
        150,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        152,
        1,
        152,
        3,
        152,
        2357,
        8,
        152,
        1,
        153,
        1,
        153,
        1,
        153,
        5,
        153,
        2362,
        8,
        153,
        10,
        153,
        12,
        153,
        2365,
        9,
        153,
        1,
        154,
        1,
        154,
        1,
        154,
        5,
        154,
        2370,
        8,
        154,
        10,
        154,
        12,
        154,
        2373,
        9,
        154,
        1,
        155,
        1,
        155,
        1,
        155,
        3,
        155,
        2378,
        8,
        155,
        1,
        156,
        1,
        156,
        5,
        156,
        2382,
        8,
        156,
        10,
        156,
        12,
        156,
        2385,
        9,
        156,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        3,
        157,
        2397,
        8,
        157,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        3,
        159,
        2406,
        8,
        159,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        5,
        168,
        2440,
        8,
        168,
        10,
        168,
        12,
        168,
        2443,
        9,
        168,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        5,
        169,
        2451,
        8,
        169,
        10,
        169,
        12,
        169,
        2454,
        9,
        169,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        170,
        5,
        170,
        2462,
        8,
        170,
        10,
        170,
        12,
        170,
        2465,
        9,
        170,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        5,
        171,
        2476,
        8,
        171,
        10,
        171,
        12,
        171,
        2479,
        9,
        171,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        5,
        172,
        2490,
        8,
        172,
        10,
        172,
        12,
        172,
        2493,
        9,
        172,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        5,
        173,
        2513,
        8,
        173,
        10,
        173,
        12,
        173,
        2516,
        9,
        173,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        3,
        174,
        2525,
        8,
        174,
        1,
        175,
        1,
        175,
        1,
        175,
        1,
        175,
        1,
        175,
        3,
        175,
        2532,
        8,
        175,
        1,
        176,
        1,
        176,
        1,
        176,
        3,
        176,
        2537,
        8,
        176,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        3,
        177,
        2550,
        8,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        5,
        177,
        2558,
        8,
        177,
        10,
        177,
        12,
        177,
        2561,
        9,
        177,
        1,
        178,
        1,
        178,
        3,
        178,
        2565,
        8,
        178,
        1,
        178,
        1,
        178,
        1,
        178,
        3,
        178,
        2570,
        8,
        178,
        5,
        178,
        2572,
        8,
        178,
        10,
        178,
        12,
        178,
        2575,
        9,
        178,
        1,
        178,
        3,
        178,
        2578,
        8,
        178,
        1,
        179,
        3,
        179,
        2581,
        8,
        179,
        1,
        179,
        1,
        179,
        3,
        179,
        2585,
        8,
        179,
        1,
        179,
        1,
        179,
        3,
        179,
        2589,
        8,
        179,
        3,
        179,
        2591,
        8,
        179,
        1,
        179,
        3,
        179,
        2594,
        8,
        179,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        3,
        180,
        2606,
        8,
        180,
        1,
        180,
        1,
        180,
        3,
        180,
        2610,
        8,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        3,
        180,
        2616,
        8,
        180,
        1,
        180,
        3,
        180,
        2619,
        8,
        180,
        1,
        181,
        1,
        181,
        1,
        181,
        3,
        181,
        2624,
        8,
        181,
        1,
        181,
        1,
        181,
        1,
        182,
        1,
        182,
        3,
        182,
        2630,
        8,
        182,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        183,
        1,
        183,
        1,
        184,
        1,
        184,
        5,
        184,
        2639,
        8,
        184,
        10,
        184,
        12,
        184,
        2642,
        9,
        184,
        1,
        184,
        5,
        184,
        2645,
        8,
        184,
        10,
        184,
        12,
        184,
        2648,
        9,
        184,
        1,
        184,
        3,
        184,
        2651,
        8,
        184,
        1,
        184,
        1,
        184,
        5,
        184,
        2655,
        8,
        184,
        10,
        184,
        12,
        184,
        2658,
        9,
        184,
        1,
        184,
        3,
        184,
        2661,
        8,
        184,
        1,
        184,
        4,
        184,
        2664,
        8,
        184,
        11,
        184,
        12,
        184,
        2665,
        1,
        184,
        5,
        184,
        2669,
        8,
        184,
        10,
        184,
        12,
        184,
        2672,
        9,
        184,
        1,
        184,
        3,
        184,
        2675,
        8,
        184,
        1,
        184,
        4,
        184,
        2678,
        8,
        184,
        11,
        184,
        12,
        184,
        2679,
        1,
        184,
        3,
        184,
        2683,
        8,
        184,
        1,
        184,
        3,
        184,
        2686,
        8,
        184,
        1,
        185,
        4,
        185,
        2689,
        8,
        185,
        11,
        185,
        12,
        185,
        2690,
        1,
        185,
        1,
        185,
        3,
        185,
        2695,
        8,
        185,
        1,
        186,
        5,
        186,
        2698,
        8,
        186,
        10,
        186,
        12,
        186,
        2701,
        9,
        186,
        1,
        186,
        4,
        186,
        2704,
        8,
        186,
        11,
        186,
        12,
        186,
        2705,
        1,
        186,
        1,
        186,
        3,
        186,
        2710,
        8,
        186,
        1,
        187,
        1,
        187,
        1,
        187,
        5,
        187,
        2715,
        8,
        187,
        10,
        187,
        12,
        187,
        2718,
        9,
        187,
        1,
        187,
        3,
        187,
        2721,
        8,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        4,
        187,
        2726,
        8,
        187,
        11,
        187,
        12,
        187,
        2727,
        1,
        187,
        3,
        187,
        2731,
        8,
        187,
        1,
        187,
        3,
        187,
        2734,
        8,
        187,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        189,
        1,
        189,
        3,
        189,
        2741,
        8,
        189,
        1,
        190,
        1,
        190,
        1,
        190,
        3,
        190,
        2746,
        8,
        190,
        1,
        191,
        1,
        191,
        3,
        191,
        2750,
        8,
        191,
        1,
        191,
        3,
        191,
        2753,
        8,
        191,
        1,
        192,
        1,
        192,
        1,
        193,
        1,
        193,
        3,
        193,
        2759,
        8,
        193,
        1,
        194,
        1,
        194,
        3,
        194,
        2763,
        8,
        194,
        1,
        195,
        1,
        195,
        3,
        195,
        2767,
        8,
        195,
        1,
        196,
        1,
        196,
        3,
        196,
        2771,
        8,
        196,
        1,
        197,
        1,
        197,
        1,
        197,
        3,
        197,
        2776,
        8,
        197,
        1,
        198,
        1,
        198,
        1,
        198,
        3,
        198,
        2781,
        8,
        198,
        1,
        199,
        1,
        199,
        1,
        199,
        3,
        199,
        2786,
        8,
        199,
        1,
        200,
        1,
        200,
        1,
        200,
        3,
        200,
        2791,
        8,
        200,
        1,
        201,
        1,
        201,
        1,
        201,
        3,
        201,
        2796,
        8,
        201,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        4,
        202,
        2904,
        8,
        202,
        11,
        202,
        12,
        202,
        2905,
        1,
        203,
        1,
        203,
        1,
        203,
        3,
        203,
        2911,
        8,
        203,
        1,
        203,
        3,
        203,
        2914,
        8,
        203,
        1,
        203,
        3,
        203,
        2917,
        8,
        203,
        1,
        203,
        3,
        203,
        2920,
        8,
        203,
        1,
        203,
        1,
        203,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        205,
        1,
        205,
        5,
        205,
        2929,
        8,
        205,
        10,
        205,
        12,
        205,
        2932,
        9,
        205,
        1,
        206,
        1,
        206,
        3,
        206,
        2936,
        8,
        206,
        1,
        207,
        1,
        207,
        5,
        207,
        2940,
        8,
        207,
        10,
        207,
        12,
        207,
        2943,
        9,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        5,
        207,
        2948,
        8,
        207,
        10,
        207,
        12,
        207,
        2951,
        9,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        5,
        207,
        2956,
        8,
        207,
        10,
        207,
        12,
        207,
        2959,
        9,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        5,
        207,
        2964,
        8,
        207,
        10,
        207,
        12,
        207,
        2967,
        9,
        207,
        1,
        207,
        3,
        207,
        2970,
        8,
        207,
        1,
        208,
        1,
        208,
        1,
        209,
        1,
        209,
        4,
        209,
        2976,
        8,
        209,
        11,
        209,
        12,
        209,
        2977,
        1,
        210,
        1,
        210,
        3,
        210,
        2982,
        8,
        210,
        1,
        210,
        1,
        210,
        1,
        211,
        1,
        211,
        1,
        211,
        1,
        211,
        1,
        211,
        3,
        211,
        2991,
        8,
        211,
        1,
        211,
        1,
        211,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        213,
        1,
        213,
        3,
        213,
        3001,
        8,
        213,
        1,
        213,
        1,
        213,
        1,
        214,
        1,
        214,
        1,
        214,
        5,
        214,
        3008,
        8,
        214,
        10,
        214,
        12,
        214,
        3011,
        9,
        214,
        1,
        214,
        3,
        214,
        3014,
        8,
        214,
        1,
        215,
        1,
        215,
        1,
        215,
        3,
        215,
        3019,
        8,
        215,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        217,
        4,
        217,
        3026,
        8,
        217,
        11,
        217,
        12,
        217,
        3027,
        1,
        218,
        3,
        218,
        3031,
        8,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        5,
        218,
        3039,
        8,
        218,
        10,
        218,
        12,
        218,
        3042,
        9,
        218,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        221,
        1,
        221,
        1,
        221,
        3,
        221,
        3057,
        8,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        223,
        1,
        223,
        3,
        223,
        3069,
        8,
        223,
        1,
        224,
        1,
        224,
        1,
        224,
        5,
        224,
        3074,
        8,
        224,
        10,
        224,
        12,
        224,
        3077,
        9,
        224,
        1,
        224,
        1,
        224,
        3,
        224,
        3081,
        8,
        224,
        1,
        224,
        3,
        224,
        3084,
        8,
        224,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        3,
        225,
        3090,
        8,
        225,
        1,
        226,
        1,
        226,
        1,
        226,
        5,
        226,
        3095,
        8,
        226,
        10,
        226,
        12,
        226,
        3098,
        9,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        5,
        226,
        3104,
        8,
        226,
        10,
        226,
        12,
        226,
        3107,
        9,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        5,
        226,
        3112,
        8,
        226,
        10,
        226,
        12,
        226,
        3115,
        9,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        5,
        226,
        3120,
        8,
        226,
        10,
        226,
        12,
        226,
        3123,
        9,
        226,
        3,
        226,
        3125,
        8,
        226,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        3,
        228,
        3135,
        8,
        228,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        3,
        229,
        3143,
        8,
        229,
        1,
        230,
        1,
        230,
        1,
        230,
        5,
        230,
        3148,
        8,
        230,
        10,
        230,
        12,
        230,
        3151,
        9,
        230,
        1,
        230,
        3,
        230,
        3154,
        8,
        230,
        1,
        231,
        1,
        231,
        1,
        231,
        5,
        231,
        3159,
        8,
        231,
        10,
        231,
        12,
        231,
        3162,
        9,
        231,
        1,
        231,
        3,
        231,
        3165,
        8,
        231,
        1,
        232,
        1,
        232,
        1,
        232,
        4,
        232,
        3170,
        8,
        232,
        11,
        232,
        12,
        232,
        3171,
        1,
        232,
        3,
        232,
        3175,
        8,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        3,
        232,
        3180,
        8,
        232,
        1,
        233,
        1,
        233,
        1,
        233,
        3,
        233,
        3185,
        8,
        233,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        3,
        234,
        3197,
        8,
        234,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        3,
        235,
        3206,
        8,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        3,
        235,
        3211,
        8,
        235,
        1,
        235,
        3,
        235,
        3214,
        8,
        235,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        3,
        236,
        3222,
        8,
        236,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        3,
        237,
        3233,
        8,
        237,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        3,
        238,
        3251,
        8,
        238,
        1,
        238,
        5,
        238,
        3254,
        8,
        238,
        10,
        238,
        12,
        238,
        3257,
        9,
        238,
        1,
        239,
        1,
        239,
        1,
        239,
        5,
        239,
        3262,
        8,
        239,
        10,
        239,
        12,
        239,
        3265,
        9,
        239,
        1,
        239,
        3,
        239,
        3268,
        8,
        239,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        240,
        3,
        240,
        3280,
        8,
        240,
        1,
        241,
        1,
        241,
        1,
        241,
        3,
        241,
        3285,
        8,
        241,
        1,
        241,
        1,
        241,
        1,
        241,
        3,
        241,
        3290,
        8,
        241,
        1,
        241,
        3,
        241,
        3293,
        8,
        241,
        1,
        242,
        1,
        242,
        1,
        242,
        5,
        242,
        3298,
        8,
        242,
        10,
        242,
        12,
        242,
        3301,
        9,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        5,
        242,
        3313,
        8,
        242,
        10,
        242,
        12,
        242,
        3316,
        9,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        5,
        242,
        3325,
        8,
        242,
        10,
        242,
        12,
        242,
        3328,
        9,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        5,
        242,
        3347,
        8,
        242,
        10,
        242,
        12,
        242,
        3350,
        9,
        242,
        3,
        242,
        3352,
        8,
        242,
        1,
        243,
        1,
        243,
        1,
        244,
        1,
        244,
        1,
        244,
        0,
        12,
        28,
        56,
        140,
        248,
        336,
        338,
        340,
        342,
        344,
        346,
        354,
        476,
        245,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        234,
        236,
        238,
        240,
        242,
        244,
        246,
        248,
        250,
        252,
        254,
        256,
        258,
        260,
        262,
        264,
        266,
        268,
        270,
        272,
        274,
        276,
        278,
        280,
        282,
        284,
        286,
        288,
        290,
        292,
        294,
        296,
        298,
        300,
        302,
        304,
        306,
        308,
        310,
        312,
        314,
        316,
        318,
        320,
        322,
        324,
        326,
        328,
        330,
        332,
        334,
        336,
        338,
        340,
        342,
        344,
        346,
        348,
        350,
        352,
        354,
        356,
        358,
        360,
        362,
        364,
        366,
        368,
        370,
        372,
        374,
        376,
        378,
        380,
        382,
        384,
        386,
        388,
        390,
        392,
        394,
        396,
        398,
        400,
        402,
        404,
        406,
        408,
        410,
        412,
        414,
        416,
        418,
        420,
        422,
        424,
        426,
        428,
        430,
        432,
        434,
        436,
        438,
        440,
        442,
        444,
        446,
        448,
        450,
        452,
        454,
        456,
        458,
        460,
        462,
        464,
        466,
        468,
        470,
        472,
        474,
        476,
        478,
        480,
        482,
        484,
        486,
        488,
        0,
        5,
        2,
        1,
        83,
        83,
        125,
        125,
        1,
        0,
        101,
        107,
        1,
        0,
        110,
        122,
        2,
        0,
        75,
        75,
        77,
        77,
        2,
        0,
        55,
        57,
        59,
        59,
        3777,
        0,
        490,
        1,
        0,
        0,
        0,
        2,
        496,
        1,
        0,
        0,
        0,
        4,
        514,
        1,
        0,
        0,
        0,
        6,
        601,
        1,
        0,
        0,
        0,
        8,
        603,
        1,
        0,
        0,
        0,
        10,
        611,
        1,
        0,
        0,
        0,
        12,
        623,
        1,
        0,
        0,
        0,
        14,
        625,
        1,
        0,
        0,
        0,
        16,
        628,
        1,
        0,
        0,
        0,
        18,
        631,
        1,
        0,
        0,
        0,
        20,
        650,
        1,
        0,
        0,
        0,
        22,
        661,
        1,
        0,
        0,
        0,
        24,
        663,
        1,
        0,
        0,
        0,
        26,
        677,
        1,
        0,
        0,
        0,
        28,
        681,
        1,
        0,
        0,
        0,
        30,
        705,
        1,
        0,
        0,
        0,
        32,
        789,
        1,
        0,
        0,
        0,
        34,
        797,
        1,
        0,
        0,
        0,
        36,
        1007,
        1,
        0,
        0,
        0,
        38,
        1118,
        1,
        0,
        0,
        0,
        40,
        1120,
        1,
        0,
        0,
        0,
        42,
        1128,
        1,
        0,
        0,
        0,
        44,
        1142,
        1,
        0,
        0,
        0,
        46,
        1144,
        1,
        0,
        0,
        0,
        48,
        1156,
        1,
        0,
        0,
        0,
        50,
        1168,
        1,
        0,
        0,
        0,
        52,
        1172,
        1,
        0,
        0,
        0,
        54,
        1178,
        1,
        0,
        0,
        0,
        56,
        1180,
        1,
        0,
        0,
        0,
        58,
        1205,
        1,
        0,
        0,
        0,
        60,
        1212,
        1,
        0,
        0,
        0,
        62,
        1214,
        1,
        0,
        0,
        0,
        64,
        1225,
        1,
        0,
        0,
        0,
        66,
        1231,
        1,
        0,
        0,
        0,
        68,
        1261,
        1,
        0,
        0,
        0,
        70,
        1265,
        1,
        0,
        0,
        0,
        72,
        1270,
        1,
        0,
        0,
        0,
        74,
        1280,
        1,
        0,
        0,
        0,
        76,
        1289,
        1,
        0,
        0,
        0,
        78,
        1291,
        1,
        0,
        0,
        0,
        80,
        1297,
        1,
        0,
        0,
        0,
        82,
        1299,
        1,
        0,
        0,
        0,
        84,
        1302,
        1,
        0,
        0,
        0,
        86,
        1307,
        1,
        0,
        0,
        0,
        88,
        1309,
        1,
        0,
        0,
        0,
        90,
        1319,
        1,
        0,
        0,
        0,
        92,
        1337,
        1,
        0,
        0,
        0,
        94,
        1343,
        1,
        0,
        0,
        0,
        96,
        1350,
        1,
        0,
        0,
        0,
        98,
        1352,
        1,
        0,
        0,
        0,
        100,
        1391,
        1,
        0,
        0,
        0,
        102,
        1401,
        1,
        0,
        0,
        0,
        104,
        1440,
        1,
        0,
        0,
        0,
        106,
        1444,
        1,
        0,
        0,
        0,
        108,
        1446,
        1,
        0,
        0,
        0,
        110,
        1448,
        1,
        0,
        0,
        0,
        112,
        1459,
        1,
        0,
        0,
        0,
        114,
        1461,
        1,
        0,
        0,
        0,
        116,
        1470,
        1,
        0,
        0,
        0,
        118,
        1479,
        1,
        0,
        0,
        0,
        120,
        1482,
        1,
        0,
        0,
        0,
        122,
        1484,
        1,
        0,
        0,
        0,
        124,
        1492,
        1,
        0,
        0,
        0,
        126,
        1494,
        1,
        0,
        0,
        0,
        128,
        1516,
        1,
        0,
        0,
        0,
        130,
        1527,
        1,
        0,
        0,
        0,
        132,
        1529,
        1,
        0,
        0,
        0,
        134,
        1537,
        1,
        0,
        0,
        0,
        136,
        1542,
        1,
        0,
        0,
        0,
        138,
        1550,
        1,
        0,
        0,
        0,
        140,
        1555,
        1,
        0,
        0,
        0,
        142,
        1572,
        1,
        0,
        0,
        0,
        144,
        1578,
        1,
        0,
        0,
        0,
        146,
        1583,
        1,
        0,
        0,
        0,
        148,
        1587,
        1,
        0,
        0,
        0,
        150,
        1603,
        1,
        0,
        0,
        0,
        152,
        1608,
        1,
        0,
        0,
        0,
        154,
        1630,
        1,
        0,
        0,
        0,
        156,
        1681,
        1,
        0,
        0,
        0,
        158,
        1684,
        1,
        0,
        0,
        0,
        160,
        1695,
        1,
        0,
        0,
        0,
        162,
        1740,
        1,
        0,
        0,
        0,
        164,
        1742,
        1,
        0,
        0,
        0,
        166,
        1749,
        1,
        0,
        0,
        0,
        168,
        1755,
        1,
        0,
        0,
        0,
        170,
        1764,
        1,
        0,
        0,
        0,
        172,
        1776,
        1,
        0,
        0,
        0,
        174,
        1778,
        1,
        0,
        0,
        0,
        176,
        1782,
        1,
        0,
        0,
        0,
        178,
        1785,
        1,
        0,
        0,
        0,
        180,
        1788,
        1,
        0,
        0,
        0,
        182,
        1791,
        1,
        0,
        0,
        0,
        184,
        1807,
        1,
        0,
        0,
        0,
        186,
        1822,
        1,
        0,
        0,
        0,
        188,
        1824,
        1,
        0,
        0,
        0,
        190,
        1828,
        1,
        0,
        0,
        0,
        192,
        1854,
        1,
        0,
        0,
        0,
        194,
        1916,
        1,
        0,
        0,
        0,
        196,
        1923,
        1,
        0,
        0,
        0,
        198,
        1958,
        1,
        0,
        0,
        0,
        200,
        1972,
        1,
        0,
        0,
        0,
        202,
        1974,
        1,
        0,
        0,
        0,
        204,
        1984,
        1,
        0,
        0,
        0,
        206,
        1988,
        1,
        0,
        0,
        0,
        208,
        2006,
        1,
        0,
        0,
        0,
        210,
        2008,
        1,
        0,
        0,
        0,
        212,
        2016,
        1,
        0,
        0,
        0,
        214,
        2021,
        1,
        0,
        0,
        0,
        216,
        2025,
        1,
        0,
        0,
        0,
        218,
        2027,
        1,
        0,
        0,
        0,
        220,
        2031,
        1,
        0,
        0,
        0,
        222,
        2047,
        1,
        0,
        0,
        0,
        224,
        2055,
        1,
        0,
        0,
        0,
        226,
        2063,
        1,
        0,
        0,
        0,
        228,
        2073,
        1,
        0,
        0,
        0,
        230,
        2078,
        1,
        0,
        0,
        0,
        232,
        2083,
        1,
        0,
        0,
        0,
        234,
        2085,
        1,
        0,
        0,
        0,
        236,
        2087,
        1,
        0,
        0,
        0,
        238,
        2089,
        1,
        0,
        0,
        0,
        240,
        2091,
        1,
        0,
        0,
        0,
        242,
        2093,
        1,
        0,
        0,
        0,
        244,
        2095,
        1,
        0,
        0,
        0,
        246,
        2097,
        1,
        0,
        0,
        0,
        248,
        2101,
        1,
        0,
        0,
        0,
        250,
        2112,
        1,
        0,
        0,
        0,
        252,
        2126,
        1,
        0,
        0,
        0,
        254,
        2128,
        1,
        0,
        0,
        0,
        256,
        2133,
        1,
        0,
        0,
        0,
        258,
        2146,
        1,
        0,
        0,
        0,
        260,
        2152,
        1,
        0,
        0,
        0,
        262,
        2179,
        1,
        0,
        0,
        0,
        264,
        2181,
        1,
        0,
        0,
        0,
        266,
        2191,
        1,
        0,
        0,
        0,
        268,
        2196,
        1,
        0,
        0,
        0,
        270,
        2229,
        1,
        0,
        0,
        0,
        272,
        2231,
        1,
        0,
        0,
        0,
        274,
        2239,
        1,
        0,
        0,
        0,
        276,
        2247,
        1,
        0,
        0,
        0,
        278,
        2251,
        1,
        0,
        0,
        0,
        280,
        2259,
        1,
        0,
        0,
        0,
        282,
        2263,
        1,
        0,
        0,
        0,
        284,
        2282,
        1,
        0,
        0,
        0,
        286,
        2284,
        1,
        0,
        0,
        0,
        288,
        2287,
        1,
        0,
        0,
        0,
        290,
        2306,
        1,
        0,
        0,
        0,
        292,
        2315,
        1,
        0,
        0,
        0,
        294,
        2317,
        1,
        0,
        0,
        0,
        296,
        2332,
        1,
        0,
        0,
        0,
        298,
        2334,
        1,
        0,
        0,
        0,
        300,
        2348,
        1,
        0,
        0,
        0,
        302,
        2350,
        1,
        0,
        0,
        0,
        304,
        2356,
        1,
        0,
        0,
        0,
        306,
        2358,
        1,
        0,
        0,
        0,
        308,
        2366,
        1,
        0,
        0,
        0,
        310,
        2377,
        1,
        0,
        0,
        0,
        312,
        2379,
        1,
        0,
        0,
        0,
        314,
        2396,
        1,
        0,
        0,
        0,
        316,
        2398,
        1,
        0,
        0,
        0,
        318,
        2405,
        1,
        0,
        0,
        0,
        320,
        2407,
        1,
        0,
        0,
        0,
        322,
        2410,
        1,
        0,
        0,
        0,
        324,
        2413,
        1,
        0,
        0,
        0,
        326,
        2416,
        1,
        0,
        0,
        0,
        328,
        2419,
        1,
        0,
        0,
        0,
        330,
        2423,
        1,
        0,
        0,
        0,
        332,
        2426,
        1,
        0,
        0,
        0,
        334,
        2430,
        1,
        0,
        0,
        0,
        336,
        2433,
        1,
        0,
        0,
        0,
        338,
        2444,
        1,
        0,
        0,
        0,
        340,
        2455,
        1,
        0,
        0,
        0,
        342,
        2466,
        1,
        0,
        0,
        0,
        344,
        2480,
        1,
        0,
        0,
        0,
        346,
        2494,
        1,
        0,
        0,
        0,
        348,
        2524,
        1,
        0,
        0,
        0,
        350,
        2531,
        1,
        0,
        0,
        0,
        352,
        2536,
        1,
        0,
        0,
        0,
        354,
        2538,
        1,
        0,
        0,
        0,
        356,
        2564,
        1,
        0,
        0,
        0,
        358,
        2593,
        1,
        0,
        0,
        0,
        360,
        2618,
        1,
        0,
        0,
        0,
        362,
        2620,
        1,
        0,
        0,
        0,
        364,
        2627,
        1,
        0,
        0,
        0,
        366,
        2634,
        1,
        0,
        0,
        0,
        368,
        2685,
        1,
        0,
        0,
        0,
        370,
        2688,
        1,
        0,
        0,
        0,
        372,
        2699,
        1,
        0,
        0,
        0,
        374,
        2733,
        1,
        0,
        0,
        0,
        376,
        2735,
        1,
        0,
        0,
        0,
        378,
        2738,
        1,
        0,
        0,
        0,
        380,
        2742,
        1,
        0,
        0,
        0,
        382,
        2747,
        1,
        0,
        0,
        0,
        384,
        2754,
        1,
        0,
        0,
        0,
        386,
        2758,
        1,
        0,
        0,
        0,
        388,
        2762,
        1,
        0,
        0,
        0,
        390,
        2766,
        1,
        0,
        0,
        0,
        392,
        2770,
        1,
        0,
        0,
        0,
        394,
        2775,
        1,
        0,
        0,
        0,
        396,
        2780,
        1,
        0,
        0,
        0,
        398,
        2785,
        1,
        0,
        0,
        0,
        400,
        2790,
        1,
        0,
        0,
        0,
        402,
        2795,
        1,
        0,
        0,
        0,
        404,
        2903,
        1,
        0,
        0,
        0,
        406,
        2907,
        1,
        0,
        0,
        0,
        408,
        2923,
        1,
        0,
        0,
        0,
        410,
        2926,
        1,
        0,
        0,
        0,
        412,
        2935,
        1,
        0,
        0,
        0,
        414,
        2969,
        1,
        0,
        0,
        0,
        416,
        2971,
        1,
        0,
        0,
        0,
        418,
        2975,
        1,
        0,
        0,
        0,
        420,
        2979,
        1,
        0,
        0,
        0,
        422,
        2985,
        1,
        0,
        0,
        0,
        424,
        2994,
        1,
        0,
        0,
        0,
        426,
        2998,
        1,
        0,
        0,
        0,
        428,
        3004,
        1,
        0,
        0,
        0,
        430,
        3018,
        1,
        0,
        0,
        0,
        432,
        3020,
        1,
        0,
        0,
        0,
        434,
        3025,
        1,
        0,
        0,
        0,
        436,
        3030,
        1,
        0,
        0,
        0,
        438,
        3043,
        1,
        0,
        0,
        0,
        440,
        3048,
        1,
        0,
        0,
        0,
        442,
        3053,
        1,
        0,
        0,
        0,
        444,
        3061,
        1,
        0,
        0,
        0,
        446,
        3066,
        1,
        0,
        0,
        0,
        448,
        3083,
        1,
        0,
        0,
        0,
        450,
        3089,
        1,
        0,
        0,
        0,
        452,
        3124,
        1,
        0,
        0,
        0,
        454,
        3126,
        1,
        0,
        0,
        0,
        456,
        3134,
        1,
        0,
        0,
        0,
        458,
        3142,
        1,
        0,
        0,
        0,
        460,
        3144,
        1,
        0,
        0,
        0,
        462,
        3155,
        1,
        0,
        0,
        0,
        464,
        3179,
        1,
        0,
        0,
        0,
        466,
        3184,
        1,
        0,
        0,
        0,
        468,
        3196,
        1,
        0,
        0,
        0,
        470,
        3213,
        1,
        0,
        0,
        0,
        472,
        3221,
        1,
        0,
        0,
        0,
        474,
        3232,
        1,
        0,
        0,
        0,
        476,
        3234,
        1,
        0,
        0,
        0,
        478,
        3258,
        1,
        0,
        0,
        0,
        480,
        3279,
        1,
        0,
        0,
        0,
        482,
        3292,
        1,
        0,
        0,
        0,
        484,
        3351,
        1,
        0,
        0,
        0,
        486,
        3353,
        1,
        0,
        0,
        0,
        488,
        3355,
        1,
        0,
        0,
        0,
        490,
        491,
        3,
        2,
        1,
        0,
        491,
        492,
        5,
        0,
        0,
        1,
        492,
        1,
        1,
        0,
        0,
        0,
        493,
        495,
        5,
        125,
        0,
        0,
        494,
        493,
        1,
        0,
        0,
        0,
        495,
        498,
        1,
        0,
        0,
        0,
        496,
        494,
        1,
        0,
        0,
        0,
        496,
        497,
        1,
        0,
        0,
        0,
        497,
        508,
        1,
        0,
        0,
        0,
        498,
        496,
        1,
        0,
        0,
        0,
        499,
        503,
        3,
        4,
        2,
        0,
        500,
        502,
        5,
        125,
        0,
        0,
        501,
        500,
        1,
        0,
        0,
        0,
        502,
        505,
        1,
        0,
        0,
        0,
        503,
        501,
        1,
        0,
        0,
        0,
        503,
        504,
        1,
        0,
        0,
        0,
        504,
        507,
        1,
        0,
        0,
        0,
        505,
        503,
        1,
        0,
        0,
        0,
        506,
        499,
        1,
        0,
        0,
        0,
        507,
        510,
        1,
        0,
        0,
        0,
        508,
        506,
        1,
        0,
        0,
        0,
        508,
        509,
        1,
        0,
        0,
        0,
        509,
        3,
        1,
        0,
        0,
        0,
        510,
        508,
        1,
        0,
        0,
        0,
        511,
        515,
        3,
        6,
        3,
        0,
        512,
        515,
        3,
        32,
        16,
        0,
        513,
        515,
        3,
        70,
        35,
        0,
        514,
        511,
        1,
        0,
        0,
        0,
        514,
        512,
        1,
        0,
        0,
        0,
        514,
        513,
        1,
        0,
        0,
        0,
        515,
        5,
        1,
        0,
        0,
        0,
        516,
        518,
        5,
        1,
        0,
        0,
        517,
        516,
        1,
        0,
        0,
        0,
        518,
        521,
        1,
        0,
        0,
        0,
        519,
        517,
        1,
        0,
        0,
        0,
        519,
        520,
        1,
        0,
        0,
        0,
        520,
        522,
        1,
        0,
        0,
        0,
        521,
        519,
        1,
        0,
        0,
        0,
        522,
        523,
        3,
        26,
        13,
        0,
        523,
        524,
        5,
        72,
        0,
        0,
        524,
        527,
        3,
        8,
        4,
        0,
        525,
        526,
        5,
        123,
        0,
        0,
        526,
        528,
        3,
        290,
        145,
        0,
        527,
        525,
        1,
        0,
        0,
        0,
        527,
        528,
        1,
        0,
        0,
        0,
        528,
        536,
        1,
        0,
        0,
        0,
        529,
        537,
        5,
        83,
        0,
        0,
        530,
        532,
        5,
        125,
        0,
        0,
        531,
        530,
        1,
        0,
        0,
        0,
        532,
        533,
        1,
        0,
        0,
        0,
        533,
        531,
        1,
        0,
        0,
        0,
        533,
        534,
        1,
        0,
        0,
        0,
        534,
        537,
        1,
        0,
        0,
        0,
        535,
        537,
        5,
        0,
        0,
        1,
        536,
        529,
        1,
        0,
        0,
        0,
        536,
        531,
        1,
        0,
        0,
        0,
        536,
        535,
        1,
        0,
        0,
        0,
        537,
        541,
        1,
        0,
        0,
        0,
        538,
        540,
        5,
        2,
        0,
        0,
        539,
        538,
        1,
        0,
        0,
        0,
        540,
        543,
        1,
        0,
        0,
        0,
        541,
        539,
        1,
        0,
        0,
        0,
        541,
        542,
        1,
        0,
        0,
        0,
        542,
        602,
        1,
        0,
        0,
        0,
        543,
        541,
        1,
        0,
        0,
        0,
        544,
        546,
        5,
        1,
        0,
        0,
        545,
        544,
        1,
        0,
        0,
        0,
        546,
        549,
        1,
        0,
        0,
        0,
        547,
        545,
        1,
        0,
        0,
        0,
        547,
        548,
        1,
        0,
        0,
        0,
        548,
        550,
        1,
        0,
        0,
        0,
        549,
        547,
        1,
        0,
        0,
        0,
        550,
        551,
        3,
        26,
        13,
        0,
        551,
        552,
        5,
        72,
        0,
        0,
        552,
        555,
        3,
        8,
        4,
        0,
        553,
        554,
        5,
        85,
        0,
        0,
        554,
        556,
        3,
        290,
        145,
        0,
        555,
        553,
        1,
        0,
        0,
        0,
        555,
        556,
        1,
        0,
        0,
        0,
        556,
        564,
        1,
        0,
        0,
        0,
        557,
        565,
        5,
        83,
        0,
        0,
        558,
        560,
        5,
        125,
        0,
        0,
        559,
        558,
        1,
        0,
        0,
        0,
        560,
        561,
        1,
        0,
        0,
        0,
        561,
        559,
        1,
        0,
        0,
        0,
        561,
        562,
        1,
        0,
        0,
        0,
        562,
        565,
        1,
        0,
        0,
        0,
        563,
        565,
        5,
        0,
        0,
        1,
        564,
        557,
        1,
        0,
        0,
        0,
        564,
        559,
        1,
        0,
        0,
        0,
        564,
        563,
        1,
        0,
        0,
        0,
        565,
        569,
        1,
        0,
        0,
        0,
        566,
        568,
        5,
        2,
        0,
        0,
        567,
        566,
        1,
        0,
        0,
        0,
        568,
        571,
        1,
        0,
        0,
        0,
        569,
        567,
        1,
        0,
        0,
        0,
        569,
        570,
        1,
        0,
        0,
        0,
        570,
        602,
        1,
        0,
        0,
        0,
        571,
        569,
        1,
        0,
        0,
        0,
        572,
        574,
        5,
        1,
        0,
        0,
        573,
        572,
        1,
        0,
        0,
        0,
        574,
        577,
        1,
        0,
        0,
        0,
        575,
        573,
        1,
        0,
        0,
        0,
        575,
        576,
        1,
        0,
        0,
        0,
        576,
        578,
        1,
        0,
        0,
        0,
        577,
        575,
        1,
        0,
        0,
        0,
        578,
        579,
        3,
        26,
        13,
        0,
        579,
        580,
        5,
        72,
        0,
        0,
        580,
        584,
        3,
        8,
        4,
        0,
        581,
        582,
        5,
        82,
        0,
        0,
        582,
        583,
        5,
        82,
        0,
        0,
        583,
        585,
        3,
        290,
        145,
        0,
        584,
        581,
        1,
        0,
        0,
        0,
        584,
        585,
        1,
        0,
        0,
        0,
        585,
        593,
        1,
        0,
        0,
        0,
        586,
        594,
        5,
        83,
        0,
        0,
        587,
        589,
        5,
        125,
        0,
        0,
        588,
        587,
        1,
        0,
        0,
        0,
        589,
        590,
        1,
        0,
        0,
        0,
        590,
        588,
        1,
        0,
        0,
        0,
        590,
        591,
        1,
        0,
        0,
        0,
        591,
        594,
        1,
        0,
        0,
        0,
        592,
        594,
        5,
        0,
        0,
        1,
        593,
        586,
        1,
        0,
        0,
        0,
        593,
        588,
        1,
        0,
        0,
        0,
        593,
        592,
        1,
        0,
        0,
        0,
        594,
        598,
        1,
        0,
        0,
        0,
        595,
        597,
        5,
        2,
        0,
        0,
        596,
        595,
        1,
        0,
        0,
        0,
        597,
        600,
        1,
        0,
        0,
        0,
        598,
        596,
        1,
        0,
        0,
        0,
        598,
        599,
        1,
        0,
        0,
        0,
        599,
        602,
        1,
        0,
        0,
        0,
        600,
        598,
        1,
        0,
        0,
        0,
        601,
        519,
        1,
        0,
        0,
        0,
        601,
        547,
        1,
        0,
        0,
        0,
        601,
        575,
        1,
        0,
        0,
        0,
        602,
        7,
        1,
        0,
        0,
        0,
        603,
        608,
        3,
        10,
        5,
        0,
        604,
        605,
        5,
        88,
        0,
        0,
        605,
        607,
        3,
        10,
        5,
        0,
        606,
        604,
        1,
        0,
        0,
        0,
        607,
        610,
        1,
        0,
        0,
        0,
        608,
        606,
        1,
        0,
        0,
        0,
        608,
        609,
        1,
        0,
        0,
        0,
        609,
        9,
        1,
        0,
        0,
        0,
        610,
        608,
        1,
        0,
        0,
        0,
        611,
        615,
        3,
        12,
        6,
        0,
        612,
        614,
        3,
        12,
        6,
        0,
        613,
        612,
        1,
        0,
        0,
        0,
        614,
        617,
        1,
        0,
        0,
        0,
        615,
        613,
        1,
        0,
        0,
        0,
        615,
        616,
        1,
        0,
        0,
        0,
        616,
        11,
        1,
        0,
        0,
        0,
        617,
        615,
        1,
        0,
        0,
        0,
        618,
        624,
        3,
        22,
        11,
        0,
        619,
        624,
        3,
        14,
        7,
        0,
        620,
        624,
        3,
        16,
        8,
        0,
        621,
        624,
        3,
        18,
        9,
        0,
        622,
        624,
        3,
        20,
        10,
        0,
        623,
        618,
        1,
        0,
        0,
        0,
        623,
        619,
        1,
        0,
        0,
        0,
        623,
        620,
        1,
        0,
        0,
        0,
        623,
        621,
        1,
        0,
        0,
        0,
        623,
        622,
        1,
        0,
        0,
        0,
        624,
        13,
        1,
        0,
        0,
        0,
        625,
        626,
        3,
        22,
        11,
        0,
        626,
        627,
        5,
        78,
        0,
        0,
        627,
        15,
        1,
        0,
        0,
        0,
        628,
        629,
        3,
        22,
        11,
        0,
        629,
        630,
        5,
        93,
        0,
        0,
        630,
        17,
        1,
        0,
        0,
        0,
        631,
        632,
        3,
        22,
        11,
        0,
        632,
        633,
        5,
        73,
        0,
        0,
        633,
        19,
        1,
        0,
        0,
        0,
        634,
        635,
        3,
        22,
        11,
        0,
        635,
        636,
        5,
        99,
        0,
        0,
        636,
        637,
        3,
        290,
        145,
        0,
        637,
        638,
        5,
        100,
        0,
        0,
        638,
        651,
        1,
        0,
        0,
        0,
        639,
        640,
        3,
        22,
        11,
        0,
        640,
        642,
        5,
        99,
        0,
        0,
        641,
        643,
        3,
        290,
        145,
        0,
        642,
        641,
        1,
        0,
        0,
        0,
        642,
        643,
        1,
        0,
        0,
        0,
        643,
        644,
        1,
        0,
        0,
        0,
        644,
        646,
        5,
        81,
        0,
        0,
        645,
        647,
        3,
        290,
        145,
        0,
        646,
        645,
        1,
        0,
        0,
        0,
        646,
        647,
        1,
        0,
        0,
        0,
        647,
        648,
        1,
        0,
        0,
        0,
        648,
        649,
        5,
        100,
        0,
        0,
        649,
        651,
        1,
        0,
        0,
        0,
        650,
        634,
        1,
        0,
        0,
        0,
        650,
        639,
        1,
        0,
        0,
        0,
        651,
        21,
        1,
        0,
        0,
        0,
        652,
        662,
        3,
        24,
        12,
        0,
        653,
        662,
        3,
        416,
        208,
        0,
        654,
        662,
        5,
        8,
        0,
        0,
        655,
        662,
        3,
        28,
        14,
        0,
        656,
        662,
        3,
        30,
        15,
        0,
        657,
        658,
        5,
        79,
        0,
        0,
        658,
        659,
        3,
        8,
        4,
        0,
        659,
        660,
        5,
        80,
        0,
        0,
        660,
        662,
        1,
        0,
        0,
        0,
        661,
        652,
        1,
        0,
        0,
        0,
        661,
        653,
        1,
        0,
        0,
        0,
        661,
        654,
        1,
        0,
        0,
        0,
        661,
        655,
        1,
        0,
        0,
        0,
        661,
        656,
        1,
        0,
        0,
        0,
        661,
        657,
        1,
        0,
        0,
        0,
        662,
        23,
        1,
        0,
        0,
        0,
        663,
        672,
        5,
        101,
        0,
        0,
        664,
        665,
        3,
        488,
        244,
        0,
        665,
        666,
        5,
        82,
        0,
        0,
        666,
        668,
        1,
        0,
        0,
        0,
        667,
        664,
        1,
        0,
        0,
        0,
        667,
        668,
        1,
        0,
        0,
        0,
        668,
        669,
        1,
        0,
        0,
        0,
        669,
        670,
        3,
        488,
        244,
        0,
        670,
        671,
        5,
        82,
        0,
        0,
        671,
        673,
        1,
        0,
        0,
        0,
        672,
        667,
        1,
        0,
        0,
        0,
        672,
        673,
        1,
        0,
        0,
        0,
        673,
        674,
        1,
        0,
        0,
        0,
        674,
        675,
        3,
        488,
        244,
        0,
        675,
        676,
        5,
        102,
        0,
        0,
        676,
        25,
        1,
        0,
        0,
        0,
        677,
        678,
        5,
        101,
        0,
        0,
        678,
        679,
        3,
        488,
        244,
        0,
        679,
        680,
        5,
        102,
        0,
        0,
        680,
        27,
        1,
        0,
        0,
        0,
        681,
        682,
        6,
        14,
        -1,
        0,
        682,
        683,
        3,
        488,
        244,
        0,
        683,
        702,
        1,
        0,
        0,
        0,
        684,
        685,
        10,
        4,
        0,
        0,
        685,
        686,
        5,
        77,
        0,
        0,
        686,
        701,
        3,
        488,
        244,
        0,
        687,
        688,
        10,
        3,
        0,
        0,
        688,
        689,
        5,
        86,
        0,
        0,
        689,
        690,
        3,
        356,
        178,
        0,
        690,
        691,
        5,
        87,
        0,
        0,
        691,
        701,
        1,
        0,
        0,
        0,
        692,
        693,
        10,
        2,
        0,
        0,
        693,
        701,
        3,
        442,
        221,
        0,
        694,
        695,
        10,
        1,
        0,
        0,
        695,
        697,
        5,
        79,
        0,
        0,
        696,
        698,
        3,
        446,
        223,
        0,
        697,
        696,
        1,
        0,
        0,
        0,
        697,
        698,
        1,
        0,
        0,
        0,
        698,
        699,
        1,
        0,
        0,
        0,
        699,
        701,
        5,
        80,
        0,
        0,
        700,
        684,
        1,
        0,
        0,
        0,
        700,
        687,
        1,
        0,
        0,
        0,
        700,
        692,
        1,
        0,
        0,
        0,
        700,
        694,
        1,
        0,
        0,
        0,
        701,
        704,
        1,
        0,
        0,
        0,
        702,
        700,
        1,
        0,
        0,
        0,
        702,
        703,
        1,
        0,
        0,
        0,
        703,
        29,
        1,
        0,
        0,
        0,
        704,
        702,
        1,
        0,
        0,
        0,
        705,
        707,
        5,
        86,
        0,
        0,
        706,
        708,
        5,
        89,
        0,
        0,
        707,
        706,
        1,
        0,
        0,
        0,
        707,
        708,
        1,
        0,
        0,
        0,
        708,
        709,
        1,
        0,
        0,
        0,
        709,
        710,
        3,
        416,
        208,
        0,
        710,
        711,
        5,
        87,
        0,
        0,
        711,
        31,
        1,
        0,
        0,
        0,
        712,
        714,
        5,
        1,
        0,
        0,
        713,
        712,
        1,
        0,
        0,
        0,
        714,
        717,
        1,
        0,
        0,
        0,
        715,
        713,
        1,
        0,
        0,
        0,
        715,
        716,
        1,
        0,
        0,
        0,
        716,
        718,
        1,
        0,
        0,
        0,
        717,
        715,
        1,
        0,
        0,
        0,
        718,
        719,
        5,
        48,
        0,
        0,
        719,
        723,
        3,
        34,
        17,
        0,
        720,
        722,
        5,
        2,
        0,
        0,
        721,
        720,
        1,
        0,
        0,
        0,
        722,
        725,
        1,
        0,
        0,
        0,
        723,
        721,
        1,
        0,
        0,
        0,
        723,
        724,
        1,
        0,
        0,
        0,
        724,
        790,
        1,
        0,
        0,
        0,
        725,
        723,
        1,
        0,
        0,
        0,
        726,
        728,
        5,
        1,
        0,
        0,
        727,
        726,
        1,
        0,
        0,
        0,
        728,
        731,
        1,
        0,
        0,
        0,
        729,
        727,
        1,
        0,
        0,
        0,
        729,
        730,
        1,
        0,
        0,
        0,
        730,
        732,
        1,
        0,
        0,
        0,
        731,
        729,
        1,
        0,
        0,
        0,
        732,
        733,
        5,
        58,
        0,
        0,
        733,
        737,
        3,
        74,
        37,
        0,
        734,
        736,
        5,
        2,
        0,
        0,
        735,
        734,
        1,
        0,
        0,
        0,
        736,
        739,
        1,
        0,
        0,
        0,
        737,
        735,
        1,
        0,
        0,
        0,
        737,
        738,
        1,
        0,
        0,
        0,
        738,
        790,
        1,
        0,
        0,
        0,
        739,
        737,
        1,
        0,
        0,
        0,
        740,
        742,
        5,
        1,
        0,
        0,
        741,
        740,
        1,
        0,
        0,
        0,
        742,
        745,
        1,
        0,
        0,
        0,
        743,
        741,
        1,
        0,
        0,
        0,
        743,
        744,
        1,
        0,
        0,
        0,
        744,
        746,
        1,
        0,
        0,
        0,
        745,
        743,
        1,
        0,
        0,
        0,
        746,
        747,
        5,
        54,
        0,
        0,
        747,
        755,
        3,
        48,
        24,
        0,
        748,
        756,
        5,
        83,
        0,
        0,
        749,
        751,
        5,
        125,
        0,
        0,
        750,
        749,
        1,
        0,
        0,
        0,
        751,
        752,
        1,
        0,
        0,
        0,
        752,
        750,
        1,
        0,
        0,
        0,
        752,
        753,
        1,
        0,
        0,
        0,
        753,
        756,
        1,
        0,
        0,
        0,
        754,
        756,
        5,
        0,
        0,
        1,
        755,
        748,
        1,
        0,
        0,
        0,
        755,
        750,
        1,
        0,
        0,
        0,
        755,
        754,
        1,
        0,
        0,
        0,
        756,
        760,
        1,
        0,
        0,
        0,
        757,
        759,
        5,
        2,
        0,
        0,
        758,
        757,
        1,
        0,
        0,
        0,
        759,
        762,
        1,
        0,
        0,
        0,
        760,
        758,
        1,
        0,
        0,
        0,
        760,
        761,
        1,
        0,
        0,
        0,
        761,
        790,
        1,
        0,
        0,
        0,
        762,
        760,
        1,
        0,
        0,
        0,
        763,
        765,
        5,
        1,
        0,
        0,
        764,
        763,
        1,
        0,
        0,
        0,
        765,
        768,
        1,
        0,
        0,
        0,
        766,
        764,
        1,
        0,
        0,
        0,
        766,
        767,
        1,
        0,
        0,
        0,
        767,
        769,
        1,
        0,
        0,
        0,
        768,
        766,
        1,
        0,
        0,
        0,
        769,
        770,
        5,
        53,
        0,
        0,
        770,
        778,
        3,
        48,
        24,
        0,
        771,
        779,
        5,
        83,
        0,
        0,
        772,
        774,
        5,
        125,
        0,
        0,
        773,
        772,
        1,
        0,
        0,
        0,
        774,
        775,
        1,
        0,
        0,
        0,
        775,
        773,
        1,
        0,
        0,
        0,
        775,
        776,
        1,
        0,
        0,
        0,
        776,
        779,
        1,
        0,
        0,
        0,
        777,
        779,
        5,
        0,
        0,
        1,
        778,
        771,
        1,
        0,
        0,
        0,
        778,
        773,
        1,
        0,
        0,
        0,
        778,
        777,
        1,
        0,
        0,
        0,
        779,
        783,
        1,
        0,
        0,
        0,
        780,
        782,
        5,
        2,
        0,
        0,
        781,
        780,
        1,
        0,
        0,
        0,
        782,
        785,
        1,
        0,
        0,
        0,
        783,
        781,
        1,
        0,
        0,
        0,
        783,
        784,
        1,
        0,
        0,
        0,
        784,
        790,
        1,
        0,
        0,
        0,
        785,
        783,
        1,
        0,
        0,
        0,
        786,
        787,
        3,
        34,
        17,
        0,
        787,
        788,
        5,
        83,
        0,
        0,
        788,
        790,
        1,
        0,
        0,
        0,
        789,
        715,
        1,
        0,
        0,
        0,
        789,
        729,
        1,
        0,
        0,
        0,
        789,
        743,
        1,
        0,
        0,
        0,
        789,
        766,
        1,
        0,
        0,
        0,
        789,
        786,
        1,
        0,
        0,
        0,
        790,
        33,
        1,
        0,
        0,
        0,
        791,
        792,
        3,
        40,
        20,
        0,
        792,
        793,
        5,
        109,
        0,
        0,
        793,
        794,
        3,
        40,
        20,
        0,
        794,
        795,
        7,
        0,
        0,
        0,
        795,
        798,
        1,
        0,
        0,
        0,
        796,
        798,
        3,
        36,
        18,
        0,
        797,
        791,
        1,
        0,
        0,
        0,
        797,
        796,
        1,
        0,
        0,
        0,
        798,
        35,
        1,
        0,
        0,
        0,
        799,
        800,
        5,
        51,
        0,
        0,
        800,
        801,
        3,
        26,
        13,
        0,
        801,
        802,
        5,
        33,
        0,
        0,
        802,
        803,
        3,
        56,
        28,
        0,
        803,
        810,
        5,
        82,
        0,
        0,
        804,
        805,
        5,
        125,
        0,
        0,
        805,
        806,
        5,
        1,
        0,
        0,
        806,
        807,
        3,
        36,
        18,
        0,
        807,
        808,
        5,
        2,
        0,
        0,
        808,
        811,
        1,
        0,
        0,
        0,
        809,
        811,
        3,
        36,
        18,
        0,
        810,
        804,
        1,
        0,
        0,
        0,
        810,
        809,
        1,
        0,
        0,
        0,
        811,
        1008,
        1,
        0,
        0,
        0,
        812,
        813,
        5,
        52,
        0,
        0,
        813,
        814,
        3,
        26,
        13,
        0,
        814,
        815,
        5,
        33,
        0,
        0,
        815,
        816,
        3,
        56,
        28,
        0,
        816,
        823,
        5,
        82,
        0,
        0,
        817,
        818,
        5,
        125,
        0,
        0,
        818,
        819,
        5,
        1,
        0,
        0,
        819,
        820,
        3,
        36,
        18,
        0,
        820,
        821,
        5,
        2,
        0,
        0,
        821,
        824,
        1,
        0,
        0,
        0,
        822,
        824,
        3,
        36,
        18,
        0,
        823,
        817,
        1,
        0,
        0,
        0,
        823,
        822,
        1,
        0,
        0,
        0,
        824,
        1008,
        1,
        0,
        0,
        0,
        825,
        826,
        5,
        55,
        0,
        0,
        826,
        827,
        5,
        79,
        0,
        0,
        827,
        828,
        3,
        38,
        19,
        0,
        828,
        831,
        5,
        28,
        0,
        0,
        829,
        832,
        3,
        26,
        13,
        0,
        830,
        832,
        3,
        488,
        244,
        0,
        831,
        829,
        1,
        0,
        0,
        0,
        831,
        830,
        1,
        0,
        0,
        0,
        832,
        833,
        1,
        0,
        0,
        0,
        833,
        834,
        5,
        33,
        0,
        0,
        834,
        835,
        3,
        54,
        27,
        0,
        835,
        843,
        5,
        80,
        0,
        0,
        836,
        844,
        5,
        83,
        0,
        0,
        837,
        839,
        5,
        125,
        0,
        0,
        838,
        837,
        1,
        0,
        0,
        0,
        839,
        840,
        1,
        0,
        0,
        0,
        840,
        838,
        1,
        0,
        0,
        0,
        840,
        841,
        1,
        0,
        0,
        0,
        841,
        844,
        1,
        0,
        0,
        0,
        842,
        844,
        5,
        0,
        0,
        1,
        843,
        836,
        1,
        0,
        0,
        0,
        843,
        838,
        1,
        0,
        0,
        0,
        843,
        842,
        1,
        0,
        0,
        0,
        844,
        1008,
        1,
        0,
        0,
        0,
        845,
        846,
        5,
        55,
        0,
        0,
        846,
        847,
        5,
        79,
        0,
        0,
        847,
        848,
        5,
        86,
        0,
        0,
        848,
        849,
        3,
        38,
        19,
        0,
        849,
        852,
        5,
        28,
        0,
        0,
        850,
        853,
        3,
        26,
        13,
        0,
        851,
        853,
        3,
        488,
        244,
        0,
        852,
        850,
        1,
        0,
        0,
        0,
        852,
        851,
        1,
        0,
        0,
        0,
        853,
        854,
        1,
        0,
        0,
        0,
        854,
        855,
        5,
        33,
        0,
        0,
        855,
        856,
        3,
        54,
        27,
        0,
        856,
        857,
        5,
        87,
        0,
        0,
        857,
        865,
        5,
        80,
        0,
        0,
        858,
        866,
        5,
        83,
        0,
        0,
        859,
        861,
        5,
        125,
        0,
        0,
        860,
        859,
        1,
        0,
        0,
        0,
        861,
        862,
        1,
        0,
        0,
        0,
        862,
        860,
        1,
        0,
        0,
        0,
        862,
        863,
        1,
        0,
        0,
        0,
        863,
        866,
        1,
        0,
        0,
        0,
        864,
        866,
        5,
        0,
        0,
        1,
        865,
        858,
        1,
        0,
        0,
        0,
        865,
        860,
        1,
        0,
        0,
        0,
        865,
        864,
        1,
        0,
        0,
        0,
        866,
        1008,
        1,
        0,
        0,
        0,
        867,
        868,
        5,
        55,
        0,
        0,
        868,
        869,
        5,
        79,
        0,
        0,
        869,
        870,
        5,
        79,
        0,
        0,
        870,
        871,
        3,
        38,
        19,
        0,
        871,
        874,
        5,
        28,
        0,
        0,
        872,
        875,
        3,
        26,
        13,
        0,
        873,
        875,
        3,
        488,
        244,
        0,
        874,
        872,
        1,
        0,
        0,
        0,
        874,
        873,
        1,
        0,
        0,
        0,
        875,
        876,
        1,
        0,
        0,
        0,
        876,
        877,
        5,
        33,
        0,
        0,
        877,
        878,
        3,
        54,
        27,
        0,
        878,
        879,
        5,
        87,
        0,
        0,
        879,
        887,
        5,
        80,
        0,
        0,
        880,
        888,
        5,
        83,
        0,
        0,
        881,
        883,
        5,
        125,
        0,
        0,
        882,
        881,
        1,
        0,
        0,
        0,
        883,
        884,
        1,
        0,
        0,
        0,
        884,
        882,
        1,
        0,
        0,
        0,
        884,
        885,
        1,
        0,
        0,
        0,
        885,
        888,
        1,
        0,
        0,
        0,
        886,
        888,
        5,
        0,
        0,
        1,
        887,
        880,
        1,
        0,
        0,
        0,
        887,
        882,
        1,
        0,
        0,
        0,
        887,
        886,
        1,
        0,
        0,
        0,
        888,
        1008,
        1,
        0,
        0,
        0,
        889,
        890,
        5,
        55,
        0,
        0,
        890,
        891,
        5,
        79,
        0,
        0,
        891,
        892,
        5,
        99,
        0,
        0,
        892,
        893,
        3,
        38,
        19,
        0,
        893,
        896,
        5,
        28,
        0,
        0,
        894,
        897,
        3,
        26,
        13,
        0,
        895,
        897,
        3,
        488,
        244,
        0,
        896,
        894,
        1,
        0,
        0,
        0,
        896,
        895,
        1,
        0,
        0,
        0,
        897,
        898,
        1,
        0,
        0,
        0,
        898,
        899,
        5,
        33,
        0,
        0,
        899,
        900,
        3,
        54,
        27,
        0,
        900,
        901,
        5,
        100,
        0,
        0,
        901,
        909,
        5,
        80,
        0,
        0,
        902,
        910,
        5,
        83,
        0,
        0,
        903,
        905,
        5,
        125,
        0,
        0,
        904,
        903,
        1,
        0,
        0,
        0,
        905,
        906,
        1,
        0,
        0,
        0,
        906,
        904,
        1,
        0,
        0,
        0,
        906,
        907,
        1,
        0,
        0,
        0,
        907,
        910,
        1,
        0,
        0,
        0,
        908,
        910,
        5,
        0,
        0,
        1,
        909,
        902,
        1,
        0,
        0,
        0,
        909,
        904,
        1,
        0,
        0,
        0,
        909,
        908,
        1,
        0,
        0,
        0,
        910,
        1008,
        1,
        0,
        0,
        0,
        911,
        912,
        5,
        56,
        0,
        0,
        912,
        913,
        5,
        79,
        0,
        0,
        913,
        914,
        3,
        38,
        19,
        0,
        914,
        917,
        5,
        28,
        0,
        0,
        915,
        918,
        3,
        26,
        13,
        0,
        916,
        918,
        3,
        488,
        244,
        0,
        917,
        915,
        1,
        0,
        0,
        0,
        917,
        916,
        1,
        0,
        0,
        0,
        918,
        919,
        1,
        0,
        0,
        0,
        919,
        920,
        5,
        33,
        0,
        0,
        920,
        921,
        3,
        54,
        27,
        0,
        921,
        929,
        5,
        80,
        0,
        0,
        922,
        930,
        5,
        83,
        0,
        0,
        923,
        925,
        5,
        125,
        0,
        0,
        924,
        923,
        1,
        0,
        0,
        0,
        925,
        926,
        1,
        0,
        0,
        0,
        926,
        924,
        1,
        0,
        0,
        0,
        926,
        927,
        1,
        0,
        0,
        0,
        927,
        930,
        1,
        0,
        0,
        0,
        928,
        930,
        5,
        0,
        0,
        1,
        929,
        922,
        1,
        0,
        0,
        0,
        929,
        924,
        1,
        0,
        0,
        0,
        929,
        928,
        1,
        0,
        0,
        0,
        930,
        1008,
        1,
        0,
        0,
        0,
        931,
        932,
        5,
        56,
        0,
        0,
        932,
        933,
        5,
        79,
        0,
        0,
        933,
        934,
        5,
        79,
        0,
        0,
        934,
        935,
        3,
        38,
        19,
        0,
        935,
        938,
        5,
        28,
        0,
        0,
        936,
        939,
        3,
        26,
        13,
        0,
        937,
        939,
        3,
        488,
        244,
        0,
        938,
        936,
        1,
        0,
        0,
        0,
        938,
        937,
        1,
        0,
        0,
        0,
        939,
        940,
        1,
        0,
        0,
        0,
        940,
        941,
        5,
        33,
        0,
        0,
        941,
        942,
        3,
        54,
        27,
        0,
        942,
        943,
        5,
        80,
        0,
        0,
        943,
        951,
        5,
        80,
        0,
        0,
        944,
        952,
        5,
        83,
        0,
        0,
        945,
        947,
        5,
        125,
        0,
        0,
        946,
        945,
        1,
        0,
        0,
        0,
        947,
        948,
        1,
        0,
        0,
        0,
        948,
        946,
        1,
        0,
        0,
        0,
        948,
        949,
        1,
        0,
        0,
        0,
        949,
        952,
        1,
        0,
        0,
        0,
        950,
        952,
        5,
        0,
        0,
        1,
        951,
        944,
        1,
        0,
        0,
        0,
        951,
        946,
        1,
        0,
        0,
        0,
        951,
        950,
        1,
        0,
        0,
        0,
        952,
        1008,
        1,
        0,
        0,
        0,
        953,
        954,
        5,
        56,
        0,
        0,
        954,
        955,
        5,
        79,
        0,
        0,
        955,
        956,
        5,
        86,
        0,
        0,
        956,
        957,
        3,
        38,
        19,
        0,
        957,
        960,
        5,
        28,
        0,
        0,
        958,
        961,
        3,
        26,
        13,
        0,
        959,
        961,
        3,
        488,
        244,
        0,
        960,
        958,
        1,
        0,
        0,
        0,
        960,
        959,
        1,
        0,
        0,
        0,
        961,
        962,
        1,
        0,
        0,
        0,
        962,
        963,
        5,
        33,
        0,
        0,
        963,
        964,
        3,
        54,
        27,
        0,
        964,
        965,
        5,
        87,
        0,
        0,
        965,
        973,
        5,
        80,
        0,
        0,
        966,
        974,
        5,
        83,
        0,
        0,
        967,
        969,
        5,
        125,
        0,
        0,
        968,
        967,
        1,
        0,
        0,
        0,
        969,
        970,
        1,
        0,
        0,
        0,
        970,
        968,
        1,
        0,
        0,
        0,
        970,
        971,
        1,
        0,
        0,
        0,
        971,
        974,
        1,
        0,
        0,
        0,
        972,
        974,
        5,
        0,
        0,
        1,
        973,
        966,
        1,
        0,
        0,
        0,
        973,
        968,
        1,
        0,
        0,
        0,
        973,
        972,
        1,
        0,
        0,
        0,
        974,
        1008,
        1,
        0,
        0,
        0,
        975,
        976,
        5,
        56,
        0,
        0,
        976,
        977,
        5,
        79,
        0,
        0,
        977,
        978,
        5,
        99,
        0,
        0,
        978,
        979,
        3,
        38,
        19,
        0,
        979,
        982,
        5,
        28,
        0,
        0,
        980,
        983,
        3,
        26,
        13,
        0,
        981,
        983,
        3,
        488,
        244,
        0,
        982,
        980,
        1,
        0,
        0,
        0,
        982,
        981,
        1,
        0,
        0,
        0,
        983,
        984,
        1,
        0,
        0,
        0,
        984,
        985,
        5,
        33,
        0,
        0,
        985,
        986,
        3,
        54,
        27,
        0,
        986,
        987,
        5,
        100,
        0,
        0,
        987,
        995,
        5,
        80,
        0,
        0,
        988,
        996,
        5,
        83,
        0,
        0,
        989,
        991,
        5,
        125,
        0,
        0,
        990,
        989,
        1,
        0,
        0,
        0,
        991,
        992,
        1,
        0,
        0,
        0,
        992,
        990,
        1,
        0,
        0,
        0,
        992,
        993,
        1,
        0,
        0,
        0,
        993,
        996,
        1,
        0,
        0,
        0,
        994,
        996,
        5,
        0,
        0,
        1,
        995,
        988,
        1,
        0,
        0,
        0,
        995,
        990,
        1,
        0,
        0,
        0,
        995,
        994,
        1,
        0,
        0,
        0,
        996,
        1008,
        1,
        0,
        0,
        0,
        997,
        1005,
        3,
        40,
        20,
        0,
        998,
        1006,
        5,
        83,
        0,
        0,
        999,
        1001,
        5,
        125,
        0,
        0,
        1000,
        999,
        1,
        0,
        0,
        0,
        1001,
        1002,
        1,
        0,
        0,
        0,
        1002,
        1000,
        1,
        0,
        0,
        0,
        1002,
        1003,
        1,
        0,
        0,
        0,
        1003,
        1006,
        1,
        0,
        0,
        0,
        1004,
        1006,
        5,
        0,
        0,
        1,
        1005,
        998,
        1,
        0,
        0,
        0,
        1005,
        1000,
        1,
        0,
        0,
        0,
        1005,
        1004,
        1,
        0,
        0,
        0,
        1006,
        1008,
        1,
        0,
        0,
        0,
        1007,
        799,
        1,
        0,
        0,
        0,
        1007,
        812,
        1,
        0,
        0,
        0,
        1007,
        825,
        1,
        0,
        0,
        0,
        1007,
        845,
        1,
        0,
        0,
        0,
        1007,
        867,
        1,
        0,
        0,
        0,
        1007,
        889,
        1,
        0,
        0,
        0,
        1007,
        911,
        1,
        0,
        0,
        0,
        1007,
        931,
        1,
        0,
        0,
        0,
        1007,
        953,
        1,
        0,
        0,
        0,
        1007,
        975,
        1,
        0,
        0,
        0,
        1007,
        997,
        1,
        0,
        0,
        0,
        1008,
        37,
        1,
        0,
        0,
        0,
        1009,
        1010,
        5,
        55,
        0,
        0,
        1010,
        1011,
        5,
        79,
        0,
        0,
        1011,
        1012,
        3,
        38,
        19,
        0,
        1012,
        1015,
        5,
        28,
        0,
        0,
        1013,
        1016,
        3,
        26,
        13,
        0,
        1014,
        1016,
        3,
        488,
        244,
        0,
        1015,
        1013,
        1,
        0,
        0,
        0,
        1015,
        1014,
        1,
        0,
        0,
        0,
        1016,
        1017,
        1,
        0,
        0,
        0,
        1017,
        1018,
        5,
        33,
        0,
        0,
        1018,
        1019,
        3,
        54,
        27,
        0,
        1019,
        1020,
        5,
        80,
        0,
        0,
        1020,
        1119,
        1,
        0,
        0,
        0,
        1021,
        1022,
        5,
        55,
        0,
        0,
        1022,
        1023,
        5,
        79,
        0,
        0,
        1023,
        1024,
        5,
        86,
        0,
        0,
        1024,
        1025,
        3,
        38,
        19,
        0,
        1025,
        1028,
        5,
        28,
        0,
        0,
        1026,
        1029,
        3,
        26,
        13,
        0,
        1027,
        1029,
        3,
        488,
        244,
        0,
        1028,
        1026,
        1,
        0,
        0,
        0,
        1028,
        1027,
        1,
        0,
        0,
        0,
        1029,
        1030,
        1,
        0,
        0,
        0,
        1030,
        1031,
        5,
        33,
        0,
        0,
        1031,
        1032,
        3,
        54,
        27,
        0,
        1032,
        1033,
        5,
        87,
        0,
        0,
        1033,
        1034,
        5,
        80,
        0,
        0,
        1034,
        1119,
        1,
        0,
        0,
        0,
        1035,
        1036,
        5,
        55,
        0,
        0,
        1036,
        1037,
        5,
        79,
        0,
        0,
        1037,
        1038,
        5,
        79,
        0,
        0,
        1038,
        1039,
        3,
        38,
        19,
        0,
        1039,
        1042,
        5,
        28,
        0,
        0,
        1040,
        1043,
        3,
        26,
        13,
        0,
        1041,
        1043,
        3,
        488,
        244,
        0,
        1042,
        1040,
        1,
        0,
        0,
        0,
        1042,
        1041,
        1,
        0,
        0,
        0,
        1043,
        1044,
        1,
        0,
        0,
        0,
        1044,
        1045,
        5,
        33,
        0,
        0,
        1045,
        1046,
        3,
        54,
        27,
        0,
        1046,
        1047,
        5,
        87,
        0,
        0,
        1047,
        1048,
        5,
        80,
        0,
        0,
        1048,
        1119,
        1,
        0,
        0,
        0,
        1049,
        1050,
        5,
        55,
        0,
        0,
        1050,
        1051,
        5,
        79,
        0,
        0,
        1051,
        1052,
        5,
        99,
        0,
        0,
        1052,
        1053,
        3,
        38,
        19,
        0,
        1053,
        1056,
        5,
        28,
        0,
        0,
        1054,
        1057,
        3,
        26,
        13,
        0,
        1055,
        1057,
        3,
        488,
        244,
        0,
        1056,
        1054,
        1,
        0,
        0,
        0,
        1056,
        1055,
        1,
        0,
        0,
        0,
        1057,
        1058,
        1,
        0,
        0,
        0,
        1058,
        1059,
        5,
        33,
        0,
        0,
        1059,
        1060,
        3,
        54,
        27,
        0,
        1060,
        1061,
        5,
        100,
        0,
        0,
        1061,
        1062,
        5,
        80,
        0,
        0,
        1062,
        1119,
        1,
        0,
        0,
        0,
        1063,
        1064,
        5,
        56,
        0,
        0,
        1064,
        1065,
        5,
        79,
        0,
        0,
        1065,
        1066,
        3,
        38,
        19,
        0,
        1066,
        1069,
        5,
        28,
        0,
        0,
        1067,
        1070,
        3,
        26,
        13,
        0,
        1068,
        1070,
        3,
        488,
        244,
        0,
        1069,
        1067,
        1,
        0,
        0,
        0,
        1069,
        1068,
        1,
        0,
        0,
        0,
        1070,
        1071,
        1,
        0,
        0,
        0,
        1071,
        1072,
        5,
        33,
        0,
        0,
        1072,
        1073,
        3,
        54,
        27,
        0,
        1073,
        1074,
        5,
        80,
        0,
        0,
        1074,
        1119,
        1,
        0,
        0,
        0,
        1075,
        1076,
        5,
        56,
        0,
        0,
        1076,
        1077,
        5,
        79,
        0,
        0,
        1077,
        1078,
        5,
        79,
        0,
        0,
        1078,
        1079,
        3,
        38,
        19,
        0,
        1079,
        1082,
        5,
        28,
        0,
        0,
        1080,
        1083,
        3,
        26,
        13,
        0,
        1081,
        1083,
        3,
        488,
        244,
        0,
        1082,
        1080,
        1,
        0,
        0,
        0,
        1082,
        1081,
        1,
        0,
        0,
        0,
        1083,
        1084,
        1,
        0,
        0,
        0,
        1084,
        1085,
        5,
        33,
        0,
        0,
        1085,
        1086,
        3,
        54,
        27,
        0,
        1086,
        1087,
        5,
        80,
        0,
        0,
        1087,
        1088,
        5,
        80,
        0,
        0,
        1088,
        1119,
        1,
        0,
        0,
        0,
        1089,
        1090,
        5,
        56,
        0,
        0,
        1090,
        1091,
        5,
        79,
        0,
        0,
        1091,
        1092,
        5,
        86,
        0,
        0,
        1092,
        1093,
        3,
        38,
        19,
        0,
        1093,
        1096,
        5,
        28,
        0,
        0,
        1094,
        1097,
        3,
        26,
        13,
        0,
        1095,
        1097,
        3,
        488,
        244,
        0,
        1096,
        1094,
        1,
        0,
        0,
        0,
        1096,
        1095,
        1,
        0,
        0,
        0,
        1097,
        1098,
        1,
        0,
        0,
        0,
        1098,
        1099,
        5,
        33,
        0,
        0,
        1099,
        1100,
        3,
        54,
        27,
        0,
        1100,
        1101,
        5,
        87,
        0,
        0,
        1101,
        1102,
        5,
        80,
        0,
        0,
        1102,
        1119,
        1,
        0,
        0,
        0,
        1103,
        1104,
        5,
        56,
        0,
        0,
        1104,
        1105,
        5,
        79,
        0,
        0,
        1105,
        1106,
        5,
        99,
        0,
        0,
        1106,
        1107,
        3,
        38,
        19,
        0,
        1107,
        1110,
        5,
        28,
        0,
        0,
        1108,
        1111,
        3,
        26,
        13,
        0,
        1109,
        1111,
        3,
        488,
        244,
        0,
        1110,
        1108,
        1,
        0,
        0,
        0,
        1110,
        1109,
        1,
        0,
        0,
        0,
        1111,
        1112,
        1,
        0,
        0,
        0,
        1112,
        1113,
        5,
        33,
        0,
        0,
        1113,
        1114,
        3,
        54,
        27,
        0,
        1114,
        1115,
        5,
        100,
        0,
        0,
        1115,
        1116,
        5,
        80,
        0,
        0,
        1116,
        1119,
        1,
        0,
        0,
        0,
        1117,
        1119,
        3,
        40,
        20,
        0,
        1118,
        1009,
        1,
        0,
        0,
        0,
        1118,
        1021,
        1,
        0,
        0,
        0,
        1118,
        1035,
        1,
        0,
        0,
        0,
        1118,
        1049,
        1,
        0,
        0,
        0,
        1118,
        1063,
        1,
        0,
        0,
        0,
        1118,
        1075,
        1,
        0,
        0,
        0,
        1118,
        1089,
        1,
        0,
        0,
        0,
        1118,
        1103,
        1,
        0,
        0,
        0,
        1118,
        1117,
        1,
        0,
        0,
        0,
        1119,
        39,
        1,
        0,
        0,
        0,
        1120,
        1125,
        3,
        42,
        21,
        0,
        1121,
        1122,
        5,
        40,
        0,
        0,
        1122,
        1124,
        3,
        42,
        21,
        0,
        1123,
        1121,
        1,
        0,
        0,
        0,
        1124,
        1127,
        1,
        0,
        0,
        0,
        1125,
        1123,
        1,
        0,
        0,
        0,
        1125,
        1126,
        1,
        0,
        0,
        0,
        1126,
        41,
        1,
        0,
        0,
        0,
        1127,
        1125,
        1,
        0,
        0,
        0,
        1128,
        1133,
        3,
        44,
        22,
        0,
        1129,
        1130,
        5,
        12,
        0,
        0,
        1130,
        1132,
        3,
        44,
        22,
        0,
        1131,
        1129,
        1,
        0,
        0,
        0,
        1132,
        1135,
        1,
        0,
        0,
        0,
        1133,
        1131,
        1,
        0,
        0,
        0,
        1133,
        1134,
        1,
        0,
        0,
        0,
        1134,
        43,
        1,
        0,
        0,
        0,
        1135,
        1133,
        1,
        0,
        0,
        0,
        1136,
        1143,
        3,
        46,
        23,
        0,
        1137,
        1138,
        5,
        79,
        0,
        0,
        1138,
        1139,
        3,
        34,
        17,
        0,
        1139,
        1140,
        5,
        80,
        0,
        0,
        1140,
        1143,
        1,
        0,
        0,
        0,
        1141,
        1143,
        3,
        48,
        24,
        0,
        1142,
        1136,
        1,
        0,
        0,
        0,
        1142,
        1137,
        1,
        0,
        0,
        0,
        1142,
        1141,
        1,
        0,
        0,
        0,
        1143,
        45,
        1,
        0,
        0,
        0,
        1144,
        1145,
        3,
        48,
        24,
        0,
        1145,
        1146,
        7,
        1,
        0,
        0,
        1146,
        1147,
        3,
        48,
        24,
        0,
        1147,
        47,
        1,
        0,
        0,
        0,
        1148,
        1157,
        3,
        50,
        25,
        0,
        1149,
        1157,
        3,
        310,
        155,
        0,
        1150,
        1151,
        3,
        310,
        155,
        0,
        1151,
        1152,
        5,
        31,
        0,
        0,
        1152,
        1153,
        3,
        310,
        155,
        0,
        1153,
        1154,
        5,
        24,
        0,
        0,
        1154,
        1155,
        3,
        310,
        155,
        0,
        1155,
        1157,
        1,
        0,
        0,
        0,
        1156,
        1148,
        1,
        0,
        0,
        0,
        1156,
        1149,
        1,
        0,
        0,
        0,
        1156,
        1150,
        1,
        0,
        0,
        0,
        1157,
        49,
        1,
        0,
        0,
        0,
        1158,
        1159,
        5,
        88,
        0,
        0,
        1159,
        1160,
        3,
        56,
        28,
        0,
        1160,
        1161,
        5,
        88,
        0,
        0,
        1161,
        1169,
        1,
        0,
        0,
        0,
        1162,
        1163,
        5,
        57,
        0,
        0,
        1163,
        1164,
        5,
        79,
        0,
        0,
        1164,
        1165,
        3,
        54,
        27,
        0,
        1165,
        1166,
        5,
        80,
        0,
        0,
        1166,
        1169,
        1,
        0,
        0,
        0,
        1167,
        1169,
        3,
        52,
        26,
        0,
        1168,
        1158,
        1,
        0,
        0,
        0,
        1168,
        1162,
        1,
        0,
        0,
        0,
        1168,
        1167,
        1,
        0,
        0,
        0,
        1169,
        51,
        1,
        0,
        0,
        0,
        1170,
        1173,
        3,
        54,
        27,
        0,
        1171,
        1173,
        3,
        56,
        28,
        0,
        1172,
        1170,
        1,
        0,
        0,
        0,
        1172,
        1171,
        1,
        0,
        0,
        0,
        1173,
        53,
        1,
        0,
        0,
        0,
        1174,
        1175,
        5,
        78,
        0,
        0,
        1175,
        1179,
        3,
        56,
        28,
        0,
        1176,
        1177,
        5,
        84,
        0,
        0,
        1177,
        1179,
        3,
        56,
        28,
        0,
        1178,
        1174,
        1,
        0,
        0,
        0,
        1178,
        1176,
        1,
        0,
        0,
        0,
        1179,
        55,
        1,
        0,
        0,
        0,
        1180,
        1181,
        6,
        28,
        -1,
        0,
        1181,
        1182,
        3,
        58,
        29,
        0,
        1182,
        1191,
        1,
        0,
        0,
        0,
        1183,
        1184,
        10,
        2,
        0,
        0,
        1184,
        1185,
        5,
        77,
        0,
        0,
        1185,
        1190,
        3,
        58,
        29,
        0,
        1186,
        1187,
        10,
        1,
        0,
        0,
        1187,
        1188,
        5,
        76,
        0,
        0,
        1188,
        1190,
        3,
        58,
        29,
        0,
        1189,
        1183,
        1,
        0,
        0,
        0,
        1189,
        1186,
        1,
        0,
        0,
        0,
        1190,
        1193,
        1,
        0,
        0,
        0,
        1191,
        1189,
        1,
        0,
        0,
        0,
        1191,
        1192,
        1,
        0,
        0,
        0,
        1192,
        57,
        1,
        0,
        0,
        0,
        1193,
        1191,
        1,
        0,
        0,
        0,
        1194,
        1195,
        3,
        60,
        30,
        0,
        1195,
        1196,
        5,
        86,
        0,
        0,
        1196,
        1197,
        3,
        66,
        33,
        0,
        1197,
        1198,
        5,
        87,
        0,
        0,
        1198,
        1206,
        1,
        0,
        0,
        0,
        1199,
        1200,
        3,
        60,
        30,
        0,
        1200,
        1201,
        5,
        99,
        0,
        0,
        1201,
        1202,
        3,
        62,
        31,
        0,
        1202,
        1203,
        5,
        100,
        0,
        0,
        1203,
        1206,
        1,
        0,
        0,
        0,
        1204,
        1206,
        3,
        60,
        30,
        0,
        1205,
        1194,
        1,
        0,
        0,
        0,
        1205,
        1199,
        1,
        0,
        0,
        0,
        1205,
        1204,
        1,
        0,
        0,
        0,
        1206,
        59,
        1,
        0,
        0,
        0,
        1207,
        1213,
        3,
        26,
        13,
        0,
        1208,
        1209,
        5,
        79,
        0,
        0,
        1209,
        1210,
        3,
        56,
        28,
        0,
        1210,
        1211,
        5,
        80,
        0,
        0,
        1211,
        1213,
        1,
        0,
        0,
        0,
        1212,
        1207,
        1,
        0,
        0,
        0,
        1212,
        1208,
        1,
        0,
        0,
        0,
        1213,
        61,
        1,
        0,
        0,
        0,
        1214,
        1219,
        3,
        64,
        32,
        0,
        1215,
        1216,
        5,
        81,
        0,
        0,
        1216,
        1218,
        3,
        64,
        32,
        0,
        1217,
        1215,
        1,
        0,
        0,
        0,
        1218,
        1221,
        1,
        0,
        0,
        0,
        1219,
        1217,
        1,
        0,
        0,
        0,
        1219,
        1220,
        1,
        0,
        0,
        0,
        1220,
        1223,
        1,
        0,
        0,
        0,
        1221,
        1219,
        1,
        0,
        0,
        0,
        1222,
        1224,
        5,
        81,
        0,
        0,
        1223,
        1222,
        1,
        0,
        0,
        0,
        1223,
        1224,
        1,
        0,
        0,
        0,
        1224,
        63,
        1,
        0,
        0,
        0,
        1225,
        1226,
        5,
        78,
        0,
        0,
        1226,
        1229,
        3,
        26,
        13,
        0,
        1227,
        1228,
        5,
        82,
        0,
        0,
        1228,
        1230,
        3,
        68,
        34,
        0,
        1229,
        1227,
        1,
        0,
        0,
        0,
        1229,
        1230,
        1,
        0,
        0,
        0,
        1230,
        65,
        1,
        0,
        0,
        0,
        1231,
        1236,
        3,
        68,
        34,
        0,
        1232,
        1233,
        5,
        81,
        0,
        0,
        1233,
        1235,
        3,
        68,
        34,
        0,
        1234,
        1232,
        1,
        0,
        0,
        0,
        1235,
        1238,
        1,
        0,
        0,
        0,
        1236,
        1234,
        1,
        0,
        0,
        0,
        1236,
        1237,
        1,
        0,
        0,
        0,
        1237,
        1240,
        1,
        0,
        0,
        0,
        1238,
        1236,
        1,
        0,
        0,
        0,
        1239,
        1241,
        5,
        81,
        0,
        0,
        1240,
        1239,
        1,
        0,
        0,
        0,
        1240,
        1241,
        1,
        0,
        0,
        0,
        1241,
        67,
        1,
        0,
        0,
        0,
        1242,
        1262,
        5,
        8,
        0,
        0,
        1243,
        1245,
        5,
        8,
        0,
        0,
        1244,
        1243,
        1,
        0,
        0,
        0,
        1244,
        1245,
        1,
        0,
        0,
        0,
        1245,
        1246,
        1,
        0,
        0,
        0,
        1246,
        1248,
        5,
        82,
        0,
        0,
        1247,
        1249,
        5,
        8,
        0,
        0,
        1248,
        1247,
        1,
        0,
        0,
        0,
        1248,
        1249,
        1,
        0,
        0,
        0,
        1249,
        1262,
        1,
        0,
        0,
        0,
        1250,
        1252,
        5,
        8,
        0,
        0,
        1251,
        1250,
        1,
        0,
        0,
        0,
        1251,
        1252,
        1,
        0,
        0,
        0,
        1252,
        1253,
        1,
        0,
        0,
        0,
        1253,
        1255,
        5,
        82,
        0,
        0,
        1254,
        1256,
        5,
        8,
        0,
        0,
        1255,
        1254,
        1,
        0,
        0,
        0,
        1255,
        1256,
        1,
        0,
        0,
        0,
        1256,
        1257,
        1,
        0,
        0,
        0,
        1257,
        1259,
        5,
        82,
        0,
        0,
        1258,
        1260,
        5,
        8,
        0,
        0,
        1259,
        1258,
        1,
        0,
        0,
        0,
        1259,
        1260,
        1,
        0,
        0,
        0,
        1260,
        1262,
        1,
        0,
        0,
        0,
        1261,
        1242,
        1,
        0,
        0,
        0,
        1261,
        1244,
        1,
        0,
        0,
        0,
        1261,
        1251,
        1,
        0,
        0,
        0,
        1262,
        69,
        1,
        0,
        0,
        0,
        1263,
        1266,
        3,
        102,
        51,
        0,
        1264,
        1266,
        3,
        100,
        50,
        0,
        1265,
        1263,
        1,
        0,
        0,
        0,
        1265,
        1264,
        1,
        0,
        0,
        0,
        1266,
        71,
        1,
        0,
        0,
        0,
        1267,
        1269,
        5,
        125,
        0,
        0,
        1268,
        1267,
        1,
        0,
        0,
        0,
        1269,
        1272,
        1,
        0,
        0,
        0,
        1270,
        1268,
        1,
        0,
        0,
        0,
        1270,
        1271,
        1,
        0,
        0,
        0,
        1271,
        1273,
        1,
        0,
        0,
        0,
        1272,
        1270,
        1,
        0,
        0,
        0,
        1273,
        1277,
        3,
        94,
        47,
        0,
        1274,
        1276,
        5,
        125,
        0,
        0,
        1275,
        1274,
        1,
        0,
        0,
        0,
        1276,
        1279,
        1,
        0,
        0,
        0,
        1277,
        1275,
        1,
        0,
        0,
        0,
        1277,
        1278,
        1,
        0,
        0,
        0,
        1278,
        73,
        1,
        0,
        0,
        0,
        1279,
        1277,
        1,
        0,
        0,
        0,
        1280,
        1281,
        3,
        76,
        38,
        0,
        1281,
        1286,
        3,
        78,
        39,
        0,
        1282,
        1283,
        5,
        127,
        0,
        0,
        1283,
        1285,
        3,
        78,
        39,
        0,
        1284,
        1282,
        1,
        0,
        0,
        0,
        1285,
        1288,
        1,
        0,
        0,
        0,
        1286,
        1284,
        1,
        0,
        0,
        0,
        1286,
        1287,
        1,
        0,
        0,
        0,
        1287,
        75,
        1,
        0,
        0,
        0,
        1288,
        1286,
        1,
        0,
        0,
        0,
        1289,
        1290,
        3,
        26,
        13,
        0,
        1290,
        77,
        1,
        0,
        0,
        0,
        1291,
        1293,
        3,
        80,
        40,
        0,
        1292,
        1294,
        5,
        85,
        0,
        0,
        1293,
        1292,
        1,
        0,
        0,
        0,
        1293,
        1294,
        1,
        0,
        0,
        0,
        1294,
        1295,
        1,
        0,
        0,
        0,
        1295,
        1296,
        3,
        82,
        41,
        0,
        1296,
        79,
        1,
        0,
        0,
        0,
        1297,
        1298,
        5,
        59,
        0,
        0,
        1298,
        81,
        1,
        0,
        0,
        0,
        1299,
        1300,
        3,
        226,
        113,
        0,
        1300,
        83,
        1,
        0,
        0,
        0,
        1301,
        1303,
        3,
        92,
        46,
        0,
        1302,
        1301,
        1,
        0,
        0,
        0,
        1302,
        1303,
        1,
        0,
        0,
        0,
        1303,
        1305,
        1,
        0,
        0,
        0,
        1304,
        1306,
        5,
        0,
        0,
        1,
        1305,
        1304,
        1,
        0,
        0,
        0,
        1305,
        1306,
        1,
        0,
        0,
        0,
        1306,
        85,
        1,
        0,
        0,
        0,
        1307,
        1308,
        3,
        96,
        48,
        0,
        1308,
        87,
        1,
        0,
        0,
        0,
        1309,
        1313,
        3,
        288,
        144,
        0,
        1310,
        1312,
        5,
        125,
        0,
        0,
        1311,
        1310,
        1,
        0,
        0,
        0,
        1312,
        1315,
        1,
        0,
        0,
        0,
        1313,
        1311,
        1,
        0,
        0,
        0,
        1313,
        1314,
        1,
        0,
        0,
        0,
        1314,
        1317,
        1,
        0,
        0,
        0,
        1315,
        1313,
        1,
        0,
        0,
        0,
        1316,
        1318,
        5,
        0,
        0,
        1,
        1317,
        1316,
        1,
        0,
        0,
        0,
        1317,
        1318,
        1,
        0,
        0,
        0,
        1318,
        89,
        1,
        0,
        0,
        0,
        1319,
        1321,
        5,
        79,
        0,
        0,
        1320,
        1322,
        3,
        484,
        242,
        0,
        1321,
        1320,
        1,
        0,
        0,
        0,
        1321,
        1322,
        1,
        0,
        0,
        0,
        1322,
        1323,
        1,
        0,
        0,
        0,
        1323,
        1324,
        5,
        80,
        0,
        0,
        1324,
        1325,
        5,
        109,
        0,
        0,
        1325,
        1329,
        3,
        290,
        145,
        0,
        1326,
        1328,
        5,
        125,
        0,
        0,
        1327,
        1326,
        1,
        0,
        0,
        0,
        1328,
        1331,
        1,
        0,
        0,
        0,
        1329,
        1327,
        1,
        0,
        0,
        0,
        1329,
        1330,
        1,
        0,
        0,
        0,
        1330,
        1333,
        1,
        0,
        0,
        0,
        1331,
        1329,
        1,
        0,
        0,
        0,
        1332,
        1334,
        5,
        0,
        0,
        1,
        1333,
        1332,
        1,
        0,
        0,
        0,
        1333,
        1334,
        1,
        0,
        0,
        0,
        1334,
        91,
        1,
        0,
        0,
        0,
        1335,
        1338,
        3,
        94,
        47,
        0,
        1336,
        1338,
        5,
        125,
        0,
        0,
        1337,
        1335,
        1,
        0,
        0,
        0,
        1337,
        1336,
        1,
        0,
        0,
        0,
        1338,
        1339,
        1,
        0,
        0,
        0,
        1339,
        1337,
        1,
        0,
        0,
        0,
        1339,
        1340,
        1,
        0,
        0,
        0,
        1340,
        93,
        1,
        0,
        0,
        0,
        1341,
        1344,
        3,
        102,
        51,
        0,
        1342,
        1344,
        3,
        98,
        49,
        0,
        1343,
        1341,
        1,
        0,
        0,
        0,
        1343,
        1342,
        1,
        0,
        0,
        0,
        1344,
        95,
        1,
        0,
        0,
        0,
        1345,
        1346,
        3,
        102,
        51,
        0,
        1346,
        1347,
        5,
        125,
        0,
        0,
        1347,
        1351,
        1,
        0,
        0,
        0,
        1348,
        1351,
        3,
        98,
        49,
        0,
        1349,
        1351,
        5,
        125,
        0,
        0,
        1350,
        1345,
        1,
        0,
        0,
        0,
        1350,
        1348,
        1,
        0,
        0,
        0,
        1350,
        1349,
        1,
        0,
        0,
        0,
        1351,
        97,
        1,
        0,
        0,
        0,
        1352,
        1357,
        3,
        100,
        50,
        0,
        1353,
        1354,
        5,
        83,
        0,
        0,
        1354,
        1356,
        3,
        100,
        50,
        0,
        1355,
        1353,
        1,
        0,
        0,
        0,
        1356,
        1359,
        1,
        0,
        0,
        0,
        1357,
        1355,
        1,
        0,
        0,
        0,
        1357,
        1358,
        1,
        0,
        0,
        0,
        1358,
        1361,
        1,
        0,
        0,
        0,
        1359,
        1357,
        1,
        0,
        0,
        0,
        1360,
        1362,
        5,
        83,
        0,
        0,
        1361,
        1360,
        1,
        0,
        0,
        0,
        1361,
        1362,
        1,
        0,
        0,
        0,
        1362,
        1375,
        1,
        0,
        0,
        0,
        1363,
        1365,
        5,
        125,
        0,
        0,
        1364,
        1363,
        1,
        0,
        0,
        0,
        1365,
        1366,
        1,
        0,
        0,
        0,
        1366,
        1364,
        1,
        0,
        0,
        0,
        1366,
        1367,
        1,
        0,
        0,
        0,
        1367,
        1376,
        1,
        0,
        0,
        0,
        1368,
        1370,
        5,
        125,
        0,
        0,
        1369,
        1368,
        1,
        0,
        0,
        0,
        1370,
        1373,
        1,
        0,
        0,
        0,
        1371,
        1369,
        1,
        0,
        0,
        0,
        1371,
        1372,
        1,
        0,
        0,
        0,
        1372,
        1374,
        1,
        0,
        0,
        0,
        1373,
        1371,
        1,
        0,
        0,
        0,
        1374,
        1376,
        5,
        0,
        0,
        1,
        1375,
        1364,
        1,
        0,
        0,
        0,
        1375,
        1371,
        1,
        0,
        0,
        0,
        1376,
        99,
        1,
        0,
        0,
        0,
        1377,
        1392,
        3,
        104,
        52,
        0,
        1378,
        1392,
        3,
        278,
        139,
        0,
        1379,
        1392,
        3,
        294,
        147,
        0,
        1380,
        1392,
        3,
        110,
        55,
        0,
        1381,
        1392,
        3,
        124,
        62,
        0,
        1382,
        1392,
        3,
        112,
        56,
        0,
        1383,
        1392,
        5,
        41,
        0,
        0,
        1384,
        1392,
        3,
        118,
        59,
        0,
        1385,
        1392,
        3,
        120,
        60,
        0,
        1386,
        1392,
        3,
        122,
        61,
        0,
        1387,
        1392,
        5,
        17,
        0,
        0,
        1388,
        1392,
        5,
        20,
        0,
        0,
        1389,
        1392,
        3,
        114,
        57,
        0,
        1390,
        1392,
        3,
        116,
        58,
        0,
        1391,
        1377,
        1,
        0,
        0,
        0,
        1391,
        1378,
        1,
        0,
        0,
        0,
        1391,
        1379,
        1,
        0,
        0,
        0,
        1391,
        1380,
        1,
        0,
        0,
        0,
        1391,
        1381,
        1,
        0,
        0,
        0,
        1391,
        1382,
        1,
        0,
        0,
        0,
        1391,
        1383,
        1,
        0,
        0,
        0,
        1391,
        1384,
        1,
        0,
        0,
        0,
        1391,
        1385,
        1,
        0,
        0,
        0,
        1391,
        1386,
        1,
        0,
        0,
        0,
        1391,
        1387,
        1,
        0,
        0,
        0,
        1391,
        1388,
        1,
        0,
        0,
        0,
        1391,
        1389,
        1,
        0,
        0,
        0,
        1391,
        1390,
        1,
        0,
        0,
        0,
        1392,
        101,
        1,
        0,
        0,
        0,
        1393,
        1402,
        3,
        150,
        75,
        0,
        1394,
        1402,
        3,
        184,
        92,
        0,
        1395,
        1402,
        3,
        146,
        73,
        0,
        1396,
        1402,
        3,
        194,
        97,
        0,
        1397,
        1402,
        3,
        192,
        96,
        0,
        1398,
        1402,
        3,
        198,
        99,
        0,
        1399,
        1402,
        3,
        190,
        95,
        0,
        1400,
        1402,
        3,
        206,
        103,
        0,
        1401,
        1393,
        1,
        0,
        0,
        0,
        1401,
        1394,
        1,
        0,
        0,
        0,
        1401,
        1395,
        1,
        0,
        0,
        0,
        1401,
        1396,
        1,
        0,
        0,
        0,
        1401,
        1397,
        1,
        0,
        0,
        0,
        1401,
        1398,
        1,
        0,
        0,
        0,
        1401,
        1399,
        1,
        0,
        0,
        0,
        1401,
        1400,
        1,
        0,
        0,
        0,
        1402,
        103,
        1,
        0,
        0,
        0,
        1403,
        1404,
        3,
        488,
        244,
        0,
        1404,
        1405,
        5,
        82,
        0,
        0,
        1405,
        1408,
        3,
        290,
        145,
        0,
        1406,
        1407,
        5,
        85,
        0,
        0,
        1407,
        1409,
        3,
        106,
        53,
        0,
        1408,
        1406,
        1,
        0,
        0,
        0,
        1408,
        1409,
        1,
        0,
        0,
        0,
        1409,
        1441,
        1,
        0,
        0,
        0,
        1410,
        1411,
        5,
        79,
        0,
        0,
        1411,
        1412,
        3,
        472,
        236,
        0,
        1412,
        1413,
        5,
        80,
        0,
        0,
        1413,
        1416,
        1,
        0,
        0,
        0,
        1414,
        1416,
        3,
        474,
        237,
        0,
        1415,
        1410,
        1,
        0,
        0,
        0,
        1415,
        1414,
        1,
        0,
        0,
        0,
        1416,
        1417,
        1,
        0,
        0,
        0,
        1417,
        1418,
        5,
        82,
        0,
        0,
        1418,
        1421,
        3,
        290,
        145,
        0,
        1419,
        1420,
        5,
        85,
        0,
        0,
        1420,
        1422,
        3,
        106,
        53,
        0,
        1421,
        1419,
        1,
        0,
        0,
        0,
        1421,
        1422,
        1,
        0,
        0,
        0,
        1422,
        1441,
        1,
        0,
        0,
        0,
        1423,
        1424,
        3,
        460,
        230,
        0,
        1424,
        1425,
        5,
        85,
        0,
        0,
        1425,
        1427,
        1,
        0,
        0,
        0,
        1426,
        1423,
        1,
        0,
        0,
        0,
        1427,
        1428,
        1,
        0,
        0,
        0,
        1428,
        1426,
        1,
        0,
        0,
        0,
        1428,
        1429,
        1,
        0,
        0,
        0,
        1429,
        1432,
        1,
        0,
        0,
        0,
        1430,
        1433,
        3,
        292,
        146,
        0,
        1431,
        1433,
        3,
        294,
        147,
        0,
        1432,
        1430,
        1,
        0,
        0,
        0,
        1432,
        1431,
        1,
        0,
        0,
        0,
        1433,
        1441,
        1,
        0,
        0,
        0,
        1434,
        1435,
        3,
        472,
        236,
        0,
        1435,
        1438,
        3,
        108,
        54,
        0,
        1436,
        1439,
        3,
        292,
        146,
        0,
        1437,
        1439,
        3,
        294,
        147,
        0,
        1438,
        1436,
        1,
        0,
        0,
        0,
        1438,
        1437,
        1,
        0,
        0,
        0,
        1439,
        1441,
        1,
        0,
        0,
        0,
        1440,
        1403,
        1,
        0,
        0,
        0,
        1440,
        1415,
        1,
        0,
        0,
        0,
        1440,
        1426,
        1,
        0,
        0,
        0,
        1440,
        1434,
        1,
        0,
        0,
        0,
        1441,
        105,
        1,
        0,
        0,
        0,
        1442,
        1445,
        3,
        292,
        146,
        0,
        1443,
        1445,
        3,
        294,
        147,
        0,
        1444,
        1442,
        1,
        0,
        0,
        0,
        1444,
        1443,
        1,
        0,
        0,
        0,
        1445,
        107,
        1,
        0,
        0,
        0,
        1446,
        1447,
        7,
        2,
        0,
        0,
        1447,
        109,
        1,
        0,
        0,
        0,
        1448,
        1450,
        5,
        43,
        0,
        0,
        1449,
        1451,
        3,
        294,
        147,
        0,
        1450,
        1449,
        1,
        0,
        0,
        0,
        1450,
        1451,
        1,
        0,
        0,
        0,
        1451,
        111,
        1,
        0,
        0,
        0,
        1452,
        1453,
        5,
        42,
        0,
        0,
        1453,
        1456,
        3,
        290,
        145,
        0,
        1454,
        1455,
        5,
        29,
        0,
        0,
        1455,
        1457,
        3,
        290,
        145,
        0,
        1456,
        1454,
        1,
        0,
        0,
        0,
        1456,
        1457,
        1,
        0,
        0,
        0,
        1457,
        1460,
        1,
        0,
        0,
        0,
        1458,
        1460,
        5,
        42,
        0,
        0,
        1459,
        1452,
        1,
        0,
        0,
        0,
        1459,
        1458,
        1,
        0,
        0,
        0,
        1460,
        113,
        1,
        0,
        0,
        0,
        1461,
        1462,
        5,
        30,
        0,
        0,
        1462,
        1467,
        3,
        488,
        244,
        0,
        1463,
        1464,
        5,
        81,
        0,
        0,
        1464,
        1466,
        3,
        488,
        244,
        0,
        1465,
        1463,
        1,
        0,
        0,
        0,
        1466,
        1469,
        1,
        0,
        0,
        0,
        1467,
        1465,
        1,
        0,
        0,
        0,
        1467,
        1468,
        1,
        0,
        0,
        0,
        1468,
        115,
        1,
        0,
        0,
        0,
        1469,
        1467,
        1,
        0,
        0,
        0,
        1470,
        1471,
        5,
        38,
        0,
        0,
        1471,
        1476,
        3,
        488,
        244,
        0,
        1472,
        1473,
        5,
        81,
        0,
        0,
        1473,
        1475,
        3,
        488,
        244,
        0,
        1474,
        1472,
        1,
        0,
        0,
        0,
        1475,
        1478,
        1,
        0,
        0,
        0,
        1476,
        1474,
        1,
        0,
        0,
        0,
        1476,
        1477,
        1,
        0,
        0,
        0,
        1477,
        117,
        1,
        0,
        0,
        0,
        1478,
        1476,
        1,
        0,
        0,
        0,
        1479,
        1480,
        5,
        22,
        0,
        0,
        1480,
        1481,
        3,
        478,
        239,
        0,
        1481,
        119,
        1,
        0,
        0,
        0,
        1482,
        1483,
        3,
        292,
        146,
        0,
        1483,
        121,
        1,
        0,
        0,
        0,
        1484,
        1485,
        5,
        14,
        0,
        0,
        1485,
        1488,
        3,
        290,
        145,
        0,
        1486,
        1487,
        5,
        81,
        0,
        0,
        1487,
        1489,
        3,
        290,
        145,
        0,
        1488,
        1486,
        1,
        0,
        0,
        0,
        1488,
        1489,
        1,
        0,
        0,
        0,
        1489,
        123,
        1,
        0,
        0,
        0,
        1490,
        1493,
        3,
        126,
        63,
        0,
        1491,
        1493,
        3,
        128,
        64,
        0,
        1492,
        1490,
        1,
        0,
        0,
        0,
        1492,
        1491,
        1,
        0,
        0,
        0,
        1493,
        125,
        1,
        0,
        0,
        0,
        1494,
        1495,
        5,
        32,
        0,
        0,
        1495,
        1496,
        3,
        136,
        68,
        0,
        1496,
        127,
        1,
        0,
        0,
        0,
        1497,
        1501,
        5,
        29,
        0,
        0,
        1498,
        1500,
        7,
        3,
        0,
        0,
        1499,
        1498,
        1,
        0,
        0,
        0,
        1500,
        1503,
        1,
        0,
        0,
        0,
        1501,
        1499,
        1,
        0,
        0,
        0,
        1501,
        1502,
        1,
        0,
        0,
        0,
        1502,
        1504,
        1,
        0,
        0,
        0,
        1503,
        1501,
        1,
        0,
        0,
        0,
        1504,
        1505,
        3,
        140,
        70,
        0,
        1505,
        1506,
        5,
        32,
        0,
        0,
        1506,
        1507,
        3,
        130,
        65,
        0,
        1507,
        1517,
        1,
        0,
        0,
        0,
        1508,
        1510,
        5,
        29,
        0,
        0,
        1509,
        1511,
        7,
        3,
        0,
        0,
        1510,
        1509,
        1,
        0,
        0,
        0,
        1511,
        1512,
        1,
        0,
        0,
        0,
        1512,
        1510,
        1,
        0,
        0,
        0,
        1512,
        1513,
        1,
        0,
        0,
        0,
        1513,
        1514,
        1,
        0,
        0,
        0,
        1514,
        1515,
        5,
        32,
        0,
        0,
        1515,
        1517,
        3,
        130,
        65,
        0,
        1516,
        1497,
        1,
        0,
        0,
        0,
        1516,
        1508,
        1,
        0,
        0,
        0,
        1517,
        129,
        1,
        0,
        0,
        0,
        1518,
        1519,
        5,
        79,
        0,
        0,
        1519,
        1521,
        3,
        132,
        66,
        0,
        1520,
        1522,
        5,
        81,
        0,
        0,
        1521,
        1520,
        1,
        0,
        0,
        0,
        1521,
        1522,
        1,
        0,
        0,
        0,
        1522,
        1523,
        1,
        0,
        0,
        0,
        1523,
        1524,
        5,
        80,
        0,
        0,
        1524,
        1528,
        1,
        0,
        0,
        0,
        1525,
        1528,
        3,
        132,
        66,
        0,
        1526,
        1528,
        5,
        78,
        0,
        0,
        1527,
        1518,
        1,
        0,
        0,
        0,
        1527,
        1525,
        1,
        0,
        0,
        0,
        1527,
        1526,
        1,
        0,
        0,
        0,
        1528,
        131,
        1,
        0,
        0,
        0,
        1529,
        1534,
        3,
        134,
        67,
        0,
        1530,
        1531,
        5,
        81,
        0,
        0,
        1531,
        1533,
        3,
        134,
        67,
        0,
        1532,
        1530,
        1,
        0,
        0,
        0,
        1533,
        1536,
        1,
        0,
        0,
        0,
        1534,
        1532,
        1,
        0,
        0,
        0,
        1534,
        1535,
        1,
        0,
        0,
        0,
        1535,
        133,
        1,
        0,
        0,
        0,
        1536,
        1534,
        1,
        0,
        0,
        0,
        1537,
        1540,
        3,
        488,
        244,
        0,
        1538,
        1539,
        5,
        13,
        0,
        0,
        1539,
        1541,
        3,
        488,
        244,
        0,
        1540,
        1538,
        1,
        0,
        0,
        0,
        1540,
        1541,
        1,
        0,
        0,
        0,
        1541,
        135,
        1,
        0,
        0,
        0,
        1542,
        1547,
        3,
        138,
        69,
        0,
        1543,
        1544,
        5,
        81,
        0,
        0,
        1544,
        1546,
        3,
        138,
        69,
        0,
        1545,
        1543,
        1,
        0,
        0,
        0,
        1546,
        1549,
        1,
        0,
        0,
        0,
        1547,
        1545,
        1,
        0,
        0,
        0,
        1547,
        1548,
        1,
        0,
        0,
        0,
        1548,
        137,
        1,
        0,
        0,
        0,
        1549,
        1547,
        1,
        0,
        0,
        0,
        1550,
        1553,
        3,
        140,
        70,
        0,
        1551,
        1552,
        5,
        13,
        0,
        0,
        1552,
        1554,
        3,
        488,
        244,
        0,
        1553,
        1551,
        1,
        0,
        0,
        0,
        1553,
        1554,
        1,
        0,
        0,
        0,
        1554,
        139,
        1,
        0,
        0,
        0,
        1555,
        1556,
        6,
        70,
        -1,
        0,
        1556,
        1557,
        3,
        488,
        244,
        0,
        1557,
        1563,
        1,
        0,
        0,
        0,
        1558,
        1559,
        10,
        2,
        0,
        0,
        1559,
        1560,
        5,
        77,
        0,
        0,
        1560,
        1562,
        3,
        488,
        244,
        0,
        1561,
        1558,
        1,
        0,
        0,
        0,
        1562,
        1565,
        1,
        0,
        0,
        0,
        1563,
        1561,
        1,
        0,
        0,
        0,
        1563,
        1564,
        1,
        0,
        0,
        0,
        1564,
        141,
        1,
        0,
        0,
        0,
        1565,
        1563,
        1,
        0,
        0,
        0,
        1566,
        1567,
        5,
        125,
        0,
        0,
        1567,
        1568,
        5,
        1,
        0,
        0,
        1568,
        1569,
        3,
        92,
        46,
        0,
        1569,
        1570,
        5,
        2,
        0,
        0,
        1570,
        1573,
        1,
        0,
        0,
        0,
        1571,
        1573,
        3,
        98,
        49,
        0,
        1572,
        1566,
        1,
        0,
        0,
        0,
        1572,
        1571,
        1,
        0,
        0,
        0,
        1573,
        143,
        1,
        0,
        0,
        0,
        1574,
        1575,
        5,
        108,
        0,
        0,
        1575,
        1576,
        3,
        304,
        152,
        0,
        1576,
        1577,
        5,
        125,
        0,
        0,
        1577,
        1579,
        1,
        0,
        0,
        0,
        1578,
        1574,
        1,
        0,
        0,
        0,
        1579,
        1580,
        1,
        0,
        0,
        0,
        1580,
        1578,
        1,
        0,
        0,
        0,
        1580,
        1581,
        1,
        0,
        0,
        0,
        1581,
        145,
        1,
        0,
        0,
        0,
        1582,
        1584,
        3,
        144,
        72,
        0,
        1583,
        1582,
        1,
        0,
        0,
        0,
        1583,
        1584,
        1,
        0,
        0,
        0,
        1584,
        1585,
        1,
        0,
        0,
        0,
        1585,
        1586,
        3,
        148,
        74,
        0,
        1586,
        147,
        1,
        0,
        0,
        0,
        1587,
        1588,
        5,
        19,
        0,
        0,
        1588,
        1590,
        3,
        488,
        244,
        0,
        1589,
        1591,
        3,
        280,
        140,
        0,
        1590,
        1589,
        1,
        0,
        0,
        0,
        1590,
        1591,
        1,
        0,
        0,
        0,
        1591,
        1597,
        1,
        0,
        0,
        0,
        1592,
        1594,
        5,
        79,
        0,
        0,
        1593,
        1595,
        3,
        446,
        223,
        0,
        1594,
        1593,
        1,
        0,
        0,
        0,
        1594,
        1595,
        1,
        0,
        0,
        0,
        1595,
        1596,
        1,
        0,
        0,
        0,
        1596,
        1598,
        5,
        80,
        0,
        0,
        1597,
        1592,
        1,
        0,
        0,
        0,
        1597,
        1598,
        1,
        0,
        0,
        0,
        1598,
        1599,
        1,
        0,
        0,
        0,
        1599,
        1600,
        5,
        82,
        0,
        0,
        1600,
        1601,
        3,
        142,
        71,
        0,
        1601,
        149,
        1,
        0,
        0,
        0,
        1602,
        1604,
        3,
        144,
        72,
        0,
        1603,
        1602,
        1,
        0,
        0,
        0,
        1603,
        1604,
        1,
        0,
        0,
        0,
        1604,
        1605,
        1,
        0,
        0,
        0,
        1605,
        1606,
        3,
        152,
        76,
        0,
        1606,
        151,
        1,
        0,
        0,
        0,
        1607,
        1609,
        5,
        15,
        0,
        0,
        1608,
        1607,
        1,
        0,
        0,
        0,
        1608,
        1609,
        1,
        0,
        0,
        0,
        1609,
        1610,
        1,
        0,
        0,
        0,
        1610,
        1611,
        5,
        21,
        0,
        0,
        1611,
        1613,
        3,
        488,
        244,
        0,
        1612,
        1614,
        3,
        280,
        140,
        0,
        1613,
        1612,
        1,
        0,
        0,
        0,
        1613,
        1614,
        1,
        0,
        0,
        0,
        1614,
        1615,
        1,
        0,
        0,
        0,
        1615,
        1617,
        5,
        79,
        0,
        0,
        1616,
        1618,
        3,
        154,
        77,
        0,
        1617,
        1616,
        1,
        0,
        0,
        0,
        1617,
        1618,
        1,
        0,
        0,
        0,
        1618,
        1619,
        1,
        0,
        0,
        0,
        1619,
        1622,
        5,
        80,
        0,
        0,
        1620,
        1621,
        5,
        109,
        0,
        0,
        1621,
        1623,
        3,
        290,
        145,
        0,
        1622,
        1620,
        1,
        0,
        0,
        0,
        1622,
        1623,
        1,
        0,
        0,
        0,
        1623,
        1624,
        1,
        0,
        0,
        0,
        1624,
        1626,
        5,
        82,
        0,
        0,
        1625,
        1627,
        3,
        486,
        243,
        0,
        1626,
        1625,
        1,
        0,
        0,
        0,
        1626,
        1627,
        1,
        0,
        0,
        0,
        1627,
        1628,
        1,
        0,
        0,
        0,
        1628,
        1629,
        3,
        142,
        71,
        0,
        1629,
        153,
        1,
        0,
        0,
        0,
        1630,
        1631,
        3,
        156,
        78,
        0,
        1631,
        155,
        1,
        0,
        0,
        0,
        1632,
        1636,
        3,
        158,
        79,
        0,
        1633,
        1635,
        3,
        166,
        83,
        0,
        1634,
        1633,
        1,
        0,
        0,
        0,
        1635,
        1638,
        1,
        0,
        0,
        0,
        1636,
        1634,
        1,
        0,
        0,
        0,
        1636,
        1637,
        1,
        0,
        0,
        0,
        1637,
        1642,
        1,
        0,
        0,
        0,
        1638,
        1636,
        1,
        0,
        0,
        0,
        1639,
        1641,
        3,
        170,
        85,
        0,
        1640,
        1639,
        1,
        0,
        0,
        0,
        1641,
        1644,
        1,
        0,
        0,
        0,
        1642,
        1640,
        1,
        0,
        0,
        0,
        1642,
        1643,
        1,
        0,
        0,
        0,
        1643,
        1646,
        1,
        0,
        0,
        0,
        1644,
        1642,
        1,
        0,
        0,
        0,
        1645,
        1647,
        3,
        162,
        81,
        0,
        1646,
        1645,
        1,
        0,
        0,
        0,
        1646,
        1647,
        1,
        0,
        0,
        0,
        1647,
        1682,
        1,
        0,
        0,
        0,
        1648,
        1652,
        3,
        160,
        80,
        0,
        1649,
        1651,
        3,
        170,
        85,
        0,
        1650,
        1649,
        1,
        0,
        0,
        0,
        1651,
        1654,
        1,
        0,
        0,
        0,
        1652,
        1650,
        1,
        0,
        0,
        0,
        1652,
        1653,
        1,
        0,
        0,
        0,
        1653,
        1656,
        1,
        0,
        0,
        0,
        1654,
        1652,
        1,
        0,
        0,
        0,
        1655,
        1657,
        3,
        162,
        81,
        0,
        1656,
        1655,
        1,
        0,
        0,
        0,
        1656,
        1657,
        1,
        0,
        0,
        0,
        1657,
        1682,
        1,
        0,
        0,
        0,
        1658,
        1660,
        3,
        166,
        83,
        0,
        1659,
        1658,
        1,
        0,
        0,
        0,
        1660,
        1661,
        1,
        0,
        0,
        0,
        1661,
        1659,
        1,
        0,
        0,
        0,
        1661,
        1662,
        1,
        0,
        0,
        0,
        1662,
        1666,
        1,
        0,
        0,
        0,
        1663,
        1665,
        3,
        170,
        85,
        0,
        1664,
        1663,
        1,
        0,
        0,
        0,
        1665,
        1668,
        1,
        0,
        0,
        0,
        1666,
        1664,
        1,
        0,
        0,
        0,
        1666,
        1667,
        1,
        0,
        0,
        0,
        1667,
        1670,
        1,
        0,
        0,
        0,
        1668,
        1666,
        1,
        0,
        0,
        0,
        1669,
        1671,
        3,
        162,
        81,
        0,
        1670,
        1669,
        1,
        0,
        0,
        0,
        1670,
        1671,
        1,
        0,
        0,
        0,
        1671,
        1682,
        1,
        0,
        0,
        0,
        1672,
        1674,
        3,
        170,
        85,
        0,
        1673,
        1672,
        1,
        0,
        0,
        0,
        1674,
        1675,
        1,
        0,
        0,
        0,
        1675,
        1673,
        1,
        0,
        0,
        0,
        1675,
        1676,
        1,
        0,
        0,
        0,
        1676,
        1678,
        1,
        0,
        0,
        0,
        1677,
        1679,
        3,
        162,
        81,
        0,
        1678,
        1677,
        1,
        0,
        0,
        0,
        1678,
        1679,
        1,
        0,
        0,
        0,
        1679,
        1682,
        1,
        0,
        0,
        0,
        1680,
        1682,
        3,
        162,
        81,
        0,
        1681,
        1632,
        1,
        0,
        0,
        0,
        1681,
        1648,
        1,
        0,
        0,
        0,
        1681,
        1659,
        1,
        0,
        0,
        0,
        1681,
        1673,
        1,
        0,
        0,
        0,
        1681,
        1680,
        1,
        0,
        0,
        0,
        1682,
        157,
        1,
        0,
        0,
        0,
        1683,
        1685,
        3,
        166,
        83,
        0,
        1684,
        1683,
        1,
        0,
        0,
        0,
        1685,
        1686,
        1,
        0,
        0,
        0,
        1686,
        1684,
        1,
        0,
        0,
        0,
        1686,
        1687,
        1,
        0,
        0,
        0,
        1687,
        1688,
        1,
        0,
        0,
        0,
        1688,
        1690,
        5,
        95,
        0,
        0,
        1689,
        1691,
        5,
        81,
        0,
        0,
        1690,
        1689,
        1,
        0,
        0,
        0,
        1690,
        1691,
        1,
        0,
        0,
        0,
        1691,
        159,
        1,
        0,
        0,
        0,
        1692,
        1694,
        3,
        166,
        83,
        0,
        1693,
        1692,
        1,
        0,
        0,
        0,
        1694,
        1697,
        1,
        0,
        0,
        0,
        1695,
        1693,
        1,
        0,
        0,
        0,
        1695,
        1696,
        1,
        0,
        0,
        0,
        1696,
        1699,
        1,
        0,
        0,
        0,
        1697,
        1695,
        1,
        0,
        0,
        0,
        1698,
        1700,
        3,
        170,
        85,
        0,
        1699,
        1698,
        1,
        0,
        0,
        0,
        1700,
        1701,
        1,
        0,
        0,
        0,
        1701,
        1699,
        1,
        0,
        0,
        0,
        1701,
        1702,
        1,
        0,
        0,
        0,
        1702,
        1703,
        1,
        0,
        0,
        0,
        1703,
        1705,
        5,
        95,
        0,
        0,
        1704,
        1706,
        5,
        81,
        0,
        0,
        1705,
        1704,
        1,
        0,
        0,
        0,
        1705,
        1706,
        1,
        0,
        0,
        0,
        1706,
        161,
        1,
        0,
        0,
        0,
        1707,
        1708,
        5,
        78,
        0,
        0,
        1708,
        1712,
        3,
        166,
        83,
        0,
        1709,
        1711,
        3,
        172,
        86,
        0,
        1710,
        1709,
        1,
        0,
        0,
        0,
        1711,
        1714,
        1,
        0,
        0,
        0,
        1712,
        1710,
        1,
        0,
        0,
        0,
        1712,
        1713,
        1,
        0,
        0,
        0,
        1713,
        1716,
        1,
        0,
        0,
        0,
        1714,
        1712,
        1,
        0,
        0,
        0,
        1715,
        1717,
        3,
        164,
        82,
        0,
        1716,
        1715,
        1,
        0,
        0,
        0,
        1716,
        1717,
        1,
        0,
        0,
        0,
        1717,
        1741,
        1,
        0,
        0,
        0,
        1718,
        1719,
        5,
        78,
        0,
        0,
        1719,
        1723,
        3,
        168,
        84,
        0,
        1720,
        1722,
        3,
        172,
        86,
        0,
        1721,
        1720,
        1,
        0,
        0,
        0,
        1722,
        1725,
        1,
        0,
        0,
        0,
        1723,
        1721,
        1,
        0,
        0,
        0,
        1723,
        1724,
        1,
        0,
        0,
        0,
        1724,
        1727,
        1,
        0,
        0,
        0,
        1725,
        1723,
        1,
        0,
        0,
        0,
        1726,
        1728,
        3,
        164,
        82,
        0,
        1727,
        1726,
        1,
        0,
        0,
        0,
        1727,
        1728,
        1,
        0,
        0,
        0,
        1728,
        1741,
        1,
        0,
        0,
        0,
        1729,
        1730,
        5,
        78,
        0,
        0,
        1730,
        1732,
        5,
        81,
        0,
        0,
        1731,
        1733,
        3,
        172,
        86,
        0,
        1732,
        1731,
        1,
        0,
        0,
        0,
        1733,
        1734,
        1,
        0,
        0,
        0,
        1734,
        1732,
        1,
        0,
        0,
        0,
        1734,
        1735,
        1,
        0,
        0,
        0,
        1735,
        1737,
        1,
        0,
        0,
        0,
        1736,
        1738,
        3,
        164,
        82,
        0,
        1737,
        1736,
        1,
        0,
        0,
        0,
        1737,
        1738,
        1,
        0,
        0,
        0,
        1738,
        1741,
        1,
        0,
        0,
        0,
        1739,
        1741,
        3,
        164,
        82,
        0,
        1740,
        1707,
        1,
        0,
        0,
        0,
        1740,
        1718,
        1,
        0,
        0,
        0,
        1740,
        1729,
        1,
        0,
        0,
        0,
        1740,
        1739,
        1,
        0,
        0,
        0,
        1741,
        163,
        1,
        0,
        0,
        0,
        1742,
        1743,
        5,
        84,
        0,
        0,
        1743,
        1744,
        3,
        166,
        83,
        0,
        1744,
        165,
        1,
        0,
        0,
        0,
        1745,
        1746,
        3,
        174,
        87,
        0,
        1746,
        1747,
        5,
        81,
        0,
        0,
        1747,
        1750,
        1,
        0,
        0,
        0,
        1748,
        1750,
        3,
        174,
        87,
        0,
        1749,
        1745,
        1,
        0,
        0,
        0,
        1749,
        1748,
        1,
        0,
        0,
        0,
        1750,
        167,
        1,
        0,
        0,
        0,
        1751,
        1752,
        3,
        176,
        88,
        0,
        1752,
        1753,
        5,
        81,
        0,
        0,
        1753,
        1756,
        1,
        0,
        0,
        0,
        1754,
        1756,
        3,
        176,
        88,
        0,
        1755,
        1751,
        1,
        0,
        0,
        0,
        1755,
        1754,
        1,
        0,
        0,
        0,
        1756,
        169,
        1,
        0,
        0,
        0,
        1757,
        1758,
        3,
        174,
        87,
        0,
        1758,
        1759,
        3,
        182,
        91,
        0,
        1759,
        1760,
        5,
        81,
        0,
        0,
        1760,
        1765,
        1,
        0,
        0,
        0,
        1761,
        1762,
        3,
        174,
        87,
        0,
        1762,
        1763,
        3,
        182,
        91,
        0,
        1763,
        1765,
        1,
        0,
        0,
        0,
        1764,
        1757,
        1,
        0,
        0,
        0,
        1764,
        1761,
        1,
        0,
        0,
        0,
        1765,
        171,
        1,
        0,
        0,
        0,
        1766,
        1768,
        3,
        174,
        87,
        0,
        1767,
        1769,
        3,
        182,
        91,
        0,
        1768,
        1767,
        1,
        0,
        0,
        0,
        1768,
        1769,
        1,
        0,
        0,
        0,
        1769,
        1770,
        1,
        0,
        0,
        0,
        1770,
        1771,
        5,
        81,
        0,
        0,
        1771,
        1777,
        1,
        0,
        0,
        0,
        1772,
        1774,
        3,
        174,
        87,
        0,
        1773,
        1775,
        3,
        182,
        91,
        0,
        1774,
        1773,
        1,
        0,
        0,
        0,
        1774,
        1775,
        1,
        0,
        0,
        0,
        1775,
        1777,
        1,
        0,
        0,
        0,
        1776,
        1766,
        1,
        0,
        0,
        0,
        1776,
        1772,
        1,
        0,
        0,
        0,
        1777,
        173,
        1,
        0,
        0,
        0,
        1778,
        1780,
        3,
        488,
        244,
        0,
        1779,
        1781,
        3,
        178,
        89,
        0,
        1780,
        1779,
        1,
        0,
        0,
        0,
        1780,
        1781,
        1,
        0,
        0,
        0,
        1781,
        175,
        1,
        0,
        0,
        0,
        1782,
        1783,
        3,
        488,
        244,
        0,
        1783,
        1784,
        3,
        180,
        90,
        0,
        1784,
        177,
        1,
        0,
        0,
        0,
        1785,
        1786,
        5,
        82,
        0,
        0,
        1786,
        1787,
        3,
        290,
        145,
        0,
        1787,
        179,
        1,
        0,
        0,
        0,
        1788,
        1789,
        5,
        82,
        0,
        0,
        1789,
        1790,
        3,
        296,
        148,
        0,
        1790,
        181,
        1,
        0,
        0,
        0,
        1791,
        1792,
        5,
        85,
        0,
        0,
        1792,
        1793,
        3,
        290,
        145,
        0,
        1793,
        183,
        1,
        0,
        0,
        0,
        1794,
        1795,
        5,
        31,
        0,
        0,
        1795,
        1796,
        3,
        304,
        152,
        0,
        1796,
        1797,
        5,
        82,
        0,
        0,
        1797,
        1798,
        3,
        142,
        71,
        0,
        1798,
        1799,
        3,
        186,
        93,
        0,
        1799,
        1808,
        1,
        0,
        0,
        0,
        1800,
        1801,
        5,
        31,
        0,
        0,
        1801,
        1802,
        3,
        304,
        152,
        0,
        1802,
        1803,
        5,
        82,
        0,
        0,
        1803,
        1805,
        3,
        142,
        71,
        0,
        1804,
        1806,
        3,
        188,
        94,
        0,
        1805,
        1804,
        1,
        0,
        0,
        0,
        1805,
        1806,
        1,
        0,
        0,
        0,
        1806,
        1808,
        1,
        0,
        0,
        0,
        1807,
        1794,
        1,
        0,
        0,
        0,
        1807,
        1800,
        1,
        0,
        0,
        0,
        1808,
        185,
        1,
        0,
        0,
        0,
        1809,
        1810,
        5,
        23,
        0,
        0,
        1810,
        1811,
        3,
        304,
        152,
        0,
        1811,
        1812,
        5,
        82,
        0,
        0,
        1812,
        1813,
        3,
        142,
        71,
        0,
        1813,
        1814,
        3,
        186,
        93,
        0,
        1814,
        1823,
        1,
        0,
        0,
        0,
        1815,
        1816,
        5,
        23,
        0,
        0,
        1816,
        1817,
        3,
        304,
        152,
        0,
        1817,
        1818,
        5,
        82,
        0,
        0,
        1818,
        1820,
        3,
        142,
        71,
        0,
        1819,
        1821,
        3,
        188,
        94,
        0,
        1820,
        1819,
        1,
        0,
        0,
        0,
        1820,
        1821,
        1,
        0,
        0,
        0,
        1821,
        1823,
        1,
        0,
        0,
        0,
        1822,
        1809,
        1,
        0,
        0,
        0,
        1822,
        1815,
        1,
        0,
        0,
        0,
        1823,
        187,
        1,
        0,
        0,
        0,
        1824,
        1825,
        5,
        24,
        0,
        0,
        1825,
        1826,
        5,
        82,
        0,
        0,
        1826,
        1827,
        3,
        142,
        71,
        0,
        1827,
        189,
        1,
        0,
        0,
        0,
        1828,
        1829,
        5,
        47,
        0,
        0,
        1829,
        1830,
        3,
        304,
        152,
        0,
        1830,
        1831,
        5,
        82,
        0,
        0,
        1831,
        1833,
        3,
        142,
        71,
        0,
        1832,
        1834,
        3,
        188,
        94,
        0,
        1833,
        1832,
        1,
        0,
        0,
        0,
        1833,
        1834,
        1,
        0,
        0,
        0,
        1834,
        191,
        1,
        0,
        0,
        0,
        1835,
        1836,
        5,
        28,
        0,
        0,
        1836,
        1837,
        3,
        460,
        230,
        0,
        1837,
        1838,
        5,
        33,
        0,
        0,
        1838,
        1839,
        3,
        294,
        147,
        0,
        1839,
        1840,
        5,
        82,
        0,
        0,
        1840,
        1842,
        3,
        142,
        71,
        0,
        1841,
        1843,
        3,
        188,
        94,
        0,
        1842,
        1841,
        1,
        0,
        0,
        0,
        1842,
        1843,
        1,
        0,
        0,
        0,
        1843,
        1855,
        1,
        0,
        0,
        0,
        1844,
        1845,
        5,
        15,
        0,
        0,
        1845,
        1846,
        5,
        28,
        0,
        0,
        1846,
        1847,
        3,
        460,
        230,
        0,
        1847,
        1848,
        5,
        33,
        0,
        0,
        1848,
        1849,
        3,
        294,
        147,
        0,
        1849,
        1850,
        5,
        82,
        0,
        0,
        1850,
        1852,
        3,
        142,
        71,
        0,
        1851,
        1853,
        3,
        188,
        94,
        0,
        1852,
        1851,
        1,
        0,
        0,
        0,
        1852,
        1853,
        1,
        0,
        0,
        0,
        1853,
        1855,
        1,
        0,
        0,
        0,
        1854,
        1835,
        1,
        0,
        0,
        0,
        1854,
        1844,
        1,
        0,
        0,
        0,
        1855,
        193,
        1,
        0,
        0,
        0,
        1856,
        1857,
        5,
        49,
        0,
        0,
        1857,
        1858,
        5,
        79,
        0,
        0,
        1858,
        1863,
        3,
        196,
        98,
        0,
        1859,
        1860,
        5,
        81,
        0,
        0,
        1860,
        1862,
        3,
        196,
        98,
        0,
        1861,
        1859,
        1,
        0,
        0,
        0,
        1862,
        1865,
        1,
        0,
        0,
        0,
        1863,
        1861,
        1,
        0,
        0,
        0,
        1863,
        1864,
        1,
        0,
        0,
        0,
        1864,
        1867,
        1,
        0,
        0,
        0,
        1865,
        1863,
        1,
        0,
        0,
        0,
        1866,
        1868,
        5,
        81,
        0,
        0,
        1867,
        1866,
        1,
        0,
        0,
        0,
        1867,
        1868,
        1,
        0,
        0,
        0,
        1868,
        1869,
        1,
        0,
        0,
        0,
        1869,
        1870,
        5,
        80,
        0,
        0,
        1870,
        1871,
        5,
        82,
        0,
        0,
        1871,
        1872,
        3,
        142,
        71,
        0,
        1872,
        1917,
        1,
        0,
        0,
        0,
        1873,
        1874,
        5,
        49,
        0,
        0,
        1874,
        1879,
        3,
        196,
        98,
        0,
        1875,
        1876,
        5,
        81,
        0,
        0,
        1876,
        1878,
        3,
        196,
        98,
        0,
        1877,
        1875,
        1,
        0,
        0,
        0,
        1878,
        1881,
        1,
        0,
        0,
        0,
        1879,
        1877,
        1,
        0,
        0,
        0,
        1879,
        1880,
        1,
        0,
        0,
        0,
        1880,
        1882,
        1,
        0,
        0,
        0,
        1881,
        1879,
        1,
        0,
        0,
        0,
        1882,
        1883,
        5,
        82,
        0,
        0,
        1883,
        1884,
        3,
        142,
        71,
        0,
        1884,
        1917,
        1,
        0,
        0,
        0,
        1885,
        1886,
        5,
        15,
        0,
        0,
        1886,
        1887,
        5,
        49,
        0,
        0,
        1887,
        1888,
        5,
        79,
        0,
        0,
        1888,
        1893,
        3,
        196,
        98,
        0,
        1889,
        1890,
        5,
        81,
        0,
        0,
        1890,
        1892,
        3,
        196,
        98,
        0,
        1891,
        1889,
        1,
        0,
        0,
        0,
        1892,
        1895,
        1,
        0,
        0,
        0,
        1893,
        1891,
        1,
        0,
        0,
        0,
        1893,
        1894,
        1,
        0,
        0,
        0,
        1894,
        1897,
        1,
        0,
        0,
        0,
        1895,
        1893,
        1,
        0,
        0,
        0,
        1896,
        1898,
        5,
        81,
        0,
        0,
        1897,
        1896,
        1,
        0,
        0,
        0,
        1897,
        1898,
        1,
        0,
        0,
        0,
        1898,
        1899,
        1,
        0,
        0,
        0,
        1899,
        1900,
        5,
        80,
        0,
        0,
        1900,
        1901,
        5,
        82,
        0,
        0,
        1901,
        1902,
        3,
        142,
        71,
        0,
        1902,
        1917,
        1,
        0,
        0,
        0,
        1903,
        1904,
        5,
        15,
        0,
        0,
        1904,
        1905,
        5,
        49,
        0,
        0,
        1905,
        1910,
        3,
        196,
        98,
        0,
        1906,
        1907,
        5,
        81,
        0,
        0,
        1907,
        1909,
        3,
        196,
        98,
        0,
        1908,
        1906,
        1,
        0,
        0,
        0,
        1909,
        1912,
        1,
        0,
        0,
        0,
        1910,
        1908,
        1,
        0,
        0,
        0,
        1910,
        1911,
        1,
        0,
        0,
        0,
        1911,
        1913,
        1,
        0,
        0,
        0,
        1912,
        1910,
        1,
        0,
        0,
        0,
        1913,
        1914,
        5,
        82,
        0,
        0,
        1914,
        1915,
        3,
        142,
        71,
        0,
        1915,
        1917,
        1,
        0,
        0,
        0,
        1916,
        1856,
        1,
        0,
        0,
        0,
        1916,
        1873,
        1,
        0,
        0,
        0,
        1916,
        1885,
        1,
        0,
        0,
        0,
        1916,
        1903,
        1,
        0,
        0,
        0,
        1917,
        195,
        1,
        0,
        0,
        0,
        1918,
        1919,
        3,
        290,
        145,
        0,
        1919,
        1920,
        5,
        13,
        0,
        0,
        1920,
        1921,
        3,
        466,
        233,
        0,
        1921,
        1924,
        1,
        0,
        0,
        0,
        1922,
        1924,
        3,
        290,
        145,
        0,
        1923,
        1918,
        1,
        0,
        0,
        0,
        1923,
        1922,
        1,
        0,
        0,
        0,
        1924,
        197,
        1,
        0,
        0,
        0,
        1925,
        1926,
        5,
        45,
        0,
        0,
        1926,
        1927,
        5,
        82,
        0,
        0,
        1927,
        1928,
        3,
        142,
        71,
        0,
        1928,
        1929,
        3,
        204,
        102,
        0,
        1929,
        1959,
        1,
        0,
        0,
        0,
        1930,
        1931,
        5,
        45,
        0,
        0,
        1931,
        1932,
        5,
        82,
        0,
        0,
        1932,
        1934,
        3,
        142,
        71,
        0,
        1933,
        1935,
        3,
        200,
        100,
        0,
        1934,
        1933,
        1,
        0,
        0,
        0,
        1935,
        1936,
        1,
        0,
        0,
        0,
        1936,
        1934,
        1,
        0,
        0,
        0,
        1936,
        1937,
        1,
        0,
        0,
        0,
        1937,
        1939,
        1,
        0,
        0,
        0,
        1938,
        1940,
        3,
        188,
        94,
        0,
        1939,
        1938,
        1,
        0,
        0,
        0,
        1939,
        1940,
        1,
        0,
        0,
        0,
        1940,
        1942,
        1,
        0,
        0,
        0,
        1941,
        1943,
        3,
        204,
        102,
        0,
        1942,
        1941,
        1,
        0,
        0,
        0,
        1942,
        1943,
        1,
        0,
        0,
        0,
        1943,
        1959,
        1,
        0,
        0,
        0,
        1944,
        1945,
        5,
        45,
        0,
        0,
        1945,
        1946,
        5,
        82,
        0,
        0,
        1946,
        1948,
        3,
        142,
        71,
        0,
        1947,
        1949,
        3,
        202,
        101,
        0,
        1948,
        1947,
        1,
        0,
        0,
        0,
        1949,
        1950,
        1,
        0,
        0,
        0,
        1950,
        1948,
        1,
        0,
        0,
        0,
        1950,
        1951,
        1,
        0,
        0,
        0,
        1951,
        1953,
        1,
        0,
        0,
        0,
        1952,
        1954,
        3,
        188,
        94,
        0,
        1953,
        1952,
        1,
        0,
        0,
        0,
        1953,
        1954,
        1,
        0,
        0,
        0,
        1954,
        1956,
        1,
        0,
        0,
        0,
        1955,
        1957,
        3,
        204,
        102,
        0,
        1956,
        1955,
        1,
        0,
        0,
        0,
        1956,
        1957,
        1,
        0,
        0,
        0,
        1957,
        1959,
        1,
        0,
        0,
        0,
        1958,
        1925,
        1,
        0,
        0,
        0,
        1958,
        1930,
        1,
        0,
        0,
        0,
        1958,
        1944,
        1,
        0,
        0,
        0,
        1959,
        199,
        1,
        0,
        0,
        0,
        1960,
        1961,
        5,
        25,
        0,
        0,
        1961,
        1964,
        3,
        290,
        145,
        0,
        1962,
        1963,
        5,
        13,
        0,
        0,
        1963,
        1965,
        3,
        488,
        244,
        0,
        1964,
        1962,
        1,
        0,
        0,
        0,
        1964,
        1965,
        1,
        0,
        0,
        0,
        1965,
        1966,
        1,
        0,
        0,
        0,
        1966,
        1967,
        5,
        82,
        0,
        0,
        1967,
        1968,
        3,
        142,
        71,
        0,
        1968,
        1973,
        1,
        0,
        0,
        0,
        1969,
        1970,
        5,
        25,
        0,
        0,
        1970,
        1971,
        5,
        82,
        0,
        0,
        1971,
        1973,
        3,
        142,
        71,
        0,
        1972,
        1960,
        1,
        0,
        0,
        0,
        1972,
        1969,
        1,
        0,
        0,
        0,
        1973,
        201,
        1,
        0,
        0,
        0,
        1974,
        1975,
        5,
        25,
        0,
        0,
        1975,
        1976,
        5,
        78,
        0,
        0,
        1976,
        1979,
        3,
        290,
        145,
        0,
        1977,
        1978,
        5,
        13,
        0,
        0,
        1978,
        1980,
        3,
        488,
        244,
        0,
        1979,
        1977,
        1,
        0,
        0,
        0,
        1979,
        1980,
        1,
        0,
        0,
        0,
        1980,
        1981,
        1,
        0,
        0,
        0,
        1981,
        1982,
        5,
        82,
        0,
        0,
        1982,
        1983,
        3,
        142,
        71,
        0,
        1983,
        203,
        1,
        0,
        0,
        0,
        1984,
        1985,
        5,
        27,
        0,
        0,
        1985,
        1986,
        5,
        82,
        0,
        0,
        1986,
        1987,
        3,
        142,
        71,
        0,
        1987,
        205,
        1,
        0,
        0,
        0,
        1988,
        1989,
        5,
        36,
        0,
        0,
        1989,
        1990,
        3,
        208,
        104,
        0,
        1990,
        1991,
        5,
        82,
        0,
        0,
        1991,
        1992,
        5,
        125,
        0,
        0,
        1992,
        1994,
        5,
        1,
        0,
        0,
        1993,
        1995,
        3,
        210,
        105,
        0,
        1994,
        1993,
        1,
        0,
        0,
        0,
        1995,
        1996,
        1,
        0,
        0,
        0,
        1996,
        1994,
        1,
        0,
        0,
        0,
        1996,
        1997,
        1,
        0,
        0,
        0,
        1997,
        1998,
        1,
        0,
        0,
        0,
        1998,
        1999,
        5,
        2,
        0,
        0,
        1999,
        207,
        1,
        0,
        0,
        0,
        2000,
        2001,
        3,
        300,
        150,
        0,
        2001,
        2003,
        5,
        81,
        0,
        0,
        2002,
        2004,
        3,
        298,
        149,
        0,
        2003,
        2002,
        1,
        0,
        0,
        0,
        2003,
        2004,
        1,
        0,
        0,
        0,
        2004,
        2007,
        1,
        0,
        0,
        0,
        2005,
        2007,
        3,
        304,
        152,
        0,
        2006,
        2000,
        1,
        0,
        0,
        0,
        2006,
        2005,
        1,
        0,
        0,
        0,
        2007,
        209,
        1,
        0,
        0,
        0,
        2008,
        2009,
        5,
        18,
        0,
        0,
        2009,
        2011,
        3,
        214,
        107,
        0,
        2010,
        2012,
        3,
        212,
        106,
        0,
        2011,
        2010,
        1,
        0,
        0,
        0,
        2011,
        2012,
        1,
        0,
        0,
        0,
        2012,
        2013,
        1,
        0,
        0,
        0,
        2013,
        2014,
        5,
        82,
        0,
        0,
        2014,
        2015,
        3,
        142,
        71,
        0,
        2015,
        211,
        1,
        0,
        0,
        0,
        2016,
        2017,
        5,
        31,
        0,
        0,
        2017,
        2018,
        3,
        304,
        152,
        0,
        2018,
        213,
        1,
        0,
        0,
        0,
        2019,
        2022,
        3,
        254,
        127,
        0,
        2020,
        2022,
        3,
        216,
        108,
        0,
        2021,
        2019,
        1,
        0,
        0,
        0,
        2021,
        2020,
        1,
        0,
        0,
        0,
        2022,
        215,
        1,
        0,
        0,
        0,
        2023,
        2026,
        3,
        218,
        109,
        0,
        2024,
        2026,
        3,
        220,
        110,
        0,
        2025,
        2023,
        1,
        0,
        0,
        0,
        2025,
        2024,
        1,
        0,
        0,
        0,
        2026,
        217,
        1,
        0,
        0,
        0,
        2027,
        2028,
        3,
        220,
        110,
        0,
        2028,
        2029,
        5,
        13,
        0,
        0,
        2029,
        2030,
        3,
        240,
        120,
        0,
        2030,
        219,
        1,
        0,
        0,
        0,
        2031,
        2036,
        3,
        222,
        111,
        0,
        2032,
        2033,
        5,
        88,
        0,
        0,
        2033,
        2035,
        3,
        222,
        111,
        0,
        2034,
        2032,
        1,
        0,
        0,
        0,
        2035,
        2038,
        1,
        0,
        0,
        0,
        2036,
        2034,
        1,
        0,
        0,
        0,
        2036,
        2037,
        1,
        0,
        0,
        0,
        2037,
        221,
        1,
        0,
        0,
        0,
        2038,
        2036,
        1,
        0,
        0,
        0,
        2039,
        2048,
        3,
        224,
        112,
        0,
        2040,
        2048,
        3,
        238,
        119,
        0,
        2041,
        2048,
        3,
        242,
        121,
        0,
        2042,
        2048,
        3,
        244,
        122,
        0,
        2043,
        2048,
        3,
        250,
        125,
        0,
        2044,
        2048,
        3,
        252,
        126,
        0,
        2045,
        2048,
        3,
        262,
        131,
        0,
        2046,
        2048,
        3,
        270,
        135,
        0,
        2047,
        2039,
        1,
        0,
        0,
        0,
        2047,
        2040,
        1,
        0,
        0,
        0,
        2047,
        2041,
        1,
        0,
        0,
        0,
        2047,
        2042,
        1,
        0,
        0,
        0,
        2047,
        2043,
        1,
        0,
        0,
        0,
        2047,
        2044,
        1,
        0,
        0,
        0,
        2047,
        2045,
        1,
        0,
        0,
        0,
        2047,
        2046,
        1,
        0,
        0,
        0,
        2048,
        223,
        1,
        0,
        0,
        0,
        2049,
        2056,
        3,
        230,
        115,
        0,
        2050,
        2056,
        3,
        228,
        114,
        0,
        2051,
        2056,
        3,
        418,
        209,
        0,
        2052,
        2056,
        5,
        37,
        0,
        0,
        2053,
        2056,
        5,
        44,
        0,
        0,
        2054,
        2056,
        5,
        26,
        0,
        0,
        2055,
        2049,
        1,
        0,
        0,
        0,
        2055,
        2050,
        1,
        0,
        0,
        0,
        2055,
        2051,
        1,
        0,
        0,
        0,
        2055,
        2052,
        1,
        0,
        0,
        0,
        2055,
        2053,
        1,
        0,
        0,
        0,
        2055,
        2054,
        1,
        0,
        0,
        0,
        2056,
        225,
        1,
        0,
        0,
        0,
        2057,
        2064,
        3,
        230,
        115,
        0,
        2058,
        2064,
        3,
        228,
        114,
        0,
        2059,
        2064,
        3,
        418,
        209,
        0,
        2060,
        2064,
        5,
        37,
        0,
        0,
        2061,
        2064,
        5,
        44,
        0,
        0,
        2062,
        2064,
        5,
        26,
        0,
        0,
        2063,
        2057,
        1,
        0,
        0,
        0,
        2063,
        2058,
        1,
        0,
        0,
        0,
        2063,
        2059,
        1,
        0,
        0,
        0,
        2063,
        2060,
        1,
        0,
        0,
        0,
        2063,
        2061,
        1,
        0,
        0,
        0,
        2063,
        2062,
        1,
        0,
        0,
        0,
        2064,
        227,
        1,
        0,
        0,
        0,
        2065,
        2066,
        3,
        232,
        116,
        0,
        2066,
        2067,
        5,
        93,
        0,
        0,
        2067,
        2068,
        3,
        236,
        118,
        0,
        2068,
        2074,
        1,
        0,
        0,
        0,
        2069,
        2070,
        3,
        232,
        116,
        0,
        2070,
        2071,
        5,
        94,
        0,
        0,
        2071,
        2072,
        3,
        236,
        118,
        0,
        2072,
        2074,
        1,
        0,
        0,
        0,
        2073,
        2065,
        1,
        0,
        0,
        0,
        2073,
        2069,
        1,
        0,
        0,
        0,
        2074,
        229,
        1,
        0,
        0,
        0,
        2075,
        2079,
        5,
        8,
        0,
        0,
        2076,
        2077,
        5,
        94,
        0,
        0,
        2077,
        2079,
        5,
        8,
        0,
        0,
        2078,
        2075,
        1,
        0,
        0,
        0,
        2078,
        2076,
        1,
        0,
        0,
        0,
        2079,
        231,
        1,
        0,
        0,
        0,
        2080,
        2084,
        3,
        234,
        117,
        0,
        2081,
        2082,
        5,
        94,
        0,
        0,
        2082,
        2084,
        3,
        234,
        117,
        0,
        2083,
        2080,
        1,
        0,
        0,
        0,
        2083,
        2081,
        1,
        0,
        0,
        0,
        2084,
        233,
        1,
        0,
        0,
        0,
        2085,
        2086,
        5,
        8,
        0,
        0,
        2086,
        235,
        1,
        0,
        0,
        0,
        2087,
        2088,
        5,
        8,
        0,
        0,
        2088,
        237,
        1,
        0,
        0,
        0,
        2089,
        2090,
        3,
        240,
        120,
        0,
        2090,
        239,
        1,
        0,
        0,
        0,
        2091,
        2092,
        3,
        488,
        244,
        0,
        2092,
        241,
        1,
        0,
        0,
        0,
        2093,
        2094,
        5,
        128,
        0,
        0,
        2094,
        243,
        1,
        0,
        0,
        0,
        2095,
        2096,
        3,
        246,
        123,
        0,
        2096,
        245,
        1,
        0,
        0,
        0,
        2097,
        2098,
        3,
        248,
        124,
        0,
        2098,
        2099,
        5,
        77,
        0,
        0,
        2099,
        2100,
        3,
        488,
        244,
        0,
        2100,
        247,
        1,
        0,
        0,
        0,
        2101,
        2102,
        6,
        124,
        -1,
        0,
        2102,
        2103,
        3,
        488,
        244,
        0,
        2103,
        2109,
        1,
        0,
        0,
        0,
        2104,
        2105,
        10,
        2,
        0,
        0,
        2105,
        2106,
        5,
        77,
        0,
        0,
        2106,
        2108,
        3,
        488,
        244,
        0,
        2107,
        2104,
        1,
        0,
        0,
        0,
        2108,
        2111,
        1,
        0,
        0,
        0,
        2109,
        2107,
        1,
        0,
        0,
        0,
        2109,
        2110,
        1,
        0,
        0,
        0,
        2110,
        249,
        1,
        0,
        0,
        0,
        2111,
        2109,
        1,
        0,
        0,
        0,
        2112,
        2113,
        5,
        79,
        0,
        0,
        2113,
        2114,
        3,
        216,
        108,
        0,
        2114,
        2115,
        5,
        80,
        0,
        0,
        2115,
        251,
        1,
        0,
        0,
        0,
        2116,
        2118,
        5,
        86,
        0,
        0,
        2117,
        2119,
        3,
        256,
        128,
        0,
        2118,
        2117,
        1,
        0,
        0,
        0,
        2118,
        2119,
        1,
        0,
        0,
        0,
        2119,
        2120,
        1,
        0,
        0,
        0,
        2120,
        2127,
        5,
        87,
        0,
        0,
        2121,
        2123,
        5,
        79,
        0,
        0,
        2122,
        2124,
        3,
        254,
        127,
        0,
        2123,
        2122,
        1,
        0,
        0,
        0,
        2123,
        2124,
        1,
        0,
        0,
        0,
        2124,
        2125,
        1,
        0,
        0,
        0,
        2125,
        2127,
        5,
        80,
        0,
        0,
        2126,
        2116,
        1,
        0,
        0,
        0,
        2126,
        2121,
        1,
        0,
        0,
        0,
        2127,
        253,
        1,
        0,
        0,
        0,
        2128,
        2129,
        3,
        258,
        129,
        0,
        2129,
        2131,
        5,
        81,
        0,
        0,
        2130,
        2132,
        3,
        256,
        128,
        0,
        2131,
        2130,
        1,
        0,
        0,
        0,
        2131,
        2132,
        1,
        0,
        0,
        0,
        2132,
        255,
        1,
        0,
        0,
        0,
        2133,
        2138,
        3,
        258,
        129,
        0,
        2134,
        2135,
        5,
        81,
        0,
        0,
        2135,
        2137,
        3,
        258,
        129,
        0,
        2136,
        2134,
        1,
        0,
        0,
        0,
        2137,
        2140,
        1,
        0,
        0,
        0,
        2138,
        2136,
        1,
        0,
        0,
        0,
        2138,
        2139,
        1,
        0,
        0,
        0,
        2139,
        2142,
        1,
        0,
        0,
        0,
        2140,
        2138,
        1,
        0,
        0,
        0,
        2141,
        2143,
        5,
        81,
        0,
        0,
        2142,
        2141,
        1,
        0,
        0,
        0,
        2142,
        2143,
        1,
        0,
        0,
        0,
        2143,
        257,
        1,
        0,
        0,
        0,
        2144,
        2147,
        3,
        260,
        130,
        0,
        2145,
        2147,
        3,
        216,
        108,
        0,
        2146,
        2144,
        1,
        0,
        0,
        0,
        2146,
        2145,
        1,
        0,
        0,
        0,
        2147,
        259,
        1,
        0,
        0,
        0,
        2148,
        2149,
        5,
        78,
        0,
        0,
        2149,
        2153,
        3,
        240,
        120,
        0,
        2150,
        2151,
        5,
        78,
        0,
        0,
        2151,
        2153,
        3,
        242,
        121,
        0,
        2152,
        2148,
        1,
        0,
        0,
        0,
        2152,
        2150,
        1,
        0,
        0,
        0,
        2153,
        261,
        1,
        0,
        0,
        0,
        2154,
        2155,
        5,
        99,
        0,
        0,
        2155,
        2180,
        5,
        100,
        0,
        0,
        2156,
        2157,
        5,
        99,
        0,
        0,
        2157,
        2159,
        3,
        268,
        134,
        0,
        2158,
        2160,
        5,
        81,
        0,
        0,
        2159,
        2158,
        1,
        0,
        0,
        0,
        2159,
        2160,
        1,
        0,
        0,
        0,
        2160,
        2161,
        1,
        0,
        0,
        0,
        2161,
        2162,
        5,
        100,
        0,
        0,
        2162,
        2180,
        1,
        0,
        0,
        0,
        2163,
        2164,
        5,
        99,
        0,
        0,
        2164,
        2165,
        3,
        264,
        132,
        0,
        2165,
        2166,
        5,
        81,
        0,
        0,
        2166,
        2168,
        3,
        268,
        134,
        0,
        2167,
        2169,
        5,
        81,
        0,
        0,
        2168,
        2167,
        1,
        0,
        0,
        0,
        2168,
        2169,
        1,
        0,
        0,
        0,
        2169,
        2170,
        1,
        0,
        0,
        0,
        2170,
        2171,
        5,
        100,
        0,
        0,
        2171,
        2180,
        1,
        0,
        0,
        0,
        2172,
        2173,
        5,
        99,
        0,
        0,
        2173,
        2175,
        3,
        264,
        132,
        0,
        2174,
        2176,
        5,
        81,
        0,
        0,
        2175,
        2174,
        1,
        0,
        0,
        0,
        2175,
        2176,
        1,
        0,
        0,
        0,
        2176,
        2177,
        1,
        0,
        0,
        0,
        2177,
        2178,
        5,
        100,
        0,
        0,
        2178,
        2180,
        1,
        0,
        0,
        0,
        2179,
        2154,
        1,
        0,
        0,
        0,
        2179,
        2156,
        1,
        0,
        0,
        0,
        2179,
        2163,
        1,
        0,
        0,
        0,
        2179,
        2172,
        1,
        0,
        0,
        0,
        2180,
        263,
        1,
        0,
        0,
        0,
        2181,
        2186,
        3,
        266,
        133,
        0,
        2182,
        2183,
        5,
        81,
        0,
        0,
        2183,
        2185,
        3,
        266,
        133,
        0,
        2184,
        2182,
        1,
        0,
        0,
        0,
        2185,
        2188,
        1,
        0,
        0,
        0,
        2186,
        2184,
        1,
        0,
        0,
        0,
        2186,
        2187,
        1,
        0,
        0,
        0,
        2187,
        265,
        1,
        0,
        0,
        0,
        2188,
        2186,
        1,
        0,
        0,
        0,
        2189,
        2192,
        3,
        226,
        113,
        0,
        2190,
        2192,
        3,
        246,
        123,
        0,
        2191,
        2189,
        1,
        0,
        0,
        0,
        2191,
        2190,
        1,
        0,
        0,
        0,
        2192,
        2193,
        1,
        0,
        0,
        0,
        2193,
        2194,
        5,
        82,
        0,
        0,
        2194,
        2195,
        3,
        216,
        108,
        0,
        2195,
        267,
        1,
        0,
        0,
        0,
        2196,
        2197,
        5,
        84,
        0,
        0,
        2197,
        2198,
        3,
        240,
        120,
        0,
        2198,
        269,
        1,
        0,
        0,
        0,
        2199,
        2200,
        3,
        248,
        124,
        0,
        2200,
        2201,
        5,
        79,
        0,
        0,
        2201,
        2202,
        5,
        80,
        0,
        0,
        2202,
        2230,
        1,
        0,
        0,
        0,
        2203,
        2204,
        3,
        248,
        124,
        0,
        2204,
        2205,
        5,
        79,
        0,
        0,
        2205,
        2207,
        3,
        272,
        136,
        0,
        2206,
        2208,
        5,
        81,
        0,
        0,
        2207,
        2206,
        1,
        0,
        0,
        0,
        2207,
        2208,
        1,
        0,
        0,
        0,
        2208,
        2209,
        1,
        0,
        0,
        0,
        2209,
        2210,
        5,
        80,
        0,
        0,
        2210,
        2230,
        1,
        0,
        0,
        0,
        2211,
        2212,
        3,
        248,
        124,
        0,
        2212,
        2213,
        5,
        79,
        0,
        0,
        2213,
        2215,
        3,
        274,
        137,
        0,
        2214,
        2216,
        5,
        81,
        0,
        0,
        2215,
        2214,
        1,
        0,
        0,
        0,
        2215,
        2216,
        1,
        0,
        0,
        0,
        2216,
        2217,
        1,
        0,
        0,
        0,
        2217,
        2218,
        5,
        80,
        0,
        0,
        2218,
        2230,
        1,
        0,
        0,
        0,
        2219,
        2220,
        3,
        248,
        124,
        0,
        2220,
        2221,
        5,
        79,
        0,
        0,
        2221,
        2222,
        3,
        272,
        136,
        0,
        2222,
        2223,
        5,
        81,
        0,
        0,
        2223,
        2225,
        3,
        274,
        137,
        0,
        2224,
        2226,
        5,
        81,
        0,
        0,
        2225,
        2224,
        1,
        0,
        0,
        0,
        2225,
        2226,
        1,
        0,
        0,
        0,
        2226,
        2227,
        1,
        0,
        0,
        0,
        2227,
        2228,
        5,
        80,
        0,
        0,
        2228,
        2230,
        1,
        0,
        0,
        0,
        2229,
        2199,
        1,
        0,
        0,
        0,
        2229,
        2203,
        1,
        0,
        0,
        0,
        2229,
        2211,
        1,
        0,
        0,
        0,
        2229,
        2219,
        1,
        0,
        0,
        0,
        2230,
        271,
        1,
        0,
        0,
        0,
        2231,
        2236,
        3,
        216,
        108,
        0,
        2232,
        2233,
        5,
        81,
        0,
        0,
        2233,
        2235,
        3,
        216,
        108,
        0,
        2234,
        2232,
        1,
        0,
        0,
        0,
        2235,
        2238,
        1,
        0,
        0,
        0,
        2236,
        2234,
        1,
        0,
        0,
        0,
        2236,
        2237,
        1,
        0,
        0,
        0,
        2237,
        273,
        1,
        0,
        0,
        0,
        2238,
        2236,
        1,
        0,
        0,
        0,
        2239,
        2244,
        3,
        276,
        138,
        0,
        2240,
        2241,
        5,
        81,
        0,
        0,
        2241,
        2243,
        3,
        276,
        138,
        0,
        2242,
        2240,
        1,
        0,
        0,
        0,
        2243,
        2246,
        1,
        0,
        0,
        0,
        2244,
        2242,
        1,
        0,
        0,
        0,
        2244,
        2245,
        1,
        0,
        0,
        0,
        2245,
        275,
        1,
        0,
        0,
        0,
        2246,
        2244,
        1,
        0,
        0,
        0,
        2247,
        2248,
        3,
        488,
        244,
        0,
        2248,
        2249,
        5,
        85,
        0,
        0,
        2249,
        2250,
        3,
        216,
        108,
        0,
        2250,
        277,
        1,
        0,
        0,
        0,
        2251,
        2252,
        5,
        46,
        0,
        0,
        2252,
        2254,
        3,
        488,
        244,
        0,
        2253,
        2255,
        3,
        280,
        140,
        0,
        2254,
        2253,
        1,
        0,
        0,
        0,
        2254,
        2255,
        1,
        0,
        0,
        0,
        2255,
        2256,
        1,
        0,
        0,
        0,
        2256,
        2257,
        5,
        85,
        0,
        0,
        2257,
        2258,
        3,
        290,
        145,
        0,
        2258,
        279,
        1,
        0,
        0,
        0,
        2259,
        2260,
        5,
        86,
        0,
        0,
        2260,
        2261,
        3,
        282,
        141,
        0,
        2261,
        2262,
        5,
        87,
        0,
        0,
        2262,
        281,
        1,
        0,
        0,
        0,
        2263,
        2268,
        3,
        284,
        142,
        0,
        2264,
        2265,
        5,
        81,
        0,
        0,
        2265,
        2267,
        3,
        284,
        142,
        0,
        2266,
        2264,
        1,
        0,
        0,
        0,
        2267,
        2270,
        1,
        0,
        0,
        0,
        2268,
        2266,
        1,
        0,
        0,
        0,
        2268,
        2269,
        1,
        0,
        0,
        0,
        2269,
        2272,
        1,
        0,
        0,
        0,
        2270,
        2268,
        1,
        0,
        0,
        0,
        2271,
        2273,
        5,
        81,
        0,
        0,
        2272,
        2271,
        1,
        0,
        0,
        0,
        2272,
        2273,
        1,
        0,
        0,
        0,
        2273,
        283,
        1,
        0,
        0,
        0,
        2274,
        2276,
        3,
        488,
        244,
        0,
        2275,
        2277,
        3,
        286,
        143,
        0,
        2276,
        2275,
        1,
        0,
        0,
        0,
        2276,
        2277,
        1,
        0,
        0,
        0,
        2277,
        2283,
        1,
        0,
        0,
        0,
        2278,
        2279,
        5,
        78,
        0,
        0,
        2279,
        2283,
        3,
        488,
        244,
        0,
        2280,
        2281,
        5,
        84,
        0,
        0,
        2281,
        2283,
        3,
        488,
        244,
        0,
        2282,
        2274,
        1,
        0,
        0,
        0,
        2282,
        2278,
        1,
        0,
        0,
        0,
        2282,
        2280,
        1,
        0,
        0,
        0,
        2283,
        285,
        1,
        0,
        0,
        0,
        2284,
        2285,
        5,
        82,
        0,
        0,
        2285,
        2286,
        3,
        290,
        145,
        0,
        2286,
        287,
        1,
        0,
        0,
        0,
        2287,
        2292,
        3,
        290,
        145,
        0,
        2288,
        2289,
        5,
        81,
        0,
        0,
        2289,
        2291,
        3,
        290,
        145,
        0,
        2290,
        2288,
        1,
        0,
        0,
        0,
        2291,
        2294,
        1,
        0,
        0,
        0,
        2292,
        2290,
        1,
        0,
        0,
        0,
        2292,
        2293,
        1,
        0,
        0,
        0,
        2293,
        2296,
        1,
        0,
        0,
        0,
        2294,
        2292,
        1,
        0,
        0,
        0,
        2295,
        2297,
        5,
        81,
        0,
        0,
        2296,
        2295,
        1,
        0,
        0,
        0,
        2296,
        2297,
        1,
        0,
        0,
        0,
        2297,
        289,
        1,
        0,
        0,
        0,
        2298,
        2299,
        3,
        306,
        153,
        0,
        2299,
        2300,
        5,
        31,
        0,
        0,
        2300,
        2301,
        3,
        306,
        153,
        0,
        2301,
        2302,
        5,
        24,
        0,
        0,
        2302,
        2303,
        3,
        290,
        145,
        0,
        2303,
        2307,
        1,
        0,
        0,
        0,
        2304,
        2307,
        3,
        306,
        153,
        0,
        2305,
        2307,
        3,
        364,
        182,
        0,
        2306,
        2298,
        1,
        0,
        0,
        0,
        2306,
        2304,
        1,
        0,
        0,
        0,
        2306,
        2305,
        1,
        0,
        0,
        0,
        2307,
        291,
        1,
        0,
        0,
        0,
        2308,
        2309,
        5,
        50,
        0,
        0,
        2309,
        2310,
        5,
        29,
        0,
        0,
        2310,
        2316,
        3,
        290,
        145,
        0,
        2311,
        2313,
        5,
        50,
        0,
        0,
        2312,
        2314,
        3,
        294,
        147,
        0,
        2313,
        2312,
        1,
        0,
        0,
        0,
        2313,
        2314,
        1,
        0,
        0,
        0,
        2314,
        2316,
        1,
        0,
        0,
        0,
        2315,
        2308,
        1,
        0,
        0,
        0,
        2315,
        2311,
        1,
        0,
        0,
        0,
        2316,
        293,
        1,
        0,
        0,
        0,
        2317,
        2322,
        3,
        296,
        148,
        0,
        2318,
        2319,
        5,
        81,
        0,
        0,
        2319,
        2321,
        3,
        296,
        148,
        0,
        2320,
        2318,
        1,
        0,
        0,
        0,
        2321,
        2324,
        1,
        0,
        0,
        0,
        2322,
        2320,
        1,
        0,
        0,
        0,
        2322,
        2323,
        1,
        0,
        0,
        0,
        2323,
        2326,
        1,
        0,
        0,
        0,
        2324,
        2322,
        1,
        0,
        0,
        0,
        2325,
        2327,
        5,
        81,
        0,
        0,
        2326,
        2325,
        1,
        0,
        0,
        0,
        2326,
        2327,
        1,
        0,
        0,
        0,
        2327,
        295,
        1,
        0,
        0,
        0,
        2328,
        2333,
        3,
        54,
        27,
        0,
        2329,
        2330,
        5,
        78,
        0,
        0,
        2330,
        2333,
        3,
        336,
        168,
        0,
        2331,
        2333,
        3,
        290,
        145,
        0,
        2332,
        2328,
        1,
        0,
        0,
        0,
        2332,
        2329,
        1,
        0,
        0,
        0,
        2332,
        2331,
        1,
        0,
        0,
        0,
        2333,
        297,
        1,
        0,
        0,
        0,
        2334,
        2339,
        3,
        300,
        150,
        0,
        2335,
        2336,
        5,
        81,
        0,
        0,
        2336,
        2338,
        3,
        300,
        150,
        0,
        2337,
        2335,
        1,
        0,
        0,
        0,
        2338,
        2341,
        1,
        0,
        0,
        0,
        2339,
        2337,
        1,
        0,
        0,
        0,
        2339,
        2340,
        1,
        0,
        0,
        0,
        2340,
        2343,
        1,
        0,
        0,
        0,
        2341,
        2339,
        1,
        0,
        0,
        0,
        2342,
        2344,
        5,
        81,
        0,
        0,
        2343,
        2342,
        1,
        0,
        0,
        0,
        2343,
        2344,
        1,
        0,
        0,
        0,
        2344,
        299,
        1,
        0,
        0,
        0,
        2345,
        2346,
        5,
        78,
        0,
        0,
        2346,
        2349,
        3,
        336,
        168,
        0,
        2347,
        2349,
        3,
        304,
        152,
        0,
        2348,
        2345,
        1,
        0,
        0,
        0,
        2348,
        2347,
        1,
        0,
        0,
        0,
        2349,
        301,
        1,
        0,
        0,
        0,
        2350,
        2351,
        3,
        488,
        244,
        0,
        2351,
        2352,
        5,
        123,
        0,
        0,
        2352,
        2353,
        3,
        290,
        145,
        0,
        2353,
        303,
        1,
        0,
        0,
        0,
        2354,
        2357,
        3,
        302,
        151,
        0,
        2355,
        2357,
        3,
        290,
        145,
        0,
        2356,
        2354,
        1,
        0,
        0,
        0,
        2356,
        2355,
        1,
        0,
        0,
        0,
        2357,
        305,
        1,
        0,
        0,
        0,
        2358,
        2363,
        3,
        308,
        154,
        0,
        2359,
        2360,
        5,
        40,
        0,
        0,
        2360,
        2362,
        3,
        308,
        154,
        0,
        2361,
        2359,
        1,
        0,
        0,
        0,
        2362,
        2365,
        1,
        0,
        0,
        0,
        2363,
        2361,
        1,
        0,
        0,
        0,
        2363,
        2364,
        1,
        0,
        0,
        0,
        2364,
        307,
        1,
        0,
        0,
        0,
        2365,
        2363,
        1,
        0,
        0,
        0,
        2366,
        2371,
        3,
        310,
        155,
        0,
        2367,
        2368,
        5,
        12,
        0,
        0,
        2368,
        2370,
        3,
        310,
        155,
        0,
        2369,
        2367,
        1,
        0,
        0,
        0,
        2370,
        2373,
        1,
        0,
        0,
        0,
        2371,
        2369,
        1,
        0,
        0,
        0,
        2371,
        2372,
        1,
        0,
        0,
        0,
        2372,
        309,
        1,
        0,
        0,
        0,
        2373,
        2371,
        1,
        0,
        0,
        0,
        2374,
        2375,
        5,
        39,
        0,
        0,
        2375,
        2378,
        3,
        310,
        155,
        0,
        2376,
        2378,
        3,
        312,
        156,
        0,
        2377,
        2374,
        1,
        0,
        0,
        0,
        2377,
        2376,
        1,
        0,
        0,
        0,
        2378,
        311,
        1,
        0,
        0,
        0,
        2379,
        2383,
        3,
        336,
        168,
        0,
        2380,
        2382,
        3,
        314,
        157,
        0,
        2381,
        2380,
        1,
        0,
        0,
        0,
        2382,
        2385,
        1,
        0,
        0,
        0,
        2383,
        2381,
        1,
        0,
        0,
        0,
        2383,
        2384,
        1,
        0,
        0,
        0,
        2384,
        313,
        1,
        0,
        0,
        0,
        2385,
        2383,
        1,
        0,
        0,
        0,
        2386,
        2397,
        3,
        316,
        158,
        0,
        2387,
        2397,
        3,
        318,
        159,
        0,
        2388,
        2397,
        3,
        320,
        160,
        0,
        2389,
        2397,
        3,
        322,
        161,
        0,
        2390,
        2397,
        3,
        324,
        162,
        0,
        2391,
        2397,
        3,
        326,
        163,
        0,
        2392,
        2397,
        3,
        328,
        164,
        0,
        2393,
        2397,
        3,
        330,
        165,
        0,
        2394,
        2397,
        3,
        332,
        166,
        0,
        2395,
        2397,
        3,
        334,
        167,
        0,
        2396,
        2386,
        1,
        0,
        0,
        0,
        2396,
        2387,
        1,
        0,
        0,
        0,
        2396,
        2388,
        1,
        0,
        0,
        0,
        2396,
        2389,
        1,
        0,
        0,
        0,
        2396,
        2390,
        1,
        0,
        0,
        0,
        2396,
        2391,
        1,
        0,
        0,
        0,
        2396,
        2392,
        1,
        0,
        0,
        0,
        2396,
        2393,
        1,
        0,
        0,
        0,
        2396,
        2394,
        1,
        0,
        0,
        0,
        2396,
        2395,
        1,
        0,
        0,
        0,
        2397,
        315,
        1,
        0,
        0,
        0,
        2398,
        2399,
        5,
        103,
        0,
        0,
        2399,
        2400,
        3,
        336,
        168,
        0,
        2400,
        317,
        1,
        0,
        0,
        0,
        2401,
        2402,
        5,
        107,
        0,
        0,
        2402,
        2406,
        3,
        336,
        168,
        0,
        2403,
        2404,
        5,
        106,
        0,
        0,
        2404,
        2406,
        3,
        336,
        168,
        0,
        2405,
        2401,
        1,
        0,
        0,
        0,
        2405,
        2403,
        1,
        0,
        0,
        0,
        2406,
        319,
        1,
        0,
        0,
        0,
        2407,
        2408,
        5,
        105,
        0,
        0,
        2408,
        2409,
        3,
        336,
        168,
        0,
        2409,
        321,
        1,
        0,
        0,
        0,
        2410,
        2411,
        5,
        101,
        0,
        0,
        2411,
        2412,
        3,
        336,
        168,
        0,
        2412,
        323,
        1,
        0,
        0,
        0,
        2413,
        2414,
        5,
        104,
        0,
        0,
        2414,
        2415,
        3,
        336,
        168,
        0,
        2415,
        325,
        1,
        0,
        0,
        0,
        2416,
        2417,
        5,
        102,
        0,
        0,
        2417,
        2418,
        3,
        336,
        168,
        0,
        2418,
        327,
        1,
        0,
        0,
        0,
        2419,
        2420,
        5,
        39,
        0,
        0,
        2420,
        2421,
        5,
        33,
        0,
        0,
        2421,
        2422,
        3,
        336,
        168,
        0,
        2422,
        329,
        1,
        0,
        0,
        0,
        2423,
        2424,
        5,
        33,
        0,
        0,
        2424,
        2425,
        3,
        336,
        168,
        0,
        2425,
        331,
        1,
        0,
        0,
        0,
        2426,
        2427,
        5,
        34,
        0,
        0,
        2427,
        2428,
        5,
        39,
        0,
        0,
        2428,
        2429,
        3,
        336,
        168,
        0,
        2429,
        333,
        1,
        0,
        0,
        0,
        2430,
        2431,
        5,
        34,
        0,
        0,
        2431,
        2432,
        3,
        336,
        168,
        0,
        2432,
        335,
        1,
        0,
        0,
        0,
        2433,
        2434,
        6,
        168,
        -1,
        0,
        2434,
        2435,
        3,
        338,
        169,
        0,
        2435,
        2441,
        1,
        0,
        0,
        0,
        2436,
        2437,
        10,
        2,
        0,
        0,
        2437,
        2438,
        5,
        88,
        0,
        0,
        2438,
        2440,
        3,
        338,
        169,
        0,
        2439,
        2436,
        1,
        0,
        0,
        0,
        2440,
        2443,
        1,
        0,
        0,
        0,
        2441,
        2439,
        1,
        0,
        0,
        0,
        2441,
        2442,
        1,
        0,
        0,
        0,
        2442,
        337,
        1,
        0,
        0,
        0,
        2443,
        2441,
        1,
        0,
        0,
        0,
        2444,
        2445,
        6,
        169,
        -1,
        0,
        2445,
        2446,
        3,
        340,
        170,
        0,
        2446,
        2452,
        1,
        0,
        0,
        0,
        2447,
        2448,
        10,
        2,
        0,
        0,
        2448,
        2449,
        5,
        89,
        0,
        0,
        2449,
        2451,
        3,
        340,
        170,
        0,
        2450,
        2447,
        1,
        0,
        0,
        0,
        2451,
        2454,
        1,
        0,
        0,
        0,
        2452,
        2450,
        1,
        0,
        0,
        0,
        2452,
        2453,
        1,
        0,
        0,
        0,
        2453,
        339,
        1,
        0,
        0,
        0,
        2454,
        2452,
        1,
        0,
        0,
        0,
        2455,
        2456,
        6,
        170,
        -1,
        0,
        2456,
        2457,
        3,
        342,
        171,
        0,
        2457,
        2463,
        1,
        0,
        0,
        0,
        2458,
        2459,
        10,
        2,
        0,
        0,
        2459,
        2460,
        5,
        90,
        0,
        0,
        2460,
        2462,
        3,
        342,
        171,
        0,
        2461,
        2458,
        1,
        0,
        0,
        0,
        2462,
        2465,
        1,
        0,
        0,
        0,
        2463,
        2461,
        1,
        0,
        0,
        0,
        2463,
        2464,
        1,
        0,
        0,
        0,
        2464,
        341,
        1,
        0,
        0,
        0,
        2465,
        2463,
        1,
        0,
        0,
        0,
        2466,
        2467,
        6,
        171,
        -1,
        0,
        2467,
        2468,
        3,
        344,
        172,
        0,
        2468,
        2477,
        1,
        0,
        0,
        0,
        2469,
        2470,
        10,
        3,
        0,
        0,
        2470,
        2471,
        5,
        91,
        0,
        0,
        2471,
        2476,
        3,
        344,
        172,
        0,
        2472,
        2473,
        10,
        2,
        0,
        0,
        2473,
        2474,
        5,
        92,
        0,
        0,
        2474,
        2476,
        3,
        344,
        172,
        0,
        2475,
        2469,
        1,
        0,
        0,
        0,
        2475,
        2472,
        1,
        0,
        0,
        0,
        2476,
        2479,
        1,
        0,
        0,
        0,
        2477,
        2475,
        1,
        0,
        0,
        0,
        2477,
        2478,
        1,
        0,
        0,
        0,
        2478,
        343,
        1,
        0,
        0,
        0,
        2479,
        2477,
        1,
        0,
        0,
        0,
        2480,
        2481,
        6,
        172,
        -1,
        0,
        2481,
        2482,
        3,
        346,
        173,
        0,
        2482,
        2491,
        1,
        0,
        0,
        0,
        2483,
        2484,
        10,
        3,
        0,
        0,
        2484,
        2485,
        5,
        93,
        0,
        0,
        2485,
        2490,
        3,
        346,
        173,
        0,
        2486,
        2487,
        10,
        2,
        0,
        0,
        2487,
        2488,
        5,
        94,
        0,
        0,
        2488,
        2490,
        3,
        346,
        173,
        0,
        2489,
        2483,
        1,
        0,
        0,
        0,
        2489,
        2486,
        1,
        0,
        0,
        0,
        2490,
        2493,
        1,
        0,
        0,
        0,
        2491,
        2489,
        1,
        0,
        0,
        0,
        2491,
        2492,
        1,
        0,
        0,
        0,
        2492,
        345,
        1,
        0,
        0,
        0,
        2493,
        2491,
        1,
        0,
        0,
        0,
        2494,
        2495,
        6,
        173,
        -1,
        0,
        2495,
        2496,
        3,
        348,
        174,
        0,
        2496,
        2514,
        1,
        0,
        0,
        0,
        2497,
        2498,
        10,
        6,
        0,
        0,
        2498,
        2499,
        5,
        78,
        0,
        0,
        2499,
        2513,
        3,
        348,
        174,
        0,
        2500,
        2501,
        10,
        5,
        0,
        0,
        2501,
        2502,
        5,
        95,
        0,
        0,
        2502,
        2513,
        3,
        348,
        174,
        0,
        2503,
        2504,
        10,
        4,
        0,
        0,
        2504,
        2505,
        5,
        97,
        0,
        0,
        2505,
        2513,
        3,
        348,
        174,
        0,
        2506,
        2507,
        10,
        3,
        0,
        0,
        2507,
        2508,
        5,
        96,
        0,
        0,
        2508,
        2513,
        3,
        348,
        174,
        0,
        2509,
        2510,
        10,
        2,
        0,
        0,
        2510,
        2511,
        5,
        108,
        0,
        0,
        2511,
        2513,
        3,
        348,
        174,
        0,
        2512,
        2497,
        1,
        0,
        0,
        0,
        2512,
        2500,
        1,
        0,
        0,
        0,
        2512,
        2503,
        1,
        0,
        0,
        0,
        2512,
        2506,
        1,
        0,
        0,
        0,
        2512,
        2509,
        1,
        0,
        0,
        0,
        2513,
        2516,
        1,
        0,
        0,
        0,
        2514,
        2512,
        1,
        0,
        0,
        0,
        2514,
        2515,
        1,
        0,
        0,
        0,
        2515,
        347,
        1,
        0,
        0,
        0,
        2516,
        2514,
        1,
        0,
        0,
        0,
        2517,
        2518,
        5,
        93,
        0,
        0,
        2518,
        2525,
        3,
        348,
        174,
        0,
        2519,
        2520,
        5,
        94,
        0,
        0,
        2520,
        2525,
        3,
        348,
        174,
        0,
        2521,
        2522,
        5,
        98,
        0,
        0,
        2522,
        2525,
        3,
        348,
        174,
        0,
        2523,
        2525,
        3,
        350,
        175,
        0,
        2524,
        2517,
        1,
        0,
        0,
        0,
        2524,
        2519,
        1,
        0,
        0,
        0,
        2524,
        2521,
        1,
        0,
        0,
        0,
        2524,
        2523,
        1,
        0,
        0,
        0,
        2525,
        349,
        1,
        0,
        0,
        0,
        2526,
        2527,
        3,
        352,
        176,
        0,
        2527,
        2528,
        5,
        84,
        0,
        0,
        2528,
        2529,
        3,
        348,
        174,
        0,
        2529,
        2532,
        1,
        0,
        0,
        0,
        2530,
        2532,
        3,
        352,
        176,
        0,
        2531,
        2526,
        1,
        0,
        0,
        0,
        2531,
        2530,
        1,
        0,
        0,
        0,
        2532,
        351,
        1,
        0,
        0,
        0,
        2533,
        2534,
        5,
        16,
        0,
        0,
        2534,
        2537,
        3,
        354,
        177,
        0,
        2535,
        2537,
        3,
        354,
        177,
        0,
        2536,
        2533,
        1,
        0,
        0,
        0,
        2536,
        2535,
        1,
        0,
        0,
        0,
        2537,
        353,
        1,
        0,
        0,
        0,
        2538,
        2539,
        6,
        177,
        -1,
        0,
        2539,
        2540,
        3,
        360,
        180,
        0,
        2540,
        2559,
        1,
        0,
        0,
        0,
        2541,
        2542,
        10,
        5,
        0,
        0,
        2542,
        2543,
        5,
        77,
        0,
        0,
        2543,
        2558,
        3,
        488,
        244,
        0,
        2544,
        2545,
        10,
        4,
        0,
        0,
        2545,
        2558,
        3,
        442,
        221,
        0,
        2546,
        2547,
        10,
        3,
        0,
        0,
        2547,
        2549,
        5,
        79,
        0,
        0,
        2548,
        2550,
        3,
        446,
        223,
        0,
        2549,
        2548,
        1,
        0,
        0,
        0,
        2549,
        2550,
        1,
        0,
        0,
        0,
        2550,
        2551,
        1,
        0,
        0,
        0,
        2551,
        2558,
        5,
        80,
        0,
        0,
        2552,
        2553,
        10,
        2,
        0,
        0,
        2553,
        2554,
        5,
        86,
        0,
        0,
        2554,
        2555,
        3,
        356,
        178,
        0,
        2555,
        2556,
        5,
        87,
        0,
        0,
        2556,
        2558,
        1,
        0,
        0,
        0,
        2557,
        2541,
        1,
        0,
        0,
        0,
        2557,
        2544,
        1,
        0,
        0,
        0,
        2557,
        2546,
        1,
        0,
        0,
        0,
        2557,
        2552,
        1,
        0,
        0,
        0,
        2558,
        2561,
        1,
        0,
        0,
        0,
        2559,
        2557,
        1,
        0,
        0,
        0,
        2559,
        2560,
        1,
        0,
        0,
        0,
        2560,
        355,
        1,
        0,
        0,
        0,
        2561,
        2559,
        1,
        0,
        0,
        0,
        2562,
        2565,
        3,
        358,
        179,
        0,
        2563,
        2565,
        3,
        454,
        227,
        0,
        2564,
        2562,
        1,
        0,
        0,
        0,
        2564,
        2563,
        1,
        0,
        0,
        0,
        2565,
        2573,
        1,
        0,
        0,
        0,
        2566,
        2569,
        5,
        81,
        0,
        0,
        2567,
        2570,
        3,
        358,
        179,
        0,
        2568,
        2570,
        3,
        454,
        227,
        0,
        2569,
        2567,
        1,
        0,
        0,
        0,
        2569,
        2568,
        1,
        0,
        0,
        0,
        2570,
        2572,
        1,
        0,
        0,
        0,
        2571,
        2566,
        1,
        0,
        0,
        0,
        2572,
        2575,
        1,
        0,
        0,
        0,
        2573,
        2571,
        1,
        0,
        0,
        0,
        2573,
        2574,
        1,
        0,
        0,
        0,
        2574,
        2577,
        1,
        0,
        0,
        0,
        2575,
        2573,
        1,
        0,
        0,
        0,
        2576,
        2578,
        5,
        81,
        0,
        0,
        2577,
        2576,
        1,
        0,
        0,
        0,
        2577,
        2578,
        1,
        0,
        0,
        0,
        2578,
        357,
        1,
        0,
        0,
        0,
        2579,
        2581,
        3,
        290,
        145,
        0,
        2580,
        2579,
        1,
        0,
        0,
        0,
        2580,
        2581,
        1,
        0,
        0,
        0,
        2581,
        2582,
        1,
        0,
        0,
        0,
        2582,
        2584,
        5,
        82,
        0,
        0,
        2583,
        2585,
        3,
        290,
        145,
        0,
        2584,
        2583,
        1,
        0,
        0,
        0,
        2584,
        2585,
        1,
        0,
        0,
        0,
        2585,
        2590,
        1,
        0,
        0,
        0,
        2586,
        2588,
        5,
        82,
        0,
        0,
        2587,
        2589,
        3,
        290,
        145,
        0,
        2588,
        2587,
        1,
        0,
        0,
        0,
        2588,
        2589,
        1,
        0,
        0,
        0,
        2589,
        2591,
        1,
        0,
        0,
        0,
        2590,
        2586,
        1,
        0,
        0,
        0,
        2590,
        2591,
        1,
        0,
        0,
        0,
        2591,
        2594,
        1,
        0,
        0,
        0,
        2592,
        2594,
        3,
        304,
        152,
        0,
        2593,
        2580,
        1,
        0,
        0,
        0,
        2593,
        2592,
        1,
        0,
        0,
        0,
        2594,
        359,
        1,
        0,
        0,
        0,
        2595,
        2619,
        3,
        50,
        25,
        0,
        2596,
        2619,
        3,
        488,
        244,
        0,
        2597,
        2619,
        5,
        44,
        0,
        0,
        2598,
        2619,
        5,
        26,
        0,
        0,
        2599,
        2619,
        5,
        37,
        0,
        0,
        2600,
        2619,
        3,
        418,
        209,
        0,
        2601,
        2619,
        5,
        8,
        0,
        0,
        2602,
        2606,
        3,
        422,
        211,
        0,
        2603,
        2606,
        3,
        362,
        181,
        0,
        2604,
        2606,
        3,
        442,
        221,
        0,
        2605,
        2602,
        1,
        0,
        0,
        0,
        2605,
        2603,
        1,
        0,
        0,
        0,
        2605,
        2604,
        1,
        0,
        0,
        0,
        2606,
        2619,
        1,
        0,
        0,
        0,
        2607,
        2610,
        3,
        420,
        210,
        0,
        2608,
        2610,
        3,
        438,
        219,
        0,
        2609,
        2607,
        1,
        0,
        0,
        0,
        2609,
        2608,
        1,
        0,
        0,
        0,
        2610,
        2619,
        1,
        0,
        0,
        0,
        2611,
        2616,
        3,
        426,
        213,
        0,
        2612,
        2616,
        3,
        424,
        212,
        0,
        2613,
        2616,
        3,
        444,
        222,
        0,
        2614,
        2616,
        3,
        440,
        220,
        0,
        2615,
        2611,
        1,
        0,
        0,
        0,
        2615,
        2612,
        1,
        0,
        0,
        0,
        2615,
        2613,
        1,
        0,
        0,
        0,
        2615,
        2614,
        1,
        0,
        0,
        0,
        2616,
        2619,
        1,
        0,
        0,
        0,
        2617,
        2619,
        5,
        75,
        0,
        0,
        2618,
        2595,
        1,
        0,
        0,
        0,
        2618,
        2596,
        1,
        0,
        0,
        0,
        2618,
        2597,
        1,
        0,
        0,
        0,
        2618,
        2598,
        1,
        0,
        0,
        0,
        2618,
        2599,
        1,
        0,
        0,
        0,
        2618,
        2600,
        1,
        0,
        0,
        0,
        2618,
        2601,
        1,
        0,
        0,
        0,
        2618,
        2605,
        1,
        0,
        0,
        0,
        2618,
        2609,
        1,
        0,
        0,
        0,
        2618,
        2615,
        1,
        0,
        0,
        0,
        2618,
        2617,
        1,
        0,
        0,
        0,
        2619,
        361,
        1,
        0,
        0,
        0,
        2620,
        2623,
        5,
        79,
        0,
        0,
        2621,
        2624,
        3,
        292,
        146,
        0,
        2622,
        2624,
        3,
        304,
        152,
        0,
        2623,
        2621,
        1,
        0,
        0,
        0,
        2623,
        2622,
        1,
        0,
        0,
        0,
        2624,
        2625,
        1,
        0,
        0,
        0,
        2625,
        2626,
        5,
        80,
        0,
        0,
        2626,
        363,
        1,
        0,
        0,
        0,
        2627,
        2629,
        5,
        35,
        0,
        0,
        2628,
        2630,
        3,
        366,
        183,
        0,
        2629,
        2628,
        1,
        0,
        0,
        0,
        2629,
        2630,
        1,
        0,
        0,
        0,
        2630,
        2631,
        1,
        0,
        0,
        0,
        2631,
        2632,
        5,
        82,
        0,
        0,
        2632,
        2633,
        3,
        290,
        145,
        0,
        2633,
        365,
        1,
        0,
        0,
        0,
        2634,
        2635,
        3,
        368,
        184,
        0,
        2635,
        367,
        1,
        0,
        0,
        0,
        2636,
        2640,
        3,
        370,
        185,
        0,
        2637,
        2639,
        3,
        378,
        189,
        0,
        2638,
        2637,
        1,
        0,
        0,
        0,
        2639,
        2642,
        1,
        0,
        0,
        0,
        2640,
        2638,
        1,
        0,
        0,
        0,
        2640,
        2641,
        1,
        0,
        0,
        0,
        2641,
        2646,
        1,
        0,
        0,
        0,
        2642,
        2640,
        1,
        0,
        0,
        0,
        2643,
        2645,
        3,
        380,
        190,
        0,
        2644,
        2643,
        1,
        0,
        0,
        0,
        2645,
        2648,
        1,
        0,
        0,
        0,
        2646,
        2644,
        1,
        0,
        0,
        0,
        2646,
        2647,
        1,
        0,
        0,
        0,
        2647,
        2650,
        1,
        0,
        0,
        0,
        2648,
        2646,
        1,
        0,
        0,
        0,
        2649,
        2651,
        3,
        374,
        187,
        0,
        2650,
        2649,
        1,
        0,
        0,
        0,
        2650,
        2651,
        1,
        0,
        0,
        0,
        2651,
        2686,
        1,
        0,
        0,
        0,
        2652,
        2656,
        3,
        372,
        186,
        0,
        2653,
        2655,
        3,
        380,
        190,
        0,
        2654,
        2653,
        1,
        0,
        0,
        0,
        2655,
        2658,
        1,
        0,
        0,
        0,
        2656,
        2654,
        1,
        0,
        0,
        0,
        2656,
        2657,
        1,
        0,
        0,
        0,
        2657,
        2660,
        1,
        0,
        0,
        0,
        2658,
        2656,
        1,
        0,
        0,
        0,
        2659,
        2661,
        3,
        374,
        187,
        0,
        2660,
        2659,
        1,
        0,
        0,
        0,
        2660,
        2661,
        1,
        0,
        0,
        0,
        2661,
        2686,
        1,
        0,
        0,
        0,
        2662,
        2664,
        3,
        378,
        189,
        0,
        2663,
        2662,
        1,
        0,
        0,
        0,
        2664,
        2665,
        1,
        0,
        0,
        0,
        2665,
        2663,
        1,
        0,
        0,
        0,
        2665,
        2666,
        1,
        0,
        0,
        0,
        2666,
        2670,
        1,
        0,
        0,
        0,
        2667,
        2669,
        3,
        380,
        190,
        0,
        2668,
        2667,
        1,
        0,
        0,
        0,
        2669,
        2672,
        1,
        0,
        0,
        0,
        2670,
        2668,
        1,
        0,
        0,
        0,
        2670,
        2671,
        1,
        0,
        0,
        0,
        2671,
        2674,
        1,
        0,
        0,
        0,
        2672,
        2670,
        1,
        0,
        0,
        0,
        2673,
        2675,
        3,
        374,
        187,
        0,
        2674,
        2673,
        1,
        0,
        0,
        0,
        2674,
        2675,
        1,
        0,
        0,
        0,
        2675,
        2686,
        1,
        0,
        0,
        0,
        2676,
        2678,
        3,
        380,
        190,
        0,
        2677,
        2676,
        1,
        0,
        0,
        0,
        2678,
        2679,
        1,
        0,
        0,
        0,
        2679,
        2677,
        1,
        0,
        0,
        0,
        2679,
        2680,
        1,
        0,
        0,
        0,
        2680,
        2682,
        1,
        0,
        0,
        0,
        2681,
        2683,
        3,
        374,
        187,
        0,
        2682,
        2681,
        1,
        0,
        0,
        0,
        2682,
        2683,
        1,
        0,
        0,
        0,
        2683,
        2686,
        1,
        0,
        0,
        0,
        2684,
        2686,
        3,
        374,
        187,
        0,
        2685,
        2636,
        1,
        0,
        0,
        0,
        2685,
        2652,
        1,
        0,
        0,
        0,
        2685,
        2663,
        1,
        0,
        0,
        0,
        2685,
        2677,
        1,
        0,
        0,
        0,
        2685,
        2684,
        1,
        0,
        0,
        0,
        2686,
        369,
        1,
        0,
        0,
        0,
        2687,
        2689,
        3,
        378,
        189,
        0,
        2688,
        2687,
        1,
        0,
        0,
        0,
        2689,
        2690,
        1,
        0,
        0,
        0,
        2690,
        2688,
        1,
        0,
        0,
        0,
        2690,
        2691,
        1,
        0,
        0,
        0,
        2691,
        2692,
        1,
        0,
        0,
        0,
        2692,
        2694,
        5,
        95,
        0,
        0,
        2693,
        2695,
        5,
        81,
        0,
        0,
        2694,
        2693,
        1,
        0,
        0,
        0,
        2694,
        2695,
        1,
        0,
        0,
        0,
        2695,
        371,
        1,
        0,
        0,
        0,
        2696,
        2698,
        3,
        378,
        189,
        0,
        2697,
        2696,
        1,
        0,
        0,
        0,
        2698,
        2701,
        1,
        0,
        0,
        0,
        2699,
        2697,
        1,
        0,
        0,
        0,
        2699,
        2700,
        1,
        0,
        0,
        0,
        2700,
        2703,
        1,
        0,
        0,
        0,
        2701,
        2699,
        1,
        0,
        0,
        0,
        2702,
        2704,
        3,
        380,
        190,
        0,
        2703,
        2702,
        1,
        0,
        0,
        0,
        2704,
        2705,
        1,
        0,
        0,
        0,
        2705,
        2703,
        1,
        0,
        0,
        0,
        2705,
        2706,
        1,
        0,
        0,
        0,
        2706,
        2707,
        1,
        0,
        0,
        0,
        2707,
        2709,
        5,
        95,
        0,
        0,
        2708,
        2710,
        5,
        81,
        0,
        0,
        2709,
        2708,
        1,
        0,
        0,
        0,
        2709,
        2710,
        1,
        0,
        0,
        0,
        2710,
        373,
        1,
        0,
        0,
        0,
        2711,
        2712,
        5,
        78,
        0,
        0,
        2712,
        2716,
        3,
        378,
        189,
        0,
        2713,
        2715,
        3,
        382,
        191,
        0,
        2714,
        2713,
        1,
        0,
        0,
        0,
        2715,
        2718,
        1,
        0,
        0,
        0,
        2716,
        2714,
        1,
        0,
        0,
        0,
        2716,
        2717,
        1,
        0,
        0,
        0,
        2717,
        2720,
        1,
        0,
        0,
        0,
        2718,
        2716,
        1,
        0,
        0,
        0,
        2719,
        2721,
        3,
        376,
        188,
        0,
        2720,
        2719,
        1,
        0,
        0,
        0,
        2720,
        2721,
        1,
        0,
        0,
        0,
        2721,
        2734,
        1,
        0,
        0,
        0,
        2722,
        2723,
        5,
        78,
        0,
        0,
        2723,
        2725,
        5,
        81,
        0,
        0,
        2724,
        2726,
        3,
        382,
        191,
        0,
        2725,
        2724,
        1,
        0,
        0,
        0,
        2726,
        2727,
        1,
        0,
        0,
        0,
        2727,
        2725,
        1,
        0,
        0,
        0,
        2727,
        2728,
        1,
        0,
        0,
        0,
        2728,
        2730,
        1,
        0,
        0,
        0,
        2729,
        2731,
        3,
        376,
        188,
        0,
        2730,
        2729,
        1,
        0,
        0,
        0,
        2730,
        2731,
        1,
        0,
        0,
        0,
        2731,
        2734,
        1,
        0,
        0,
        0,
        2732,
        2734,
        3,
        376,
        188,
        0,
        2733,
        2711,
        1,
        0,
        0,
        0,
        2733,
        2722,
        1,
        0,
        0,
        0,
        2733,
        2732,
        1,
        0,
        0,
        0,
        2734,
        375,
        1,
        0,
        0,
        0,
        2735,
        2736,
        5,
        84,
        0,
        0,
        2736,
        2737,
        3,
        378,
        189,
        0,
        2737,
        377,
        1,
        0,
        0,
        0,
        2738,
        2740,
        3,
        384,
        192,
        0,
        2739,
        2741,
        5,
        81,
        0,
        0,
        2740,
        2739,
        1,
        0,
        0,
        0,
        2740,
        2741,
        1,
        0,
        0,
        0,
        2741,
        379,
        1,
        0,
        0,
        0,
        2742,
        2743,
        3,
        384,
        192,
        0,
        2743,
        2745,
        3,
        182,
        91,
        0,
        2744,
        2746,
        5,
        81,
        0,
        0,
        2745,
        2744,
        1,
        0,
        0,
        0,
        2745,
        2746,
        1,
        0,
        0,
        0,
        2746,
        381,
        1,
        0,
        0,
        0,
        2747,
        2749,
        3,
        384,
        192,
        0,
        2748,
        2750,
        3,
        182,
        91,
        0,
        2749,
        2748,
        1,
        0,
        0,
        0,
        2749,
        2750,
        1,
        0,
        0,
        0,
        2750,
        2752,
        1,
        0,
        0,
        0,
        2751,
        2753,
        5,
        81,
        0,
        0,
        2752,
        2751,
        1,
        0,
        0,
        0,
        2752,
        2753,
        1,
        0,
        0,
        0,
        2753,
        383,
        1,
        0,
        0,
        0,
        2754,
        2755,
        3,
        488,
        244,
        0,
        2755,
        385,
        1,
        0,
        0,
        0,
        2756,
        2759,
        3,
        406,
        203,
        0,
        2757,
        2759,
        3,
        394,
        197,
        0,
        2758,
        2756,
        1,
        0,
        0,
        0,
        2758,
        2757,
        1,
        0,
        0,
        0,
        2759,
        387,
        1,
        0,
        0,
        0,
        2760,
        2763,
        3,
        406,
        203,
        0,
        2761,
        2763,
        3,
        396,
        198,
        0,
        2762,
        2760,
        1,
        0,
        0,
        0,
        2762,
        2761,
        1,
        0,
        0,
        0,
        2763,
        389,
        1,
        0,
        0,
        0,
        2764,
        2767,
        3,
        406,
        203,
        0,
        2765,
        2767,
        3,
        400,
        200,
        0,
        2766,
        2764,
        1,
        0,
        0,
        0,
        2766,
        2765,
        1,
        0,
        0,
        0,
        2767,
        391,
        1,
        0,
        0,
        0,
        2768,
        2771,
        3,
        406,
        203,
        0,
        2769,
        2771,
        3,
        402,
        201,
        0,
        2770,
        2768,
        1,
        0,
        0,
        0,
        2770,
        2769,
        1,
        0,
        0,
        0,
        2771,
        393,
        1,
        0,
        0,
        0,
        2772,
        2776,
        3,
        404,
        202,
        0,
        2773,
        2776,
        5,
        64,
        0,
        0,
        2774,
        2776,
        5,
        62,
        0,
        0,
        2775,
        2772,
        1,
        0,
        0,
        0,
        2775,
        2773,
        1,
        0,
        0,
        0,
        2775,
        2774,
        1,
        0,
        0,
        0,
        2776,
        395,
        1,
        0,
        0,
        0,
        2777,
        2781,
        3,
        404,
        202,
        0,
        2778,
        2781,
        5,
        63,
        0,
        0,
        2779,
        2781,
        5,
        61,
        0,
        0,
        2780,
        2777,
        1,
        0,
        0,
        0,
        2780,
        2778,
        1,
        0,
        0,
        0,
        2780,
        2779,
        1,
        0,
        0,
        0,
        2781,
        397,
        1,
        0,
        0,
        0,
        2782,
        2786,
        3,
        404,
        202,
        0,
        2783,
        2786,
        5,
        64,
        0,
        0,
        2784,
        2786,
        5,
        63,
        0,
        0,
        2785,
        2782,
        1,
        0,
        0,
        0,
        2785,
        2783,
        1,
        0,
        0,
        0,
        2785,
        2784,
        1,
        0,
        0,
        0,
        2786,
        399,
        1,
        0,
        0,
        0,
        2787,
        2791,
        3,
        404,
        202,
        0,
        2788,
        2791,
        5,
        125,
        0,
        0,
        2789,
        2791,
        5,
        64,
        0,
        0,
        2790,
        2787,
        1,
        0,
        0,
        0,
        2790,
        2788,
        1,
        0,
        0,
        0,
        2790,
        2789,
        1,
        0,
        0,
        0,
        2791,
        401,
        1,
        0,
        0,
        0,
        2792,
        2796,
        3,
        404,
        202,
        0,
        2793,
        2796,
        5,
        125,
        0,
        0,
        2794,
        2796,
        5,
        63,
        0,
        0,
        2795,
        2792,
        1,
        0,
        0,
        0,
        2795,
        2793,
        1,
        0,
        0,
        0,
        2795,
        2794,
        1,
        0,
        0,
        0,
        2796,
        403,
        1,
        0,
        0,
        0,
        2797,
        2904,
        5,
        8,
        0,
        0,
        2798,
        2904,
        5,
        10,
        0,
        0,
        2799,
        2904,
        5,
        11,
        0,
        0,
        2800,
        2904,
        5,
        12,
        0,
        0,
        2801,
        2904,
        5,
        13,
        0,
        0,
        2802,
        2904,
        5,
        14,
        0,
        0,
        2803,
        2904,
        5,
        15,
        0,
        0,
        2804,
        2904,
        5,
        16,
        0,
        0,
        2805,
        2904,
        5,
        17,
        0,
        0,
        2806,
        2904,
        5,
        18,
        0,
        0,
        2807,
        2904,
        5,
        19,
        0,
        0,
        2808,
        2904,
        5,
        20,
        0,
        0,
        2809,
        2904,
        5,
        21,
        0,
        0,
        2810,
        2904,
        5,
        22,
        0,
        0,
        2811,
        2904,
        5,
        23,
        0,
        0,
        2812,
        2904,
        5,
        24,
        0,
        0,
        2813,
        2904,
        5,
        25,
        0,
        0,
        2814,
        2904,
        5,
        26,
        0,
        0,
        2815,
        2904,
        5,
        27,
        0,
        0,
        2816,
        2904,
        5,
        28,
        0,
        0,
        2817,
        2904,
        5,
        29,
        0,
        0,
        2818,
        2904,
        5,
        30,
        0,
        0,
        2819,
        2904,
        5,
        31,
        0,
        0,
        2820,
        2904,
        5,
        32,
        0,
        0,
        2821,
        2904,
        5,
        33,
        0,
        0,
        2822,
        2904,
        5,
        34,
        0,
        0,
        2823,
        2904,
        5,
        35,
        0,
        0,
        2824,
        2904,
        5,
        36,
        0,
        0,
        2825,
        2904,
        5,
        37,
        0,
        0,
        2826,
        2904,
        5,
        38,
        0,
        0,
        2827,
        2904,
        5,
        39,
        0,
        0,
        2828,
        2904,
        5,
        40,
        0,
        0,
        2829,
        2904,
        5,
        41,
        0,
        0,
        2830,
        2904,
        5,
        42,
        0,
        0,
        2831,
        2904,
        5,
        43,
        0,
        0,
        2832,
        2904,
        5,
        44,
        0,
        0,
        2833,
        2904,
        5,
        45,
        0,
        0,
        2834,
        2904,
        5,
        46,
        0,
        0,
        2835,
        2904,
        5,
        47,
        0,
        0,
        2836,
        2904,
        5,
        48,
        0,
        0,
        2837,
        2904,
        5,
        49,
        0,
        0,
        2838,
        2904,
        5,
        50,
        0,
        0,
        2839,
        2904,
        5,
        51,
        0,
        0,
        2840,
        2904,
        5,
        52,
        0,
        0,
        2841,
        2904,
        5,
        53,
        0,
        0,
        2842,
        2904,
        5,
        54,
        0,
        0,
        2843,
        2904,
        5,
        55,
        0,
        0,
        2844,
        2904,
        5,
        56,
        0,
        0,
        2845,
        2904,
        5,
        57,
        0,
        0,
        2846,
        2904,
        5,
        59,
        0,
        0,
        2847,
        2904,
        5,
        72,
        0,
        0,
        2848,
        2904,
        5,
        73,
        0,
        0,
        2849,
        2904,
        5,
        77,
        0,
        0,
        2850,
        2904,
        5,
        76,
        0,
        0,
        2851,
        2904,
        5,
        75,
        0,
        0,
        2852,
        2904,
        5,
        78,
        0,
        0,
        2853,
        2904,
        5,
        79,
        0,
        0,
        2854,
        2904,
        5,
        80,
        0,
        0,
        2855,
        2904,
        5,
        81,
        0,
        0,
        2856,
        2904,
        5,
        82,
        0,
        0,
        2857,
        2904,
        5,
        83,
        0,
        0,
        2858,
        2904,
        5,
        84,
        0,
        0,
        2859,
        2904,
        5,
        85,
        0,
        0,
        2860,
        2904,
        5,
        86,
        0,
        0,
        2861,
        2904,
        5,
        87,
        0,
        0,
        2862,
        2904,
        5,
        88,
        0,
        0,
        2863,
        2904,
        5,
        89,
        0,
        0,
        2864,
        2904,
        5,
        90,
        0,
        0,
        2865,
        2904,
        5,
        91,
        0,
        0,
        2866,
        2904,
        5,
        92,
        0,
        0,
        2867,
        2904,
        5,
        93,
        0,
        0,
        2868,
        2904,
        5,
        94,
        0,
        0,
        2869,
        2904,
        5,
        95,
        0,
        0,
        2870,
        2904,
        5,
        96,
        0,
        0,
        2871,
        2904,
        5,
        97,
        0,
        0,
        2872,
        2904,
        5,
        98,
        0,
        0,
        2873,
        2874,
        5,
        99,
        0,
        0,
        2874,
        2904,
        5,
        99,
        0,
        0,
        2875,
        2876,
        5,
        100,
        0,
        0,
        2876,
        2904,
        5,
        100,
        0,
        0,
        2877,
        2904,
        5,
        101,
        0,
        0,
        2878,
        2904,
        5,
        102,
        0,
        0,
        2879,
        2904,
        5,
        103,
        0,
        0,
        2880,
        2904,
        5,
        104,
        0,
        0,
        2881,
        2904,
        5,
        105,
        0,
        0,
        2882,
        2904,
        5,
        106,
        0,
        0,
        2883,
        2904,
        5,
        107,
        0,
        0,
        2884,
        2904,
        5,
        108,
        0,
        0,
        2885,
        2904,
        5,
        109,
        0,
        0,
        2886,
        2904,
        5,
        110,
        0,
        0,
        2887,
        2904,
        5,
        111,
        0,
        0,
        2888,
        2904,
        5,
        112,
        0,
        0,
        2889,
        2904,
        5,
        113,
        0,
        0,
        2890,
        2904,
        5,
        114,
        0,
        0,
        2891,
        2904,
        5,
        115,
        0,
        0,
        2892,
        2904,
        5,
        116,
        0,
        0,
        2893,
        2904,
        5,
        117,
        0,
        0,
        2894,
        2904,
        5,
        118,
        0,
        0,
        2895,
        2904,
        5,
        119,
        0,
        0,
        2896,
        2904,
        5,
        120,
        0,
        0,
        2897,
        2904,
        5,
        121,
        0,
        0,
        2898,
        2904,
        5,
        122,
        0,
        0,
        2899,
        2904,
        5,
        123,
        0,
        0,
        2900,
        2904,
        5,
        124,
        0,
        0,
        2901,
        2904,
        5,
        126,
        0,
        0,
        2902,
        2904,
        5,
        129,
        0,
        0,
        2903,
        2797,
        1,
        0,
        0,
        0,
        2903,
        2798,
        1,
        0,
        0,
        0,
        2903,
        2799,
        1,
        0,
        0,
        0,
        2903,
        2800,
        1,
        0,
        0,
        0,
        2903,
        2801,
        1,
        0,
        0,
        0,
        2903,
        2802,
        1,
        0,
        0,
        0,
        2903,
        2803,
        1,
        0,
        0,
        0,
        2903,
        2804,
        1,
        0,
        0,
        0,
        2903,
        2805,
        1,
        0,
        0,
        0,
        2903,
        2806,
        1,
        0,
        0,
        0,
        2903,
        2807,
        1,
        0,
        0,
        0,
        2903,
        2808,
        1,
        0,
        0,
        0,
        2903,
        2809,
        1,
        0,
        0,
        0,
        2903,
        2810,
        1,
        0,
        0,
        0,
        2903,
        2811,
        1,
        0,
        0,
        0,
        2903,
        2812,
        1,
        0,
        0,
        0,
        2903,
        2813,
        1,
        0,
        0,
        0,
        2903,
        2814,
        1,
        0,
        0,
        0,
        2903,
        2815,
        1,
        0,
        0,
        0,
        2903,
        2816,
        1,
        0,
        0,
        0,
        2903,
        2817,
        1,
        0,
        0,
        0,
        2903,
        2818,
        1,
        0,
        0,
        0,
        2903,
        2819,
        1,
        0,
        0,
        0,
        2903,
        2820,
        1,
        0,
        0,
        0,
        2903,
        2821,
        1,
        0,
        0,
        0,
        2903,
        2822,
        1,
        0,
        0,
        0,
        2903,
        2823,
        1,
        0,
        0,
        0,
        2903,
        2824,
        1,
        0,
        0,
        0,
        2903,
        2825,
        1,
        0,
        0,
        0,
        2903,
        2826,
        1,
        0,
        0,
        0,
        2903,
        2827,
        1,
        0,
        0,
        0,
        2903,
        2828,
        1,
        0,
        0,
        0,
        2903,
        2829,
        1,
        0,
        0,
        0,
        2903,
        2830,
        1,
        0,
        0,
        0,
        2903,
        2831,
        1,
        0,
        0,
        0,
        2903,
        2832,
        1,
        0,
        0,
        0,
        2903,
        2833,
        1,
        0,
        0,
        0,
        2903,
        2834,
        1,
        0,
        0,
        0,
        2903,
        2835,
        1,
        0,
        0,
        0,
        2903,
        2836,
        1,
        0,
        0,
        0,
        2903,
        2837,
        1,
        0,
        0,
        0,
        2903,
        2838,
        1,
        0,
        0,
        0,
        2903,
        2839,
        1,
        0,
        0,
        0,
        2903,
        2840,
        1,
        0,
        0,
        0,
        2903,
        2841,
        1,
        0,
        0,
        0,
        2903,
        2842,
        1,
        0,
        0,
        0,
        2903,
        2843,
        1,
        0,
        0,
        0,
        2903,
        2844,
        1,
        0,
        0,
        0,
        2903,
        2845,
        1,
        0,
        0,
        0,
        2903,
        2846,
        1,
        0,
        0,
        0,
        2903,
        2847,
        1,
        0,
        0,
        0,
        2903,
        2848,
        1,
        0,
        0,
        0,
        2903,
        2849,
        1,
        0,
        0,
        0,
        2903,
        2850,
        1,
        0,
        0,
        0,
        2903,
        2851,
        1,
        0,
        0,
        0,
        2903,
        2852,
        1,
        0,
        0,
        0,
        2903,
        2853,
        1,
        0,
        0,
        0,
        2903,
        2854,
        1,
        0,
        0,
        0,
        2903,
        2855,
        1,
        0,
        0,
        0,
        2903,
        2856,
        1,
        0,
        0,
        0,
        2903,
        2857,
        1,
        0,
        0,
        0,
        2903,
        2858,
        1,
        0,
        0,
        0,
        2903,
        2859,
        1,
        0,
        0,
        0,
        2903,
        2860,
        1,
        0,
        0,
        0,
        2903,
        2861,
        1,
        0,
        0,
        0,
        2903,
        2862,
        1,
        0,
        0,
        0,
        2903,
        2863,
        1,
        0,
        0,
        0,
        2903,
        2864,
        1,
        0,
        0,
        0,
        2903,
        2865,
        1,
        0,
        0,
        0,
        2903,
        2866,
        1,
        0,
        0,
        0,
        2903,
        2867,
        1,
        0,
        0,
        0,
        2903,
        2868,
        1,
        0,
        0,
        0,
        2903,
        2869,
        1,
        0,
        0,
        0,
        2903,
        2870,
        1,
        0,
        0,
        0,
        2903,
        2871,
        1,
        0,
        0,
        0,
        2903,
        2872,
        1,
        0,
        0,
        0,
        2903,
        2873,
        1,
        0,
        0,
        0,
        2903,
        2875,
        1,
        0,
        0,
        0,
        2903,
        2877,
        1,
        0,
        0,
        0,
        2903,
        2878,
        1,
        0,
        0,
        0,
        2903,
        2879,
        1,
        0,
        0,
        0,
        2903,
        2880,
        1,
        0,
        0,
        0,
        2903,
        2881,
        1,
        0,
        0,
        0,
        2903,
        2882,
        1,
        0,
        0,
        0,
        2903,
        2883,
        1,
        0,
        0,
        0,
        2903,
        2884,
        1,
        0,
        0,
        0,
        2903,
        2885,
        1,
        0,
        0,
        0,
        2903,
        2886,
        1,
        0,
        0,
        0,
        2903,
        2887,
        1,
        0,
        0,
        0,
        2903,
        2888,
        1,
        0,
        0,
        0,
        2903,
        2889,
        1,
        0,
        0,
        0,
        2903,
        2890,
        1,
        0,
        0,
        0,
        2903,
        2891,
        1,
        0,
        0,
        0,
        2903,
        2892,
        1,
        0,
        0,
        0,
        2903,
        2893,
        1,
        0,
        0,
        0,
        2903,
        2894,
        1,
        0,
        0,
        0,
        2903,
        2895,
        1,
        0,
        0,
        0,
        2903,
        2896,
        1,
        0,
        0,
        0,
        2903,
        2897,
        1,
        0,
        0,
        0,
        2903,
        2898,
        1,
        0,
        0,
        0,
        2903,
        2899,
        1,
        0,
        0,
        0,
        2903,
        2900,
        1,
        0,
        0,
        0,
        2903,
        2901,
        1,
        0,
        0,
        0,
        2903,
        2902,
        1,
        0,
        0,
        0,
        2904,
        2905,
        1,
        0,
        0,
        0,
        2905,
        2903,
        1,
        0,
        0,
        0,
        2905,
        2906,
        1,
        0,
        0,
        0,
        2906,
        405,
        1,
        0,
        0,
        0,
        2907,
        2910,
        5,
        99,
        0,
        0,
        2908,
        2911,
        3,
        292,
        146,
        0,
        2909,
        2911,
        3,
        294,
        147,
        0,
        2910,
        2908,
        1,
        0,
        0,
        0,
        2910,
        2909,
        1,
        0,
        0,
        0,
        2911,
        2913,
        1,
        0,
        0,
        0,
        2912,
        2914,
        5,
        85,
        0,
        0,
        2913,
        2912,
        1,
        0,
        0,
        0,
        2913,
        2914,
        1,
        0,
        0,
        0,
        2914,
        2916,
        1,
        0,
        0,
        0,
        2915,
        2917,
        3,
        408,
        204,
        0,
        2916,
        2915,
        1,
        0,
        0,
        0,
        2916,
        2917,
        1,
        0,
        0,
        0,
        2917,
        2919,
        1,
        0,
        0,
        0,
        2918,
        2920,
        3,
        410,
        205,
        0,
        2919,
        2918,
        1,
        0,
        0,
        0,
        2919,
        2920,
        1,
        0,
        0,
        0,
        2920,
        2921,
        1,
        0,
        0,
        0,
        2921,
        2922,
        5,
        100,
        0,
        0,
        2922,
        407,
        1,
        0,
        0,
        0,
        2923,
        2924,
        5,
        124,
        0,
        0,
        2924,
        2925,
        3,
        488,
        244,
        0,
        2925,
        409,
        1,
        0,
        0,
        0,
        2926,
        2930,
        5,
        82,
        0,
        0,
        2927,
        2929,
        3,
        412,
        206,
        0,
        2928,
        2927,
        1,
        0,
        0,
        0,
        2929,
        2932,
        1,
        0,
        0,
        0,
        2930,
        2928,
        1,
        0,
        0,
        0,
        2930,
        2931,
        1,
        0,
        0,
        0,
        2931,
        411,
        1,
        0,
        0,
        0,
        2932,
        2930,
        1,
        0,
        0,
        0,
        2933,
        2936,
        3,
        406,
        203,
        0,
        2934,
        2936,
        3,
        398,
        199,
        0,
        2935,
        2933,
        1,
        0,
        0,
        0,
        2935,
        2934,
        1,
        0,
        0,
        0,
        2936,
        413,
        1,
        0,
        0,
        0,
        2937,
        2941,
        5,
        3,
        0,
        0,
        2938,
        2940,
        3,
        386,
        193,
        0,
        2939,
        2938,
        1,
        0,
        0,
        0,
        2940,
        2943,
        1,
        0,
        0,
        0,
        2941,
        2939,
        1,
        0,
        0,
        0,
        2941,
        2942,
        1,
        0,
        0,
        0,
        2942,
        2944,
        1,
        0,
        0,
        0,
        2943,
        2941,
        1,
        0,
        0,
        0,
        2944,
        2970,
        5,
        63,
        0,
        0,
        2945,
        2949,
        5,
        4,
        0,
        0,
        2946,
        2948,
        3,
        388,
        194,
        0,
        2947,
        2946,
        1,
        0,
        0,
        0,
        2948,
        2951,
        1,
        0,
        0,
        0,
        2949,
        2947,
        1,
        0,
        0,
        0,
        2949,
        2950,
        1,
        0,
        0,
        0,
        2950,
        2952,
        1,
        0,
        0,
        0,
        2951,
        2949,
        1,
        0,
        0,
        0,
        2952,
        2970,
        5,
        64,
        0,
        0,
        2953,
        2957,
        5,
        5,
        0,
        0,
        2954,
        2956,
        3,
        390,
        195,
        0,
        2955,
        2954,
        1,
        0,
        0,
        0,
        2956,
        2959,
        1,
        0,
        0,
        0,
        2957,
        2955,
        1,
        0,
        0,
        0,
        2957,
        2958,
        1,
        0,
        0,
        0,
        2958,
        2960,
        1,
        0,
        0,
        0,
        2959,
        2957,
        1,
        0,
        0,
        0,
        2960,
        2970,
        5,
        61,
        0,
        0,
        2961,
        2965,
        5,
        6,
        0,
        0,
        2962,
        2964,
        3,
        392,
        196,
        0,
        2963,
        2962,
        1,
        0,
        0,
        0,
        2964,
        2967,
        1,
        0,
        0,
        0,
        2965,
        2963,
        1,
        0,
        0,
        0,
        2965,
        2966,
        1,
        0,
        0,
        0,
        2966,
        2968,
        1,
        0,
        0,
        0,
        2967,
        2965,
        1,
        0,
        0,
        0,
        2968,
        2970,
        5,
        62,
        0,
        0,
        2969,
        2937,
        1,
        0,
        0,
        0,
        2969,
        2945,
        1,
        0,
        0,
        0,
        2969,
        2953,
        1,
        0,
        0,
        0,
        2969,
        2961,
        1,
        0,
        0,
        0,
        2970,
        415,
        1,
        0,
        0,
        0,
        2971,
        2972,
        5,
        7,
        0,
        0,
        2972,
        417,
        1,
        0,
        0,
        0,
        2973,
        2976,
        3,
        414,
        207,
        0,
        2974,
        2976,
        3,
        416,
        208,
        0,
        2975,
        2973,
        1,
        0,
        0,
        0,
        2975,
        2974,
        1,
        0,
        0,
        0,
        2976,
        2977,
        1,
        0,
        0,
        0,
        2977,
        2975,
        1,
        0,
        0,
        0,
        2977,
        2978,
        1,
        0,
        0,
        0,
        2978,
        419,
        1,
        0,
        0,
        0,
        2979,
        2981,
        5,
        86,
        0,
        0,
        2980,
        2982,
        3,
        298,
        149,
        0,
        2981,
        2980,
        1,
        0,
        0,
        0,
        2981,
        2982,
        1,
        0,
        0,
        0,
        2982,
        2983,
        1,
        0,
        0,
        0,
        2983,
        2984,
        5,
        87,
        0,
        0,
        2984,
        421,
        1,
        0,
        0,
        0,
        2985,
        2990,
        5,
        79,
        0,
        0,
        2986,
        2987,
        3,
        300,
        150,
        0,
        2987,
        2988,
        5,
        81,
        0,
        0,
        2988,
        2989,
        3,
        298,
        149,
        0,
        2989,
        2991,
        1,
        0,
        0,
        0,
        2990,
        2986,
        1,
        0,
        0,
        0,
        2990,
        2991,
        1,
        0,
        0,
        0,
        2991,
        2992,
        1,
        0,
        0,
        0,
        2992,
        2993,
        5,
        80,
        0,
        0,
        2993,
        423,
        1,
        0,
        0,
        0,
        2994,
        2995,
        5,
        99,
        0,
        0,
        2995,
        2996,
        3,
        298,
        149,
        0,
        2996,
        2997,
        5,
        100,
        0,
        0,
        2997,
        425,
        1,
        0,
        0,
        0,
        2998,
        3000,
        5,
        99,
        0,
        0,
        2999,
        3001,
        3,
        428,
        214,
        0,
        3000,
        2999,
        1,
        0,
        0,
        0,
        3000,
        3001,
        1,
        0,
        0,
        0,
        3001,
        3002,
        1,
        0,
        0,
        0,
        3002,
        3003,
        5,
        100,
        0,
        0,
        3003,
        427,
        1,
        0,
        0,
        0,
        3004,
        3009,
        3,
        430,
        215,
        0,
        3005,
        3006,
        5,
        81,
        0,
        0,
        3006,
        3008,
        3,
        430,
        215,
        0,
        3007,
        3005,
        1,
        0,
        0,
        0,
        3008,
        3011,
        1,
        0,
        0,
        0,
        3009,
        3007,
        1,
        0,
        0,
        0,
        3009,
        3010,
        1,
        0,
        0,
        0,
        3010,
        3013,
        1,
        0,
        0,
        0,
        3011,
        3009,
        1,
        0,
        0,
        0,
        3012,
        3014,
        5,
        81,
        0,
        0,
        3013,
        3012,
        1,
        0,
        0,
        0,
        3013,
        3014,
        1,
        0,
        0,
        0,
        3014,
        429,
        1,
        0,
        0,
        0,
        3015,
        3016,
        5,
        84,
        0,
        0,
        3016,
        3019,
        3,
        336,
        168,
        0,
        3017,
        3019,
        3,
        432,
        216,
        0,
        3018,
        3015,
        1,
        0,
        0,
        0,
        3018,
        3017,
        1,
        0,
        0,
        0,
        3019,
        431,
        1,
        0,
        0,
        0,
        3020,
        3021,
        3,
        290,
        145,
        0,
        3021,
        3022,
        5,
        82,
        0,
        0,
        3022,
        3023,
        3,
        290,
        145,
        0,
        3023,
        433,
        1,
        0,
        0,
        0,
        3024,
        3026,
        3,
        436,
        218,
        0,
        3025,
        3024,
        1,
        0,
        0,
        0,
        3026,
        3027,
        1,
        0,
        0,
        0,
        3027,
        3025,
        1,
        0,
        0,
        0,
        3027,
        3028,
        1,
        0,
        0,
        0,
        3028,
        435,
        1,
        0,
        0,
        0,
        3029,
        3031,
        5,
        15,
        0,
        0,
        3030,
        3029,
        1,
        0,
        0,
        0,
        3030,
        3031,
        1,
        0,
        0,
        0,
        3031,
        3032,
        1,
        0,
        0,
        0,
        3032,
        3033,
        5,
        28,
        0,
        0,
        3033,
        3034,
        3,
        460,
        230,
        0,
        3034,
        3035,
        5,
        33,
        0,
        0,
        3035,
        3040,
        3,
        306,
        153,
        0,
        3036,
        3037,
        5,
        31,
        0,
        0,
        3037,
        3039,
        3,
        306,
        153,
        0,
        3038,
        3036,
        1,
        0,
        0,
        0,
        3039,
        3042,
        1,
        0,
        0,
        0,
        3040,
        3038,
        1,
        0,
        0,
        0,
        3040,
        3041,
        1,
        0,
        0,
        0,
        3041,
        437,
        1,
        0,
        0,
        0,
        3042,
        3040,
        1,
        0,
        0,
        0,
        3043,
        3044,
        5,
        86,
        0,
        0,
        3044,
        3045,
        3,
        304,
        152,
        0,
        3045,
        3046,
        3,
        434,
        217,
        0,
        3046,
        3047,
        5,
        87,
        0,
        0,
        3047,
        439,
        1,
        0,
        0,
        0,
        3048,
        3049,
        5,
        99,
        0,
        0,
        3049,
        3050,
        3,
        304,
        152,
        0,
        3050,
        3051,
        3,
        434,
        217,
        0,
        3051,
        3052,
        5,
        100,
        0,
        0,
        3052,
        441,
        1,
        0,
        0,
        0,
        3053,
        3056,
        5,
        79,
        0,
        0,
        3054,
        3057,
        3,
        302,
        151,
        0,
        3055,
        3057,
        3,
        290,
        145,
        0,
        3056,
        3054,
        1,
        0,
        0,
        0,
        3056,
        3055,
        1,
        0,
        0,
        0,
        3057,
        3058,
        1,
        0,
        0,
        0,
        3058,
        3059,
        3,
        434,
        217,
        0,
        3059,
        3060,
        5,
        80,
        0,
        0,
        3060,
        443,
        1,
        0,
        0,
        0,
        3061,
        3062,
        5,
        99,
        0,
        0,
        3062,
        3063,
        3,
        432,
        216,
        0,
        3063,
        3064,
        3,
        434,
        217,
        0,
        3064,
        3065,
        5,
        100,
        0,
        0,
        3065,
        445,
        1,
        0,
        0,
        0,
        3066,
        3068,
        3,
        448,
        224,
        0,
        3067,
        3069,
        5,
        81,
        0,
        0,
        3068,
        3067,
        1,
        0,
        0,
        0,
        3068,
        3069,
        1,
        0,
        0,
        0,
        3069,
        447,
        1,
        0,
        0,
        0,
        3070,
        3075,
        3,
        450,
        225,
        0,
        3071,
        3072,
        5,
        81,
        0,
        0,
        3072,
        3074,
        3,
        450,
        225,
        0,
        3073,
        3071,
        1,
        0,
        0,
        0,
        3074,
        3077,
        1,
        0,
        0,
        0,
        3075,
        3073,
        1,
        0,
        0,
        0,
        3075,
        3076,
        1,
        0,
        0,
        0,
        3076,
        3080,
        1,
        0,
        0,
        0,
        3077,
        3075,
        1,
        0,
        0,
        0,
        3078,
        3079,
        5,
        81,
        0,
        0,
        3079,
        3081,
        3,
        452,
        226,
        0,
        3080,
        3078,
        1,
        0,
        0,
        0,
        3080,
        3081,
        1,
        0,
        0,
        0,
        3081,
        3084,
        1,
        0,
        0,
        0,
        3082,
        3084,
        3,
        452,
        226,
        0,
        3083,
        3070,
        1,
        0,
        0,
        0,
        3083,
        3082,
        1,
        0,
        0,
        0,
        3084,
        449,
        1,
        0,
        0,
        0,
        3085,
        3090,
        3,
        54,
        27,
        0,
        3086,
        3090,
        3,
        454,
        227,
        0,
        3087,
        3090,
        3,
        302,
        151,
        0,
        3088,
        3090,
        3,
        290,
        145,
        0,
        3089,
        3085,
        1,
        0,
        0,
        0,
        3089,
        3086,
        1,
        0,
        0,
        0,
        3089,
        3087,
        1,
        0,
        0,
        0,
        3089,
        3088,
        1,
        0,
        0,
        0,
        3090,
        451,
        1,
        0,
        0,
        0,
        3091,
        3096,
        3,
        456,
        228,
        0,
        3092,
        3093,
        5,
        81,
        0,
        0,
        3093,
        3095,
        3,
        456,
        228,
        0,
        3094,
        3092,
        1,
        0,
        0,
        0,
        3095,
        3098,
        1,
        0,
        0,
        0,
        3096,
        3094,
        1,
        0,
        0,
        0,
        3096,
        3097,
        1,
        0,
        0,
        0,
        3097,
        3099,
        1,
        0,
        0,
        0,
        3098,
        3096,
        1,
        0,
        0,
        0,
        3099,
        3100,
        5,
        81,
        0,
        0,
        3100,
        3105,
        3,
        458,
        229,
        0,
        3101,
        3102,
        5,
        81,
        0,
        0,
        3102,
        3104,
        3,
        458,
        229,
        0,
        3103,
        3101,
        1,
        0,
        0,
        0,
        3104,
        3107,
        1,
        0,
        0,
        0,
        3105,
        3103,
        1,
        0,
        0,
        0,
        3105,
        3106,
        1,
        0,
        0,
        0,
        3106,
        3125,
        1,
        0,
        0,
        0,
        3107,
        3105,
        1,
        0,
        0,
        0,
        3108,
        3113,
        3,
        456,
        228,
        0,
        3109,
        3110,
        5,
        81,
        0,
        0,
        3110,
        3112,
        3,
        456,
        228,
        0,
        3111,
        3109,
        1,
        0,
        0,
        0,
        3112,
        3115,
        1,
        0,
        0,
        0,
        3113,
        3111,
        1,
        0,
        0,
        0,
        3113,
        3114,
        1,
        0,
        0,
        0,
        3114,
        3125,
        1,
        0,
        0,
        0,
        3115,
        3113,
        1,
        0,
        0,
        0,
        3116,
        3121,
        3,
        458,
        229,
        0,
        3117,
        3118,
        5,
        81,
        0,
        0,
        3118,
        3120,
        3,
        458,
        229,
        0,
        3119,
        3117,
        1,
        0,
        0,
        0,
        3120,
        3123,
        1,
        0,
        0,
        0,
        3121,
        3119,
        1,
        0,
        0,
        0,
        3121,
        3122,
        1,
        0,
        0,
        0,
        3122,
        3125,
        1,
        0,
        0,
        0,
        3123,
        3121,
        1,
        0,
        0,
        0,
        3124,
        3091,
        1,
        0,
        0,
        0,
        3124,
        3108,
        1,
        0,
        0,
        0,
        3124,
        3116,
        1,
        0,
        0,
        0,
        3125,
        453,
        1,
        0,
        0,
        0,
        3126,
        3127,
        5,
        78,
        0,
        0,
        3127,
        3128,
        3,
        290,
        145,
        0,
        3128,
        455,
        1,
        0,
        0,
        0,
        3129,
        3130,
        3,
        488,
        244,
        0,
        3130,
        3131,
        5,
        85,
        0,
        0,
        3131,
        3132,
        3,
        290,
        145,
        0,
        3132,
        3135,
        1,
        0,
        0,
        0,
        3133,
        3135,
        3,
        454,
        227,
        0,
        3134,
        3129,
        1,
        0,
        0,
        0,
        3134,
        3133,
        1,
        0,
        0,
        0,
        3135,
        457,
        1,
        0,
        0,
        0,
        3136,
        3137,
        3,
        488,
        244,
        0,
        3137,
        3138,
        5,
        85,
        0,
        0,
        3138,
        3139,
        3,
        290,
        145,
        0,
        3139,
        3143,
        1,
        0,
        0,
        0,
        3140,
        3141,
        5,
        84,
        0,
        0,
        3141,
        3143,
        3,
        290,
        145,
        0,
        3142,
        3136,
        1,
        0,
        0,
        0,
        3142,
        3140,
        1,
        0,
        0,
        0,
        3143,
        459,
        1,
        0,
        0,
        0,
        3144,
        3149,
        3,
        466,
        233,
        0,
        3145,
        3146,
        5,
        81,
        0,
        0,
        3146,
        3148,
        3,
        466,
        233,
        0,
        3147,
        3145,
        1,
        0,
        0,
        0,
        3148,
        3151,
        1,
        0,
        0,
        0,
        3149,
        3147,
        1,
        0,
        0,
        0,
        3149,
        3150,
        1,
        0,
        0,
        0,
        3150,
        3153,
        1,
        0,
        0,
        0,
        3151,
        3149,
        1,
        0,
        0,
        0,
        3152,
        3154,
        5,
        81,
        0,
        0,
        3153,
        3152,
        1,
        0,
        0,
        0,
        3153,
        3154,
        1,
        0,
        0,
        0,
        3154,
        461,
        1,
        0,
        0,
        0,
        3155,
        3160,
        3,
        466,
        233,
        0,
        3156,
        3157,
        5,
        81,
        0,
        0,
        3157,
        3159,
        3,
        466,
        233,
        0,
        3158,
        3156,
        1,
        0,
        0,
        0,
        3159,
        3162,
        1,
        0,
        0,
        0,
        3160,
        3158,
        1,
        0,
        0,
        0,
        3160,
        3161,
        1,
        0,
        0,
        0,
        3161,
        3164,
        1,
        0,
        0,
        0,
        3162,
        3160,
        1,
        0,
        0,
        0,
        3163,
        3165,
        5,
        81,
        0,
        0,
        3164,
        3163,
        1,
        0,
        0,
        0,
        3164,
        3165,
        1,
        0,
        0,
        0,
        3165,
        463,
        1,
        0,
        0,
        0,
        3166,
        3169,
        3,
        466,
        233,
        0,
        3167,
        3168,
        5,
        81,
        0,
        0,
        3168,
        3170,
        3,
        466,
        233,
        0,
        3169,
        3167,
        1,
        0,
        0,
        0,
        3170,
        3171,
        1,
        0,
        0,
        0,
        3171,
        3169,
        1,
        0,
        0,
        0,
        3171,
        3172,
        1,
        0,
        0,
        0,
        3172,
        3174,
        1,
        0,
        0,
        0,
        3173,
        3175,
        5,
        81,
        0,
        0,
        3174,
        3173,
        1,
        0,
        0,
        0,
        3174,
        3175,
        1,
        0,
        0,
        0,
        3175,
        3180,
        1,
        0,
        0,
        0,
        3176,
        3177,
        3,
        466,
        233,
        0,
        3177,
        3178,
        5,
        81,
        0,
        0,
        3178,
        3180,
        1,
        0,
        0,
        0,
        3179,
        3166,
        1,
        0,
        0,
        0,
        3179,
        3176,
        1,
        0,
        0,
        0,
        3180,
        465,
        1,
        0,
        0,
        0,
        3181,
        3182,
        5,
        78,
        0,
        0,
        3182,
        3185,
        3,
        466,
        233,
        0,
        3183,
        3185,
        3,
        468,
        234,
        0,
        3184,
        3181,
        1,
        0,
        0,
        0,
        3184,
        3183,
        1,
        0,
        0,
        0,
        3185,
        467,
        1,
        0,
        0,
        0,
        3186,
        3187,
        3,
        476,
        238,
        0,
        3187,
        3188,
        5,
        77,
        0,
        0,
        3188,
        3189,
        3,
        488,
        244,
        0,
        3189,
        3197,
        1,
        0,
        0,
        0,
        3190,
        3191,
        3,
        476,
        238,
        0,
        3191,
        3192,
        5,
        86,
        0,
        0,
        3192,
        3193,
        3,
        356,
        178,
        0,
        3193,
        3194,
        5,
        87,
        0,
        0,
        3194,
        3197,
        1,
        0,
        0,
        0,
        3195,
        3197,
        3,
        470,
        235,
        0,
        3196,
        3186,
        1,
        0,
        0,
        0,
        3196,
        3190,
        1,
        0,
        0,
        0,
        3196,
        3195,
        1,
        0,
        0,
        0,
        3197,
        469,
        1,
        0,
        0,
        0,
        3198,
        3214,
        3,
        488,
        244,
        0,
        3199,
        3200,
        5,
        79,
        0,
        0,
        3200,
        3201,
        3,
        468,
        234,
        0,
        3201,
        3202,
        5,
        80,
        0,
        0,
        3202,
        3214,
        1,
        0,
        0,
        0,
        3203,
        3205,
        5,
        79,
        0,
        0,
        3204,
        3206,
        3,
        464,
        232,
        0,
        3205,
        3204,
        1,
        0,
        0,
        0,
        3205,
        3206,
        1,
        0,
        0,
        0,
        3206,
        3207,
        1,
        0,
        0,
        0,
        3207,
        3214,
        5,
        80,
        0,
        0,
        3208,
        3210,
        5,
        86,
        0,
        0,
        3209,
        3211,
        3,
        462,
        231,
        0,
        3210,
        3209,
        1,
        0,
        0,
        0,
        3210,
        3211,
        1,
        0,
        0,
        0,
        3211,
        3212,
        1,
        0,
        0,
        0,
        3212,
        3214,
        5,
        87,
        0,
        0,
        3213,
        3198,
        1,
        0,
        0,
        0,
        3213,
        3199,
        1,
        0,
        0,
        0,
        3213,
        3203,
        1,
        0,
        0,
        0,
        3213,
        3208,
        1,
        0,
        0,
        0,
        3214,
        471,
        1,
        0,
        0,
        0,
        3215,
        3222,
        3,
        474,
        237,
        0,
        3216,
        3222,
        3,
        488,
        244,
        0,
        3217,
        3218,
        5,
        79,
        0,
        0,
        3218,
        3219,
        3,
        472,
        236,
        0,
        3219,
        3220,
        5,
        80,
        0,
        0,
        3220,
        3222,
        1,
        0,
        0,
        0,
        3221,
        3215,
        1,
        0,
        0,
        0,
        3221,
        3216,
        1,
        0,
        0,
        0,
        3221,
        3217,
        1,
        0,
        0,
        0,
        3222,
        473,
        1,
        0,
        0,
        0,
        3223,
        3224,
        3,
        476,
        238,
        0,
        3224,
        3225,
        5,
        77,
        0,
        0,
        3225,
        3226,
        3,
        488,
        244,
        0,
        3226,
        3233,
        1,
        0,
        0,
        0,
        3227,
        3228,
        3,
        476,
        238,
        0,
        3228,
        3229,
        5,
        86,
        0,
        0,
        3229,
        3230,
        3,
        356,
        178,
        0,
        3230,
        3231,
        5,
        87,
        0,
        0,
        3231,
        3233,
        1,
        0,
        0,
        0,
        3232,
        3223,
        1,
        0,
        0,
        0,
        3232,
        3227,
        1,
        0,
        0,
        0,
        3233,
        475,
        1,
        0,
        0,
        0,
        3234,
        3235,
        6,
        238,
        -1,
        0,
        3235,
        3236,
        3,
        360,
        180,
        0,
        3236,
        3255,
        1,
        0,
        0,
        0,
        3237,
        3238,
        10,
        5,
        0,
        0,
        3238,
        3239,
        5,
        77,
        0,
        0,
        3239,
        3254,
        3,
        488,
        244,
        0,
        3240,
        3241,
        10,
        4,
        0,
        0,
        3241,
        3242,
        5,
        86,
        0,
        0,
        3242,
        3243,
        3,
        356,
        178,
        0,
        3243,
        3244,
        5,
        87,
        0,
        0,
        3244,
        3254,
        1,
        0,
        0,
        0,
        3245,
        3246,
        10,
        3,
        0,
        0,
        3246,
        3254,
        3,
        442,
        221,
        0,
        3247,
        3248,
        10,
        2,
        0,
        0,
        3248,
        3250,
        5,
        79,
        0,
        0,
        3249,
        3251,
        3,
        446,
        223,
        0,
        3250,
        3249,
        1,
        0,
        0,
        0,
        3250,
        3251,
        1,
        0,
        0,
        0,
        3251,
        3252,
        1,
        0,
        0,
        0,
        3252,
        3254,
        5,
        80,
        0,
        0,
        3253,
        3237,
        1,
        0,
        0,
        0,
        3253,
        3240,
        1,
        0,
        0,
        0,
        3253,
        3245,
        1,
        0,
        0,
        0,
        3253,
        3247,
        1,
        0,
        0,
        0,
        3254,
        3257,
        1,
        0,
        0,
        0,
        3255,
        3253,
        1,
        0,
        0,
        0,
        3255,
        3256,
        1,
        0,
        0,
        0,
        3256,
        477,
        1,
        0,
        0,
        0,
        3257,
        3255,
        1,
        0,
        0,
        0,
        3258,
        3263,
        3,
        480,
        240,
        0,
        3259,
        3260,
        5,
        81,
        0,
        0,
        3260,
        3262,
        3,
        480,
        240,
        0,
        3261,
        3259,
        1,
        0,
        0,
        0,
        3262,
        3265,
        1,
        0,
        0,
        0,
        3263,
        3261,
        1,
        0,
        0,
        0,
        3263,
        3264,
        1,
        0,
        0,
        0,
        3264,
        3267,
        1,
        0,
        0,
        0,
        3265,
        3263,
        1,
        0,
        0,
        0,
        3266,
        3268,
        5,
        81,
        0,
        0,
        3267,
        3266,
        1,
        0,
        0,
        0,
        3267,
        3268,
        1,
        0,
        0,
        0,
        3268,
        479,
        1,
        0,
        0,
        0,
        3269,
        3270,
        3,
        476,
        238,
        0,
        3270,
        3271,
        5,
        77,
        0,
        0,
        3271,
        3272,
        3,
        488,
        244,
        0,
        3272,
        3280,
        1,
        0,
        0,
        0,
        3273,
        3274,
        3,
        476,
        238,
        0,
        3274,
        3275,
        5,
        86,
        0,
        0,
        3275,
        3276,
        3,
        356,
        178,
        0,
        3276,
        3277,
        5,
        87,
        0,
        0,
        3277,
        3280,
        1,
        0,
        0,
        0,
        3278,
        3280,
        3,
        482,
        241,
        0,
        3279,
        3269,
        1,
        0,
        0,
        0,
        3279,
        3273,
        1,
        0,
        0,
        0,
        3279,
        3278,
        1,
        0,
        0,
        0,
        3280,
        481,
        1,
        0,
        0,
        0,
        3281,
        3293,
        3,
        488,
        244,
        0,
        3282,
        3284,
        5,
        79,
        0,
        0,
        3283,
        3285,
        3,
        478,
        239,
        0,
        3284,
        3283,
        1,
        0,
        0,
        0,
        3284,
        3285,
        1,
        0,
        0,
        0,
        3285,
        3286,
        1,
        0,
        0,
        0,
        3286,
        3293,
        5,
        80,
        0,
        0,
        3287,
        3289,
        5,
        86,
        0,
        0,
        3288,
        3290,
        3,
        478,
        239,
        0,
        3289,
        3288,
        1,
        0,
        0,
        0,
        3289,
        3290,
        1,
        0,
        0,
        0,
        3290,
        3291,
        1,
        0,
        0,
        0,
        3291,
        3293,
        5,
        87,
        0,
        0,
        3292,
        3281,
        1,
        0,
        0,
        0,
        3292,
        3282,
        1,
        0,
        0,
        0,
        3292,
        3287,
        1,
        0,
        0,
        0,
        3293,
        483,
        1,
        0,
        0,
        0,
        3294,
        3299,
        3,
        290,
        145,
        0,
        3295,
        3296,
        5,
        81,
        0,
        0,
        3296,
        3298,
        3,
        290,
        145,
        0,
        3297,
        3295,
        1,
        0,
        0,
        0,
        3298,
        3301,
        1,
        0,
        0,
        0,
        3299,
        3297,
        1,
        0,
        0,
        0,
        3299,
        3300,
        1,
        0,
        0,
        0,
        3300,
        3302,
        1,
        0,
        0,
        0,
        3301,
        3299,
        1,
        0,
        0,
        0,
        3302,
        3303,
        5,
        81,
        0,
        0,
        3303,
        3304,
        5,
        78,
        0,
        0,
        3304,
        3305,
        3,
        290,
        145,
        0,
        3305,
        3306,
        5,
        81,
        0,
        0,
        3306,
        3307,
        5,
        84,
        0,
        0,
        3307,
        3308,
        3,
        290,
        145,
        0,
        3308,
        3352,
        1,
        0,
        0,
        0,
        3309,
        3314,
        3,
        290,
        145,
        0,
        3310,
        3311,
        5,
        81,
        0,
        0,
        3311,
        3313,
        3,
        290,
        145,
        0,
        3312,
        3310,
        1,
        0,
        0,
        0,
        3313,
        3316,
        1,
        0,
        0,
        0,
        3314,
        3312,
        1,
        0,
        0,
        0,
        3314,
        3315,
        1,
        0,
        0,
        0,
        3315,
        3317,
        1,
        0,
        0,
        0,
        3316,
        3314,
        1,
        0,
        0,
        0,
        3317,
        3318,
        5,
        81,
        0,
        0,
        3318,
        3319,
        5,
        78,
        0,
        0,
        3319,
        3320,
        3,
        290,
        145,
        0,
        3320,
        3352,
        1,
        0,
        0,
        0,
        3321,
        3326,
        3,
        290,
        145,
        0,
        3322,
        3323,
        5,
        81,
        0,
        0,
        3323,
        3325,
        3,
        290,
        145,
        0,
        3324,
        3322,
        1,
        0,
        0,
        0,
        3325,
        3328,
        1,
        0,
        0,
        0,
        3326,
        3324,
        1,
        0,
        0,
        0,
        3326,
        3327,
        1,
        0,
        0,
        0,
        3327,
        3329,
        1,
        0,
        0,
        0,
        3328,
        3326,
        1,
        0,
        0,
        0,
        3329,
        3330,
        5,
        81,
        0,
        0,
        3330,
        3331,
        5,
        84,
        0,
        0,
        3331,
        3332,
        3,
        290,
        145,
        0,
        3332,
        3352,
        1,
        0,
        0,
        0,
        3333,
        3334,
        5,
        78,
        0,
        0,
        3334,
        3335,
        3,
        290,
        145,
        0,
        3335,
        3336,
        5,
        81,
        0,
        0,
        3336,
        3337,
        5,
        84,
        0,
        0,
        3337,
        3338,
        3,
        290,
        145,
        0,
        3338,
        3352,
        1,
        0,
        0,
        0,
        3339,
        3340,
        5,
        78,
        0,
        0,
        3340,
        3352,
        3,
        290,
        145,
        0,
        3341,
        3342,
        5,
        84,
        0,
        0,
        3342,
        3352,
        3,
        290,
        145,
        0,
        3343,
        3348,
        3,
        290,
        145,
        0,
        3344,
        3345,
        5,
        81,
        0,
        0,
        3345,
        3347,
        3,
        290,
        145,
        0,
        3346,
        3344,
        1,
        0,
        0,
        0,
        3347,
        3350,
        1,
        0,
        0,
        0,
        3348,
        3346,
        1,
        0,
        0,
        0,
        3348,
        3349,
        1,
        0,
        0,
        0,
        3349,
        3352,
        1,
        0,
        0,
        0,
        3350,
        3348,
        1,
        0,
        0,
        0,
        3351,
        3294,
        1,
        0,
        0,
        0,
        3351,
        3309,
        1,
        0,
        0,
        0,
        3351,
        3321,
        1,
        0,
        0,
        0,
        3351,
        3333,
        1,
        0,
        0,
        0,
        3351,
        3339,
        1,
        0,
        0,
        0,
        3351,
        3341,
        1,
        0,
        0,
        0,
        3351,
        3343,
        1,
        0,
        0,
        0,
        3352,
        485,
        1,
        0,
        0,
        0,
        3353,
        3354,
        5,
        125,
        0,
        0,
        3354,
        487,
        1,
        0,
        0,
        0,
        3355,
        3356,
        7,
        4,
        0,
        0,
        3356,
        489,
        1,
        0,
        0,
        0,
        409,
        496,
        503,
        508,
        514,
        519,
        527,
        533,
        536,
        541,
        547,
        555,
        561,
        564,
        569,
        575,
        584,
        590,
        593,
        598,
        601,
        608,
        615,
        623,
        642,
        646,
        650,
        661,
        667,
        672,
        697,
        700,
        702,
        707,
        715,
        723,
        729,
        737,
        743,
        752,
        755,
        760,
        766,
        775,
        778,
        783,
        789,
        797,
        810,
        823,
        831,
        840,
        843,
        852,
        862,
        865,
        874,
        884,
        887,
        896,
        906,
        909,
        917,
        926,
        929,
        938,
        948,
        951,
        960,
        970,
        973,
        982,
        992,
        995,
        1002,
        1005,
        1007,
        1015,
        1028,
        1042,
        1056,
        1069,
        1082,
        1096,
        1110,
        1118,
        1125,
        1133,
        1142,
        1156,
        1168,
        1172,
        1178,
        1189,
        1191,
        1205,
        1212,
        1219,
        1223,
        1229,
        1236,
        1240,
        1244,
        1248,
        1251,
        1255,
        1259,
        1261,
        1265,
        1270,
        1277,
        1286,
        1293,
        1302,
        1305,
        1313,
        1317,
        1321,
        1329,
        1333,
        1337,
        1339,
        1343,
        1350,
        1357,
        1361,
        1366,
        1371,
        1375,
        1391,
        1401,
        1408,
        1415,
        1421,
        1428,
        1432,
        1438,
        1440,
        1444,
        1450,
        1456,
        1459,
        1467,
        1476,
        1488,
        1492,
        1501,
        1512,
        1516,
        1521,
        1527,
        1534,
        1540,
        1547,
        1553,
        1563,
        1572,
        1580,
        1583,
        1590,
        1594,
        1597,
        1603,
        1608,
        1613,
        1617,
        1622,
        1626,
        1636,
        1642,
        1646,
        1652,
        1656,
        1661,
        1666,
        1670,
        1675,
        1678,
        1681,
        1686,
        1690,
        1695,
        1701,
        1705,
        1712,
        1716,
        1723,
        1727,
        1734,
        1737,
        1740,
        1749,
        1755,
        1764,
        1768,
        1774,
        1776,
        1780,
        1805,
        1807,
        1820,
        1822,
        1833,
        1842,
        1852,
        1854,
        1863,
        1867,
        1879,
        1893,
        1897,
        1910,
        1916,
        1923,
        1936,
        1939,
        1942,
        1950,
        1953,
        1956,
        1958,
        1964,
        1972,
        1979,
        1996,
        2003,
        2006,
        2011,
        2021,
        2025,
        2036,
        2047,
        2055,
        2063,
        2073,
        2078,
        2083,
        2109,
        2118,
        2123,
        2126,
        2131,
        2138,
        2142,
        2146,
        2152,
        2159,
        2168,
        2175,
        2179,
        2186,
        2191,
        2207,
        2215,
        2225,
        2229,
        2236,
        2244,
        2254,
        2268,
        2272,
        2276,
        2282,
        2292,
        2296,
        2306,
        2313,
        2315,
        2322,
        2326,
        2332,
        2339,
        2343,
        2348,
        2356,
        2363,
        2371,
        2377,
        2383,
        2396,
        2405,
        2441,
        2452,
        2463,
        2475,
        2477,
        2489,
        2491,
        2512,
        2514,
        2524,
        2531,
        2536,
        2549,
        2557,
        2559,
        2564,
        2569,
        2573,
        2577,
        2580,
        2584,
        2588,
        2590,
        2593,
        2605,
        2609,
        2615,
        2618,
        2623,
        2629,
        2640,
        2646,
        2650,
        2656,
        2660,
        2665,
        2670,
        2674,
        2679,
        2682,
        2685,
        2690,
        2694,
        2699,
        2705,
        2709,
        2716,
        2720,
        2727,
        2730,
        2733,
        2740,
        2745,
        2749,
        2752,
        2758,
        2762,
        2766,
        2770,
        2775,
        2780,
        2785,
        2790,
        2795,
        2903,
        2905,
        2910,
        2913,
        2916,
        2919,
        2930,
        2935,
        2941,
        2949,
        2957,
        2965,
        2969,
        2975,
        2977,
        2981,
        2990,
        3000,
        3009,
        3013,
        3018,
        3027,
        3030,
        3040,
        3056,
        3068,
        3075,
        3080,
        3083,
        3089,
        3096,
        3105,
        3113,
        3121,
        3124,
        3134,
        3142,
        3149,
        3153,
        3160,
        3164,
        3171,
        3174,
        3179,
        3184,
        3196,
        3205,
        3210,
        3213,
        3221,
        3232,
        3250,
        3253,
        3255,
        3263,
        3267,
        3279,
        3284,
        3289,
        3292,
        3299,
        3314,
        3326,
        3348,
        3351,
    ]


class FandangoParser(Parser):

    grammarFileName = "FandangoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'<py>'",
        "'</py>'",
        "'and'",
        "'as'",
        "'assert'",
        "'async'",
        "'await'",
        "'break'",
        "'case'",
        "'class'",
        "'continue'",
        "'def'",
        "'del'",
        "'elif'",
        "'else'",
        "'except'",
        "'False'",
        "'finally'",
        "'for'",
        "'from'",
        "'global'",
        "'if'",
        "'import'",
        "'in'",
        "'is'",
        "'lambda'",
        "'match'",
        "'None'",
        "'nonlocal'",
        "'not'",
        "'or'",
        "'pass'",
        "'raise'",
        "'return'",
        "'True'",
        "'try'",
        "'type'",
        "'while'",
        "'where'",
        "'with'",
        "'yield'",
        "'forall'",
        "'exists'",
        "'maximizing'",
        "'minimizing'",
        "'any'",
        "'all'",
        "'len'",
        "'setting'",
        "<INVALID>",
        "<INVALID>",
        '\'"""\'',
        "'''''",
        "'\"'",
        "'''",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'::='",
        "'?'",
        "'\\'",
        "'...'",
        "'..'",
        "'.'",
        "'*'",
        "'('",
        "')'",
        "','",
        "':'",
        "';'",
        "'**'",
        "'='",
        "'['",
        "']'",
        "'|'",
        "'^'",
        "'&'",
        "'<<'",
        "'>>'",
        "'+'",
        "'-'",
        "'/'",
        "'%'",
        "'//'",
        "'~'",
        "'{'",
        "'}'",
        "'<'",
        "'>'",
        "'=='",
        "'>='",
        "'<='",
        "'<>'",
        "'!='",
        "'@'",
        "'->'",
        "'+='",
        "'-='",
        "'*='",
        "'@='",
        "'/='",
        "'%='",
        "'&='",
        "'|='",
        "'^='",
        "'<<='",
        "'>>='",
        "'**='",
        "'//='",
        "':='",
        "'!'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'_'",
    ]

    symbolicNames = [
        "<INVALID>",
        "INDENT",
        "DEDENT",
        "FSTRING_START_QUOTE",
        "FSTRING_START_SINGLE_QUOTE",
        "FSTRING_START_TRIPLE_QUOTE",
        "FSTRING_START_TRIPLE_SINGLE_QUOTE",
        "STRING",
        "NUMBER",
        "INTEGER",
        "PYTHON_START",
        "PYTHON_END",
        "AND",
        "AS",
        "ASSERT",
        "ASYNC",
        "AWAIT",
        "BREAK",
        "CASE",
        "CLASS",
        "CONTINUE",
        "DEF",
        "DEL",
        "ELIF",
        "ELSE",
        "EXCEPT",
        "FALSE",
        "FINALLY",
        "FOR",
        "FROM",
        "GLOBAL",
        "IF",
        "IMPORT",
        "IN",
        "IS",
        "LAMBDA",
        "MATCH",
        "NONE",
        "NONLOCAL",
        "NOT",
        "OR",
        "PASS",
        "RAISE",
        "RETURN",
        "TRUE",
        "TRY",
        "TYPE",
        "WHILE",
        "WHERE",
        "WITH",
        "YIELD",
        "FORALL",
        "EXISTS",
        "MAXIMIZING",
        "MINIMIZING",
        "ANY",
        "ALL",
        "LEN",
        "SETTING",
        "NAME",
        "STRING_LITERAL",
        "FSTRING_END_TRIPLE_QUOTE",
        "FSTRING_END_TRIPLE_SINGLE_QUOTE",
        "FSTRING_END_QUOTE",
        "FSTRING_END_SINGLE_QUOTE",
        "BYTES_LITERAL",
        "DECIMAL_INTEGER",
        "OCT_INTEGER",
        "HEX_INTEGER",
        "BIN_INTEGER",
        "FLOAT_NUMBER",
        "IMAG_NUMBER",
        "GRAMMAR_ASSIGN",
        "QUESTION",
        "BACKSLASH",
        "ELLIPSIS",
        "DOTDOT",
        "DOT",
        "STAR",
        "OPEN_PAREN",
        "CLOSE_PAREN",
        "COMMA",
        "COLON",
        "SEMI_COLON",
        "POWER",
        "ASSIGN",
        "OPEN_BRACK",
        "CLOSE_BRACK",
        "OR_OP",
        "XOR",
        "AND_OP",
        "LEFT_SHIFT",
        "RIGHT_SHIFT",
        "ADD",
        "MINUS",
        "DIV",
        "MOD",
        "IDIV",
        "NOT_OP",
        "OPEN_BRACE",
        "CLOSE_BRACE",
        "LESS_THAN",
        "GREATER_THAN",
        "EQUALS",
        "GT_EQ",
        "LT_EQ",
        "NOT_EQ_1",
        "NOT_EQ_2",
        "AT",
        "ARROW",
        "ADD_ASSIGN",
        "SUB_ASSIGN",
        "MULT_ASSIGN",
        "AT_ASSIGN",
        "DIV_ASSIGN",
        "MOD_ASSIGN",
        "AND_ASSIGN",
        "OR_ASSIGN",
        "XOR_ASSIGN",
        "LEFT_SHIFT_ASSIGN",
        "RIGHT_SHIFT_ASSIGN",
        "POWER_ASSIGN",
        "IDIV_ASSIGN",
        "EXPR_ASSIGN",
        "EXCL",
        "NEWLINE",
        "SKIP_",
        "SPACES",
        "UNDERSCORE",
        "UNKNOWN_CHAR",
    ]

    RULE_fandango = 0
    RULE_program = 1
    RULE_statement = 2
    RULE_production = 3
    RULE_alternative = 4
    RULE_concatenation = 5
    RULE_operator = 6
    RULE_kleene = 7
    RULE_plus = 8
    RULE_option = 9
    RULE_repeat = 10
    RULE_symbol = 11
    RULE_nonterminal_right = 12
    RULE_nonterminal = 13
    RULE_generator_call = 14
    RULE_char_set = 15
    RULE_constraint = 16
    RULE_implies = 17
    RULE_quantifier = 18
    RULE_quantifier_in_line = 19
    RULE_formula_disjunction = 20
    RULE_formula_conjunction = 21
    RULE_formula_atom = 22
    RULE_formula_comparison = 23
    RULE_expr = 24
    RULE_selector_length = 25
    RULE_star_selection_or_dot_selection = 26
    RULE_star_selection = 27
    RULE_dot_selection = 28
    RULE_selection = 29
    RULE_base_selection = 30
    RULE_rs_pairs = 31
    RULE_rs_pair = 32
    RULE_rs_slices = 33
    RULE_rs_slice = 34
    RULE_python = 35
    RULE_python_tag = 36
    RULE_grammar_setting = 37
    RULE_grammar_selector = 38
    RULE_grammar_setting_kv_pair = 39
    RULE_grammar_setting_key = 40
    RULE_grammar_setting_value = 41
    RULE_python_file = 42
    RULE_interactive = 43
    RULE_eval = 44
    RULE_func_type = 45
    RULE_statements = 46
    RULE_stmt = 47
    RULE_statement_newline = 48
    RULE_simple_stmts = 49
    RULE_simple_stmt = 50
    RULE_compound_stmt = 51
    RULE_assignment = 52
    RULE_annotated_rhs = 53
    RULE_augassign = 54
    RULE_return_stmt = 55
    RULE_raise_stmt = 56
    RULE_global_stmt = 57
    RULE_nonlocal_stmt = 58
    RULE_del_stmt = 59
    RULE_yield_stmt = 60
    RULE_assert_stmt = 61
    RULE_import_stmt = 62
    RULE_import_name = 63
    RULE_import_from = 64
    RULE_import_from_targets = 65
    RULE_import_from_as_names = 66
    RULE_import_from_as_name = 67
    RULE_dotted_as_names = 68
    RULE_dotted_as_name = 69
    RULE_dotted_name = 70
    RULE_block = 71
    RULE_decorators = 72
    RULE_class_def = 73
    RULE_class_def_raw = 74
    RULE_function_def = 75
    RULE_function_def_raw = 76
    RULE_params = 77
    RULE_parameters = 78
    RULE_slash_no_default = 79
    RULE_slash_with_default = 80
    RULE_star_etc = 81
    RULE_kwds = 82
    RULE_param_no_default = 83
    RULE_param_no_default_star_annotation = 84
    RULE_param_with_default = 85
    RULE_param_maybe_default = 86
    RULE_param = 87
    RULE_param_star_annotation = 88
    RULE_annotation = 89
    RULE_star_annotation = 90
    RULE_default = 91
    RULE_if_stmt = 92
    RULE_elif_stmt = 93
    RULE_else_block = 94
    RULE_while_stmt = 95
    RULE_for_stmt = 96
    RULE_with_stmt = 97
    RULE_with_item = 98
    RULE_try_stmt = 99
    RULE_except_block = 100
    RULE_except_star_block = 101
    RULE_finally_block = 102
    RULE_match_stmt = 103
    RULE_subject_expr = 104
    RULE_case_block = 105
    RULE_guard = 106
    RULE_patterns = 107
    RULE_pattern = 108
    RULE_as_pattern = 109
    RULE_or_pattern = 110
    RULE_closed_pattern = 111
    RULE_literal_pattern = 112
    RULE_literal_expr = 113
    RULE_complex_number = 114
    RULE_signed_number = 115
    RULE_signed_real_number = 116
    RULE_real_number = 117
    RULE_imaginary_number = 118
    RULE_capture_pattern = 119
    RULE_pattern_capture_target = 120
    RULE_wildcard_pattern = 121
    RULE_value_pattern = 122
    RULE_attr = 123
    RULE_name_or_attr = 124
    RULE_group_pattern = 125
    RULE_sequence_pattern = 126
    RULE_open_sequence_pattern = 127
    RULE_maybe_sequence_pattern = 128
    RULE_maybe_star_pattern = 129
    RULE_star_pattern = 130
    RULE_mapping_pattern = 131
    RULE_items_pattern = 132
    RULE_key_value_pattern = 133
    RULE_double_star_pattern = 134
    RULE_class_pattern = 135
    RULE_positional_patterns = 136
    RULE_keyword_patterns = 137
    RULE_keyword_pattern = 138
    RULE_type_alias = 139
    RULE_type_params = 140
    RULE_type_param_seq = 141
    RULE_type_param = 142
    RULE_type_param_bound = 143
    RULE_expressions = 144
    RULE_expression = 145
    RULE_yield_expr = 146
    RULE_star_expressions = 147
    RULE_star_expression = 148
    RULE_star_named_expressions = 149
    RULE_star_named_expression = 150
    RULE_assignment_expression = 151
    RULE_named_expression = 152
    RULE_disjunction = 153
    RULE_conjunction = 154
    RULE_inversion = 155
    RULE_comparison = 156
    RULE_compare_op_bitwise_or_pair = 157
    RULE_eq_bitwise_or = 158
    RULE_noteq_bitwise_or = 159
    RULE_lte_bitwise_or = 160
    RULE_lt_bitwise_or = 161
    RULE_gte_bitwise_or = 162
    RULE_gt_bitwise_or = 163
    RULE_notin_bitwise_or = 164
    RULE_in_bitwise_or = 165
    RULE_isnot_bitwise_or = 166
    RULE_is_bitwise_or = 167
    RULE_bitwise_or = 168
    RULE_bitwise_xor = 169
    RULE_bitwise_and = 170
    RULE_shift_expr = 171
    RULE_sum = 172
    RULE_term = 173
    RULE_factor = 174
    RULE_power = 175
    RULE_await_primary = 176
    RULE_primary = 177
    RULE_slices = 178
    RULE_slice = 179
    RULE_atom = 180
    RULE_group = 181
    RULE_lambdef = 182
    RULE_lambda_params = 183
    RULE_lambda_parameters = 184
    RULE_lambda_slash_no_default = 185
    RULE_lambda_slash_with_default = 186
    RULE_lambda_star_etc = 187
    RULE_lambda_kwds = 188
    RULE_lambda_param_no_default = 189
    RULE_lambda_param_with_default = 190
    RULE_lambda_param_maybe_default = 191
    RULE_lambda_param = 192
    RULE_fstring_middle_no_quote = 193
    RULE_fstring_middle_no_single_quote = 194
    RULE_fstring_middle_breaks_no_triple_quote = 195
    RULE_fstring_middle_breaks_no_triple_single_quote = 196
    RULE_fstring_any_no_quote = 197
    RULE_fstring_any_no_single_quote = 198
    RULE_fstring_middle = 199
    RULE_fstring_any_breaks_no_triple_quote = 200
    RULE_fstring_any_breaks_no_triple_single_quote = 201
    RULE_fstring_any = 202
    RULE_fstring_replacement_field = 203
    RULE_fstring_conversion = 204
    RULE_fstring_full_format_spec = 205
    RULE_fstring_format_spec = 206
    RULE_fstring = 207
    RULE_string = 208
    RULE_strings = 209
    RULE_list = 210
    RULE_tuple = 211
    RULE_set = 212
    RULE_dict = 213
    RULE_double_starred_kvpairs = 214
    RULE_double_starred_kvpair = 215
    RULE_kvpair = 216
    RULE_for_if_clauses = 217
    RULE_for_if_clause = 218
    RULE_listcomp = 219
    RULE_setcomp = 220
    RULE_genexp = 221
    RULE_dictcomp = 222
    RULE_arguments = 223
    RULE_args = 224
    RULE_arg = 225
    RULE_kwargs = 226
    RULE_starred_expression = 227
    RULE_kwarg_or_starred = 228
    RULE_kwarg_or_double_starred = 229
    RULE_star_targets = 230
    RULE_star_targets_list_seq = 231
    RULE_star_targets_tuple_seq = 232
    RULE_star_target = 233
    RULE_target_with_star_atom = 234
    RULE_star_atom = 235
    RULE_single_target = 236
    RULE_single_subscript_attribute_target = 237
    RULE_t_primary = 238
    RULE_del_targets = 239
    RULE_del_target = 240
    RULE_del_t_atom = 241
    RULE_type_expressions = 242
    RULE_func_type_comment = 243
    RULE_identifier = 244

    ruleNames = [
        "fandango",
        "program",
        "statement",
        "production",
        "alternative",
        "concatenation",
        "operator",
        "kleene",
        "plus",
        "option",
        "repeat",
        "symbol",
        "nonterminal_right",
        "nonterminal",
        "generator_call",
        "char_set",
        "constraint",
        "implies",
        "quantifier",
        "quantifier_in_line",
        "formula_disjunction",
        "formula_conjunction",
        "formula_atom",
        "formula_comparison",
        "expr",
        "selector_length",
        "star_selection_or_dot_selection",
        "star_selection",
        "dot_selection",
        "selection",
        "base_selection",
        "rs_pairs",
        "rs_pair",
        "rs_slices",
        "rs_slice",
        "python",
        "python_tag",
        "grammar_setting",
        "grammar_selector",
        "grammar_setting_kv_pair",
        "grammar_setting_key",
        "grammar_setting_value",
        "python_file",
        "interactive",
        "eval",
        "func_type",
        "statements",
        "stmt",
        "statement_newline",
        "simple_stmts",
        "simple_stmt",
        "compound_stmt",
        "assignment",
        "annotated_rhs",
        "augassign",
        "return_stmt",
        "raise_stmt",
        "global_stmt",
        "nonlocal_stmt",
        "del_stmt",
        "yield_stmt",
        "assert_stmt",
        "import_stmt",
        "import_name",
        "import_from",
        "import_from_targets",
        "import_from_as_names",
        "import_from_as_name",
        "dotted_as_names",
        "dotted_as_name",
        "dotted_name",
        "block",
        "decorators",
        "class_def",
        "class_def_raw",
        "function_def",
        "function_def_raw",
        "params",
        "parameters",
        "slash_no_default",
        "slash_with_default",
        "star_etc",
        "kwds",
        "param_no_default",
        "param_no_default_star_annotation",
        "param_with_default",
        "param_maybe_default",
        "param",
        "param_star_annotation",
        "annotation",
        "star_annotation",
        "default",
        "if_stmt",
        "elif_stmt",
        "else_block",
        "while_stmt",
        "for_stmt",
        "with_stmt",
        "with_item",
        "try_stmt",
        "except_block",
        "except_star_block",
        "finally_block",
        "match_stmt",
        "subject_expr",
        "case_block",
        "guard",
        "patterns",
        "pattern",
        "as_pattern",
        "or_pattern",
        "closed_pattern",
        "literal_pattern",
        "literal_expr",
        "complex_number",
        "signed_number",
        "signed_real_number",
        "real_number",
        "imaginary_number",
        "capture_pattern",
        "pattern_capture_target",
        "wildcard_pattern",
        "value_pattern",
        "attr",
        "name_or_attr",
        "group_pattern",
        "sequence_pattern",
        "open_sequence_pattern",
        "maybe_sequence_pattern",
        "maybe_star_pattern",
        "star_pattern",
        "mapping_pattern",
        "items_pattern",
        "key_value_pattern",
        "double_star_pattern",
        "class_pattern",
        "positional_patterns",
        "keyword_patterns",
        "keyword_pattern",
        "type_alias",
        "type_params",
        "type_param_seq",
        "type_param",
        "type_param_bound",
        "expressions",
        "expression",
        "yield_expr",
        "star_expressions",
        "star_expression",
        "star_named_expressions",
        "star_named_expression",
        "assignment_expression",
        "named_expression",
        "disjunction",
        "conjunction",
        "inversion",
        "comparison",
        "compare_op_bitwise_or_pair",
        "eq_bitwise_or",
        "noteq_bitwise_or",
        "lte_bitwise_or",
        "lt_bitwise_or",
        "gte_bitwise_or",
        "gt_bitwise_or",
        "notin_bitwise_or",
        "in_bitwise_or",
        "isnot_bitwise_or",
        "is_bitwise_or",
        "bitwise_or",
        "bitwise_xor",
        "bitwise_and",
        "shift_expr",
        "sum",
        "term",
        "factor",
        "power",
        "await_primary",
        "primary",
        "slices",
        "slice",
        "atom",
        "group",
        "lambdef",
        "lambda_params",
        "lambda_parameters",
        "lambda_slash_no_default",
        "lambda_slash_with_default",
        "lambda_star_etc",
        "lambda_kwds",
        "lambda_param_no_default",
        "lambda_param_with_default",
        "lambda_param_maybe_default",
        "lambda_param",
        "fstring_middle_no_quote",
        "fstring_middle_no_single_quote",
        "fstring_middle_breaks_no_triple_quote",
        "fstring_middle_breaks_no_triple_single_quote",
        "fstring_any_no_quote",
        "fstring_any_no_single_quote",
        "fstring_middle",
        "fstring_any_breaks_no_triple_quote",
        "fstring_any_breaks_no_triple_single_quote",
        "fstring_any",
        "fstring_replacement_field",
        "fstring_conversion",
        "fstring_full_format_spec",
        "fstring_format_spec",
        "fstring",
        "string",
        "strings",
        "list",
        "tuple",
        "set",
        "dict",
        "double_starred_kvpairs",
        "double_starred_kvpair",
        "kvpair",
        "for_if_clauses",
        "for_if_clause",
        "listcomp",
        "setcomp",
        "genexp",
        "dictcomp",
        "arguments",
        "args",
        "arg",
        "kwargs",
        "starred_expression",
        "kwarg_or_starred",
        "kwarg_or_double_starred",
        "star_targets",
        "star_targets_list_seq",
        "star_targets_tuple_seq",
        "star_target",
        "target_with_star_atom",
        "star_atom",
        "single_target",
        "single_subscript_attribute_target",
        "t_primary",
        "del_targets",
        "del_target",
        "del_t_atom",
        "type_expressions",
        "func_type_comment",
        "identifier",
    ]

    EOF = Token.EOF
    INDENT = 1
    DEDENT = 2
    FSTRING_START_QUOTE = 3
    FSTRING_START_SINGLE_QUOTE = 4
    FSTRING_START_TRIPLE_QUOTE = 5
    FSTRING_START_TRIPLE_SINGLE_QUOTE = 6
    STRING = 7
    NUMBER = 8
    INTEGER = 9
    PYTHON_START = 10
    PYTHON_END = 11
    AND = 12
    AS = 13
    ASSERT = 14
    ASYNC = 15
    AWAIT = 16
    BREAK = 17
    CASE = 18
    CLASS = 19
    CONTINUE = 20
    DEF = 21
    DEL = 22
    ELIF = 23
    ELSE = 24
    EXCEPT = 25
    FALSE = 26
    FINALLY = 27
    FOR = 28
    FROM = 29
    GLOBAL = 30
    IF = 31
    IMPORT = 32
    IN = 33
    IS = 34
    LAMBDA = 35
    MATCH = 36
    NONE = 37
    NONLOCAL = 38
    NOT = 39
    OR = 40
    PASS = 41
    RAISE = 42
    RETURN = 43
    TRUE = 44
    TRY = 45
    TYPE = 46
    WHILE = 47
    WHERE = 48
    WITH = 49
    YIELD = 50
    FORALL = 51
    EXISTS = 52
    MAXIMIZING = 53
    MINIMIZING = 54
    ANY = 55
    ALL = 56
    LEN = 57
    SETTING = 58
    NAME = 59
    STRING_LITERAL = 60
    FSTRING_END_TRIPLE_QUOTE = 61
    FSTRING_END_TRIPLE_SINGLE_QUOTE = 62
    FSTRING_END_QUOTE = 63
    FSTRING_END_SINGLE_QUOTE = 64
    BYTES_LITERAL = 65
    DECIMAL_INTEGER = 66
    OCT_INTEGER = 67
    HEX_INTEGER = 68
    BIN_INTEGER = 69
    FLOAT_NUMBER = 70
    IMAG_NUMBER = 71
    GRAMMAR_ASSIGN = 72
    QUESTION = 73
    BACKSLASH = 74
    ELLIPSIS = 75
    DOTDOT = 76
    DOT = 77
    STAR = 78
    OPEN_PAREN = 79
    CLOSE_PAREN = 80
    COMMA = 81
    COLON = 82
    SEMI_COLON = 83
    POWER = 84
    ASSIGN = 85
    OPEN_BRACK = 86
    CLOSE_BRACK = 87
    OR_OP = 88
    XOR = 89
    AND_OP = 90
    LEFT_SHIFT = 91
    RIGHT_SHIFT = 92
    ADD = 93
    MINUS = 94
    DIV = 95
    MOD = 96
    IDIV = 97
    NOT_OP = 98
    OPEN_BRACE = 99
    CLOSE_BRACE = 100
    LESS_THAN = 101
    GREATER_THAN = 102
    EQUALS = 103
    GT_EQ = 104
    LT_EQ = 105
    NOT_EQ_1 = 106
    NOT_EQ_2 = 107
    AT = 108
    ARROW = 109
    ADD_ASSIGN = 110
    SUB_ASSIGN = 111
    MULT_ASSIGN = 112
    AT_ASSIGN = 113
    DIV_ASSIGN = 114
    MOD_ASSIGN = 115
    AND_ASSIGN = 116
    OR_ASSIGN = 117
    XOR_ASSIGN = 118
    LEFT_SHIFT_ASSIGN = 119
    RIGHT_SHIFT_ASSIGN = 120
    POWER_ASSIGN = 121
    IDIV_ASSIGN = 122
    EXPR_ASSIGN = 123
    EXCL = 124
    NEWLINE = 125
    SKIP_ = 126
    SPACES = 127
    UNDERSCORE = 128
    UNKNOWN_CHAR = 129

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class FandangoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program(self):
            return self.getTypedRuleContext(FandangoParser.ProgramContext, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fandango

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFandango"):
                return visitor.visitFandango(self)
            else:
                return visitor.visitChildren(self)

    def fandango(self):

        localctx = FandangoParser.FandangoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fandango)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.program()
            self.state = 491
            self.match(FandangoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StatementContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StatementContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_program

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProgram"):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)

    def program(self):

        localctx = FandangoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 125:
                self.state = 493
                self.match(FandangoParser.NEWLINE)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0 and ((1 << _la) & 1152920379132199418) != 0
            ) or (
                (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 8683006489) != 0
            ):
                self.state = 499
                self.statement()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 125:
                    self.state = 500
                    self.match(FandangoParser.NEWLINE)
                    self.state = 505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def production(self):
            return self.getTypedRuleContext(FandangoParser.ProductionContext, 0)

        def constraint(self):
            return self.getTypedRuleContext(FandangoParser.ConstraintContext, 0)

        def python(self):
            return self.getTypedRuleContext(FandangoParser.PythonContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_statement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):

        localctx = FandangoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.production()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.python()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProductionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonterminal(self):
            return self.getTypedRuleContext(FandangoParser.NonterminalContext, 0)

        def GRAMMAR_ASSIGN(self):
            return self.getToken(FandangoParser.GRAMMAR_ASSIGN, 0)

        def alternative(self):
            return self.getTypedRuleContext(FandangoParser.AlternativeContext, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def INDENT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.INDENT)
            else:
                return self.getToken(FandangoParser.INDENT, i)

        def EXPR_ASSIGN(self):
            return self.getToken(FandangoParser.EXPR_ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def DEDENT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DEDENT)
            else:
                return self.getToken(FandangoParser.DEDENT, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_production

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProduction"):
                return visitor.visitProduction(self)
            else:
                return visitor.visitChildren(self)

    def production(self):

        localctx = FandangoParser.ProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_production)
        self._la = 0  # Token type
        try:
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 1:
                    self.state = 516
                    self.match(FandangoParser.INDENT)
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 522
                self.nonterminal()
                self.state = 523
                self.match(FandangoParser.GRAMMAR_ASSIGN)
                self.state = 524
                self.alternative()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 123:
                    self.state = 525
                    self.match(FandangoParser.EXPR_ASSIGN)
                    self.state = 526
                    self.expression()

                self.state = 536
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 529
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 531
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 530
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 533
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 535
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 2:
                    self.state = 538
                    self.match(FandangoParser.DEDENT)
                    self.state = 543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 1:
                    self.state = 544
                    self.match(FandangoParser.INDENT)
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 550
                self.nonterminal()
                self.state = 551
                self.match(FandangoParser.GRAMMAR_ASSIGN)
                self.state = 552
                self.alternative()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 553
                    self.match(FandangoParser.ASSIGN)
                    self.state = 554
                    self.expression()

                self.state = 564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 557
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 559
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 558
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 561
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 563
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 2:
                    self.state = 566
                    self.match(FandangoParser.DEDENT)
                    self.state = 571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 1:
                    self.state = 572
                    self.match(FandangoParser.INDENT)
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 578
                self.nonterminal()
                self.state = 579
                self.match(FandangoParser.GRAMMAR_ASSIGN)
                self.state = 580
                self.alternative()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 82:
                    self.state = 581
                    self.match(FandangoParser.COLON)
                    self.state = 582
                    self.match(FandangoParser.COLON)
                    self.state = 583
                    self.expression()

                self.state = 593
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 586
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 588
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 587
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 590
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 592
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 2:
                    self.state = 595
                    self.match(FandangoParser.DEDENT)
                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlternativeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ConcatenationContext, i)

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_alternative

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAlternative"):
                return visitor.visitAlternative(self)
            else:
                return visitor.visitChildren(self)

    def alternative(self):

        localctx = FandangoParser.AlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alternative)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.concatenation()
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 88:
                self.state = 604
                self.match(FandangoParser.OR_OP)
                self.state = 605
                self.concatenation()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.OperatorContext)
            else:
                return self.getTypedRuleContext(FandangoParser.OperatorContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_concatenation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConcatenation"):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)

    def concatenation(self):

        localctx = FandangoParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_concatenation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.operator()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171648) != 0) or (
                (((_la - 79)) & ~0x3F) == 0 and ((1 << (_la - 79)) & 4194433) != 0
            ):
                self.state = 612
                self.operator()
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def kleene(self):
            return self.getTypedRuleContext(FandangoParser.KleeneContext, 0)

        def plus(self):
            return self.getTypedRuleContext(FandangoParser.PlusContext, 0)

        def option(self):
            return self.getTypedRuleContext(FandangoParser.OptionContext, 0)

        def repeat(self):
            return self.getTypedRuleContext(FandangoParser.RepeatContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_operator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOperator"):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)

    def operator(self):

        localctx = FandangoParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_operator)
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.kleene()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 620
                self.plus()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 621
                self.option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 622
                self.repeat()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KleeneContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kleene

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKleene"):
                return visitor.visitKleene(self)
            else:
                return visitor.visitChildren(self)

    def kleene(self):

        localctx = FandangoParser.KleeneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_kleene)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.symbol()
            self.state = 626
            self.match(FandangoParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_plus

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPlus"):
                return visitor.visitPlus(self)
            else:
                return visitor.visitChildren(self)

    def plus(self):

        localctx = FandangoParser.PlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_plus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.symbol()
            self.state = 629
            self.match(FandangoParser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def QUESTION(self):
            return self.getToken(FandangoParser.QUESTION, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_option

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOption"):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)

    def option(self):

        localctx = FandangoParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.symbol()
            self.state = 632
            self.match(FandangoParser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RepeatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(FandangoParser.SymbolContext, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_repeat

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRepeat"):
                return visitor.visitRepeat(self)
            else:
                return visitor.visitChildren(self)

    def repeat(self):

        localctx = FandangoParser.RepeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_repeat)
        self._la = 0  # Token type
        try:
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.symbol()
                self.state = 635
                self.match(FandangoParser.OPEN_BRACE)

                self.state = 636
                self.expression()
                self.state = 637
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self.symbol()
                self.state = 640
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
                ):
                    self.state = 641
                    self.expression()

                self.state = 644
                self.match(FandangoParser.COMMA)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
                ):
                    self.state = 645
                    self.expression()

                self.state = 648
                self.match(FandangoParser.CLOSE_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonterminal_right(self):
            return self.getTypedRuleContext(FandangoParser.Nonterminal_rightContext, 0)

        def string(self):
            return self.getTypedRuleContext(FandangoParser.StringContext, 0)

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def generator_call(self):
            return self.getTypedRuleContext(FandangoParser.Generator_callContext, 0)

        def char_set(self):
            return self.getTypedRuleContext(FandangoParser.Char_setContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def alternative(self):
            return self.getTypedRuleContext(FandangoParser.AlternativeContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_symbol

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSymbol"):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)

    def symbol(self):

        localctx = FandangoParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_symbol)
        try:
            self.state = 661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.nonterminal_right()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.string()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [55, 56, 57, 59]:
                self.enterOuterAlt(localctx, 4)
                self.state = 655
                self.generator_call(0)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 5)
                self.state = 656
                self.char_set()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 6)
                self.state = 657
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 658
                self.alternative()
                self.state = 659
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonterminal_rightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FandangoParser.IdentifierContext, i)

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_nonterminal_right

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonterminal_right"):
                return visitor.visitNonterminal_right(self)
            else:
                return visitor.visitChildren(self)

    def nonterminal_right(self):

        localctx = FandangoParser.Nonterminal_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_nonterminal_right)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(FandangoParser.LESS_THAN)
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
            if la_ == 1:
                self.state = 667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
                if la_ == 1:
                    self.state = 664
                    self.identifier()
                    self.state = 665
                    self.match(FandangoParser.COLON)

                self.state = 669
                self.identifier()
                self.state = 670
                self.match(FandangoParser.COLON)

            self.state = 674
            self.identifier()
            self.state = 675
            self.match(FandangoParser.GREATER_THAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonterminalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_nonterminal

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonterminal"):
                return visitor.visitNonterminal(self)
            else:
                return visitor.visitChildren(self)

    def nonterminal(self):

        localctx = FandangoParser.NonterminalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_nonterminal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(FandangoParser.LESS_THAN)
            self.state = 678
            self.identifier()
            self.state = 679
            self.match(FandangoParser.GREATER_THAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generator_callContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def generator_call(self):
            return self.getTypedRuleContext(FandangoParser.Generator_callContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_generator_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenerator_call"):
                return visitor.visitGenerator_call(self)
            else:
                return visitor.visitChildren(self)

    def generator_call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Generator_callContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_generator_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 700
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 30, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 684
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 685
                        self.match(FandangoParser.DOT)
                        self.state = 686
                        self.identifier()
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 687
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 688
                        self.match(FandangoParser.OPEN_BRACK)
                        self.state = 689
                        self.slices()
                        self.state = 690
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 692
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 693
                        self.genexp()
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.Generator_callContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_generator_call
                        )
                        self.state = 694
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 695
                        self.match(FandangoParser.OPEN_PAREN)
                        self.state = 697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 828680645243896312) != 0
                        ) or (
                            (((_la - 75)) & ~0x3F) == 0
                            and ((1 << (_la - 75)) & 93071897) != 0
                        ):
                            self.state = 696
                            self.arguments()

                        self.state = 699
                        self.match(FandangoParser.CLOSE_PAREN)
                        pass

                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Char_setContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def string(self):
            return self.getTypedRuleContext(FandangoParser.StringContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_char_set

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitChar_set"):
                return visitor.visitChar_set(self)
            else:
                return visitor.visitChildren(self)

    def char_set(self):

        localctx = FandangoParser.Char_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_char_set)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 706
                self.match(FandangoParser.XOR)

            self.state = 709
            self.string()
            self.state = 710
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(FandangoParser.WHERE, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def INDENT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.INDENT)
            else:
                return self.getToken(FandangoParser.INDENT, i)

        def DEDENT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DEDENT)
            else:
                return self.getToken(FandangoParser.DEDENT, i)

        def SETTING(self):
            return self.getToken(FandangoParser.SETTING, 0)

        def grammar_setting(self):
            return self.getTypedRuleContext(FandangoParser.Grammar_settingContext, 0)

        def MINIMIZING(self):
            return self.getToken(FandangoParser.MINIMIZING, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def MAXIMIZING(self):
            return self.getToken(FandangoParser.MAXIMIZING, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_constraint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraint"):
                return visitor.visitConstraint(self)
            else:
                return visitor.visitChildren(self)

    def constraint(self):

        localctx = FandangoParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constraint)
        self._la = 0  # Token type
        try:
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 1:
                    self.state = 712
                    self.match(FandangoParser.INDENT)
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 718
                self.match(FandangoParser.WHERE)
                self.state = 719
                self.implies()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 2:
                    self.state = 720
                    self.match(FandangoParser.DEDENT)
                    self.state = 725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 1:
                    self.state = 726
                    self.match(FandangoParser.INDENT)
                    self.state = 731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 732
                self.match(FandangoParser.SETTING)
                self.state = 733
                self.grammar_setting()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 2:
                    self.state = 734
                    self.match(FandangoParser.DEDENT)
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 1:
                    self.state = 740
                    self.match(FandangoParser.INDENT)
                    self.state = 745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 746
                self.match(FandangoParser.MINIMIZING)
                self.state = 747
                self.expr()
                self.state = 755
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 748
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 750
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 749
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 752
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 38, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 754
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 2:
                    self.state = 757
                    self.match(FandangoParser.DEDENT)
                    self.state = 762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 1:
                    self.state = 763
                    self.match(FandangoParser.INDENT)
                    self.state = 768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 769
                self.match(FandangoParser.MAXIMIZING)
                self.state = 770
                self.expr()
                self.state = 778
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 771
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 773
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 772
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 775
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 42, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 777
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 2:
                    self.state = 780
                    self.match(FandangoParser.DEDENT)
                    self.state = 785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 786
                self.implies()
                self.state = 787
                self.match(FandangoParser.SEMI_COLON)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImpliesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_disjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Formula_disjunctionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Formula_disjunctionContext, i
                )

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_implies

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImplies"):
                return visitor.visitImplies(self)
            else:
                return visitor.visitChildren(self)

    def implies(self):

        localctx = FandangoParser.ImpliesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_implies)
        self._la = 0  # Token type
        try:
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.formula_disjunction()
                self.state = 792
                self.match(FandangoParser.ARROW)
                self.state = 793
                self.formula_disjunction()
                self.state = 794
                _la = self._input.LA(1)
                if not (_la == -1 or _la == 83 or _la == 125):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.quantifier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(FandangoParser.FORALL, 0)

        def nonterminal(self):
            return self.getTypedRuleContext(FandangoParser.NonterminalContext, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def dot_selection(self):
            return self.getTypedRuleContext(FandangoParser.Dot_selectionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def INDENT(self):
            return self.getToken(FandangoParser.INDENT, 0)

        def quantifier(self):
            return self.getTypedRuleContext(FandangoParser.QuantifierContext, 0)

        def DEDENT(self):
            return self.getToken(FandangoParser.DEDENT, 0)

        def EXISTS(self):
            return self.getToken(FandangoParser.EXISTS, 0)

        def ANY(self):
            return self.getToken(FandangoParser.ANY, 0)

        def OPEN_PAREN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OPEN_PAREN)
            else:
                return self.getToken(FandangoParser.OPEN_PAREN, i)

        def quantifier_in_line(self):
            return self.getTypedRuleContext(FandangoParser.Quantifier_in_lineContext, 0)

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def star_selection(self):
            return self.getTypedRuleContext(FandangoParser.Star_selectionContext, 0)

        def CLOSE_PAREN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLOSE_PAREN)
            else:
                return self.getToken(FandangoParser.CLOSE_PAREN, i)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def SEMI_COLON(self):
            return self.getToken(FandangoParser.SEMI_COLON, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def ALL(self):
            return self.getToken(FandangoParser.ALL, 0)

        def formula_disjunction(self):
            return self.getTypedRuleContext(
                FandangoParser.Formula_disjunctionContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_quantifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQuantifier"):
                return visitor.visitQuantifier(self)
            else:
                return visitor.visitChildren(self)

    def quantifier(self):

        localctx = FandangoParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_quantifier)
        try:
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.match(FandangoParser.FORALL)
                self.state = 800
                self.nonterminal()
                self.state = 801
                self.match(FandangoParser.IN)
                self.state = 802
                self.dot_selection(0)
                self.state = 803
                self.match(FandangoParser.COLON)
                self.state = 810
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [125]:
                    self.state = 804
                    self.match(FandangoParser.NEWLINE)
                    self.state = 805
                    self.match(FandangoParser.INDENT)
                    self.state = 806
                    self.quantifier()
                    self.state = 807
                    self.match(FandangoParser.DEDENT)
                    pass
                elif token in [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    16,
                    26,
                    37,
                    39,
                    44,
                    51,
                    52,
                    55,
                    56,
                    57,
                    59,
                    75,
                    78,
                    79,
                    84,
                    86,
                    88,
                    93,
                    94,
                    98,
                    99,
                    101,
                ]:
                    self.state = 809
                    self.quantifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.match(FandangoParser.EXISTS)
                self.state = 813
                self.nonterminal()
                self.state = 814
                self.match(FandangoParser.IN)
                self.state = 815
                self.dot_selection(0)
                self.state = 816
                self.match(FandangoParser.COLON)
                self.state = 823
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [125]:
                    self.state = 817
                    self.match(FandangoParser.NEWLINE)
                    self.state = 818
                    self.match(FandangoParser.INDENT)
                    self.state = 819
                    self.quantifier()
                    self.state = 820
                    self.match(FandangoParser.DEDENT)
                    pass
                elif token in [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    16,
                    26,
                    37,
                    39,
                    44,
                    51,
                    52,
                    55,
                    56,
                    57,
                    59,
                    75,
                    78,
                    79,
                    84,
                    86,
                    88,
                    93,
                    94,
                    98,
                    99,
                    101,
                ]:
                    self.state = 822
                    self.quantifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 825
                self.match(FandangoParser.ANY)
                self.state = 826
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 827
                self.quantifier_in_line()
                self.state = 828
                self.match(FandangoParser.FOR)
                self.state = 831
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 829
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 830
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 833
                self.match(FandangoParser.IN)
                self.state = 834
                self.star_selection()
                self.state = 835
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 843
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 836
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 838
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 837
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 840
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 50, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 842
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 845
                self.match(FandangoParser.ANY)
                self.state = 846
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 847
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 848
                self.quantifier_in_line()
                self.state = 849
                self.match(FandangoParser.FOR)
                self.state = 852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 850
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 851
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 854
                self.match(FandangoParser.IN)
                self.state = 855
                self.star_selection()
                self.state = 856
                self.match(FandangoParser.CLOSE_BRACK)
                self.state = 857
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 865
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 858
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 860
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 859
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 862
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 53, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 864
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 867
                self.match(FandangoParser.ANY)
                self.state = 868
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 869
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 870
                self.quantifier_in_line()
                self.state = 871
                self.match(FandangoParser.FOR)
                self.state = 874
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 872
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 873
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 876
                self.match(FandangoParser.IN)
                self.state = 877
                self.star_selection()
                self.state = 878
                self.match(FandangoParser.CLOSE_BRACK)
                self.state = 879
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 887
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 880
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 882
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 881
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 884
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 56, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 886
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 889
                self.match(FandangoParser.ANY)
                self.state = 890
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 891
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 892
                self.quantifier_in_line()
                self.state = 893
                self.match(FandangoParser.FOR)
                self.state = 896
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 894
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 895
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 898
                self.match(FandangoParser.IN)
                self.state = 899
                self.star_selection()
                self.state = 900
                self.match(FandangoParser.CLOSE_BRACE)
                self.state = 901
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 909
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 902
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 904
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 903
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 906
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 908
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 911
                self.match(FandangoParser.ALL)
                self.state = 912
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 913
                self.quantifier_in_line()
                self.state = 914
                self.match(FandangoParser.FOR)
                self.state = 917
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 915
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 916
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 919
                self.match(FandangoParser.IN)
                self.state = 920
                self.star_selection()
                self.state = 921
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 922
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 924
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 923
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 926
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 928
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 931
                self.match(FandangoParser.ALL)
                self.state = 932
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 933
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 934
                self.quantifier_in_line()
                self.state = 935
                self.match(FandangoParser.FOR)
                self.state = 938
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 936
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 937
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 940
                self.match(FandangoParser.IN)
                self.state = 941
                self.star_selection()
                self.state = 942
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 943
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 951
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 944
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 946
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 945
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 948
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 950
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 953
                self.match(FandangoParser.ALL)
                self.state = 954
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 955
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 956
                self.quantifier_in_line()
                self.state = 957
                self.match(FandangoParser.FOR)
                self.state = 960
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 958
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 959
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 962
                self.match(FandangoParser.IN)
                self.state = 963
                self.star_selection()
                self.state = 964
                self.match(FandangoParser.CLOSE_BRACK)
                self.state = 965
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 973
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 966
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 968
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 967
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 970
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 972
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 975
                self.match(FandangoParser.ALL)
                self.state = 976
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 977
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 978
                self.quantifier_in_line()
                self.state = 979
                self.match(FandangoParser.FOR)
                self.state = 982
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 980
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 981
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 984
                self.match(FandangoParser.IN)
                self.state = 985
                self.star_selection()
                self.state = 986
                self.match(FandangoParser.CLOSE_BRACE)
                self.state = 987
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 995
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 988
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 990
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 989
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 992
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 71, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 994
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 997
                self.formula_disjunction()
                self.state = 1005
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [83]:
                    self.state = 998
                    self.match(FandangoParser.SEMI_COLON)
                    pass
                elif token in [125]:
                    self.state = 1000
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 999
                            self.match(FandangoParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 1002
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)

                    pass
                elif token in [-1]:
                    self.state = 1004
                    self.match(FandangoParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantifier_in_lineContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(FandangoParser.ANY, 0)

        def OPEN_PAREN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OPEN_PAREN)
            else:
                return self.getToken(FandangoParser.OPEN_PAREN, i)

        def quantifier_in_line(self):
            return self.getTypedRuleContext(FandangoParser.Quantifier_in_lineContext, 0)

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def star_selection(self):
            return self.getTypedRuleContext(FandangoParser.Star_selectionContext, 0)

        def CLOSE_PAREN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLOSE_PAREN)
            else:
                return self.getToken(FandangoParser.CLOSE_PAREN, i)

        def nonterminal(self):
            return self.getTypedRuleContext(FandangoParser.NonterminalContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def ALL(self):
            return self.getToken(FandangoParser.ALL, 0)

        def formula_disjunction(self):
            return self.getTypedRuleContext(
                FandangoParser.Formula_disjunctionContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_quantifier_in_line

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQuantifier_in_line"):
                return visitor.visitQuantifier_in_line(self)
            else:
                return visitor.visitChildren(self)

    def quantifier_in_line(self):

        localctx = FandangoParser.Quantifier_in_lineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_quantifier_in_line)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 84, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.match(FandangoParser.ANY)
                self.state = 1010
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1011
                self.quantifier_in_line()
                self.state = 1012
                self.match(FandangoParser.FOR)
                self.state = 1015
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1013
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1014
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1017
                self.match(FandangoParser.IN)
                self.state = 1018
                self.star_selection()
                self.state = 1019
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.match(FandangoParser.ANY)
                self.state = 1022
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1023
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1024
                self.quantifier_in_line()
                self.state = 1025
                self.match(FandangoParser.FOR)
                self.state = 1028
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1026
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1027
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1030
                self.match(FandangoParser.IN)
                self.state = 1031
                self.star_selection()
                self.state = 1032
                self.match(FandangoParser.CLOSE_BRACK)
                self.state = 1033
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.match(FandangoParser.ANY)
                self.state = 1036
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1037
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1038
                self.quantifier_in_line()
                self.state = 1039
                self.match(FandangoParser.FOR)
                self.state = 1042
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1040
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1041
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1044
                self.match(FandangoParser.IN)
                self.state = 1045
                self.star_selection()
                self.state = 1046
                self.match(FandangoParser.CLOSE_BRACK)
                self.state = 1047
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1049
                self.match(FandangoParser.ANY)
                self.state = 1050
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1051
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1052
                self.quantifier_in_line()
                self.state = 1053
                self.match(FandangoParser.FOR)
                self.state = 1056
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1054
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1055
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1058
                self.match(FandangoParser.IN)
                self.state = 1059
                self.star_selection()
                self.state = 1060
                self.match(FandangoParser.CLOSE_BRACE)
                self.state = 1061
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1063
                self.match(FandangoParser.ALL)
                self.state = 1064
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1065
                self.quantifier_in_line()
                self.state = 1066
                self.match(FandangoParser.FOR)
                self.state = 1069
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1067
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1068
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1071
                self.match(FandangoParser.IN)
                self.state = 1072
                self.star_selection()
                self.state = 1073
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1075
                self.match(FandangoParser.ALL)
                self.state = 1076
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1077
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1078
                self.quantifier_in_line()
                self.state = 1079
                self.match(FandangoParser.FOR)
                self.state = 1082
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1080
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1081
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1084
                self.match(FandangoParser.IN)
                self.state = 1085
                self.star_selection()
                self.state = 1086
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 1087
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1089
                self.match(FandangoParser.ALL)
                self.state = 1090
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1091
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1092
                self.quantifier_in_line()
                self.state = 1093
                self.match(FandangoParser.FOR)
                self.state = 1096
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1094
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1095
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1098
                self.match(FandangoParser.IN)
                self.state = 1099
                self.star_selection()
                self.state = 1100
                self.match(FandangoParser.CLOSE_BRACK)
                self.state = 1101
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1103
                self.match(FandangoParser.ALL)
                self.state = 1104
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1105
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1106
                self.quantifier_in_line()
                self.state = 1107
                self.match(FandangoParser.FOR)
                self.state = 1110
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1108
                    self.nonterminal()
                    pass
                elif token in [55, 56, 57, 59]:
                    self.state = 1109
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1112
                self.match(FandangoParser.IN)
                self.state = 1113
                self.star_selection()
                self.state = 1114
                self.match(FandangoParser.CLOSE_BRACE)
                self.state = 1115
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1117
                self.formula_disjunction()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_disjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_conjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Formula_conjunctionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Formula_conjunctionContext, i
                )

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_disjunction

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_disjunction"):
                return visitor.visitFormula_disjunction(self)
            else:
                return visitor.visitChildren(self)

    def formula_disjunction(self):

        localctx = FandangoParser.Formula_disjunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 40, self.RULE_formula_disjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.formula_conjunction()
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 40:
                self.state = 1121
                self.match(FandangoParser.OR)
                self.state = 1122
                self.formula_conjunction()
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_conjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_atom(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Formula_atomContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Formula_atomContext, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_conjunction

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_conjunction"):
                return visitor.visitFormula_conjunction(self)
            else:
                return visitor.visitChildren(self)

    def formula_conjunction(self):

        localctx = FandangoParser.Formula_conjunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 42, self.RULE_formula_conjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.formula_atom()
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 12:
                self.state = 1129
                self.match(FandangoParser.AND)
                self.state = 1130
                self.formula_atom()
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_comparison(self):
            return self.getTypedRuleContext(FandangoParser.Formula_comparisonContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def implies(self):
            return self.getTypedRuleContext(FandangoParser.ImpliesContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(FandangoParser.ExprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_atom

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_atom"):
                return visitor.visitFormula_atom(self)
            else:
                return visitor.visitChildren(self)

    def formula_atom(self):

        localctx = FandangoParser.Formula_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_formula_atom)
        try:
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 87, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self.formula_comparison()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1137
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1138
                self.implies()
                self.state = 1139
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1141
                self.expr()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_comparisonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExprContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExprContext, i)

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FandangoParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FandangoParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FandangoParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FandangoParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FandangoParser.NOT_EQ_2, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_formula_comparison

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormula_comparison"):
                return visitor.visitFormula_comparison(self)
            else:
                return visitor.visitChildren(self)

    def formula_comparison(self):

        localctx = FandangoParser.Formula_comparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_formula_comparison)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.expr()
            self.state = 1145
            _la = self._input.LA(1)
            if not (((((_la - 101)) & ~0x3F) == 0 and ((1 << (_la - 101)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1146
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector_length(self):
            return self.getTypedRuleContext(FandangoParser.Selector_lengthContext, 0)

        def inversion(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.InversionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.InversionContext, i)

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr"):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)

    def expr(self):

        localctx = FandangoParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_expr)
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.selector_length()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1149
                self.inversion()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1150
                self.inversion()
                self.state = 1151
                self.match(FandangoParser.IF)
                self.state = 1152
                self.inversion()
                self.state = 1153
                self.match(FandangoParser.ELSE)
                self.state = 1154
                self.inversion()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selector_lengthContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def dot_selection(self):
            return self.getTypedRuleContext(FandangoParser.Dot_selectionContext, 0)

        def LEN(self):
            return self.getToken(FandangoParser.LEN, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def star_selection(self):
            return self.getTypedRuleContext(FandangoParser.Star_selectionContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def star_selection_or_dot_selection(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_selection_or_dot_selectionContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_selector_length

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelector_length"):
                return visitor.visitSelector_length(self)
            else:
                return visitor.visitChildren(self)

    def selector_length(self):

        localctx = FandangoParser.Selector_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_selector_length)
        try:
            self.state = 1168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.match(FandangoParser.OR_OP)
                self.state = 1159
                self.dot_selection(0)
                self.state = 1160
                self.match(FandangoParser.OR_OP)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.match(FandangoParser.LEN)
                self.state = 1163
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1164
                self.star_selection()
                self.state = 1165
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [78, 79, 84, 101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1167
                self.star_selection_or_dot_selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_selection_or_dot_selectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_selection(self):
            return self.getTypedRuleContext(FandangoParser.Star_selectionContext, 0)

        def dot_selection(self):
            return self.getTypedRuleContext(FandangoParser.Dot_selectionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_selection_or_dot_selection

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_selection_or_dot_selection"):
                return visitor.visitStar_selection_or_dot_selection(self)
            else:
                return visitor.visitChildren(self)

    def star_selection_or_dot_selection(self):

        localctx = FandangoParser.Star_selection_or_dot_selectionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 52, self.RULE_star_selection_or_dot_selection)
        try:
            self.state = 1172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1170
                self.star_selection()
                pass
            elif token in [79, 101]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1171
                self.dot_selection(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_selectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def dot_selection(self):
            return self.getTypedRuleContext(FandangoParser.Dot_selectionContext, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_selection

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_selection"):
                return visitor.visitStar_selection(self)
            else:
                return visitor.visitChildren(self)

    def star_selection(self):

        localctx = FandangoParser.Star_selectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_star_selection)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1174
                self.match(FandangoParser.STAR)
                self.state = 1175
                self.dot_selection(0)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self.match(FandangoParser.POWER)
                self.state = 1177
                self.dot_selection(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_selectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selection(self):
            return self.getTypedRuleContext(FandangoParser.SelectionContext, 0)

        def dot_selection(self):
            return self.getTypedRuleContext(FandangoParser.Dot_selectionContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def DOTDOT(self):
            return self.getToken(FandangoParser.DOTDOT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dot_selection

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDot_selection"):
                return visitor.visitDot_selection(self)
            else:
                return visitor.visitChildren(self)

    def dot_selection(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Dot_selectionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_dot_selection, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.selection()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1189
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.Dot_selectionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_dot_selection
                        )
                        self.state = 1183
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1184
                        self.match(FandangoParser.DOT)
                        self.state = 1185
                        self.selection()
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.Dot_selectionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_dot_selection
                        )
                        self.state = 1186
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 1187
                        self.match(FandangoParser.DOTDOT)
                        self.state = 1188
                        self.selection()
                        pass

                self.state = 1193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SelectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_selection(self):
            return self.getTypedRuleContext(FandangoParser.Base_selectionContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def rs_slices(self):
            return self.getTypedRuleContext(FandangoParser.Rs_slicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def rs_pairs(self):
            return self.getTypedRuleContext(FandangoParser.Rs_pairsContext, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_selection

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelection"):
                return visitor.visitSelection(self)
            else:
                return visitor.visitChildren(self)

    def selection(self):

        localctx = FandangoParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_selection)
        try:
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.base_selection()
                self.state = 1195
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 1196
                self.rs_slices()
                self.state = 1197
                self.match(FandangoParser.CLOSE_BRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.base_selection()
                self.state = 1200
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 1201
                self.rs_pairs()
                self.state = 1202
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1204
                self.base_selection()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_selectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonterminal(self):
            return self.getTypedRuleContext(FandangoParser.NonterminalContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def dot_selection(self):
            return self.getTypedRuleContext(FandangoParser.Dot_selectionContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_base_selection

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBase_selection"):
                return visitor.visitBase_selection(self)
            else:
                return visitor.visitChildren(self)

    def base_selection(self):

        localctx = FandangoParser.Base_selectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_base_selection)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1207
                self.nonterminal()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1208
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1209
                self.dot_selection(0)
                self.state = 1210
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_pairsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rs_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Rs_pairContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Rs_pairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_pairs

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_pairs"):
                return visitor.visitRs_pairs(self)
            else:
                return visitor.visitChildren(self)

    def rs_pairs(self):

        localctx = FandangoParser.Rs_pairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_rs_pairs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.rs_pair()
            self.state = 1219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 96, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1215
                    self.match(FandangoParser.COMMA)
                    self.state = 1216
                    self.rs_pair()
                self.state = 1221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 96, self._ctx)

            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 1222
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def nonterminal(self):
            return self.getTypedRuleContext(FandangoParser.NonterminalContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def rs_slice(self):
            return self.getTypedRuleContext(FandangoParser.Rs_sliceContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_pair

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_pair"):
                return visitor.visitRs_pair(self)
            else:
                return visitor.visitChildren(self)

    def rs_pair(self):

        localctx = FandangoParser.Rs_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_rs_pair)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(FandangoParser.STAR)
            self.state = 1226
            self.nonterminal()
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 82:
                self.state = 1227
                self.match(FandangoParser.COLON)
                self.state = 1228
                self.rs_slice()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_slicesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rs_slice(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Rs_sliceContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Rs_sliceContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_slices

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_slices"):
                return visitor.visitRs_slices(self)
            else:
                return visitor.visitChildren(self)

    def rs_slices(self):

        localctx = FandangoParser.Rs_slicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_rs_slices)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.rs_slice()
            self.state = 1236
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1232
                    self.match(FandangoParser.COMMA)
                    self.state = 1233
                    self.rs_slice()
                self.state = 1238
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)

            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 1239
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rs_sliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NUMBER)
            else:
                return self.getToken(FandangoParser.NUMBER, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_rs_slice

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRs_slice"):
                return visitor.visitRs_slice(self)
            else:
                return visitor.visitChildren(self)

    def rs_slice(self):

        localctx = FandangoParser.Rs_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_rs_slice)
        self._la = 0  # Token type
        try:
            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1242
                self.match(FandangoParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 8:
                    self.state = 1243
                    self.match(FandangoParser.NUMBER)

                self.state = 1246
                self.match(FandangoParser.COLON)
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 8:
                    self.state = 1247
                    self.match(FandangoParser.NUMBER)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 8:
                    self.state = 1250
                    self.match(FandangoParser.NUMBER)

                self.state = 1253
                self.match(FandangoParser.COLON)
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 8:
                    self.state = 1254
                    self.match(FandangoParser.NUMBER)

                self.state = 1257
                self.match(FandangoParser.COLON)
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 8:
                    self.state = 1258
                    self.match(FandangoParser.NUMBER)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PythonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_python

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython"):
                return visitor.visitPython(self)
            else:
                return visitor.visitChildren(self)

    def python(self):

        localctx = FandangoParser.PythonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_python)
        try:
            self.state = 1265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 21, 28, 31, 36, 45, 47, 49, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1263
                self.compound_stmt()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                14,
                16,
                17,
                20,
                22,
                26,
                29,
                30,
                32,
                35,
                37,
                38,
                39,
                41,
                42,
                43,
                44,
                46,
                50,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1264
                self.simple_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_tagContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(FandangoParser.StmtContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_python_tag

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython_tag"):
                return visitor.visitPython_tag(self)
            else:
                return visitor.visitChildren(self)

    def python_tag(self):

        localctx = FandangoParser.Python_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_python_tag)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 125:
                self.state = 1267
                self.match(FandangoParser.NEWLINE)
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1273
            self.stmt()
            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 125:
                self.state = 1274
                self.match(FandangoParser.NEWLINE)
                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grammar_settingContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grammar_selector(self):
            return self.getTypedRuleContext(FandangoParser.Grammar_selectorContext, 0)

        def grammar_setting_kv_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Grammar_setting_kv_pairContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Grammar_setting_kv_pairContext, i
                )

        def SPACES(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.SPACES)
            else:
                return self.getToken(FandangoParser.SPACES, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_grammar_setting

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGrammar_setting"):
                return visitor.visitGrammar_setting(self)
            else:
                return visitor.visitChildren(self)

    def grammar_setting(self):

        localctx = FandangoParser.Grammar_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_grammar_setting)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.grammar_selector()
            self.state = 1281
            self.grammar_setting_kv_pair()
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 127:
                self.state = 1282
                self.match(FandangoParser.SPACES)
                self.state = 1283
                self.grammar_setting_kv_pair()
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grammar_selectorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonterminal(self):
            return self.getTypedRuleContext(FandangoParser.NonterminalContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_grammar_selector

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGrammar_selector"):
                return visitor.visitGrammar_selector(self)
            else:
                return visitor.visitChildren(self)

    def grammar_selector(self):

        localctx = FandangoParser.Grammar_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_grammar_selector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.nonterminal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grammar_setting_kv_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grammar_setting_key(self):
            return self.getTypedRuleContext(
                FandangoParser.Grammar_setting_keyContext, 0
            )

        def grammar_setting_value(self):
            return self.getTypedRuleContext(
                FandangoParser.Grammar_setting_valueContext, 0
            )

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_grammar_setting_kv_pair

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGrammar_setting_kv_pair"):
                return visitor.visitGrammar_setting_kv_pair(self)
            else:
                return visitor.visitChildren(self)

    def grammar_setting_kv_pair(self):

        localctx = FandangoParser.Grammar_setting_kv_pairContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 78, self.RULE_grammar_setting_kv_pair)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.grammar_setting_key()
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 1292
                self.match(FandangoParser.ASSIGN)

            self.state = 1295
            self.grammar_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grammar_setting_keyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_grammar_setting_key

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGrammar_setting_key"):
                return visitor.visitGrammar_setting_key(self)
            else:
                return visitor.visitChildren(self)

    def grammar_setting_key(self):

        localctx = FandangoParser.Grammar_setting_keyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 80, self.RULE_grammar_setting_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(FandangoParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grammar_setting_valueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_expr(self):
            return self.getTypedRuleContext(FandangoParser.Literal_exprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_grammar_setting_value

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGrammar_setting_value"):
                return visitor.visitGrammar_setting_value(self)
            else:
                return visitor.visitChildren(self)

    def grammar_setting_value(self):

        localctx = FandangoParser.Grammar_setting_valueContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 82, self.RULE_grammar_setting_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.literal_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_fileContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(FandangoParser.StatementsContext, 0)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_python_file

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPython_file"):
                return visitor.visitPython_file(self)
            else:
                return visitor.visitChildren(self)

    def python_file(self):

        localctx = FandangoParser.Python_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_python_file)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 830631530798498296) != 0) or (
                (((_la - 75)) & ~0x3F) == 0
                and ((1 << (_la - 75)) & 1125908589849113) != 0
            ):
                self.state = 1301
                self.statements()

            self.state = 1305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
            if la_ == 1:
                self.state = 1304
                self.match(FandangoParser.EOF)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InteractiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_newline(self):
            return self.getTypedRuleContext(FandangoParser.Statement_newlineContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_interactive

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInteractive"):
                return visitor.visitInteractive(self)
            else:
                return visitor.visitChildren(self)

    def interactive(self):

        localctx = FandangoParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_interactive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.statement_newline()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionsContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_eval

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEval"):
                return visitor.visitEval(self)
            else:
                return visitor.visitChildren(self)

    def eval_(self):

        localctx = FandangoParser.EvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_eval)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.expressions()
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 125:
                self.state = 1310
                self.match(FandangoParser.NEWLINE)
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
            if la_ == 1:
                self.state = 1316
                self.match(FandangoParser.EOF)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def type_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Type_expressionsContext, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_func_type

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_type"):
                return visitor.visitFunc_type(self)
            else:
                return visitor.visitChildren(self)

    def func_type(self):

        localctx = FandangoParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0) or (
                (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
            ):
                self.state = 1320
                self.type_expressions()

            self.state = 1323
            self.match(FandangoParser.CLOSE_PAREN)
            self.state = 1324
            self.match(FandangoParser.ARROW)
            self.state = 1325
            self.expression()
            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 125:
                self.state = 1326
                self.match(FandangoParser.NEWLINE)
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.state = 1332
                self.match(FandangoParser.EOF)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StmtContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_statements

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatements"):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)

    def statements(self):

        localctx = FandangoParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_statements)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1337
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    14,
                    15,
                    16,
                    17,
                    19,
                    20,
                    21,
                    22,
                    26,
                    28,
                    29,
                    30,
                    31,
                    32,
                    35,
                    36,
                    37,
                    38,
                    39,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    49,
                    50,
                    55,
                    56,
                    57,
                    59,
                    75,
                    78,
                    79,
                    84,
                    86,
                    88,
                    93,
                    94,
                    98,
                    99,
                    101,
                    108,
                ]:
                    self.state = 1335
                    self.stmt()
                    pass
                elif token in [125]:
                    self.state = 1336
                    self.match(FandangoParser.NEWLINE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 830631530798498296) != 0)
                    or (
                        (((_la - 75)) & ~0x3F) == 0
                        and ((1 << (_la - 75)) & 1125908589849113) != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStmt"):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)

    def stmt(self):

        localctx = FandangoParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_stmt)
        try:
            self.state = 1343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 21, 28, 31, 36, 45, 47, 49, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1341
                self.compound_stmt()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                14,
                16,
                17,
                20,
                22,
                26,
                29,
                30,
                32,
                35,
                37,
                38,
                39,
                41,
                42,
                43,
                44,
                46,
                50,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1342
                self.simple_stmts()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_newlineContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Compound_stmtContext, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_statement_newline

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement_newline"):
                return visitor.visitStatement_newline(self)
            else:
                return visitor.visitChildren(self)

    def statement_newline(self):

        localctx = FandangoParser.Statement_newlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement_newline)
        try:
            self.state = 1350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 21, 28, 31, 36, 45, 47, 49, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                self.compound_stmt()
                self.state = 1346
                self.match(FandangoParser.NEWLINE)
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                14,
                16,
                17,
                20,
                22,
                26,
                29,
                30,
                32,
                35,
                37,
                38,
                39,
                41,
                42,
                43,
                44,
                46,
                50,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1348
                self.simple_stmts()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1349
                self.match(FandangoParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Simple_stmtContext, i)

        def EOF(self):
            return self.getToken(FandangoParser.EOF, 0)

        def SEMI_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.SEMI_COLON)
            else:
                return self.getToken(FandangoParser.SEMI_COLON, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmts

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_stmts"):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)

    def simple_stmts(self):

        localctx = FandangoParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_simple_stmts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.simple_stmt()
            self.state = 1357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1353
                    self.match(FandangoParser.SEMI_COLON)
                    self.state = 1354
                    self.simple_stmt()
                self.state = 1359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)

            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 83:
                self.state = 1360
                self.match(FandangoParser.SEMI_COLON)

            self.state = 1375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 127, self._ctx)
            if la_ == 1:
                self.state = 1364
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1363
                        self.match(FandangoParser.NEWLINE)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1366
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 125, self._ctx)

                pass

            elif la_ == 2:
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 125:
                    self.state = 1368
                    self.match(FandangoParser.NEWLINE)
                    self.state = 1373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1374
                self.match(FandangoParser.EOF)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(FandangoParser.AssignmentContext, 0)

        def type_alias(self):
            return self.getTypedRuleContext(FandangoParser.Type_aliasContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def return_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Return_stmtContext, 0)

        def import_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Import_stmtContext, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Raise_stmtContext, 0)

        def PASS(self):
            return self.getToken(FandangoParser.PASS, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Del_stmtContext, 0)

        def yield_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Yield_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Assert_stmtContext, 0)

        def BREAK(self):
            return self.getToken(FandangoParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(FandangoParser.CONTINUE, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Global_stmtContext, 0)

        def nonlocal_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Nonlocal_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_simple_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_stmt"):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)

    def simple_stmt(self):

        localctx = FandangoParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_simple_stmt)
        try:
            self.state = 1391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 128, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1377
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.type_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1379
                self.star_expressions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1380
                self.return_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1381
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1382
                self.raise_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1383
                self.match(FandangoParser.PASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1384
                self.del_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1385
                self.yield_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1386
                self.assert_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1387
                self.match(FandangoParser.BREAK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1388
                self.match(FandangoParser.CONTINUE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1389
                self.global_stmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1390
                self.nonlocal_stmt()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def(self):
            return self.getTypedRuleContext(FandangoParser.Function_defContext, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(FandangoParser.If_stmtContext, 0)

        def class_def(self):
            return self.getTypedRuleContext(FandangoParser.Class_defContext, 0)

        def with_stmt(self):
            return self.getTypedRuleContext(FandangoParser.With_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(FandangoParser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Try_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(FandangoParser.While_stmtContext, 0)

        def match_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Match_stmtContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_compound_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompound_stmt"):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)

    def compound_stmt(self):

        localctx = FandangoParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compound_stmt)
        try:
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                self.function_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.if_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1395
                self.class_def()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1396
                self.with_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1397
                self.for_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1398
                self.try_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1399
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1400
                self.match_stmt()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def annotated_rhs(self):
            return self.getTypedRuleContext(FandangoParser.Annotated_rhsContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def single_target(self):
            return self.getTypedRuleContext(FandangoParser.Single_targetContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Single_subscript_attribute_targetContext, 0
            )

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def star_targets(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetsContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetsContext, i)

        def augassign(self):
            return self.getTypedRuleContext(FandangoParser.AugassignContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assignment

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignment"):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)

    def assignment(self):

        localctx = FandangoParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_assignment)
        self._la = 0  # Token type
        try:
            self.state = 1440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 136, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.identifier()
                self.state = 1404
                self.match(FandangoParser.COLON)
                self.state = 1405
                self.expression()
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 1406
                    self.match(FandangoParser.ASSIGN)
                    self.state = 1407
                    self.annotated_rhs()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
                if la_ == 1:
                    self.state = 1410
                    self.match(FandangoParser.OPEN_PAREN)
                    self.state = 1411
                    self.single_target()
                    self.state = 1412
                    self.match(FandangoParser.CLOSE_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 1414
                    self.single_subscript_attribute_target()
                    pass

                self.state = 1417
                self.match(FandangoParser.COLON)
                self.state = 1418
                self.expression()
                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 1419
                    self.match(FandangoParser.ASSIGN)
                    self.state = 1420
                    self.annotated_rhs()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1426
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1423
                        self.star_targets()
                        self.state = 1424
                        self.match(FandangoParser.ASSIGN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1428
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 133, self._ctx)

                self.state = 1432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [50]:
                    self.state = 1430
                    self.yield_expr()
                    pass
                elif token in [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    16,
                    26,
                    35,
                    37,
                    39,
                    44,
                    55,
                    56,
                    57,
                    59,
                    75,
                    78,
                    79,
                    84,
                    86,
                    88,
                    93,
                    94,
                    98,
                    99,
                    101,
                ]:
                    self.state = 1431
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1434
                self.single_target()
                self.state = 1435
                self.augassign()
                self.state = 1438
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [50]:
                    self.state = 1436
                    self.yield_expr()
                    pass
                elif token in [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    16,
                    26,
                    35,
                    37,
                    39,
                    44,
                    55,
                    56,
                    57,
                    59,
                    75,
                    78,
                    79,
                    84,
                    86,
                    88,
                    93,
                    94,
                    98,
                    99,
                    101,
                ]:
                    self.state = 1437
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotated_rhsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_annotated_rhs

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotated_rhs"):
                return visitor.visitAnnotated_rhs(self)
            else:
                return visitor.visitChildren(self)

    def annotated_rhs(self):

        localctx = FandangoParser.Annotated_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_annotated_rhs)
        try:
            self.state = 1444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1442
                self.yield_expr()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                16,
                26,
                35,
                37,
                39,
                44,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1443
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(FandangoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FandangoParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FandangoParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FandangoParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FandangoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FandangoParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FandangoParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FandangoParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FandangoParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FandangoParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FandangoParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_augassign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = FandangoParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            _la = self._input.LA(1)
            if not (
                ((((_la - 110)) & ~0x3F) == 0 and ((1 << (_la - 110)) & 8191) != 0)
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(FandangoParser.RETURN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_return_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturn_stmt"):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)

    def return_stmt(self):

        localctx = FandangoParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_return_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.match(FandangoParser.RETURN)
            self.state = 1450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
            if la_ == 1:
                self.state = 1449
                self.star_expressions()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(FandangoParser.RAISE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_raise_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = FandangoParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_raise_stmt)
        try:
            self.state = 1459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 140, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1452
                self.match(FandangoParser.RAISE)
                self.state = 1453
                self.expression()
                self.state = 1456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
                if la_ == 1:
                    self.state = 1454
                    self.match(FandangoParser.FROM)
                    self.state = 1455
                    self.expression()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.match(FandangoParser.RAISE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(FandangoParser.GLOBAL, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FandangoParser.IdentifierContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_global_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGlobal_stmt"):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def global_stmt(self):

        localctx = FandangoParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_global_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(FandangoParser.GLOBAL)
            self.state = 1462
            self.identifier()
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 81:
                self.state = 1463
                self.match(FandangoParser.COMMA)
                self.state = 1464
                self.identifier()
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(FandangoParser.NONLOCAL, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FandangoParser.IdentifierContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_nonlocal_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonlocal_stmt"):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def nonlocal_stmt(self):

        localctx = FandangoParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nonlocal_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.match(FandangoParser.NONLOCAL)
            self.state = 1471
            self.identifier()
            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 81:
                self.state = 1472
                self.match(FandangoParser.COMMA)
                self.state = 1473
                self.identifier()
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(FandangoParser.DEL, 0)

        def del_targets(self):
            return self.getTypedRuleContext(FandangoParser.Del_targetsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_stmt"):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)

    def del_stmt(self):

        localctx = FandangoParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(FandangoParser.DEL)
            self.state = 1480
            self.del_targets()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_yield_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_stmt"):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)

    def yield_stmt(self):

        localctx = FandangoParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(FandangoParser.ASSERT, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assert_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssert_stmt"):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)

    def assert_stmt(self):

        localctx = FandangoParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_assert_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.match(FandangoParser.ASSERT)
            self.state = 1485
            self.expression()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 1486
                self.match(FandangoParser.COMMA)
                self.state = 1487
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(FandangoParser.Import_nameContext, 0)

        def import_from(self):
            return self.getTypedRuleContext(FandangoParser.Import_fromContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_stmt"):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)

    def import_stmt(self):

        localctx = FandangoParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_import_stmt)
        try:
            self.state = 1492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1490
                self.import_name()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1491
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_as_namesContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_name"):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)

    def import_name(self):

        localctx = FandangoParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.match(FandangoParser.IMPORT)
            self.state = 1495
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def IMPORT(self):
            return self.getToken(FandangoParser.IMPORT, 0)

        def import_from_targets(self):
            return self.getTypedRuleContext(
                FandangoParser.Import_from_targetsContext, 0
            )

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def ELLIPSIS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ELLIPSIS)
            else:
                return self.getToken(FandangoParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from"):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)

    def import_from(self):

        localctx = FandangoParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_import_from)
        self._la = 0  # Token type
        try:
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(FandangoParser.FROM)
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 75 or _la == 77:
                    self.state = 1498
                    _la = self._input.LA(1)
                    if not (_la == 75 or _la == 77):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1504
                self.dotted_name(0)
                self.state = 1505
                self.match(FandangoParser.IMPORT)
                self.state = 1506
                self.import_from_targets()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.match(FandangoParser.FROM)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1509
                    _la = self._input.LA(1)
                    if not (_la == 75 or _la == 77):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 75 or _la == 77):
                        break

                self.state = 1514
                self.match(FandangoParser.IMPORT)
                self.state = 1515
                self.import_from_targets()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_from_targetsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def import_from_as_names(self):
            return self.getTypedRuleContext(
                FandangoParser.Import_from_as_namesContext, 0
            )

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from_targets

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from_targets"):
                return visitor.visitImport_from_targets(self)
            else:
                return visitor.visitChildren(self)

    def import_from_targets(self):

        localctx = FandangoParser.Import_from_targetsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 130, self.RULE_import_from_targets)
        self._la = 0  # Token type
        try:
            self.state = 1527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1519
                self.import_from_as_names()
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 1520
                    self.match(FandangoParser.COMMA)

                self.state = 1523
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [55, 56, 57, 59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1525
                self.import_from_as_names()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1526
                self.match(FandangoParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_from_as_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_from_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Import_from_as_nameContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Import_from_as_nameContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from_as_names

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from_as_names"):
                return visitor.visitImport_from_as_names(self)
            else:
                return visitor.visitChildren(self)

    def import_from_as_names(self):

        localctx = FandangoParser.Import_from_as_namesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 132, self.RULE_import_from_as_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.import_from_as_name()
            self.state = 1534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 150, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1530
                    self.match(FandangoParser.COMMA)
                    self.state = 1531
                    self.import_from_as_name()
                self.state = 1536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 150, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_from_as_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FandangoParser.IdentifierContext, i)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_import_from_as_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from_as_name"):
                return visitor.visitImport_from_as_name(self)
            else:
                return visitor.visitChildren(self)

    def import_from_as_name(self):

        localctx = FandangoParser.Import_from_as_nameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 134, self.RULE_import_from_as_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.identifier()
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 13:
                self.state = 1538
                self.match(FandangoParser.AS)
                self.state = 1539
                self.identifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Dotted_as_nameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_names

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_names"):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_names(self):

        localctx = FandangoParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dotted_as_names)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.dotted_as_name()
            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 81:
                self.state = 1543
                self.match(FandangoParser.COMMA)
                self.state = 1544
                self.dotted_as_name()
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_as_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_name"):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_name(self):

        localctx = FandangoParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dotted_as_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.dotted_name(0)
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 13:
                self.state = 1551
                self.match(FandangoParser.AS)
                self.state = 1552
                self.identifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FandangoParser.Dotted_nameContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dotted_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_name"):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_name(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Dotted_nameContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_dotted_name
                    )
                    self.state = 1558
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1559
                    self.match(FandangoParser.DOT)
                    self.state = 1560
                    self.identifier()
                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(FandangoParser.INDENT, 0)

        def statements(self):
            return self.getTypedRuleContext(FandangoParser.StatementsContext, 0)

        def DEDENT(self):
            return self.getToken(FandangoParser.DEDENT, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(FandangoParser.Simple_stmtsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_block

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlock"):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)

    def block(self):

        localctx = FandangoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_block)
        try:
            self.state = 1572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1566
                self.match(FandangoParser.NEWLINE)
                self.state = 1567
                self.match(FandangoParser.INDENT)
                self.state = 1568
                self.statements()
                self.state = 1569
                self.match(FandangoParser.DEDENT)
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                14,
                16,
                17,
                20,
                22,
                26,
                29,
                30,
                32,
                35,
                37,
                38,
                39,
                41,
                42,
                43,
                44,
                46,
                50,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1571
                self.simple_stmts()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AT)
            else:
                return self.getToken(FandangoParser.AT, i)

        def named_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Named_expressionContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Named_expressionContext, i
                )

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NEWLINE)
            else:
                return self.getToken(FandangoParser.NEWLINE, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_decorators

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorators"):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)

    def decorators(self):

        localctx = FandangoParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_decorators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1574
                self.match(FandangoParser.AT)
                self.state = 1575
                self.named_expression()
                self.state = 1576
                self.match(FandangoParser.NEWLINE)
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 108):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_defContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_def_raw(self):
            return self.getTypedRuleContext(FandangoParser.Class_def_rawContext, 0)

        def decorators(self):
            return self.getTypedRuleContext(FandangoParser.DecoratorsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_class_def

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClass_def"):
                return visitor.visitClass_def(self)
            else:
                return visitor.visitChildren(self)

    def class_def(self):

        localctx = FandangoParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_class_def)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 108:
                self.state = 1582
                self.decorators()

            self.state = 1585
            self.class_def_raw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_def_rawContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FandangoParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def type_params(self):
            return self.getTypedRuleContext(FandangoParser.Type_paramsContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_class_def_raw

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClass_def_raw"):
                return visitor.visitClass_def_raw(self)
            else:
                return visitor.visitChildren(self)

    def class_def_raw(self):

        localctx = FandangoParser.Class_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_class_def_raw)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.match(FandangoParser.CLASS)
            self.state = 1588
            self.identifier()
            self.state = 1590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 1589
                self.type_params()

            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 79:
                self.state = 1592
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
                ):
                    self.state = 1593
                    self.arguments()

                self.state = 1596
                self.match(FandangoParser.CLOSE_PAREN)

            self.state = 1599
            self.match(FandangoParser.COLON)
            self.state = 1600
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_defContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def_raw(self):
            return self.getTypedRuleContext(FandangoParser.Function_def_rawContext, 0)

        def decorators(self):
            return self.getTypedRuleContext(FandangoParser.DecoratorsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_function_def

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunction_def"):
                return visitor.visitFunction_def(self)
            else:
                return visitor.visitChildren(self)

    def function_def(self):

        localctx = FandangoParser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_function_def)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 108:
                self.state = 1602
                self.decorators()

            self.state = 1605
            self.function_def_raw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_def_rawContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FandangoParser.DEF, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def type_params(self):
            return self.getTypedRuleContext(FandangoParser.Type_paramsContext, 0)

        def params(self):
            return self.getTypedRuleContext(FandangoParser.ParamsContext, 0)

        def ARROW(self):
            return self.getToken(FandangoParser.ARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def func_type_comment(self):
            return self.getTypedRuleContext(FandangoParser.Func_type_commentContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_function_def_raw

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunction_def_raw"):
                return visitor.visitFunction_def_raw(self)
            else:
                return visitor.visitChildren(self)

    def function_def_raw(self):

        localctx = FandangoParser.Function_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_function_def_raw)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 15:
                self.state = 1607
                self.match(FandangoParser.ASYNC)

            self.state = 1610
            self.match(FandangoParser.DEF)
            self.state = 1611
            self.identifier()
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 1612
                self.type_params()

            self.state = 1615
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 55)) & ~0x3F) == 0 and ((1 << (_la - 55)) & 545259543) != 0:
                self.state = 1616
                self.params()

            self.state = 1619
            self.match(FandangoParser.CLOSE_PAREN)
            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 109:
                self.state = 1620
                self.match(FandangoParser.ARROW)
                self.state = 1621
                self.expression()

            self.state = 1624
            self.match(FandangoParser.COLON)
            self.state = 1626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
            if la_ == 1:
                self.state = 1625
                self.func_type_comment()

            self.state = 1628
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(FandangoParser.ParametersContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_params

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParams"):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)

    def params(self):

        localctx = FandangoParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slash_no_default(self):
            return self.getTypedRuleContext(FandangoParser.Slash_no_defaultContext, 0)

        def param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_no_defaultContext, i
                )

        def param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_with_defaultContext, i
                )

        def star_etc(self):
            return self.getTypedRuleContext(FandangoParser.Star_etcContext, 0)

        def slash_with_default(self):
            return self.getTypedRuleContext(FandangoParser.Slash_with_defaultContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_parameters

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)

    def parameters(self):

        localctx = FandangoParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_parameters)
        self._la = 0  # Token type
        try:
            self.state = 1681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1632
                self.slash_no_default()
                self.state = 1636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1633
                        self.param_no_default()
                    self.state = 1638
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)

                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 1639
                    self.param_with_default()
                    self.state = 1644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 1645
                    self.star_etc()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                self.slash_with_default()
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 1649
                    self.param_with_default()
                    self.state = 1654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 1655
                    self.star_etc()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1659
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1658
                        self.param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1661
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 172, self._ctx)

                self.state = 1666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 1663
                    self.param_with_default()
                    self.state = 1668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 1669
                    self.star_etc()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1672
                    self.param_with_default()
                    self.state = 1675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (
                        (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 828662331436171264) != 0
                        )
                    ):
                        break

                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 1677
                    self.star_etc()

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1680
                self.star_etc()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slash_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_no_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_slash_no_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlash_no_default"):
                return visitor.visitSlash_no_default(self)
            else:
                return visitor.visitChildren(self)

    def slash_no_default(self):

        localctx = FandangoParser.Slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_slash_no_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1683
                self.param_no_default()
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0)
                ):
                    break

            self.state = 1688
            self.match(FandangoParser.DIV)
            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 1689
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slash_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_no_defaultContext, i
                )

        def param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_with_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_slash_with_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlash_with_default"):
                return visitor.visitSlash_with_default(self)
            else:
                return visitor.visitChildren(self)

    def slash_with_default(self):

        localctx = FandangoParser.Slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_slash_with_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1692
                    self.param_no_default()
                self.state = 1697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)

            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1698
                self.param_with_default()
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0)
                ):
                    break

            self.state = 1703
            self.match(FandangoParser.DIV)
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 1704
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_etcContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(FandangoParser.Param_no_defaultContext, 0)

        def param_maybe_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Param_maybe_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Param_maybe_defaultContext, i
                )

        def kwds(self):
            return self.getTypedRuleContext(FandangoParser.KwdsContext, 0)

        def param_no_default_star_annotation(self):
            return self.getTypedRuleContext(
                FandangoParser.Param_no_default_star_annotationContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_etc

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_etc"):
                return visitor.visitStar_etc(self)
            else:
                return visitor.visitChildren(self)

    def star_etc(self):

        localctx = FandangoParser.Star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_star_etc)
        self._la = 0  # Token type
        try:
            self.state = 1740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1707
                self.match(FandangoParser.STAR)
                self.state = 1708
                self.param_no_default()
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 1709
                    self.param_maybe_default()
                    self.state = 1714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 84:
                    self.state = 1715
                    self.kwds()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1718
                self.match(FandangoParser.STAR)
                self.state = 1719
                self.param_no_default_star_annotation()
                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 1720
                    self.param_maybe_default()
                    self.state = 1725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 84:
                    self.state = 1726
                    self.kwds()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1729
                self.match(FandangoParser.STAR)
                self.state = 1730
                self.match(FandangoParser.COMMA)
                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1731
                    self.param_maybe_default()
                    self.state = 1734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (
                        (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 828662331436171264) != 0
                        )
                    ):
                        break

                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 84:
                    self.state = 1736
                    self.kwds()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1739
                self.kwds()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KwdsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(FandangoParser.Param_no_defaultContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kwds

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwds"):
                return visitor.visitKwds(self)
            else:
                return visitor.visitChildren(self)

    def kwds(self):

        localctx = FandangoParser.KwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self.match(FandangoParser.POWER)
            self.state = 1743
            self.param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(FandangoParser.ParamContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_no_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_no_default"):
                return visitor.visitParam_no_default(self)
            else:
                return visitor.visitChildren(self)

    def param_no_default(self):

        localctx = FandangoParser.Param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_param_no_default)
        try:
            self.state = 1749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1745
                self.param()
                self.state = 1746
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1748
                self.param()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_no_default_star_annotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_star_annotation(self):
            return self.getTypedRuleContext(
                FandangoParser.Param_star_annotationContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_no_default_star_annotation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_no_default_star_annotation"):
                return visitor.visitParam_no_default_star_annotation(self)
            else:
                return visitor.visitChildren(self)

    def param_no_default_star_annotation(self):

        localctx = FandangoParser.Param_no_default_star_annotationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 168, self.RULE_param_no_default_star_annotation)
        try:
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1751
                self.param_star_annotation()
                self.state = 1752
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1754
                self.param_star_annotation()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(FandangoParser.ParamContext, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_with_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_with_default"):
                return visitor.visitParam_with_default(self)
            else:
                return visitor.visitChildren(self)

    def param_with_default(self):

        localctx = FandangoParser.Param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_param_with_default)
        try:
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 192, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1757
                self.param()
                self.state = 1758
                self.default()
                self.state = 1759
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1761
                self.param()
                self.state = 1762
                self.default()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_maybe_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(FandangoParser.ParamContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_maybe_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_maybe_default"):
                return visitor.visitParam_maybe_default(self)
            else:
                return visitor.visitChildren(self)

    def param_maybe_default(self):

        localctx = FandangoParser.Param_maybe_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 172, self.RULE_param_maybe_default)
        self._la = 0  # Token type
        try:
            self.state = 1776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 195, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.param()
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 1767
                    self.default()

                self.state = 1770
                self.match(FandangoParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1772
                self.param()
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 1773
                    self.default()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def annotation(self):
            return self.getTypedRuleContext(FandangoParser.AnnotationContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam"):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)

    def param(self):

        localctx = FandangoParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_param)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.identifier()
            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 82:
                self.state = 1779
                self.annotation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_star_annotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def star_annotation(self):
            return self.getTypedRuleContext(FandangoParser.Star_annotationContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_param_star_annotation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParam_star_annotation"):
                return visitor.visitParam_star_annotation(self)
            else:
                return visitor.visitChildren(self)

    def param_star_annotation(self):

        localctx = FandangoParser.Param_star_annotationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 176, self.RULE_param_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1782
            self.identifier()
            self.state = 1783
            self.star_annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_annotation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotation"):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)

    def annotation(self):

        localctx = FandangoParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self.match(FandangoParser.COLON)
            self.state = 1786
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_annotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def star_expression(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_annotation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_annotation"):
                return visitor.visitStar_annotation(self)
            else:
                return visitor.visitChildren(self)

    def star_annotation(self):

        localctx = FandangoParser.Star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.match(FandangoParser.COLON)
            self.state = 1789
            self.star_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefault"):
                return visitor.visitDefault(self)
            else:
                return visitor.visitChildren(self)

    def default(self):

        localctx = FandangoParser.DefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.match(FandangoParser.ASSIGN)
            self.state = 1792
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def elif_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Elif_stmtContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_if_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = FandangoParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_if_stmt)
        self._la = 0  # Token type
        try:
            self.state = 1807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 198, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.match(FandangoParser.IF)
                self.state = 1795
                self.named_expression()
                self.state = 1796
                self.match(FandangoParser.COLON)
                self.state = 1797
                self.block()
                self.state = 1798
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1800
                self.match(FandangoParser.IF)
                self.state = 1801
                self.named_expression()
                self.state = 1802
                self.match(FandangoParser.COLON)
                self.state = 1803
                self.block()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 1804
                    self.else_block()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FandangoParser.ELIF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def elif_stmt(self):
            return self.getTypedRuleContext(FandangoParser.Elif_stmtContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_elif_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElif_stmt"):
                return visitor.visitElif_stmt(self)
            else:
                return visitor.visitChildren(self)

    def elif_stmt(self):

        localctx = FandangoParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_elif_stmt)
        self._la = 0  # Token type
        try:
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 200, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1809
                self.match(FandangoParser.ELIF)
                self.state = 1810
                self.named_expression()
                self.state = 1811
                self.match(FandangoParser.COLON)
                self.state = 1812
                self.block()
                self.state = 1813
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1815
                self.match(FandangoParser.ELIF)
                self.state = 1816
                self.named_expression()
                self.state = 1817
                self.match(FandangoParser.COLON)
                self.state = 1818
                self.block()
                self.state = 1820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 1819
                    self.else_block()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_else_block

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_block"):
                return visitor.visitElse_block(self)
            else:
                return visitor.visitChildren(self)

    def else_block(self):

        localctx = FandangoParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_else_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(FandangoParser.ELSE)
            self.state = 1825
            self.match(FandangoParser.COLON)
            self.state = 1826
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(FandangoParser.WHILE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_while_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = FandangoParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_while_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.match(FandangoParser.WHILE)
            self.state = 1829
            self.named_expression()
            self.state = 1830
            self.match(FandangoParser.COLON)
            self.state = 1831
            self.block()
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 24:
                self.state = 1832
                self.else_block()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetsContext, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = FandangoParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.state = 1854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1835
                self.match(FandangoParser.FOR)
                self.state = 1836
                self.star_targets()
                self.state = 1837
                self.match(FandangoParser.IN)
                self.state = 1838
                self.star_expressions()
                self.state = 1839
                self.match(FandangoParser.COLON)
                self.state = 1840
                self.block()
                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 1841
                    self.else_block()

                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1844
                self.match(FandangoParser.ASYNC)
                self.state = 1845
                self.match(FandangoParser.FOR)
                self.state = 1846
                self.star_targets()
                self.state = 1847
                self.match(FandangoParser.IN)
                self.state = 1848
                self.star_expressions()
                self.state = 1849
                self.match(FandangoParser.COLON)
                self.state = 1850
                self.block()
                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 1851
                    self.else_block()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FandangoParser.WITH, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def with_item(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FandangoParser.With_itemContext, i)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_with_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_stmt"):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)

    def with_stmt(self):

        localctx = FandangoParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_with_stmt)
        self._la = 0  # Token type
        try:
            self.state = 1916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self.match(FandangoParser.WITH)
                self.state = 1857
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1858
                self.with_item()
                self.state = 1863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 205, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1859
                        self.match(FandangoParser.COMMA)
                        self.state = 1860
                        self.with_item()
                    self.state = 1865
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 205, self._ctx)

                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 1866
                    self.match(FandangoParser.COMMA)

                self.state = 1869
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 1870
                self.match(FandangoParser.COLON)
                self.state = 1871
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1873
                self.match(FandangoParser.WITH)
                self.state = 1874
                self.with_item()
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 81:
                    self.state = 1875
                    self.match(FandangoParser.COMMA)
                    self.state = 1876
                    self.with_item()
                    self.state = 1881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1882
                self.match(FandangoParser.COLON)
                self.state = 1883
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1885
                self.match(FandangoParser.ASYNC)
                self.state = 1886
                self.match(FandangoParser.WITH)
                self.state = 1887
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 1888
                self.with_item()
                self.state = 1893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1889
                        self.match(FandangoParser.COMMA)
                        self.state = 1890
                        self.with_item()
                    self.state = 1895
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)

                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 1896
                    self.match(FandangoParser.COMMA)

                self.state = 1899
                self.match(FandangoParser.CLOSE_PAREN)
                self.state = 1900
                self.match(FandangoParser.COLON)
                self.state = 1901
                self.block()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1903
                self.match(FandangoParser.ASYNC)
                self.state = 1904
                self.match(FandangoParser.WITH)
                self.state = 1905
                self.with_item()
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 81:
                    self.state = 1906
                    self.match(FandangoParser.COMMA)
                    self.state = 1907
                    self.with_item()
                    self.state = 1912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1913
                self.match(FandangoParser.COLON)
                self.state = 1914
                self.block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def star_target(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_with_item

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_item"):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)

    def with_item(self):

        localctx = FandangoParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_with_item)
        try:
            self.state = 1923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1918
                self.expression()
                self.state = 1919
                self.match(FandangoParser.AS)
                self.state = 1920
                self.star_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1922
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(FandangoParser.TRY, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def finally_block(self):
            return self.getTypedRuleContext(FandangoParser.Finally_blockContext, 0)

        def except_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Except_blockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Except_blockContext, i)

        def else_block(self):
            return self.getTypedRuleContext(FandangoParser.Else_blockContext, 0)

        def except_star_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Except_star_blockContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Except_star_blockContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_try_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = FandangoParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_try_stmt)
        self._la = 0  # Token type
        try:
            self.state = 1958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.match(FandangoParser.TRY)
                self.state = 1926
                self.match(FandangoParser.COLON)
                self.state = 1927
                self.block()
                self.state = 1928
                self.finally_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1930
                self.match(FandangoParser.TRY)
                self.state = 1931
                self.match(FandangoParser.COLON)
                self.state = 1932
                self.block()
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1933
                    self.except_block()
                    self.state = 1936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 25):
                        break

                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 1938
                    self.else_block()

                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 27:
                    self.state = 1941
                    self.finally_block()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1944
                self.match(FandangoParser.TRY)
                self.state = 1945
                self.match(FandangoParser.COLON)
                self.state = 1946
                self.block()
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1947
                    self.except_star_block()
                    self.state = 1950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 25):
                        break

                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 1952
                    self.else_block()

                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 27:
                    self.state = 1955
                    self.finally_block()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FandangoParser.EXCEPT, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_except_block

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_block"):
                return visitor.visitExcept_block(self)
            else:
                return visitor.visitChildren(self)

    def except_block(self):

        localctx = FandangoParser.Except_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_except_block)
        self._la = 0  # Token type
        try:
            self.state = 1972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1960
                self.match(FandangoParser.EXCEPT)
                self.state = 1961
                self.expression()
                self.state = 1964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 13:
                    self.state = 1962
                    self.match(FandangoParser.AS)
                    self.state = 1963
                    self.identifier()

                self.state = 1966
                self.match(FandangoParser.COLON)
                self.state = 1967
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1969
                self.match(FandangoParser.EXCEPT)
                self.state = 1970
                self.match(FandangoParser.COLON)
                self.state = 1971
                self.block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_star_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FandangoParser.EXCEPT, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_except_star_block

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_star_block"):
                return visitor.visitExcept_star_block(self)
            else:
                return visitor.visitChildren(self)

    def except_star_block(self):

        localctx = FandangoParser.Except_star_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_except_star_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(FandangoParser.EXCEPT)
            self.state = 1975
            self.match(FandangoParser.STAR)
            self.state = 1976
            self.expression()
            self.state = 1979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 13:
                self.state = 1977
                self.match(FandangoParser.AS)
                self.state = 1978
                self.identifier()

            self.state = 1981
            self.match(FandangoParser.COLON)
            self.state = 1982
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Finally_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FandangoParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_finally_block

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFinally_block"):
                return visitor.visitFinally_block(self)
            else:
                return visitor.visitChildren(self)

    def finally_block(self):

        localctx = FandangoParser.Finally_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_finally_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(FandangoParser.FINALLY)
            self.state = 1985
            self.match(FandangoParser.COLON)
            self.state = 1986
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(FandangoParser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(FandangoParser.Subject_exprContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(FandangoParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FandangoParser.DEDENT, 0)

        def case_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Case_blockContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_match_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMatch_stmt"):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)

    def match_stmt(self):

        localctx = FandangoParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_match_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self.match(FandangoParser.MATCH)
            self.state = 1989
            self.subject_expr()
            self.state = 1990
            self.match(FandangoParser.COLON)
            self.state = 1991
            self.match(FandangoParser.NEWLINE)
            self.state = 1992
            self.match(FandangoParser.INDENT)
            self.state = 1994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1993
                self.case_block()
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 18):
                    break

            self.state = 1998
            self.match(FandangoParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subject_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_subject_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubject_expr"):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)

    def subject_expr(self):

        localctx = FandangoParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_subject_expr)
        self._la = 0  # Token type
        try:
            self.state = 2006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 225, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2000
                self.star_named_expression()
                self.state = 2001
                self.match(FandangoParser.COMMA)
                self.state = 2003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
                ):
                    self.state = 2002
                    self.star_named_expressions()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2005
                self.named_expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(FandangoParser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(FandangoParser.PatternsContext, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(FandangoParser.BlockContext, 0)

        def guard(self):
            return self.getTypedRuleContext(FandangoParser.GuardContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_case_block

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCase_block"):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)

    def case_block(self):

        localctx = FandangoParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_case_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(FandangoParser.CASE)
            self.state = 2009
            self.patterns()
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 31:
                self.state = 2010
                self.guard()

            self.state = 2013
            self.match(FandangoParser.COLON)
            self.state = 2014
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_guard

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGuard"):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)

    def guard(self):

        localctx = FandangoParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.match(FandangoParser.IF)
            self.state = 2017
            self.named_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Open_sequence_patternContext, 0
            )

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_patterns

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPatterns"):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)

    def patterns(self):

        localctx = FandangoParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_patterns)
        try:
            self.state = 2021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2019
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2020
                self.pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(FandangoParser.As_patternContext, 0)

        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPattern"):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)

    def pattern(self):

        localctx = FandangoParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_pattern)
        try:
            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2023
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2024
                self.or_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Or_patternContext, 0)

        def AS(self):
            return self.getToken(FandangoParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_as_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAs_pattern"):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)

    def as_pattern(self):

        localctx = FandangoParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.or_pattern()
            self.state = 2028
            self.match(FandangoParser.AS)
            self.state = 2029
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Closed_patternContext, i)

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_or_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_pattern"):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)

    def or_pattern(self):

        localctx = FandangoParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_or_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self.closed_pattern()
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 88:
                self.state = 2032
                self.match(FandangoParser.OR_OP)
                self.state = 2033
                self.closed_pattern()
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closed_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Literal_patternContext, 0)

        def capture_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Capture_patternContext, 0)

        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext, 0)

        def value_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Value_patternContext, 0)

        def group_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Group_patternContext, 0)

        def sequence_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Sequence_patternContext, 0)

        def mapping_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Mapping_patternContext, 0)

        def class_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Class_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_closed_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosed_pattern"):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)

    def closed_pattern(self):

        localctx = FandangoParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_closed_pattern)
        try:
            self.state = 2047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2039
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2040
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2041
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2042
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2043
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2044
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2045
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2046
                self.class_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext, 0)

        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral_pattern"):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)

    def literal_pattern(self):

        localctx = FandangoParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_literal_pattern)
        try:
            self.state = 2055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2049
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2050
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2051
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2052
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2053
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2054
                self.match(FandangoParser.FALSE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_numberContext, 0)

        def complex_number(self):
            return self.getTypedRuleContext(FandangoParser.Complex_numberContext, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_literal_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral_expr"):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)

    def literal_expr(self):

        localctx = FandangoParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_literal_expr)
        try:
            self.state = 2063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 232, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2057
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2059
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2060
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2061
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2062
                self.match(FandangoParser.FALSE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Complex_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(FandangoParser.Signed_real_numberContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(FandangoParser.Imaginary_numberContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_complex_number

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComplex_number"):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)

    def complex_number(self):

        localctx = FandangoParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_complex_number)
        try:
            self.state = 2073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2065
                self.signed_real_number()
                self.state = 2066
                self.match(FandangoParser.ADD)
                self.state = 2067
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2069
                self.signed_real_number()
                self.state = 2070
                self.match(FandangoParser.MINUS)
                self.state = 2071
                self.imaginary_number()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_number

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_number"):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)

    def signed_number(self):

        localctx = FandangoParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_signed_number)
        try:
            self.state = 2078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2075
                self.match(FandangoParser.NUMBER)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2076
                self.match(FandangoParser.MINUS)
                self.state = 2077
                self.match(FandangoParser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(FandangoParser.Real_numberContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_signed_real_number

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_real_number"):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)

    def signed_real_number(self):

        localctx = FandangoParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_signed_real_number)
        try:
            self.state = 2083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2080
                self.real_number()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2081
                self.match(FandangoParser.MINUS)
                self.state = 2082
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Real_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_real_number

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReal_number"):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)

    def real_number(self):

        localctx = FandangoParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_imaginary_number

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImaginary_number"):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)

    def imaginary_number(self):

        localctx = FandangoParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.match(FandangoParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Capture_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_capture_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCapture_pattern"):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)

    def capture_pattern(self):

        localctx = FandangoParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_pattern_capture_target

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPattern_capture_target"):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)

    def pattern_capture_target(self):

        localctx = FandangoParser.Pattern_capture_targetContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 240, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(FandangoParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_wildcard_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWildcard_pattern"):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)

    def wildcard_pattern(self):

        localctx = FandangoParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2093
            self.match(FandangoParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_value_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValue_pattern"):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)

    def value_pattern(self):

        localctx = FandangoParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_attr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAttr"):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)

    def attr(self):

        localctx = FandangoParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            self.name_or_attr(0)
            self.state = 2098
            self.match(FandangoParser.DOT)
            self.state = 2099
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_or_attrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_name_or_attr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitName_or_attr"):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)

    def name_or_attr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Name_or_attrContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 248
        self.enterRecursionRule(localctx, 248, self.RULE_name_or_attr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 236, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Name_or_attrContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_name_or_attr
                    )
                    self.state = 2104
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 2105
                    self.match(FandangoParser.DOT)
                    self.state = 2106
                    self.identifier()
                self.state = 2111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 236, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Group_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_group_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroup_pattern"):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)

    def group_pattern(self):

        localctx = FandangoParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 2113
            self.pattern()
            self.state = 2114
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Maybe_sequence_patternContext, 0
            )

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Open_sequence_patternContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_sequence_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSequence_pattern"):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def sequence_pattern(self):

        localctx = FandangoParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.state = 2126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2116
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 2118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680061128278520) != 0
                ) or (
                    (((_la - 78)) & ~0x3F) == 0
                    and ((1 << (_la - 78)) & 1125899909005571) != 0
                ):
                    self.state = 2117
                    self.maybe_sequence_pattern()

                self.state = 2120
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2121
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680061128278520) != 0
                ) or (
                    (((_la - 78)) & ~0x3F) == 0
                    and ((1 << (_la - 78)) & 1125899909005571) != 0
                ):
                    self.state = 2122
                    self.open_sequence_pattern()

                self.state = 2125
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Maybe_star_patternContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Maybe_sequence_patternContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_open_sequence_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpen_sequence_pattern"):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def open_sequence_pattern(self):

        localctx = FandangoParser.Open_sequence_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 254, self.RULE_open_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self.maybe_star_pattern()
            self.state = 2129
            self.match(FandangoParser.COMMA)
            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 828680061128278520) != 0) or (
                (((_la - 78)) & ~0x3F) == 0
                and ((1 << (_la - 78)) & 1125899909005571) != 0
            ):
                self.state = 2130
                self.maybe_sequence_pattern()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Maybe_star_patternContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Maybe_star_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_sequence_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaybe_sequence_pattern"):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)

    def maybe_sequence_pattern(self):

        localctx = FandangoParser.Maybe_sequence_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 256, self.RULE_maybe_sequence_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            self.maybe_star_pattern()
            self.state = 2138
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 241, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2134
                    self.match(FandangoParser.COMMA)
                    self.state = 2135
                    self.maybe_star_pattern()
                self.state = 2140
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 241, self._ctx)

            self.state = 2142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2141
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Star_patternContext, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_maybe_star_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaybe_star_pattern"):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)

    def maybe_star_pattern(self):

        localctx = FandangoParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_maybe_star_pattern)
        try:
            self.state = 2146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2144
                self.star_pattern()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                26,
                37,
                44,
                55,
                56,
                57,
                59,
                79,
                86,
                94,
                99,
                128,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2145
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def wildcard_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Wildcard_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_pattern"):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)

    def star_pattern(self):

        localctx = FandangoParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_star_pattern)
        try:
            self.state = 2152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 244, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2148
                self.match(FandangoParser.STAR)
                self.state = 2149
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2150
                self.match(FandangoParser.STAR)
                self.state = 2151
                self.wildcard_pattern()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mapping_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(
                FandangoParser.Double_star_patternContext, 0
            )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(FandangoParser.Items_patternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_mapping_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMapping_pattern"):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)

    def mapping_pattern(self):

        localctx = FandangoParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_mapping_pattern)
        self._la = 0  # Token type
        try:
            self.state = 2179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2154
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 2155
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2156
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 2157
                self.double_star_pattern()
                self.state = 2159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 2158
                    self.match(FandangoParser.COMMA)

                self.state = 2161
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2163
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 2164
                self.items_pattern()
                self.state = 2165
                self.match(FandangoParser.COMMA)
                self.state = 2166
                self.double_star_pattern()
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 2167
                    self.match(FandangoParser.COMMA)

                self.state = 2170
                self.match(FandangoParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2172
                self.match(FandangoParser.OPEN_BRACE)
                self.state = 2173
                self.items_pattern()
                self.state = 2175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 2174
                    self.match(FandangoParser.COMMA)

                self.state = 2177
                self.match(FandangoParser.CLOSE_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Items_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Key_value_patternContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Key_value_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_items_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitItems_pattern"):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)

    def items_pattern(self):

        localctx = FandangoParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.key_value_pattern()
            self.state = 2186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 249, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2182
                    self.match(FandangoParser.COMMA)
                    self.state = 2183
                    self.key_value_pattern()
                self.state = 2188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 249, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_value_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def literal_expr(self):
            return self.getTypedRuleContext(FandangoParser.Literal_exprContext, 0)

        def attr(self):
            return self.getTypedRuleContext(FandangoParser.AttrContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_key_value_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKey_value_pattern"):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)

    def key_value_pattern(self):

        localctx = FandangoParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 26, 37, 44, 94]:
                self.state = 2189
                self.literal_expr()
                pass
            elif token in [55, 56, 57, 59]:
                self.state = 2190
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2193
            self.match(FandangoParser.COLON)
            self.state = 2194
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_star_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Pattern_capture_targetContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_double_star_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDouble_star_pattern"):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)

    def double_star_pattern(self):

        localctx = FandangoParser.Double_star_patternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 268, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2196
            self.match(FandangoParser.POWER)
            self.state = 2197
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(FandangoParser.Name_or_attrContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(
                FandangoParser.Positional_patternsContext, 0
            )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(FandangoParser.Keyword_patternsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_class_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClass_pattern"):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)

    def class_pattern(self):

        localctx = FandangoParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_class_pattern)
        self._la = 0  # Token type
        try:
            self.state = 2229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 254, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2199
                self.name_or_attr(0)
                self.state = 2200
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2201
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2203
                self.name_or_attr(0)
                self.state = 2204
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2205
                self.positional_patterns()
                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 2206
                    self.match(FandangoParser.COMMA)

                self.state = 2209
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2211
                self.name_or_attr(0)
                self.state = 2212
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2213
                self.keyword_patterns()
                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 2214
                    self.match(FandangoParser.COMMA)

                self.state = 2217
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2219
                self.name_or_attr(0)
                self.state = 2220
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 2221
                self.positional_patterns()
                self.state = 2222
                self.match(FandangoParser.COMMA)
                self.state = 2223
                self.keyword_patterns()
                self.state = 2225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 2224
                    self.match(FandangoParser.COMMA)

                self.state = 2227
                self.match(FandangoParser.CLOSE_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_patternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.PatternContext)
            else:
                return self.getTypedRuleContext(FandangoParser.PatternContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_positional_patterns

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPositional_patterns"):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)

    def positional_patterns(self):

        localctx = FandangoParser.Positional_patternsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 272, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.pattern()
            self.state = 2236
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 255, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2232
                    self.match(FandangoParser.COMMA)
                    self.state = 2233
                    self.pattern()
                self.state = 2238
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 255, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Keyword_patternContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_patterns

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword_patterns"):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)

    def keyword_patterns(self):

        localctx = FandangoParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.keyword_pattern()
            self.state = 2244
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 256, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2240
                    self.match(FandangoParser.COMMA)
                    self.state = 2241
                    self.keyword_pattern()
                self.state = 2246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 256, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(FandangoParser.PatternContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_keyword_pattern

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword_pattern"):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)

    def keyword_pattern(self):

        localctx = FandangoParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.identifier()
            self.state = 2248
            self.match(FandangoParser.ASSIGN)
            self.state = 2249
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_aliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(FandangoParser.TYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def type_params(self):
            return self.getTypedRuleContext(FandangoParser.Type_paramsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_alias

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_alias"):
                return visitor.visitType_alias(self)
            else:
                return visitor.visitChildren(self)

    def type_alias(self):

        localctx = FandangoParser.Type_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_type_alias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self.match(FandangoParser.TYPE)
            self.state = 2252
            self.identifier()
            self.state = 2254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 2253
                self.type_params()

            self.state = 2256
            self.match(FandangoParser.ASSIGN)
            self.state = 2257
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_paramsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def type_param_seq(self):
            return self.getTypedRuleContext(FandangoParser.Type_param_seqContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_params

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_params"):
                return visitor.visitType_params(self)
            else:
                return visitor.visitChildren(self)

    def type_params(self):

        localctx = FandangoParser.Type_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_type_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 2260
            self.type_param_seq()
            self.state = 2261
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_param_seqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_param(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Type_paramContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Type_paramContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_param_seq

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_param_seq"):
                return visitor.visitType_param_seq(self)
            else:
                return visitor.visitChildren(self)

    def type_param_seq(self):

        localctx = FandangoParser.Type_param_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_type_param_seq)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.type_param()
            self.state = 2268
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2264
                    self.match(FandangoParser.COMMA)
                    self.state = 2265
                    self.type_param()
                self.state = 2270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)

            self.state = 2272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2271
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_paramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def type_param_bound(self):
            return self.getTypedRuleContext(FandangoParser.Type_param_boundContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_param

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_param"):
                return visitor.visitType_param(self)
            else:
                return visitor.visitChildren(self)

    def type_param(self):

        localctx = FandangoParser.Type_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_type_param)
        self._la = 0  # Token type
        try:
            self.state = 2282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 56, 57, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2274
                self.identifier()
                self.state = 2276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 82:
                    self.state = 2275
                    self.type_param_bound()

                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2278
                self.match(FandangoParser.STAR)
                self.state = 2279
                self.identifier()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2280
                self.match(FandangoParser.POWER)
                self.state = 2281
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_param_boundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_param_bound

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_param_bound"):
                return visitor.visitType_param_bound(self)
            else:
                return visitor.visitChildren(self)

    def type_param_bound(self):

        localctx = FandangoParser.Type_param_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_type_param_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2284
            self.match(FandangoParser.COLON)
            self.state = 2285
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_expressions

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressions"):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)

    def expressions(self):

        localctx = FandangoParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_expressions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.expression()
            self.state = 2292
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 262, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2288
                    self.match(FandangoParser.COMMA)
                    self.state = 2289
                    self.expression()
                self.state = 2294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 262, self._ctx)

            self.state = 2296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2295
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.DisjunctionContext, i)

        def IF(self):
            return self.getToken(FandangoParser.IF, 0)

        def ELSE(self):
            return self.getToken(FandangoParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def lambdef(self):
            return self.getTypedRuleContext(FandangoParser.LambdefContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_expression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self):

        localctx = FandangoParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_expression)
        try:
            self.state = 2306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 264, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2298
                self.disjunction()
                self.state = 2299
                self.match(FandangoParser.IF)
                self.state = 2300
                self.disjunction()
                self.state = 2301
                self.match(FandangoParser.ELSE)
                self.state = 2302
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2304
                self.disjunction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2305
                self.lambdef()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FandangoParser.YIELD, 0)

        def FROM(self):
            return self.getToken(FandangoParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_yield_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_expr"):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)

    def yield_expr(self):

        localctx = FandangoParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_yield_expr)
        try:
            self.state = 2315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 266, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2308
                self.match(FandangoParser.YIELD)
                self.state = 2309
                self.match(FandangoParser.FROM)
                self.state = 2310
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2311
                self.match(FandangoParser.YIELD)
                self.state = 2313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 265, self._ctx)
                if la_ == 1:
                    self.state = 2312
                    self.star_expressions()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_expressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_expressionContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Star_expressionContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_expressions

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_expressions"):
                return visitor.visitStar_expressions(self)
            else:
                return visitor.visitChildren(self)

    def star_expressions(self):

        localctx = FandangoParser.Star_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_star_expressions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self.star_expression()
            self.state = 2322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 267, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2318
                    self.match(FandangoParser.COMMA)
                    self.state = 2319
                    self.star_expression()
                self.state = 2324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 267, self._ctx)

            self.state = 2326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2325
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_selection(self):
            return self.getTypedRuleContext(FandangoParser.Star_selectionContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_expression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_expression"):
                return visitor.visitStar_expression(self)
            else:
                return visitor.visitChildren(self)

    def star_expression(self):

        localctx = FandangoParser.Star_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_star_expression)
        try:
            self.state = 2332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 269, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.star_selection()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2329
                self.match(FandangoParser.STAR)
                self.state = 2330
                self.bitwise_or(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2331
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Star_named_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Star_named_expressionContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expressions

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_named_expressions"):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)

    def star_named_expressions(self):

        localctx = FandangoParser.Star_named_expressionsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 298, self.RULE_star_named_expressions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self.star_named_expression()
            self.state = 2339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 270, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2335
                    self.match(FandangoParser.COMMA)
                    self.state = 2336
                    self.star_named_expression()
                self.state = 2341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 270, self._ctx)

            self.state = 2343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2342
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_named_expression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_named_expression"):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)

    def star_named_expression(self):

        localctx = FandangoParser.Star_named_expressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 300, self.RULE_star_named_expression)
        try:
            self.state = 2348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 272, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2345
                self.match(FandangoParser.STAR)
                self.state = 2346
                self.bitwise_or(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self.named_expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def EXPR_ASSIGN(self):
            return self.getToken(FandangoParser.EXPR_ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_assignment_expression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignment_expression"):
                return visitor.visitAssignment_expression(self)
            else:
                return visitor.visitChildren(self)

    def assignment_expression(self):

        localctx = FandangoParser.Assignment_expressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 302, self.RULE_assignment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self.identifier()
            self.state = 2351
            self.match(FandangoParser.EXPR_ASSIGN)
            self.state = 2352
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Assignment_expressionContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_named_expression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNamed_expression"):
                return visitor.visitNamed_expression(self)
            else:
                return visitor.visitChildren(self)

    def named_expression(self):

        localctx = FandangoParser.Named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_named_expression)
        try:
            self.state = 2356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 273, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2354
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2355
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ConjunctionContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_disjunction

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDisjunction"):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)

    def disjunction(self):

        localctx = FandangoParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_disjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self.conjunction()
            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 40:
                self.state = 2359
                self.match(FandangoParser.OR)
                self.state = 2360
                self.conjunction()
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.InversionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.InversionContext, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_conjunction

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConjunction"):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)

    def conjunction(self):

        localctx = FandangoParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_conjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.inversion()
            self.state = 2371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 12:
                self.state = 2367
                self.match(FandangoParser.AND)
                self.state = 2368
                self.inversion()
                self.state = 2373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InversionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def inversion(self):
            return self.getTypedRuleContext(FandangoParser.InversionContext, 0)

        def comparison(self):
            return self.getTypedRuleContext(FandangoParser.ComparisonContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_inversion

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInversion"):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)

    def inversion(self):

        localctx = FandangoParser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_inversion)
        try:
            self.state = 2377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2374
                self.match(FandangoParser.NOT)
                self.state = 2375
                self.inversion()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                16,
                26,
                37,
                44,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2376
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def compare_op_bitwise_or_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Compare_op_bitwise_or_pairContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Compare_op_bitwise_or_pairContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_comparison

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)

    def comparison(self):

        localctx = FandangoParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2379
            self.bitwise_or(0)
            self.state = 2383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 277, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2380
                    self.compare_op_bitwise_or_pair()
                self.state = 2385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 277, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compare_op_bitwise_or_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eq_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Eq_bitwise_orContext, 0)

        def noteq_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Noteq_bitwise_orContext, 0)

        def lte_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Lte_bitwise_orContext, 0)

        def lt_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Lt_bitwise_orContext, 0)

        def gte_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Gte_bitwise_orContext, 0)

        def gt_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Gt_bitwise_orContext, 0)

        def notin_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Notin_bitwise_orContext, 0)

        def in_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.In_bitwise_orContext, 0)

        def isnot_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Isnot_bitwise_orContext, 0)

        def is_bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Is_bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_compare_op_bitwise_or_pair

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompare_op_bitwise_or_pair"):
                return visitor.visitCompare_op_bitwise_or_pair(self)
            else:
                return visitor.visitChildren(self)

    def compare_op_bitwise_or_pair(self):

        localctx = FandangoParser.Compare_op_bitwise_or_pairContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 314, self.RULE_compare_op_bitwise_or_pair)
        try:
            self.state = 2396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 278, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2386
                self.eq_bitwise_or()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2387
                self.noteq_bitwise_or()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2388
                self.lte_bitwise_or()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2389
                self.lt_bitwise_or()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2390
                self.gte_bitwise_or()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2391
                self.gt_bitwise_or()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2392
                self.notin_bitwise_or()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2393
                self.in_bitwise_or()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2394
                self.isnot_bitwise_or()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2395
                self.is_bitwise_or()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eq_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(FandangoParser.EQUALS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_eq_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEq_bitwise_or"):
                return visitor.visitEq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def eq_bitwise_or(self):

        localctx = FandangoParser.Eq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_eq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.match(FandangoParser.EQUALS)
            self.state = 2399
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Noteq_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQ_2(self):
            return self.getToken(FandangoParser.NOT_EQ_2, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def NOT_EQ_1(self):
            return self.getToken(FandangoParser.NOT_EQ_1, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_noteq_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNoteq_bitwise_or"):
                return visitor.visitNoteq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def noteq_bitwise_or(self):

        localctx = FandangoParser.Noteq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_noteq_bitwise_or)
        try:
            self.state = 2405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2401
                self.match(FandangoParser.NOT_EQ_2)
                self.state = 2402
                self.bitwise_or(0)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2403
                self.match(FandangoParser.NOT_EQ_1)
                self.state = 2404
                self.bitwise_or(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lte_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT_EQ(self):
            return self.getToken(FandangoParser.LT_EQ, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lte_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLte_bitwise_or"):
                return visitor.visitLte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def lte_bitwise_or(self):

        localctx = FandangoParser.Lte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_lte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2407
            self.match(FandangoParser.LT_EQ)
            self.state = 2408
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lt_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(FandangoParser.LESS_THAN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lt_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLt_bitwise_or"):
                return visitor.visitLt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def lt_bitwise_or(self):

        localctx = FandangoParser.Lt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_lt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2410
            self.match(FandangoParser.LESS_THAN)
            self.state = 2411
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Gte_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT_EQ(self):
            return self.getToken(FandangoParser.GT_EQ, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_gte_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGte_bitwise_or"):
                return visitor.visitGte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def gte_bitwise_or(self):

        localctx = FandangoParser.Gte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_gte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            self.match(FandangoParser.GT_EQ)
            self.state = 2414
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Gt_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN(self):
            return self.getToken(FandangoParser.GREATER_THAN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_gt_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGt_bitwise_or"):
                return visitor.visitGt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def gt_bitwise_or(self):

        localctx = FandangoParser.Gt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_gt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            self.match(FandangoParser.GREATER_THAN)
            self.state = 2417
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notin_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_notin_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNotin_bitwise_or"):
                return visitor.visitNotin_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def notin_bitwise_or(self):

        localctx = FandangoParser.Notin_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_notin_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.match(FandangoParser.NOT)
            self.state = 2420
            self.match(FandangoParser.IN)
            self.state = 2421
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class In_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_in_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIn_bitwise_or"):
                return visitor.visitIn_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def in_bitwise_or(self):

        localctx = FandangoParser.In_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_in_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            self.match(FandangoParser.IN)
            self.state = 2424
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isnot_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(FandangoParser.IS, 0)

        def NOT(self):
            return self.getToken(FandangoParser.NOT, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_isnot_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsnot_bitwise_or"):
                return visitor.visitIsnot_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def isnot_bitwise_or(self):

        localctx = FandangoParser.Isnot_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_isnot_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2426
            self.match(FandangoParser.IS)
            self.state = 2427
            self.match(FandangoParser.NOT)
            self.state = 2428
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Is_bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(FandangoParser.IS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_is_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIs_bitwise_or"):
                return visitor.visitIs_bitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def is_bitwise_or(self):

        localctx = FandangoParser.Is_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_is_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.match(FandangoParser.IS)
            self.state = 2431
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bitwise_orContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_xor(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_xorContext, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def OR_OP(self):
            return self.getToken(FandangoParser.OR_OP, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_bitwise_or

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwise_or"):
                return visitor.visitBitwise_or(self)
            else:
                return visitor.visitChildren(self)

    def bitwise_or(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Bitwise_orContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 336
        self.enterRecursionRule(localctx, 336, self.RULE_bitwise_or, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2434
            self.bitwise_xor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 280, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Bitwise_orContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwise_or
                    )
                    self.state = 2436
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 2437
                    self.match(FandangoParser.OR_OP)
                    self.state = 2438
                    self.bitwise_xor(0)
                self.state = 2443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 280, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_and(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_andContext, 0)

        def bitwise_xor(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_xorContext, 0)

        def XOR(self):
            return self.getToken(FandangoParser.XOR, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_bitwise_xor

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwise_xor"):
                return visitor.visitBitwise_xor(self)
            else:
                return visitor.visitChildren(self)

    def bitwise_xor(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Bitwise_xorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 338
        self.enterRecursionRule(localctx, 338, self.RULE_bitwise_xor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self.bitwise_and(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 281, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Bitwise_xorContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwise_xor
                    )
                    self.state = 2447
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 2448
                    self.match(FandangoParser.XOR)
                    self.state = 2449
                    self.bitwise_and(0)
                self.state = 2454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 281, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Bitwise_andContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self):
            return self.getTypedRuleContext(FandangoParser.Shift_exprContext, 0)

        def bitwise_and(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_andContext, 0)

        def AND_OP(self):
            return self.getToken(FandangoParser.AND_OP, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_bitwise_and

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwise_and"):
                return visitor.visitBitwise_and(self)
            else:
                return visitor.visitChildren(self)

    def bitwise_and(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Bitwise_andContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 340
        self.enterRecursionRule(localctx, 340, self.RULE_bitwise_and, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2456
            self.shift_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 282, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FandangoParser.Bitwise_andContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwise_and
                    )
                    self.state = 2458
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 2459
                    self.match(FandangoParser.AND_OP)
                    self.state = 2460
                    self.shift_expr(0)
                self.state = 2465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 282, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Shift_exprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_(self):
            return self.getTypedRuleContext(FandangoParser.SumContext, 0)

        def shift_expr(self):
            return self.getTypedRuleContext(FandangoParser.Shift_exprContext, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FandangoParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FandangoParser.RIGHT_SHIFT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_shift_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitShift_expr"):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)

    def shift_expr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.Shift_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 342
        self.enterRecursionRule(localctx, 342, self.RULE_shift_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.sum_(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2477
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 284, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2475
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 283, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.Shift_exprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_shift_expr
                        )
                        self.state = 2469
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2470
                        self.match(FandangoParser.LEFT_SHIFT)
                        self.state = 2471
                        self.sum_(0)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.Shift_exprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_shift_expr
                        )
                        self.state = 2472
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2473
                        self.match(FandangoParser.RIGHT_SHIFT)
                        self.state = 2474
                        self.sum_(0)
                        pass

                self.state = 2479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 284, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SumContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(FandangoParser.TermContext, 0)

        def sum_(self):
            return self.getTypedRuleContext(FandangoParser.SumContext, 0)

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_sum

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSum"):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)

    def sum_(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.SumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 344
        self.enterRecursionRule(localctx, 344, self.RULE_sum, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2481
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 286, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2489
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 285, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.SumContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_sum
                        )
                        self.state = 2483
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2484
                        self.match(FandangoParser.ADD)
                        self.state = 2485
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.SumContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_sum
                        )
                        self.state = 2486
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2487
                        self.match(FandangoParser.MINUS)
                        self.state = 2488
                        self.term(0)
                        pass

                self.state = 2493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 286, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(FandangoParser.FactorContext, 0)

        def term(self):
            return self.getTypedRuleContext(FandangoParser.TermContext, 0)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def IDIV(self):
            return self.getToken(FandangoParser.IDIV, 0)

        def MOD(self):
            return self.getToken(FandangoParser.MOD, 0)

        def AT(self):
            return self.getToken(FandangoParser.AT, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_term

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTerm"):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)

    def term(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 346
        self.enterRecursionRule(localctx, 346, self.RULE_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 288, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2512
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 287, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2497
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 2498
                        self.match(FandangoParser.STAR)
                        self.state = 2499
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2500
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 2501
                        self.match(FandangoParser.DIV)
                        self.state = 2502
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2503
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 2504
                        self.match(FandangoParser.IDIV)
                        self.state = 2505
                        self.factor()
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2506
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2507
                        self.match(FandangoParser.MOD)
                        self.state = 2508
                        self.factor()
                        pass

                    elif la_ == 5:
                        localctx = FandangoParser.TermContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_term
                        )
                        self.state = 2509
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2510
                        self.match(FandangoParser.AT)
                        self.state = 2511
                        self.factor()
                        pass

                self.state = 2516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 288, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(FandangoParser.ADD, 0)

        def factor(self):
            return self.getTypedRuleContext(FandangoParser.FactorContext, 0)

        def MINUS(self):
            return self.getToken(FandangoParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FandangoParser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(FandangoParser.PowerContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_factor

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFactor"):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)

    def factor(self):

        localctx = FandangoParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_factor)
        try:
            self.state = 2524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2517
                self.match(FandangoParser.ADD)
                self.state = 2518
                self.factor()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2519
                self.match(FandangoParser.MINUS)
                self.state = 2520
                self.factor()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2521
                self.match(FandangoParser.NOT_OP)
                self.state = 2522
                self.factor()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                16,
                26,
                37,
                44,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2523
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def await_primary(self):
            return self.getTypedRuleContext(FandangoParser.Await_primaryContext, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(FandangoParser.FactorContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_power

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)

    def power(self):

        localctx = FandangoParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_power)
        try:
            self.state = 2531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 290, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2526
                self.await_primary()
                self.state = 2527
                self.match(FandangoParser.POWER)
                self.state = 2528
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2530
                self.await_primary()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Await_primaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT(self):
            return self.getToken(FandangoParser.AWAIT, 0)

        def primary(self):
            return self.getTypedRuleContext(FandangoParser.PrimaryContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_await_primary

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAwait_primary"):
                return visitor.visitAwait_primary(self)
            else:
                return visitor.visitChildren(self)

    def await_primary(self):

        localctx = FandangoParser.Await_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_await_primary)
        try:
            self.state = 2536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2533
                self.match(FandangoParser.AWAIT)
                self.state = 2534
                self.primary(0)
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                26,
                37,
                44,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                99,
                101,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2535
                self.primary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(FandangoParser.AtomContext, 0)

        def primary(self):
            return self.getTypedRuleContext(FandangoParser.PrimaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_primary

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimary"):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)

    def primary(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.PrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 354
        self.enterRecursionRule(localctx, 354, self.RULE_primary, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 294, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2557
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2541
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 2542
                        self.match(FandangoParser.DOT)
                        self.state = 2543
                        self.identifier()
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2544
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 2545
                        self.genexp()
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2546
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 2547
                        self.match(FandangoParser.OPEN_PAREN)
                        self.state = 2549
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 828680645243896312) != 0
                        ) or (
                            (((_la - 75)) & ~0x3F) == 0
                            and ((1 << (_la - 75)) & 93071897) != 0
                        ):
                            self.state = 2548
                            self.arguments()

                        self.state = 2551
                        self.match(FandangoParser.CLOSE_PAREN)
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.PrimaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 2552
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2553
                        self.match(FandangoParser.OPEN_BRACK)
                        self.state = 2554
                        self.slices()
                        self.state = 2555
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass

                self.state = 2561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 294, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SlicesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slice_(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.SliceContext)
            else:
                return self.getTypedRuleContext(FandangoParser.SliceContext, i)

        def starred_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Starred_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Starred_expressionContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_slices

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlices"):
                return visitor.visitSlices(self)
            else:
                return visitor.visitChildren(self)

    def slices(self):

        localctx = FandangoParser.SlicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_slices)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 295, self._ctx)
            if la_ == 1:
                self.state = 2562
                self.slice_()
                pass

            elif la_ == 2:
                self.state = 2563
                self.starred_expression()
                pass

            self.state = 2573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 297, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2566
                    self.match(FandangoParser.COMMA)
                    self.state = 2569
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 296, self._ctx)
                    if la_ == 1:
                        self.state = 2567
                        self.slice_()
                        pass

                    elif la_ == 2:
                        self.state = 2568
                        self.starred_expression()
                        pass

                self.state = 2575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 297, self._ctx)

            self.state = 2577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2576
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_slice

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSlice"):
                return visitor.visitSlice(self)
            else:
                return visitor.visitChildren(self)

    def slice_(self):

        localctx = FandangoParser.SliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_slice)
        self._la = 0  # Token type
        try:
            self.state = 2593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 303, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
                ):
                    self.state = 2579
                    self.expression()

                self.state = 2582
                self.match(FandangoParser.COLON)
                self.state = 2584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
                ):
                    self.state = 2583
                    self.expression()

                self.state = 2590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 82:
                    self.state = 2586
                    self.match(FandangoParser.COLON)
                    self.state = 2588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0
                    ) or (
                        (((_la - 75)) & ~0x3F) == 0
                        and ((1 << (_la - 75)) & 93071897) != 0
                    ):
                        self.state = 2587
                        self.expression()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2592
                self.named_expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector_length(self):
            return self.getTypedRuleContext(FandangoParser.Selector_lengthContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def TRUE(self):
            return self.getToken(FandangoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FandangoParser.FALSE, 0)

        def NONE(self):
            return self.getToken(FandangoParser.NONE, 0)

        def strings(self):
            return self.getTypedRuleContext(FandangoParser.StringsContext, 0)

        def NUMBER(self):
            return self.getToken(FandangoParser.NUMBER, 0)

        def tuple_(self):
            return self.getTypedRuleContext(FandangoParser.TupleContext, 0)

        def group(self):
            return self.getTypedRuleContext(FandangoParser.GroupContext, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def list_(self):
            return self.getTypedRuleContext(FandangoParser.ListContext, 0)

        def listcomp(self):
            return self.getTypedRuleContext(FandangoParser.ListcompContext, 0)

        def dict_(self):
            return self.getTypedRuleContext(FandangoParser.DictContext, 0)

        def set_(self):
            return self.getTypedRuleContext(FandangoParser.SetContext, 0)

        def dictcomp(self):
            return self.getTypedRuleContext(FandangoParser.DictcompContext, 0)

        def setcomp(self):
            return self.getTypedRuleContext(FandangoParser.SetcompContext, 0)

        def ELLIPSIS(self):
            return self.getToken(FandangoParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_atom

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)

    def atom(self):

        localctx = FandangoParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_atom)
        try:
            self.state = 2618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2595
                self.selector_length()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2596
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2597
                self.match(FandangoParser.TRUE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2598
                self.match(FandangoParser.FALSE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2599
                self.match(FandangoParser.NONE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2600
                self.strings()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2601
                self.match(FandangoParser.NUMBER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 304, self._ctx)
                if la_ == 1:
                    self.state = 2602
                    self.tuple_()
                    pass

                elif la_ == 2:
                    self.state = 2603
                    self.group()
                    pass

                elif la_ == 3:
                    self.state = 2604
                    self.genexp()
                    pass

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 305, self._ctx)
                if la_ == 1:
                    self.state = 2607
                    self.list_()
                    pass

                elif la_ == 2:
                    self.state = 2608
                    self.listcomp()
                    pass

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
                if la_ == 1:
                    self.state = 2611
                    self.dict_()
                    pass

                elif la_ == 2:
                    self.state = 2612
                    self.set_()
                    pass

                elif la_ == 3:
                    self.state = 2613
                    self.dictcomp()
                    pass

                elif la_ == 4:
                    self.state = 2614
                    self.setcomp()
                    pass

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2617
                self.match(FandangoParser.ELLIPSIS)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_group

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroup"):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)

    def group(self):

        localctx = FandangoParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 2623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 2621
                self.yield_expr()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                16,
                26,
                35,
                37,
                39,
                44,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.state = 2622
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2625
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(FandangoParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def lambda_params(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambdef

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdef"):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)

    def lambdef(self):

        localctx = FandangoParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_lambdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self.match(FandangoParser.LAMBDA)
            self.state = 2629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 55)) & ~0x3F) == 0 and ((1 << (_la - 55)) & 545259543) != 0:
                self.state = 2628
                self.lambda_params()

            self.state = 2631
            self.match(FandangoParser.COLON)
            self.state = 2632
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_paramsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_parameters(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_parametersContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_params

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_params"):
                return visitor.visitLambda_params(self)
            else:
                return visitor.visitChildren(self)

    def lambda_params(self):

        localctx = FandangoParser.Lambda_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_lambda_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            self.lambda_parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_parametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_slash_no_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_slash_no_defaultContext, 0
            )

        def lambda_param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_no_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_no_defaultContext, i
                )

        def lambda_param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_with_defaultContext, i
                )

        def lambda_star_etc(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_star_etcContext, 0)

        def lambda_slash_with_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_slash_with_defaultContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_parameters

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_parameters"):
                return visitor.visitLambda_parameters(self)
            else:
                return visitor.visitChildren(self)

    def lambda_parameters(self):

        localctx = FandangoParser.Lambda_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_lambda_parameters)
        self._la = 0  # Token type
        try:
            self.state = 2685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 320, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2636
                self.lambda_slash_no_default()
                self.state = 2640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 310, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2637
                        self.lambda_param_no_default()
                    self.state = 2642
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 310, self._ctx)

                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 2643
                    self.lambda_param_with_default()
                    self.state = 2648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 2649
                    self.lambda_star_etc()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2652
                self.lambda_slash_with_default()
                self.state = 2656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 2653
                    self.lambda_param_with_default()
                    self.state = 2658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 2659
                    self.lambda_star_etc()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2663
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2662
                        self.lambda_param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2665
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 315, self._ctx)

                self.state = 2670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 2667
                    self.lambda_param_with_default()
                    self.state = 2672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 2673
                    self.lambda_star_etc()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2676
                    self.lambda_param_with_default()
                    self.state = 2679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (
                        (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 828662331436171264) != 0
                        )
                    ):
                        break

                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 78 or _la == 84:
                    self.state = 2681
                    self.lambda_star_etc()

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2684
                self.lambda_star_etc()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_slash_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def lambda_param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_no_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_no_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_slash_no_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_slash_no_default"):
                return visitor.visitLambda_slash_no_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_slash_no_default(self):

        localctx = FandangoParser.Lambda_slash_no_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 370, self.RULE_lambda_slash_no_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2687
                self.lambda_param_no_default()
                self.state = 2690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0)
                ):
                    break

            self.state = 2692
            self.match(FandangoParser.DIV)
            self.state = 2694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2693
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_slash_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FandangoParser.DIV, 0)

        def lambda_param_no_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_no_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_no_defaultContext, i
                )

        def lambda_param_with_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_with_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_with_defaultContext, i
                )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_slash_with_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_slash_with_default"):
                return visitor.visitLambda_slash_with_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_slash_with_default(self):

        localctx = FandangoParser.Lambda_slash_with_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 372, self.RULE_lambda_slash_with_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2699
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 323, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2696
                    self.lambda_param_no_default()
                self.state = 2701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 323, self._ctx)

            self.state = 2703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2702
                self.lambda_param_with_default()
                self.state = 2705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0)
                ):
                    break

            self.state = 2707
            self.match(FandangoParser.DIV)
            self.state = 2709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2708
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_star_etcContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_param_no_defaultContext, 0
            )

        def lambda_param_maybe_default(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Lambda_param_maybe_defaultContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Lambda_param_maybe_defaultContext, i
                )

        def lambda_kwds(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_kwdsContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_star_etc

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_star_etc"):
                return visitor.visitLambda_star_etc(self)
            else:
                return visitor.visitChildren(self)

    def lambda_star_etc(self):

        localctx = FandangoParser.Lambda_star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_lambda_star_etc)
        self._la = 0  # Token type
        try:
            self.state = 2733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 330, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2711
                self.match(FandangoParser.STAR)
                self.state = 2712
                self.lambda_param_no_default()
                self.state = 2716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0:
                    self.state = 2713
                    self.lambda_param_maybe_default()
                    self.state = 2718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 84:
                    self.state = 2719
                    self.lambda_kwds()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2722
                self.match(FandangoParser.STAR)
                self.state = 2723
                self.match(FandangoParser.COMMA)
                self.state = 2725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2724
                    self.lambda_param_maybe_default()
                    self.state = 2727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (
                        (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 828662331436171264) != 0
                        )
                    ):
                        break

                self.state = 2730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 84:
                    self.state = 2729
                    self.lambda_kwds()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2732
                self.lambda_kwds()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_kwdsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(
                FandangoParser.Lambda_param_no_defaultContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_kwds

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_kwds"):
                return visitor.visitLambda_kwds(self)
            else:
                return visitor.visitChildren(self)

    def lambda_kwds(self):

        localctx = FandangoParser.Lambda_kwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_lambda_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2735
            self.match(FandangoParser.POWER)
            self.state = 2736
            self.lambda_param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_param_no_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param_no_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param_no_default"):
                return visitor.visitLambda_param_no_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param_no_default(self):

        localctx = FandangoParser.Lambda_param_no_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 378, self.RULE_lambda_param_no_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2738
            self.lambda_param()
            self.state = 2740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2739
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_param_with_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramContext, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param_with_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param_with_default"):
                return visitor.visitLambda_param_with_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param_with_default(self):

        localctx = FandangoParser.Lambda_param_with_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 380, self.RULE_lambda_param_with_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2742
            self.lambda_param()
            self.state = 2743
            self.default()
            self.state = 2745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2744
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_param_maybe_defaultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(FandangoParser.Lambda_paramContext, 0)

        def default(self):
            return self.getTypedRuleContext(FandangoParser.DefaultContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param_maybe_default

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param_maybe_default"):
                return visitor.visitLambda_param_maybe_default(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param_maybe_default(self):

        localctx = FandangoParser.Lambda_param_maybe_defaultContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 382, self.RULE_lambda_param_maybe_default)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.lambda_param()
            self.state = 2749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 2748
                self.default()

            self.state = 2752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 2751
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_paramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_lambda_param

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambda_param"):
                return visitor.visitLambda_param(self)
            else:
                return visitor.visitChildren(self)

    def lambda_param(self):

        localctx = FandangoParser.Lambda_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_lambda_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_middle_no_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_replacement_fieldContext, 0
            )

        def fstring_any_no_quote(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_any_no_quoteContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_middle_no_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_middle_no_quote"):
                return visitor.visitFstring_middle_no_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_middle_no_quote(self):

        localctx = FandangoParser.Fstring_middle_no_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 386, self.RULE_fstring_middle_no_quote)
        try:
            self.state = 2758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 335, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2756
                self.fstring_replacement_field()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2757
                self.fstring_any_no_quote()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_middle_no_single_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_replacement_fieldContext, 0
            )

        def fstring_any_no_single_quote(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_any_no_single_quoteContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_middle_no_single_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_middle_no_single_quote"):
                return visitor.visitFstring_middle_no_single_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_middle_no_single_quote(self):

        localctx = FandangoParser.Fstring_middle_no_single_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 388, self.RULE_fstring_middle_no_single_quote)
        try:
            self.state = 2762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 336, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2760
                self.fstring_replacement_field()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2761
                self.fstring_any_no_single_quote()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_middle_breaks_no_triple_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_replacement_fieldContext, 0
            )

        def fstring_any_breaks_no_triple_quote(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_any_breaks_no_triple_quoteContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_middle_breaks_no_triple_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_middle_breaks_no_triple_quote"):
                return visitor.visitFstring_middle_breaks_no_triple_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_middle_breaks_no_triple_quote(self):

        localctx = FandangoParser.Fstring_middle_breaks_no_triple_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 390, self.RULE_fstring_middle_breaks_no_triple_quote)
        try:
            self.state = 2766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 337, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2764
                self.fstring_replacement_field()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2765
                self.fstring_any_breaks_no_triple_quote()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_middle_breaks_no_triple_single_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_replacement_fieldContext, 0
            )

        def fstring_any_breaks_no_triple_single_quote(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_any_breaks_no_triple_single_quoteContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_middle_breaks_no_triple_single_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_middle_breaks_no_triple_single_quote"):
                return visitor.visitFstring_middle_breaks_no_triple_single_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_middle_breaks_no_triple_single_quote(self):

        localctx = FandangoParser.Fstring_middle_breaks_no_triple_single_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 392, self.RULE_fstring_middle_breaks_no_triple_single_quote
        )
        try:
            self.state = 2770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 338, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2768
                self.fstring_replacement_field()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2769
                self.fstring_any_breaks_no_triple_single_quote()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_any_no_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_any(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_anyContext, 0)

        def FSTRING_END_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_SINGLE_QUOTE, 0)

        def FSTRING_END_TRIPLE_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_TRIPLE_SINGLE_QUOTE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_any_no_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_any_no_quote"):
                return visitor.visitFstring_any_no_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_any_no_quote(self):

        localctx = FandangoParser.Fstring_any_no_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 394, self.RULE_fstring_any_no_quote)
        try:
            self.state = 2775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                72,
                73,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                126,
                129,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2772
                self.fstring_any()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2773
                self.match(FandangoParser.FSTRING_END_SINGLE_QUOTE)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2774
                self.match(FandangoParser.FSTRING_END_TRIPLE_SINGLE_QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_any_no_single_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_any(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_anyContext, 0)

        def FSTRING_END_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_QUOTE, 0)

        def FSTRING_END_TRIPLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_TRIPLE_QUOTE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_any_no_single_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_any_no_single_quote"):
                return visitor.visitFstring_any_no_single_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_any_no_single_quote(self):

        localctx = FandangoParser.Fstring_any_no_single_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 396, self.RULE_fstring_any_no_single_quote)
        try:
            self.state = 2780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                72,
                73,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                126,
                129,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2777
                self.fstring_any()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2778
                self.match(FandangoParser.FSTRING_END_QUOTE)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2779
                self.match(FandangoParser.FSTRING_END_TRIPLE_QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_middleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_any(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_anyContext, 0)

        def FSTRING_END_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_SINGLE_QUOTE, 0)

        def FSTRING_END_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_QUOTE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_middle

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_middle"):
                return visitor.visitFstring_middle(self)
            else:
                return visitor.visitChildren(self)

    def fstring_middle(self):

        localctx = FandangoParser.Fstring_middleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_fstring_middle)
        try:
            self.state = 2785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                72,
                73,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                126,
                129,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2782
                self.fstring_any()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2783
                self.match(FandangoParser.FSTRING_END_SINGLE_QUOTE)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2784
                self.match(FandangoParser.FSTRING_END_QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_any_breaks_no_triple_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_any(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_anyContext, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def FSTRING_END_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_SINGLE_QUOTE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_any_breaks_no_triple_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_any_breaks_no_triple_quote"):
                return visitor.visitFstring_any_breaks_no_triple_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_any_breaks_no_triple_quote(self):

        localctx = FandangoParser.Fstring_any_breaks_no_triple_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 400, self.RULE_fstring_any_breaks_no_triple_quote)
        try:
            self.state = 2790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                72,
                73,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                126,
                129,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2787
                self.fstring_any()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2788
                self.match(FandangoParser.NEWLINE)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2789
                self.match(FandangoParser.FSTRING_END_SINGLE_QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_any_breaks_no_triple_single_quoteContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_any(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_anyContext, 0)

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def FSTRING_END_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_QUOTE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_any_breaks_no_triple_single_quote

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_any_breaks_no_triple_single_quote"):
                return visitor.visitFstring_any_breaks_no_triple_single_quote(self)
            else:
                return visitor.visitChildren(self)

    def fstring_any_breaks_no_triple_single_quote(self):

        localctx = FandangoParser.Fstring_any_breaks_no_triple_single_quoteContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 402, self.RULE_fstring_any_breaks_no_triple_single_quote
        )
        try:
            self.state = 2795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                72,
                73,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                126,
                129,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2792
                self.fstring_any()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2793
                self.match(FandangoParser.NEWLINE)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2794
                self.match(FandangoParser.FSTRING_END_QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NUMBER)
            else:
                return self.getToken(FandangoParser.NUMBER, i)

        def PYTHON_START(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.PYTHON_START)
            else:
                return self.getToken(FandangoParser.PYTHON_START, i)

        def PYTHON_END(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.PYTHON_END)
            else:
                return self.getToken(FandangoParser.PYTHON_END, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND)
            else:
                return self.getToken(FandangoParser.AND, i)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AS)
            else:
                return self.getToken(FandangoParser.AS, i)

        def ASSERT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASSERT)
            else:
                return self.getToken(FandangoParser.ASSERT, i)

        def ASYNC(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASYNC)
            else:
                return self.getToken(FandangoParser.ASYNC, i)

        def AWAIT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AWAIT)
            else:
                return self.getToken(FandangoParser.AWAIT, i)

        def BREAK(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.BREAK)
            else:
                return self.getToken(FandangoParser.BREAK, i)

        def CASE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CASE)
            else:
                return self.getToken(FandangoParser.CASE, i)

        def CLASS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLASS)
            else:
                return self.getToken(FandangoParser.CLASS, i)

        def CONTINUE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CONTINUE)
            else:
                return self.getToken(FandangoParser.CONTINUE, i)

        def DEF(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DEF)
            else:
                return self.getToken(FandangoParser.DEF, i)

        def DEL(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DEL)
            else:
                return self.getToken(FandangoParser.DEL, i)

        def ELIF(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ELIF)
            else:
                return self.getToken(FandangoParser.ELIF, i)

        def ELSE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ELSE)
            else:
                return self.getToken(FandangoParser.ELSE, i)

        def EXCEPT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.EXCEPT)
            else:
                return self.getToken(FandangoParser.EXCEPT, i)

        def FALSE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.FALSE)
            else:
                return self.getToken(FandangoParser.FALSE, i)

        def FINALLY(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.FINALLY)
            else:
                return self.getToken(FandangoParser.FINALLY, i)

        def FOR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.FOR)
            else:
                return self.getToken(FandangoParser.FOR, i)

        def FROM(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.FROM)
            else:
                return self.getToken(FandangoParser.FROM, i)

        def GLOBAL(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.GLOBAL)
            else:
                return self.getToken(FandangoParser.GLOBAL, i)

        def IF(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IF)
            else:
                return self.getToken(FandangoParser.IF, i)

        def IMPORT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IMPORT)
            else:
                return self.getToken(FandangoParser.IMPORT, i)

        def IN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IN)
            else:
                return self.getToken(FandangoParser.IN, i)

        def IS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IS)
            else:
                return self.getToken(FandangoParser.IS, i)

        def LAMBDA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LAMBDA)
            else:
                return self.getToken(FandangoParser.LAMBDA, i)

        def MATCH(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MATCH)
            else:
                return self.getToken(FandangoParser.MATCH, i)

        def NONE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NONE)
            else:
                return self.getToken(FandangoParser.NONE, i)

        def NONLOCAL(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NONLOCAL)
            else:
                return self.getToken(FandangoParser.NONLOCAL, i)

        def NOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NOT)
            else:
                return self.getToken(FandangoParser.NOT, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR)
            else:
                return self.getToken(FandangoParser.OR, i)

        def PASS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.PASS)
            else:
                return self.getToken(FandangoParser.PASS, i)

        def RAISE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.RAISE)
            else:
                return self.getToken(FandangoParser.RAISE, i)

        def RETURN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.RETURN)
            else:
                return self.getToken(FandangoParser.RETURN, i)

        def TRUE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.TRUE)
            else:
                return self.getToken(FandangoParser.TRUE, i)

        def TRY(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.TRY)
            else:
                return self.getToken(FandangoParser.TRY, i)

        def TYPE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.TYPE)
            else:
                return self.getToken(FandangoParser.TYPE, i)

        def WHILE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.WHILE)
            else:
                return self.getToken(FandangoParser.WHILE, i)

        def WHERE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.WHERE)
            else:
                return self.getToken(FandangoParser.WHERE, i)

        def WITH(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.WITH)
            else:
                return self.getToken(FandangoParser.WITH, i)

        def YIELD(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.YIELD)
            else:
                return self.getToken(FandangoParser.YIELD, i)

        def FORALL(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.FORALL)
            else:
                return self.getToken(FandangoParser.FORALL, i)

        def EXISTS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.EXISTS)
            else:
                return self.getToken(FandangoParser.EXISTS, i)

        def MAXIMIZING(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MAXIMIZING)
            else:
                return self.getToken(FandangoParser.MAXIMIZING, i)

        def MINIMIZING(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MINIMIZING)
            else:
                return self.getToken(FandangoParser.MINIMIZING, i)

        def ANY(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ANY)
            else:
                return self.getToken(FandangoParser.ANY, i)

        def ALL(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ALL)
            else:
                return self.getToken(FandangoParser.ALL, i)

        def LEN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LEN)
            else:
                return self.getToken(FandangoParser.LEN, i)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NAME)
            else:
                return self.getToken(FandangoParser.NAME, i)

        def GRAMMAR_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.GRAMMAR_ASSIGN)
            else:
                return self.getToken(FandangoParser.GRAMMAR_ASSIGN, i)

        def QUESTION(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.QUESTION)
            else:
                return self.getToken(FandangoParser.QUESTION, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DOT)
            else:
                return self.getToken(FandangoParser.DOT, i)

        def DOTDOT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DOTDOT)
            else:
                return self.getToken(FandangoParser.DOTDOT, i)

        def ELLIPSIS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ELLIPSIS)
            else:
                return self.getToken(FandangoParser.ELLIPSIS, i)

        def STAR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.STAR)
            else:
                return self.getToken(FandangoParser.STAR, i)

        def OPEN_PAREN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OPEN_PAREN)
            else:
                return self.getToken(FandangoParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLOSE_PAREN)
            else:
                return self.getToken(FandangoParser.CLOSE_PAREN, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COLON)
            else:
                return self.getToken(FandangoParser.COLON, i)

        def SEMI_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.SEMI_COLON)
            else:
                return self.getToken(FandangoParser.SEMI_COLON, i)

        def POWER(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.POWER)
            else:
                return self.getToken(FandangoParser.POWER, i)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ASSIGN)
            else:
                return self.getToken(FandangoParser.ASSIGN, i)

        def OPEN_BRACK(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OPEN_BRACK)
            else:
                return self.getToken(FandangoParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLOSE_BRACK)
            else:
                return self.getToken(FandangoParser.CLOSE_BRACK, i)

        def OR_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_OP)
            else:
                return self.getToken(FandangoParser.OR_OP, i)

        def XOR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.XOR)
            else:
                return self.getToken(FandangoParser.XOR, i)

        def AND_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND_OP)
            else:
                return self.getToken(FandangoParser.AND_OP, i)

        def LEFT_SHIFT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LEFT_SHIFT)
            else:
                return self.getToken(FandangoParser.LEFT_SHIFT, i)

        def RIGHT_SHIFT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.RIGHT_SHIFT)
            else:
                return self.getToken(FandangoParser.RIGHT_SHIFT, i)

        def ADD(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ADD)
            else:
                return self.getToken(FandangoParser.ADD, i)

        def MINUS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MINUS)
            else:
                return self.getToken(FandangoParser.MINUS, i)

        def DIV(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DIV)
            else:
                return self.getToken(FandangoParser.DIV, i)

        def MOD(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MOD)
            else:
                return self.getToken(FandangoParser.MOD, i)

        def IDIV(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IDIV)
            else:
                return self.getToken(FandangoParser.IDIV, i)

        def NOT_OP(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_OP)
            else:
                return self.getToken(FandangoParser.NOT_OP, i)

        def OPEN_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OPEN_BRACE)
            else:
                return self.getToken(FandangoParser.OPEN_BRACE, i)

        def CLOSE_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.CLOSE_BRACE)
            else:
                return self.getToken(FandangoParser.CLOSE_BRACE, i)

        def LESS_THAN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LESS_THAN)
            else:
                return self.getToken(FandangoParser.LESS_THAN, i)

        def GREATER_THAN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.GREATER_THAN)
            else:
                return self.getToken(FandangoParser.GREATER_THAN, i)

        def EQUALS(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.EQUALS)
            else:
                return self.getToken(FandangoParser.EQUALS, i)

        def GT_EQ(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.GT_EQ)
            else:
                return self.getToken(FandangoParser.GT_EQ, i)

        def LT_EQ(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LT_EQ)
            else:
                return self.getToken(FandangoParser.LT_EQ, i)

        def NOT_EQ_1(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_EQ_1)
            else:
                return self.getToken(FandangoParser.NOT_EQ_1, i)

        def NOT_EQ_2(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.NOT_EQ_2)
            else:
                return self.getToken(FandangoParser.NOT_EQ_2, i)

        def AT(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AT)
            else:
                return self.getToken(FandangoParser.AT, i)

        def ARROW(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ARROW)
            else:
                return self.getToken(FandangoParser.ARROW, i)

        def ADD_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.ADD_ASSIGN)
            else:
                return self.getToken(FandangoParser.ADD_ASSIGN, i)

        def SUB_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.SUB_ASSIGN)
            else:
                return self.getToken(FandangoParser.SUB_ASSIGN, i)

        def MULT_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MULT_ASSIGN)
            else:
                return self.getToken(FandangoParser.MULT_ASSIGN, i)

        def AT_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AT_ASSIGN)
            else:
                return self.getToken(FandangoParser.AT_ASSIGN, i)

        def DIV_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.DIV_ASSIGN)
            else:
                return self.getToken(FandangoParser.DIV_ASSIGN, i)

        def MOD_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.MOD_ASSIGN)
            else:
                return self.getToken(FandangoParser.MOD_ASSIGN, i)

        def AND_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.AND_ASSIGN)
            else:
                return self.getToken(FandangoParser.AND_ASSIGN, i)

        def OR_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.OR_ASSIGN)
            else:
                return self.getToken(FandangoParser.OR_ASSIGN, i)

        def XOR_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.XOR_ASSIGN)
            else:
                return self.getToken(FandangoParser.XOR_ASSIGN, i)

        def LEFT_SHIFT_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.LEFT_SHIFT_ASSIGN)
            else:
                return self.getToken(FandangoParser.LEFT_SHIFT_ASSIGN, i)

        def RIGHT_SHIFT_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.RIGHT_SHIFT_ASSIGN)
            else:
                return self.getToken(FandangoParser.RIGHT_SHIFT_ASSIGN, i)

        def POWER_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.POWER_ASSIGN)
            else:
                return self.getToken(FandangoParser.POWER_ASSIGN, i)

        def IDIV_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IDIV_ASSIGN)
            else:
                return self.getToken(FandangoParser.IDIV_ASSIGN, i)

        def EXPR_ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.EXPR_ASSIGN)
            else:
                return self.getToken(FandangoParser.EXPR_ASSIGN, i)

        def EXCL(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.EXCL)
            else:
                return self.getToken(FandangoParser.EXCL, i)

        def SKIP_(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.SKIP_)
            else:
                return self.getToken(FandangoParser.SKIP_, i)

        def UNKNOWN_CHAR(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.UNKNOWN_CHAR)
            else:
                return self.getToken(FandangoParser.UNKNOWN_CHAR, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_any

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_any"):
                return visitor.visitFstring_any(self)
            else:
                return visitor.visitChildren(self)

    def fstring_any(self):

        localctx = FandangoParser.Fstring_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_fstring_any)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2903
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2903
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [8]:
                        self.state = 2797
                        self.match(FandangoParser.NUMBER)
                        pass
                    elif token in [10]:
                        self.state = 2798
                        self.match(FandangoParser.PYTHON_START)
                        pass
                    elif token in [11]:
                        self.state = 2799
                        self.match(FandangoParser.PYTHON_END)
                        pass
                    elif token in [12]:
                        self.state = 2800
                        self.match(FandangoParser.AND)
                        pass
                    elif token in [13]:
                        self.state = 2801
                        self.match(FandangoParser.AS)
                        pass
                    elif token in [14]:
                        self.state = 2802
                        self.match(FandangoParser.ASSERT)
                        pass
                    elif token in [15]:
                        self.state = 2803
                        self.match(FandangoParser.ASYNC)
                        pass
                    elif token in [16]:
                        self.state = 2804
                        self.match(FandangoParser.AWAIT)
                        pass
                    elif token in [17]:
                        self.state = 2805
                        self.match(FandangoParser.BREAK)
                        pass
                    elif token in [18]:
                        self.state = 2806
                        self.match(FandangoParser.CASE)
                        pass
                    elif token in [19]:
                        self.state = 2807
                        self.match(FandangoParser.CLASS)
                        pass
                    elif token in [20]:
                        self.state = 2808
                        self.match(FandangoParser.CONTINUE)
                        pass
                    elif token in [21]:
                        self.state = 2809
                        self.match(FandangoParser.DEF)
                        pass
                    elif token in [22]:
                        self.state = 2810
                        self.match(FandangoParser.DEL)
                        pass
                    elif token in [23]:
                        self.state = 2811
                        self.match(FandangoParser.ELIF)
                        pass
                    elif token in [24]:
                        self.state = 2812
                        self.match(FandangoParser.ELSE)
                        pass
                    elif token in [25]:
                        self.state = 2813
                        self.match(FandangoParser.EXCEPT)
                        pass
                    elif token in [26]:
                        self.state = 2814
                        self.match(FandangoParser.FALSE)
                        pass
                    elif token in [27]:
                        self.state = 2815
                        self.match(FandangoParser.FINALLY)
                        pass
                    elif token in [28]:
                        self.state = 2816
                        self.match(FandangoParser.FOR)
                        pass
                    elif token in [29]:
                        self.state = 2817
                        self.match(FandangoParser.FROM)
                        pass
                    elif token in [30]:
                        self.state = 2818
                        self.match(FandangoParser.GLOBAL)
                        pass
                    elif token in [31]:
                        self.state = 2819
                        self.match(FandangoParser.IF)
                        pass
                    elif token in [32]:
                        self.state = 2820
                        self.match(FandangoParser.IMPORT)
                        pass
                    elif token in [33]:
                        self.state = 2821
                        self.match(FandangoParser.IN)
                        pass
                    elif token in [34]:
                        self.state = 2822
                        self.match(FandangoParser.IS)
                        pass
                    elif token in [35]:
                        self.state = 2823
                        self.match(FandangoParser.LAMBDA)
                        pass
                    elif token in [36]:
                        self.state = 2824
                        self.match(FandangoParser.MATCH)
                        pass
                    elif token in [37]:
                        self.state = 2825
                        self.match(FandangoParser.NONE)
                        pass
                    elif token in [38]:
                        self.state = 2826
                        self.match(FandangoParser.NONLOCAL)
                        pass
                    elif token in [39]:
                        self.state = 2827
                        self.match(FandangoParser.NOT)
                        pass
                    elif token in [40]:
                        self.state = 2828
                        self.match(FandangoParser.OR)
                        pass
                    elif token in [41]:
                        self.state = 2829
                        self.match(FandangoParser.PASS)
                        pass
                    elif token in [42]:
                        self.state = 2830
                        self.match(FandangoParser.RAISE)
                        pass
                    elif token in [43]:
                        self.state = 2831
                        self.match(FandangoParser.RETURN)
                        pass
                    elif token in [44]:
                        self.state = 2832
                        self.match(FandangoParser.TRUE)
                        pass
                    elif token in [45]:
                        self.state = 2833
                        self.match(FandangoParser.TRY)
                        pass
                    elif token in [46]:
                        self.state = 2834
                        self.match(FandangoParser.TYPE)
                        pass
                    elif token in [47]:
                        self.state = 2835
                        self.match(FandangoParser.WHILE)
                        pass
                    elif token in [48]:
                        self.state = 2836
                        self.match(FandangoParser.WHERE)
                        pass
                    elif token in [49]:
                        self.state = 2837
                        self.match(FandangoParser.WITH)
                        pass
                    elif token in [50]:
                        self.state = 2838
                        self.match(FandangoParser.YIELD)
                        pass
                    elif token in [51]:
                        self.state = 2839
                        self.match(FandangoParser.FORALL)
                        pass
                    elif token in [52]:
                        self.state = 2840
                        self.match(FandangoParser.EXISTS)
                        pass
                    elif token in [53]:
                        self.state = 2841
                        self.match(FandangoParser.MAXIMIZING)
                        pass
                    elif token in [54]:
                        self.state = 2842
                        self.match(FandangoParser.MINIMIZING)
                        pass
                    elif token in [55]:
                        self.state = 2843
                        self.match(FandangoParser.ANY)
                        pass
                    elif token in [56]:
                        self.state = 2844
                        self.match(FandangoParser.ALL)
                        pass
                    elif token in [57]:
                        self.state = 2845
                        self.match(FandangoParser.LEN)
                        pass
                    elif token in [59]:
                        self.state = 2846
                        self.match(FandangoParser.NAME)
                        pass
                    elif token in [72]:
                        self.state = 2847
                        self.match(FandangoParser.GRAMMAR_ASSIGN)
                        pass
                    elif token in [73]:
                        self.state = 2848
                        self.match(FandangoParser.QUESTION)
                        pass
                    elif token in [77]:
                        self.state = 2849
                        self.match(FandangoParser.DOT)
                        pass
                    elif token in [76]:
                        self.state = 2850
                        self.match(FandangoParser.DOTDOT)
                        pass
                    elif token in [75]:
                        self.state = 2851
                        self.match(FandangoParser.ELLIPSIS)
                        pass
                    elif token in [78]:
                        self.state = 2852
                        self.match(FandangoParser.STAR)
                        pass
                    elif token in [79]:
                        self.state = 2853
                        self.match(FandangoParser.OPEN_PAREN)
                        pass
                    elif token in [80]:
                        self.state = 2854
                        self.match(FandangoParser.CLOSE_PAREN)
                        pass
                    elif token in [81]:
                        self.state = 2855
                        self.match(FandangoParser.COMMA)
                        pass
                    elif token in [82]:
                        self.state = 2856
                        self.match(FandangoParser.COLON)
                        pass
                    elif token in [83]:
                        self.state = 2857
                        self.match(FandangoParser.SEMI_COLON)
                        pass
                    elif token in [84]:
                        self.state = 2858
                        self.match(FandangoParser.POWER)
                        pass
                    elif token in [85]:
                        self.state = 2859
                        self.match(FandangoParser.ASSIGN)
                        pass
                    elif token in [86]:
                        self.state = 2860
                        self.match(FandangoParser.OPEN_BRACK)
                        pass
                    elif token in [87]:
                        self.state = 2861
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass
                    elif token in [88]:
                        self.state = 2862
                        self.match(FandangoParser.OR_OP)
                        pass
                    elif token in [89]:
                        self.state = 2863
                        self.match(FandangoParser.XOR)
                        pass
                    elif token in [90]:
                        self.state = 2864
                        self.match(FandangoParser.AND_OP)
                        pass
                    elif token in [91]:
                        self.state = 2865
                        self.match(FandangoParser.LEFT_SHIFT)
                        pass
                    elif token in [92]:
                        self.state = 2866
                        self.match(FandangoParser.RIGHT_SHIFT)
                        pass
                    elif token in [93]:
                        self.state = 2867
                        self.match(FandangoParser.ADD)
                        pass
                    elif token in [94]:
                        self.state = 2868
                        self.match(FandangoParser.MINUS)
                        pass
                    elif token in [95]:
                        self.state = 2869
                        self.match(FandangoParser.DIV)
                        pass
                    elif token in [96]:
                        self.state = 2870
                        self.match(FandangoParser.MOD)
                        pass
                    elif token in [97]:
                        self.state = 2871
                        self.match(FandangoParser.IDIV)
                        pass
                    elif token in [98]:
                        self.state = 2872
                        self.match(FandangoParser.NOT_OP)
                        pass
                    elif token in [99]:
                        self.state = 2873
                        self.match(FandangoParser.OPEN_BRACE)
                        self.state = 2874
                        self.match(FandangoParser.OPEN_BRACE)
                        pass
                    elif token in [100]:
                        self.state = 2875
                        self.match(FandangoParser.CLOSE_BRACE)
                        self.state = 2876
                        self.match(FandangoParser.CLOSE_BRACE)
                        pass
                    elif token in [101]:
                        self.state = 2877
                        self.match(FandangoParser.LESS_THAN)
                        pass
                    elif token in [102]:
                        self.state = 2878
                        self.match(FandangoParser.GREATER_THAN)
                        pass
                    elif token in [103]:
                        self.state = 2879
                        self.match(FandangoParser.EQUALS)
                        pass
                    elif token in [104]:
                        self.state = 2880
                        self.match(FandangoParser.GT_EQ)
                        pass
                    elif token in [105]:
                        self.state = 2881
                        self.match(FandangoParser.LT_EQ)
                        pass
                    elif token in [106]:
                        self.state = 2882
                        self.match(FandangoParser.NOT_EQ_1)
                        pass
                    elif token in [107]:
                        self.state = 2883
                        self.match(FandangoParser.NOT_EQ_2)
                        pass
                    elif token in [108]:
                        self.state = 2884
                        self.match(FandangoParser.AT)
                        pass
                    elif token in [109]:
                        self.state = 2885
                        self.match(FandangoParser.ARROW)
                        pass
                    elif token in [110]:
                        self.state = 2886
                        self.match(FandangoParser.ADD_ASSIGN)
                        pass
                    elif token in [111]:
                        self.state = 2887
                        self.match(FandangoParser.SUB_ASSIGN)
                        pass
                    elif token in [112]:
                        self.state = 2888
                        self.match(FandangoParser.MULT_ASSIGN)
                        pass
                    elif token in [113]:
                        self.state = 2889
                        self.match(FandangoParser.AT_ASSIGN)
                        pass
                    elif token in [114]:
                        self.state = 2890
                        self.match(FandangoParser.DIV_ASSIGN)
                        pass
                    elif token in [115]:
                        self.state = 2891
                        self.match(FandangoParser.MOD_ASSIGN)
                        pass
                    elif token in [116]:
                        self.state = 2892
                        self.match(FandangoParser.AND_ASSIGN)
                        pass
                    elif token in [117]:
                        self.state = 2893
                        self.match(FandangoParser.OR_ASSIGN)
                        pass
                    elif token in [118]:
                        self.state = 2894
                        self.match(FandangoParser.XOR_ASSIGN)
                        pass
                    elif token in [119]:
                        self.state = 2895
                        self.match(FandangoParser.LEFT_SHIFT_ASSIGN)
                        pass
                    elif token in [120]:
                        self.state = 2896
                        self.match(FandangoParser.RIGHT_SHIFT_ASSIGN)
                        pass
                    elif token in [121]:
                        self.state = 2897
                        self.match(FandangoParser.POWER_ASSIGN)
                        pass
                    elif token in [122]:
                        self.state = 2898
                        self.match(FandangoParser.IDIV_ASSIGN)
                        pass
                    elif token in [123]:
                        self.state = 2899
                        self.match(FandangoParser.EXPR_ASSIGN)
                        pass
                    elif token in [124]:
                        self.state = 2900
                        self.match(FandangoParser.EXCL)
                        pass
                    elif token in [126]:
                        self.state = 2901
                        self.match(FandangoParser.SKIP_)
                        pass
                    elif token in [129]:
                        self.state = 2902
                        self.match(FandangoParser.UNKNOWN_CHAR)
                        pass
                    else:
                        raise NoViableAltException(self)

                else:
                    raise NoViableAltException(self)
                self.state = 2905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 345, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_replacement_fieldContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FandangoParser.Yield_exprContext, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(FandangoParser.Star_expressionsContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def fstring_conversion(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_conversionContext, 0)

        def fstring_full_format_spec(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_full_format_specContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_replacement_field

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_replacement_field"):
                return visitor.visitFstring_replacement_field(self)
            else:
                return visitor.visitChildren(self)

    def fstring_replacement_field(self):

        localctx = FandangoParser.Fstring_replacement_fieldContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 406, self.RULE_fstring_replacement_field)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2907
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 2910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 2908
                self.yield_expr()
                pass
            elif token in [
                3,
                4,
                5,
                6,
                7,
                8,
                16,
                26,
                35,
                37,
                39,
                44,
                55,
                56,
                57,
                59,
                75,
                78,
                79,
                84,
                86,
                88,
                93,
                94,
                98,
                99,
                101,
            ]:
                self.state = 2909
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 2912
                self.match(FandangoParser.ASSIGN)

            self.state = 2916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 124:
                self.state = 2915
                self.fstring_conversion()

            self.state = 2919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 82:
                self.state = 2918
                self.fstring_full_format_spec()

            self.state = 2921
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_conversionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(FandangoParser.EXCL, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_conversion

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_conversion"):
                return visitor.visitFstring_conversion(self)
            else:
                return visitor.visitChildren(self)

    def fstring_conversion(self):

        localctx = FandangoParser.Fstring_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_fstring_conversion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.match(FandangoParser.EXCL)
            self.state = 2924
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_full_format_specContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def fstring_format_spec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Fstring_format_specContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Fstring_format_specContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_full_format_spec

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_full_format_spec"):
                return visitor.visitFstring_full_format_spec(self)
            else:
                return visitor.visitChildren(self)

    def fstring_full_format_spec(self):

        localctx = FandangoParser.Fstring_full_format_specContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 410, self.RULE_fstring_full_format_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2926
            self.match(FandangoParser.COLON)
            self.state = 2930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 350, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2927
                    self.fstring_format_spec()
                self.state = 2932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 350, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fstring_format_specContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(
                FandangoParser.Fstring_replacement_fieldContext, 0
            )

        def fstring_middle(self):
            return self.getTypedRuleContext(FandangoParser.Fstring_middleContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring_format_spec

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring_format_spec"):
                return visitor.visitFstring_format_spec(self)
            else:
                return visitor.visitChildren(self)

    def fstring_format_spec(self):

        localctx = FandangoParser.Fstring_format_specContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 412, self.RULE_fstring_format_spec)
        try:
            self.state = 2935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 351, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2933
                self.fstring_replacement_field()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2934
                self.fstring_middle()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FstringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_START_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_START_QUOTE, 0)

        def FSTRING_END_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_QUOTE, 0)

        def fstring_middle_no_quote(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Fstring_middle_no_quoteContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Fstring_middle_no_quoteContext, i
                )

        def FSTRING_START_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_START_SINGLE_QUOTE, 0)

        def FSTRING_END_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_SINGLE_QUOTE, 0)

        def fstring_middle_no_single_quote(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Fstring_middle_no_single_quoteContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Fstring_middle_no_single_quoteContext, i
                )

        def FSTRING_START_TRIPLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_START_TRIPLE_QUOTE, 0)

        def FSTRING_END_TRIPLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_TRIPLE_QUOTE, 0)

        def fstring_middle_breaks_no_triple_quote(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Fstring_middle_breaks_no_triple_quoteContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Fstring_middle_breaks_no_triple_quoteContext, i
                )

        def FSTRING_START_TRIPLE_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_START_TRIPLE_SINGLE_QUOTE, 0)

        def FSTRING_END_TRIPLE_SINGLE_QUOTE(self):
            return self.getToken(FandangoParser.FSTRING_END_TRIPLE_SINGLE_QUOTE, 0)

        def fstring_middle_breaks_no_triple_single_quote(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Fstring_middle_breaks_no_triple_single_quoteContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Fstring_middle_breaks_no_triple_single_quoteContext,
                    i,
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_fstring

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFstring"):
                return visitor.visitFstring(self)
            else:
                return visitor.visitChildren(self)

    def fstring(self):

        localctx = FandangoParser.FstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_fstring)
        self._la = 0  # Token type
        try:
            self.state = 2969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2937
                self.match(FandangoParser.FSTRING_START_QUOTE)
                self.state = 2941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    (((_la - 8)) & ~0x3F) == 0
                    and ((1 << (_la - 8)) & 93449692267937789) != 0
                ) or (
                    (((_la - 72)) & ~0x3F) == 0
                    and ((1 << (_la - 72)) & 171136785840078843) != 0
                ):
                    self.state = 2938
                    self.fstring_middle_no_quote()
                    self.state = 2943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2944
                self.match(FandangoParser.FSTRING_END_QUOTE)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2945
                self.match(FandangoParser.FSTRING_START_SINGLE_QUOTE)
                self.state = 2949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & -6052837899185947392) != 0
                ) or (
                    (((_la - 72)) & ~0x3F) == 0
                    and ((1 << (_la - 72)) & 171136785840078843) != 0
                ):
                    self.state = 2946
                    self.fstring_middle_no_single_quote()
                    self.state = 2951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2952
                self.match(FandangoParser.FSTRING_END_SINGLE_QUOTE)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2953
                self.match(FandangoParser.FSTRING_START_TRIPLE_QUOTE)
                self.state = 2957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    (((_la - 8)) & ~0x3F) == 0
                    and ((1 << (_la - 8)) & 75435293758455805) != 0
                ) or (
                    (((_la - 72)) & ~0x3F) == 0
                    and ((1 << (_la - 72)) & 180143985094819835) != 0
                ):
                    self.state = 2954
                    self.fstring_middle_breaks_no_triple_quote()
                    self.state = 2959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2960
                self.match(FandangoParser.FSTRING_END_TRIPLE_QUOTE)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2961
                self.match(FandangoParser.FSTRING_START_TRIPLE_SINGLE_QUOTE)
                self.state = 2965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & -8358680908399641344) != 0
                ) or (
                    (((_la - 72)) & ~0x3F) == 0
                    and ((1 << (_la - 72)) & 180143985094819835) != 0
                ):
                    self.state = 2962
                    self.fstring_middle_breaks_no_triple_single_quote()
                    self.state = 2967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2968
                self.match(FandangoParser.FSTRING_END_TRIPLE_SINGLE_QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(FandangoParser.STRING, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_string

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)

    def string(self):

        localctx = FandangoParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2971
            self.match(FandangoParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.FstringContext)
            else:
                return self.getTypedRuleContext(FandangoParser.FstringContext, i)

        def string(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.StringContext)
            else:
                return self.getTypedRuleContext(FandangoParser.StringContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_strings

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStrings"):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)

    def strings(self):

        localctx = FandangoParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_strings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2975
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2975
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 5, 6]:
                        self.state = 2973
                        self.fstring()
                        pass
                    elif token in [7]:
                        self.state = 2974
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)

                else:
                    raise NoViableAltException(self)
                self.state = 2977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 358, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_list

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitList"):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)

    def list_(self):

        localctx = FandangoParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2979
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0) or (
                (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
            ):
                self.state = 2980
                self.star_named_expressions()

            self.state = 2983
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def star_named_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionContext, 0
            )

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_tuple

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTuple"):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)

    def tuple_(self):

        localctx = FandangoParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_tuple)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2985
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 2990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0) or (
                (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
            ):
                self.state = 2986
                self.star_named_expression()
                self.state = 2987
                self.match(FandangoParser.COMMA)

                self.state = 2988
                self.star_named_expressions()

            self.state = 2992
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_named_expressionsContext, 0
            )

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_set

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSet"):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)

    def set_(self):

        localctx = FandangoParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2994
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 2995
            self.star_named_expressions()
            self.state = 2996
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def double_starred_kvpairs(self):
            return self.getTypedRuleContext(
                FandangoParser.Double_starred_kvpairsContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_dict

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDict"):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)

    def dict_(self):

        localctx = FandangoParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_dict)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 3000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 828680645243896312) != 0) or (
                (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 93071897) != 0
            ):
                self.state = 2999
                self.double_starred_kvpairs()

            self.state = 3002
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_starred_kvpairsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def double_starred_kvpair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Double_starred_kvpairContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Double_starred_kvpairContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_double_starred_kvpairs

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDouble_starred_kvpairs"):
                return visitor.visitDouble_starred_kvpairs(self)
            else:
                return visitor.visitChildren(self)

    def double_starred_kvpairs(self):

        localctx = FandangoParser.Double_starred_kvpairsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 428, self.RULE_double_starred_kvpairs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3004
            self.double_starred_kvpair()
            self.state = 3009
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 362, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3005
                    self.match(FandangoParser.COMMA)
                    self.state = 3006
                    self.double_starred_kvpair()
                self.state = 3011
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 362, self._ctx)

            self.state = 3013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 3012
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_starred_kvpairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(FandangoParser.Bitwise_orContext, 0)

        def kvpair(self):
            return self.getTypedRuleContext(FandangoParser.KvpairContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_double_starred_kvpair

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDouble_starred_kvpair"):
                return visitor.visitDouble_starred_kvpair(self)
            else:
                return visitor.visitChildren(self)

    def double_starred_kvpair(self):

        localctx = FandangoParser.Double_starred_kvpairContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 430, self.RULE_double_starred_kvpair)
        try:
            self.state = 3018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 364, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3015
                self.match(FandangoParser.POWER)
                self.state = 3016
                self.bitwise_or(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3017
                self.kvpair()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KvpairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COLON(self):
            return self.getToken(FandangoParser.COLON, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kvpair

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKvpair"):
                return visitor.visitKvpair(self)
            else:
                return visitor.visitChildren(self)

    def kvpair(self):

        localctx = FandangoParser.KvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_kvpair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3020
            self.expression()
            self.state = 3021
            self.match(FandangoParser.COLON)
            self.state = 3022
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_if_clausesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_if_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.For_if_clauseContext)
            else:
                return self.getTypedRuleContext(FandangoParser.For_if_clauseContext, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_if_clauses

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_if_clauses"):
                return visitor.visitFor_if_clauses(self)
            else:
                return visitor.visitChildren(self)

    def for_if_clauses(self):

        localctx = FandangoParser.For_if_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_for_if_clauses)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3024
                self.for_if_clause()
                self.state = 3027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 15 or _la == 28):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_if_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FandangoParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetsContext, 0)

        def IN(self):
            return self.getToken(FandangoParser.IN, 0)

        def disjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.DisjunctionContext, i)

        def ASYNC(self):
            return self.getToken(FandangoParser.ASYNC, 0)

        def IF(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.IF)
            else:
                return self.getToken(FandangoParser.IF, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_for_if_clause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_if_clause"):
                return visitor.visitFor_if_clause(self)
            else:
                return visitor.visitChildren(self)

    def for_if_clause(self):

        localctx = FandangoParser.For_if_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_for_if_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 15:
                self.state = 3029
                self.match(FandangoParser.ASYNC)

            self.state = 3032
            self.match(FandangoParser.FOR)
            self.state = 3033
            self.star_targets()
            self.state = 3034
            self.match(FandangoParser.IN)
            self.state = 3035
            self.disjunction()
            self.state = 3040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 31:
                self.state = 3036
                self.match(FandangoParser.IF)
                self.state = 3037
                self.disjunction()
                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListcompContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_listcomp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListcomp"):
                return visitor.visitListcomp(self)
            else:
                return visitor.visitChildren(self)

    def listcomp(self):

        localctx = FandangoParser.ListcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_listcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self.match(FandangoParser.OPEN_BRACK)
            self.state = 3044
            self.named_expression()
            self.state = 3045
            self.for_if_clauses()
            self.state = 3046
            self.match(FandangoParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetcompContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(FandangoParser.Named_expressionContext, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_setcomp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetcomp"):
                return visitor.visitSetcomp(self)
            else:
                return visitor.visitChildren(self)

    def setcomp(self):

        localctx = FandangoParser.SetcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_setcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3048
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 3049
            self.named_expression()
            self.state = 3050
            self.for_if_clauses()
            self.state = 3051
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenexpContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Assignment_expressionContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_genexp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenexp"):
                return visitor.visitGenexp(self)
            else:
                return visitor.visitChildren(self)

    def genexp(self):

        localctx = FandangoParser.GenexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_genexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.match(FandangoParser.OPEN_PAREN)
            self.state = 3056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 368, self._ctx)
            if la_ == 1:
                self.state = 3054
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.state = 3055
                self.expression()
                pass

            self.state = 3058
            self.for_if_clauses()
            self.state = 3059
            self.match(FandangoParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictcompContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FandangoParser.OPEN_BRACE, 0)

        def kvpair(self):
            return self.getTypedRuleContext(FandangoParser.KvpairContext, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(FandangoParser.For_if_clausesContext, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FandangoParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_dictcomp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDictcomp"):
                return visitor.visitDictcomp(self)
            else:
                return visitor.visitChildren(self)

    def dictcomp(self):

        localctx = FandangoParser.DictcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_dictcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.match(FandangoParser.OPEN_BRACE)
            self.state = 3062
            self.kvpair()
            self.state = 3063
            self.for_if_clauses()
            self.state = 3064
            self.match(FandangoParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FandangoParser.ArgsContext, 0)

        def COMMA(self):
            return self.getToken(FandangoParser.COMMA, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_arguments

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArguments"):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)

    def arguments(self):

        localctx = FandangoParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3066
            self.args()
            self.state = 3068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 3067
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ArgContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ArgContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def kwargs(self):
            return self.getTypedRuleContext(FandangoParser.KwargsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_args

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgs"):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)

    def args(self):

        localctx = FandangoParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_args)
        try:
            self.state = 3083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 372, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3070
                self.arg()
                self.state = 3075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 370, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3071
                        self.match(FandangoParser.COMMA)
                        self.state = 3072
                        self.arg()
                    self.state = 3077
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 370, self._ctx)

                self.state = 3080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 371, self._ctx)
                if la_ == 1:
                    self.state = 3078
                    self.match(FandangoParser.COMMA)
                    self.state = 3079
                    self.kwargs()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3082
                self.kwargs()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_selection(self):
            return self.getTypedRuleContext(FandangoParser.Star_selectionContext, 0)

        def starred_expression(self):
            return self.getTypedRuleContext(FandangoParser.Starred_expressionContext, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(
                FandangoParser.Assignment_expressionContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_arg

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArg"):
                return visitor.visitArg(self)
            else:
                return visitor.visitChildren(self)

    def arg(self):

        localctx = FandangoParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_arg)
        try:
            self.state = 3089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 373, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3085
                self.star_selection()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3086
                self.starred_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3087
                self.assignment_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3088
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KwargsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kwarg_or_starred(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Kwarg_or_starredContext)
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Kwarg_or_starredContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def kwarg_or_double_starred(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FandangoParser.Kwarg_or_double_starredContext
                )
            else:
                return self.getTypedRuleContext(
                    FandangoParser.Kwarg_or_double_starredContext, i
                )

        def getRuleIndex(self):
            return FandangoParser.RULE_kwargs

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwargs"):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)

    def kwargs(self):

        localctx = FandangoParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_kwargs)
        try:
            self.state = 3124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 378, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3091
                self.kwarg_or_starred()
                self.state = 3096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 374, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3092
                        self.match(FandangoParser.COMMA)
                        self.state = 3093
                        self.kwarg_or_starred()
                    self.state = 3098
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 374, self._ctx)

                self.state = 3099
                self.match(FandangoParser.COMMA)
                self.state = 3100
                self.kwarg_or_double_starred()
                self.state = 3105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 375, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3101
                        self.match(FandangoParser.COMMA)
                        self.state = 3102
                        self.kwarg_or_double_starred()
                    self.state = 3107
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 375, self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3108
                self.kwarg_or_starred()
                self.state = 3113
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3109
                        self.match(FandangoParser.COMMA)
                        self.state = 3110
                        self.kwarg_or_starred()
                    self.state = 3115
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3116
                self.kwarg_or_double_starred()
                self.state = 3121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 377, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3117
                        self.match(FandangoParser.COMMA)
                        self.state = 3118
                        self.kwarg_or_double_starred()
                    self.state = 3123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 377, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Starred_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_starred_expression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStarred_expression"):
                return visitor.visitStarred_expression(self)
            else:
                return visitor.visitChildren(self)

    def starred_expression(self):

        localctx = FandangoParser.Starred_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_starred_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3126
            self.match(FandangoParser.STAR)
            self.state = 3127
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kwarg_or_starredContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def starred_expression(self):
            return self.getTypedRuleContext(FandangoParser.Starred_expressionContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kwarg_or_starred

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwarg_or_starred"):
                return visitor.visitKwarg_or_starred(self)
            else:
                return visitor.visitChildren(self)

    def kwarg_or_starred(self):

        localctx = FandangoParser.Kwarg_or_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_kwarg_or_starred)
        try:
            self.state = 3134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 56, 57, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3129
                self.identifier()
                self.state = 3130
                self.match(FandangoParser.ASSIGN)
                self.state = 3131
                self.expression()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3133
                self.starred_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kwarg_or_double_starredContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def ASSIGN(self):
            return self.getToken(FandangoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(FandangoParser.ExpressionContext, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_kwarg_or_double_starred

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKwarg_or_double_starred"):
                return visitor.visitKwarg_or_double_starred(self)
            else:
                return visitor.visitChildren(self)

    def kwarg_or_double_starred(self):

        localctx = FandangoParser.Kwarg_or_double_starredContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 458, self.RULE_kwarg_or_double_starred)
        try:
            self.state = 3142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 56, 57, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3136
                self.identifier()
                self.state = 3137
                self.match(FandangoParser.ASSIGN)
                self.state = 3138
                self.expression()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3140
                self.match(FandangoParser.POWER)
                self.state = 3141
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targetsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_targets

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_targets"):
                return visitor.visitStar_targets(self)
            else:
                return visitor.visitChildren(self)

    def star_targets(self):

        localctx = FandangoParser.Star_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_star_targets)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3144
            self.star_target()
            self.state = 3149
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 381, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3145
                    self.match(FandangoParser.COMMA)
                    self.state = 3146
                    self.star_target()
                self.state = 3151
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 381, self._ctx)

            self.state = 3153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 3152
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targets_list_seqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_targets_list_seq

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_targets_list_seq"):
                return visitor.visitStar_targets_list_seq(self)
            else:
                return visitor.visitChildren(self)

    def star_targets_list_seq(self):

        localctx = FandangoParser.Star_targets_list_seqContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 462, self.RULE_star_targets_list_seq)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            self.star_target()
            self.state = 3160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3156
                    self.match(FandangoParser.COMMA)
                    self.state = 3157
                    self.star_target()
                self.state = 3162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)

            self.state = 3164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 3163
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targets_tuple_seqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Star_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_star_targets_tuple_seq

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_targets_tuple_seq"):
                return visitor.visitStar_targets_tuple_seq(self)
            else:
                return visitor.visitChildren(self)

    def star_targets_tuple_seq(self):

        localctx = FandangoParser.Star_targets_tuple_seqContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 464, self.RULE_star_targets_tuple_seq)
        self._la = 0  # Token type
        try:
            self.state = 3179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 387, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3166
                self.star_target()
                self.state = 3169
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3167
                        self.match(FandangoParser.COMMA)
                        self.state = 3168
                        self.star_target()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3171
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 385, self._ctx)

                self.state = 3174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 81:
                    self.state = 3173
                    self.match(FandangoParser.COMMA)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3176
                self.star_target()
                self.state = 3177
                self.match(FandangoParser.COMMA)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def star_target(self):
            return self.getTypedRuleContext(FandangoParser.Star_targetContext, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(
                FandangoParser.Target_with_star_atomContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_star_target

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_target"):
                return visitor.visitStar_target(self)
            else:
                return visitor.visitChildren(self)

    def star_target(self):

        localctx = FandangoParser.Star_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_star_target)
        try:
            self.state = 3184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 388, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3181
                self.match(FandangoParser.STAR)
                self.state = 3182
                self.star_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3183
                self.target_with_star_atom()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_with_star_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def star_atom(self):
            return self.getTypedRuleContext(FandangoParser.Star_atomContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_target_with_star_atom

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTarget_with_star_atom"):
                return visitor.visitTarget_with_star_atom(self)
            else:
                return visitor.visitChildren(self)

    def target_with_star_atom(self):

        localctx = FandangoParser.Target_with_star_atomContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 468, self.RULE_target_with_star_atom)
        try:
            self.state = 3196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 389, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3186
                self.t_primary(0)
                self.state = 3187
                self.match(FandangoParser.DOT)
                self.state = 3188
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3190
                self.t_primary(0)
                self.state = 3191
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 3192
                self.slices()
                self.state = 3193
                self.match(FandangoParser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3195
                self.star_atom()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(
                FandangoParser.Target_with_star_atomContext, 0
            )

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def star_targets_tuple_seq(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_targets_tuple_seqContext, 0
            )

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def star_targets_list_seq(self):
            return self.getTypedRuleContext(
                FandangoParser.Star_targets_list_seqContext, 0
            )

        def getRuleIndex(self):
            return FandangoParser.RULE_star_atom

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_atom"):
                return visitor.visitStar_atom(self)
            else:
                return visitor.visitChildren(self)

    def star_atom(self):

        localctx = FandangoParser.Star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_star_atom)
        self._la = 0  # Token type
        try:
            self.state = 3213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 392, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3198
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3199
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 3200
                self.target_with_star_atom()
                self.state = 3201
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3203
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 3205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680061128278520) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 83896857) != 0
                ):
                    self.state = 3204
                    self.star_targets_tuple_seq()

                self.state = 3207
                self.match(FandangoParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3208
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 3210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680061128278520) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 83896857) != 0
                ):
                    self.state = 3209
                    self.star_targets_list_seq()

                self.state = 3212
                self.match(FandangoParser.CLOSE_BRACK)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(
                FandangoParser.Single_subscript_attribute_targetContext, 0
            )

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def single_target(self):
            return self.getTypedRuleContext(FandangoParser.Single_targetContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_single_target

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSingle_target"):
                return visitor.visitSingle_target(self)
            else:
                return visitor.visitChildren(self)

    def single_target(self):

        localctx = FandangoParser.Single_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_single_target)
        try:
            self.state = 3221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 393, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3215
                self.single_subscript_attribute_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3216
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3217
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 3218
                self.single_target()
                self.state = 3219
                self.match(FandangoParser.CLOSE_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_subscript_attribute_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_single_subscript_attribute_target

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSingle_subscript_attribute_target"):
                return visitor.visitSingle_subscript_attribute_target(self)
            else:
                return visitor.visitChildren(self)

    def single_subscript_attribute_target(self):

        localctx = FandangoParser.Single_subscript_attribute_targetContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 474, self.RULE_single_subscript_attribute_target)
        try:
            self.state = 3232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 394, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3223
                self.t_primary(0)
                self.state = 3224
                self.match(FandangoParser.DOT)
                self.state = 3225
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3227
                self.t_primary(0)
                self.state = 3228
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 3229
                self.slices()
                self.state = 3230
                self.match(FandangoParser.CLOSE_BRACK)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class T_primaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(FandangoParser.AtomContext, 0)

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def genexp(self):
            return self.getTypedRuleContext(FandangoParser.GenexpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(FandangoParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_t_primary

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitT_primary"):
                return visitor.visitT_primary(self)
            else:
                return visitor.visitChildren(self)

    def t_primary(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FandangoParser.T_primaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 476
        self.enterRecursionRule(localctx, 476, self.RULE_t_primary, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3235
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3253
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 396, self._ctx)
                    if la_ == 1:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 3237
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 3238
                        self.match(FandangoParser.DOT)
                        self.state = 3239
                        self.identifier()
                        pass

                    elif la_ == 2:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 3240
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 3241
                        self.match(FandangoParser.OPEN_BRACK)
                        self.state = 3242
                        self.slices()
                        self.state = 3243
                        self.match(FandangoParser.CLOSE_BRACK)
                        pass

                    elif la_ == 3:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 3245
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 3246
                        self.genexp()
                        pass

                    elif la_ == 4:
                        localctx = FandangoParser.T_primaryContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_t_primary
                        )
                        self.state = 3247
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 3248
                        self.match(FandangoParser.OPEN_PAREN)
                        self.state = 3250
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 828680645243896312) != 0
                        ) or (
                            (((_la - 75)) & ~0x3F) == 0
                            and ((1 << (_la - 75)) & 93071897) != 0
                        ):
                            self.state = 3249
                            self.arguments()

                        self.state = 3252
                        self.match(FandangoParser.CLOSE_PAREN)
                        pass

                self.state = 3257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Del_targetsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def del_target(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.Del_targetContext)
            else:
                return self.getTypedRuleContext(FandangoParser.Del_targetContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_targets

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_targets"):
                return visitor.visitDel_targets(self)
            else:
                return visitor.visitChildren(self)

    def del_targets(self):

        localctx = FandangoParser.Del_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_del_targets)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3258
            self.del_target()
            self.state = 3263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 398, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3259
                    self.match(FandangoParser.COMMA)
                    self.state = 3260
                    self.del_target()
                self.state = 3265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 398, self._ctx)

            self.state = 3267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 81:
                self.state = 3266
                self.match(FandangoParser.COMMA)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_targetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(FandangoParser.T_primaryContext, 0)

        def DOT(self):
            return self.getToken(FandangoParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def slices(self):
            return self.getTypedRuleContext(FandangoParser.SlicesContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def del_t_atom(self):
            return self.getTypedRuleContext(FandangoParser.Del_t_atomContext, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_target

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_target"):
                return visitor.visitDel_target(self)
            else:
                return visitor.visitChildren(self)

    def del_target(self):

        localctx = FandangoParser.Del_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_del_target)
        try:
            self.state = 3279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 400, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3269
                self.t_primary(0)
                self.state = 3270
                self.match(FandangoParser.DOT)
                self.state = 3271
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3273
                self.t_primary(0)
                self.state = 3274
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 3275
                self.slices()
                self.state = 3276
                self.match(FandangoParser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3278
                self.del_t_atom()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_t_atomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FandangoParser.IdentifierContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(FandangoParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FandangoParser.CLOSE_PAREN, 0)

        def del_targets(self):
            return self.getTypedRuleContext(FandangoParser.Del_targetsContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(FandangoParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(FandangoParser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_del_t_atom

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_t_atom"):
                return visitor.visitDel_t_atom(self)
            else:
                return visitor.visitChildren(self)

    def del_t_atom(self):

        localctx = FandangoParser.Del_t_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_del_t_atom)
        self._la = 0  # Token type
        try:
            self.state = 3292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 56, 57, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3281
                self.identifier()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3282
                self.match(FandangoParser.OPEN_PAREN)
                self.state = 3284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680061128278520) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 83896857) != 0
                ):
                    self.state = 3283
                    self.del_targets()

                self.state = 3286
                self.match(FandangoParser.CLOSE_PAREN)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3287
                self.match(FandangoParser.OPEN_BRACK)
                self.state = 3289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 828680061128278520) != 0
                ) or (
                    (((_la - 75)) & ~0x3F) == 0 and ((1 << (_la - 75)) & 83896857) != 0
                ):
                    self.state = 3288
                    self.del_targets()

                self.state = 3291
                self.match(FandangoParser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_expressionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FandangoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FandangoParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(FandangoParser.COMMA)
            else:
                return self.getToken(FandangoParser.COMMA, i)

        def STAR(self):
            return self.getToken(FandangoParser.STAR, 0)

        def POWER(self):
            return self.getToken(FandangoParser.POWER, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_type_expressions

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_expressions"):
                return visitor.visitType_expressions(self)
            else:
                return visitor.visitChildren(self)

    def type_expressions(self):

        localctx = FandangoParser.Type_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_type_expressions)
        self._la = 0  # Token type
        try:
            self.state = 3351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 408, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3294
                self.expression()
                self.state = 3299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 404, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3295
                        self.match(FandangoParser.COMMA)
                        self.state = 3296
                        self.expression()
                    self.state = 3301
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 404, self._ctx)

                self.state = 3302
                self.match(FandangoParser.COMMA)
                self.state = 3303
                self.match(FandangoParser.STAR)
                self.state = 3304
                self.expression()
                self.state = 3305
                self.match(FandangoParser.COMMA)
                self.state = 3306
                self.match(FandangoParser.POWER)
                self.state = 3307
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3309
                self.expression()
                self.state = 3314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 405, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3310
                        self.match(FandangoParser.COMMA)
                        self.state = 3311
                        self.expression()
                    self.state = 3316
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 405, self._ctx)

                self.state = 3317
                self.match(FandangoParser.COMMA)
                self.state = 3318
                self.match(FandangoParser.STAR)
                self.state = 3319
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3321
                self.expression()
                self.state = 3326
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 406, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3322
                        self.match(FandangoParser.COMMA)
                        self.state = 3323
                        self.expression()
                    self.state = 3328
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 406, self._ctx)

                self.state = 3329
                self.match(FandangoParser.COMMA)
                self.state = 3330
                self.match(FandangoParser.POWER)
                self.state = 3331
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3333
                self.match(FandangoParser.STAR)
                self.state = 3334
                self.expression()
                self.state = 3335
                self.match(FandangoParser.COMMA)
                self.state = 3336
                self.match(FandangoParser.POWER)
                self.state = 3337
                self.expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3339
                self.match(FandangoParser.STAR)
                self.state = 3340
                self.expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3341
                self.match(FandangoParser.POWER)
                self.state = 3342
                self.expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3343
                self.expression()
                self.state = 3348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 81:
                    self.state = 3344
                    self.match(FandangoParser.COMMA)
                    self.state = 3345
                    self.expression()
                    self.state = 3350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_type_commentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(FandangoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_func_type_comment

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_type_comment"):
                return visitor.visitFunc_type_comment(self)
            else:
                return visitor.visitChildren(self)

    def func_type_comment(self):

        localctx = FandangoParser.Func_type_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_func_type_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3353
            self.match(FandangoParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FandangoParser.NAME, 0)

        def ANY(self):
            return self.getToken(FandangoParser.ANY, 0)

        def ALL(self):
            return self.getToken(FandangoParser.ALL, 0)

        def LEN(self):
            return self.getToken(FandangoParser.LEN, 0)

        def getRuleIndex(self):
            return FandangoParser.RULE_identifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def identifier(self):

        localctx = FandangoParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_identifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3355
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 828662331436171264) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[14] = self.generator_call_sempred
        self._predicates[28] = self.dot_selection_sempred
        self._predicates[70] = self.dotted_name_sempred
        self._predicates[124] = self.name_or_attr_sempred
        self._predicates[168] = self.bitwise_or_sempred
        self._predicates[169] = self.bitwise_xor_sempred
        self._predicates[170] = self.bitwise_and_sempred
        self._predicates[171] = self.shift_expr_sempred
        self._predicates[172] = self.sum_sempred
        self._predicates[173] = self.term_sempred
        self._predicates[177] = self.primary_sempred
        self._predicates[238] = self.t_primary_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def generator_call_sempred(self, localctx: Generator_callContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 4)

        if predIndex == 1:
            return self.precpred(self._ctx, 3)

        if predIndex == 2:
            return self.precpred(self._ctx, 2)

        if predIndex == 3:
            return self.precpred(self._ctx, 1)

    def dot_selection_sempred(self, localctx: Dot_selectionContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 2)

        if predIndex == 5:
            return self.precpred(self._ctx, 1)

    def dotted_name_sempred(self, localctx: Dotted_nameContext, predIndex: int):
        if predIndex == 6:
            return self.precpred(self._ctx, 2)

    def name_or_attr_sempred(self, localctx: Name_or_attrContext, predIndex: int):
        if predIndex == 7:
            return self.precpred(self._ctx, 2)

    def bitwise_or_sempred(self, localctx: Bitwise_orContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 2)

    def bitwise_xor_sempred(self, localctx: Bitwise_xorContext, predIndex: int):
        if predIndex == 9:
            return self.precpred(self._ctx, 2)

    def bitwise_and_sempred(self, localctx: Bitwise_andContext, predIndex: int):
        if predIndex == 10:
            return self.precpred(self._ctx, 2)

    def shift_expr_sempred(self, localctx: Shift_exprContext, predIndex: int):
        if predIndex == 11:
            return self.precpred(self._ctx, 3)

        if predIndex == 12:
            return self.precpred(self._ctx, 2)

    def sum_sempred(self, localctx: SumContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 3)

        if predIndex == 14:
            return self.precpred(self._ctx, 2)

    def term_sempred(self, localctx: TermContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 6)

        if predIndex == 16:
            return self.precpred(self._ctx, 5)

        if predIndex == 17:
            return self.precpred(self._ctx, 4)

        if predIndex == 18:
            return self.precpred(self._ctx, 3)

        if predIndex == 19:
            return self.precpred(self._ctx, 2)

    def primary_sempred(self, localctx: PrimaryContext, predIndex: int):
        if predIndex == 20:
            return self.precpred(self._ctx, 5)

        if predIndex == 21:
            return self.precpred(self._ctx, 4)

        if predIndex == 22:
            return self.precpred(self._ctx, 3)

        if predIndex == 23:
            return self.precpred(self._ctx, 2)

    def t_primary_sempred(self, localctx: T_primaryContext, predIndex: int):
        if predIndex == 24:
            return self.precpred(self._ctx, 5)

        if predIndex == 25:
            return self.precpred(self._ctx, 4)

        if predIndex == 26:
            return self.precpred(self._ctx, 3)

        if predIndex == 27:
            return self.precpred(self._ctx, 2)
