
// Generated from language/FandangoParser.g4 by ANTLR 4.13.2


#include "FandangoParserVisitor.h"

#include "FandangoParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct FandangoParserStaticData final {
  FandangoParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FandangoParserStaticData(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData(FandangoParserStaticData&&) = delete;
  FandangoParserStaticData& operator=(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData& operator=(FandangoParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fandangoparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<FandangoParserStaticData> fandangoparserParserStaticData = nullptr;

void fandangoparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fandangoparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(fandangoparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FandangoParserStaticData>(
    std::vector<std::string>{
      "fandango", "program", "statement", "production", "opt_indentation", 
      "alternative", "concatenation", "operator", "kleene", "plus", "option", 
      "repeat", "symbol", "nonterminal_right", "nonterminal", "generator_call", 
      "char_set", "constraint", "implies", "quantifier", "formula_disjunction", 
      "formula_conjunction", "formula_atom", "formula_comparison", "expr", 
      "selector_length", "selector", "selection", "base_selection", "rs_pairs", 
      "rs_pair", "rs_slices", "rs_slice", "python", "python_tag", "python_file", 
      "interactive", "eval", "func_type", "statements", "stmt", "statement_newline", 
      "simple_stmts", "simple_stmt", "compound_stmt", "assignment", "annotated_rhs", 
      "augassign", "return_stmt", "raise_stmt", "global_stmt", "nonlocal_stmt", 
      "del_stmt", "yield_stmt", "assert_stmt", "import_stmt", "import_name", 
      "import_from", "import_from_targets", "import_from_as_names", "import_from_as_name", 
      "dotted_as_names", "dotted_as_name", "dotted_name", "block", "decorators", 
      "class_def", "class_def_raw", "function_def", "function_def_raw", 
      "params", "parameters", "slash_no_default", "slash_with_default", 
      "star_etc", "kwds", "param_no_default", "param_no_default_star_annotation", 
      "param_with_default", "param_maybe_default", "param", "param_star_annotation", 
      "annotation", "star_annotation", "default", "if_stmt", "elif_stmt", 
      "else_block", "while_stmt", "for_stmt", "with_stmt", "with_item", 
      "try_stmt", "except_block", "except_star_block", "finally_block", 
      "match_stmt", "subject_expr", "case_block", "guard", "patterns", "pattern", 
      "as_pattern", "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
      "complex_number", "signed_number", "signed_real_number", "real_number", 
      "imaginary_number", "capture_pattern", "pattern_capture_target", "wildcard_pattern", 
      "value_pattern", "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
      "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
      "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
      "double_star_pattern", "class_pattern", "positional_patterns", "keyword_patterns", 
      "keyword_pattern", "type_alias", "type_params", "type_param_seq", 
      "type_param", "type_param_bound", "expressions", "expression", "yield_expr", 
      "star_expressions", "star_expression", "star_named_expressions", "star_named_expression", 
      "assignment_expression", "named_expression", "disjunction", "conjunction", 
      "inversion", "comparison", "compare_op_bitwise_or_pair", "eq_bitwise_or", 
      "noteq_bitwise_or", "lte_bitwise_or", "lt_bitwise_or", "gte_bitwise_or", 
      "gt_bitwise_or", "notin_bitwise_or", "in_bitwise_or", "isnot_bitwise_or", 
      "is_bitwise_or", "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", 
      "sum", "term", "factor", "power", "await_primary", "primary", "slices", 
      "slice", "atom", "group", "lambdef", "lambda_params", "lambda_parameters", 
      "lambda_slash_no_default", "lambda_slash_with_default", "lambda_star_etc", 
      "lambda_kwds", "lambda_param_no_default", "lambda_param_with_default", 
      "lambda_param_maybe_default", "lambda_param", "fstring_middle", "fstring_replacement_field", 
      "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
      "fstring", "string", "strings", "list", "tuple", "set", "dict", "double_starred_kvpairs", 
      "double_starred_kvpair", "kvpair", "for_if_clauses", "for_if_clause", 
      "listcomp", "setcomp", "genexp", "dictcomp", "arguments", "args", 
      "arg", "kwargs", "starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", 
      "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
      "star_target", "target_with_star_atom", "star_atom", "single_target", 
      "single_subscript_attribute_target", "t_primary", "del_targets", "del_target", 
      "del_t_atom", "type_expressions", "func_type_comment"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "'<py>'", "'</py>'", "'and'", "'as'", "'assert'", 
      "'async'", "'await'", "'break'", "'case'", "'class'", "'continue'", 
      "'def'", "'del'", "'elif'", "'else'", "'except'", "'False'", "'finally'", 
      "'for'", "'from'", "'global'", "'if'", "'import'", "'in'", "'is'", 
      "'lambda'", "'match'", "'None'", "'nonlocal'", "'not'", "'or'", "'pass'", 
      "'raise'", "'return'", "'True'", "'try'", "'type'", "'while'", "'where'", 
      "'with'", "'yield'", "'forall'", "'exists'", "'maximizing'", "'minimizing'", 
      "", "", "", "", "", "", "", "", "", "'::='", "'\\u003F'", "'\\'", 
      "'.'", "'..'", "'...'", "'*'", "'('", "')'", "','", "':'", "';'", 
      "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
      "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", 
      "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
      "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
      "'**='", "'//='", "':='", "'!'"
    },
    std::vector<std::string>{
      "", "INDENT", "DEDENT", "STRING", "NUMBER", "INTEGER", "PYTHON_START", 
      "PYTHON_END", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", "BREAK", "CASE", 
      "CLASS", "CONTINUE", "DEF", "DEL", "ELIF", "ELSE", "EXCEPT", "FALSE", 
      "FINALLY", "FOR", "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", 
      "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", "RAISE", "RETURN", 
      "TRUE", "TRY", "TYPE", "WHILE", "WHERE", "WITH", "YIELD", "FORALL", 
      "EXISTS", "MAXIMIZING", "MINIMIZING", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
      "IMAG_NUMBER", "GRAMMAR_ASSIGN", "QUESTION", "BACKSLASH", "DOT", "DOTDOT", 
      "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", 
      "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", 
      "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", 
      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
      "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
      "EXPR_ASSIGN", "EXCL", "NEWLINE", "SKIP_", "UNKNOWN_CHAR", "UNDERSCORE", 
      "FSTRING_MIDDLE", "FSTRING_START", "FSTRING_END"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,119,2754,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,1,0,1,0,1,0,1,1,5,1,461,8,1,
  	10,1,12,1,464,9,1,1,1,1,1,5,1,468,8,1,10,1,12,1,471,9,1,5,1,473,8,1,10,
  	1,12,1,476,9,1,1,2,1,2,1,2,3,2,481,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,489,
  	8,3,1,3,1,3,5,3,493,8,3,10,3,12,3,496,9,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
  	504,8,3,1,3,1,3,5,3,508,8,3,10,3,12,3,511,9,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,3,3,520,8,3,1,3,1,3,5,3,524,8,3,10,3,12,3,527,9,3,3,3,529,8,3,1,4,
  	5,4,532,8,4,10,4,12,4,535,9,4,1,4,5,4,538,8,4,10,4,12,4,541,9,4,3,4,543,
  	8,4,1,5,1,5,1,5,5,5,548,8,5,10,5,12,5,551,9,5,1,6,1,6,5,6,555,8,6,10,
  	6,12,6,558,9,6,1,7,1,7,1,7,1,7,1,7,3,7,565,8,7,1,8,1,8,1,8,1,9,1,9,1,
  	9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,584,8,11,
  	1,11,1,11,3,11,588,8,11,1,11,1,11,3,11,592,8,11,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,12,3,12,603,8,12,1,13,1,13,1,13,3,13,608,8,13,1,13,
  	1,13,3,13,612,8,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
  	637,8,15,1,15,5,15,640,8,15,10,15,12,15,643,9,15,1,16,1,16,3,16,647,8,
  	16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,656,8,17,10,17,12,17,659,9,
  	17,1,17,1,17,1,17,1,17,5,17,665,8,17,10,17,12,17,668,9,17,1,17,1,17,1,
  	17,1,17,5,17,674,8,17,10,17,12,17,677,9,17,1,17,1,17,1,17,3,17,682,8,
  	17,1,18,1,18,1,18,1,18,1,18,3,18,689,8,18,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,5,19,700,8,19,10,19,12,19,703,9,19,1,19,1,19,1,19,3,
  	19,708,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,719,8,19,
  	10,19,12,19,722,9,19,1,19,1,19,1,19,3,19,727,8,19,1,19,3,19,730,8,19,
  	1,20,1,20,1,20,5,20,735,8,20,10,20,12,20,738,9,20,1,21,1,21,1,21,5,21,
  	743,8,21,10,21,12,21,746,9,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,754,
  	8,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
  	768,8,24,1,25,1,25,1,25,1,25,1,25,3,25,775,8,25,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,26,1,26,1,26,5,26,786,8,26,10,26,12,26,789,9,26,1,27,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,802,8,27,1,28,1,28,1,
  	28,1,28,1,28,3,28,809,8,28,1,29,1,29,1,29,5,29,814,8,29,10,29,12,29,817,
  	9,29,1,29,3,29,820,8,29,1,30,1,30,1,30,1,30,3,30,826,8,30,1,31,1,31,1,
  	31,5,31,831,8,31,10,31,12,31,834,9,31,1,31,3,31,837,8,31,1,32,1,32,3,
  	32,841,8,32,1,32,1,32,3,32,845,8,32,1,32,3,32,848,8,32,1,32,1,32,3,32,
  	852,8,32,1,32,1,32,3,32,856,8,32,3,32,858,8,32,1,33,1,33,3,33,862,8,33,
  	1,34,5,34,865,8,34,10,34,12,34,868,9,34,1,34,1,34,5,34,872,8,34,10,34,
  	12,34,875,9,34,1,35,3,35,878,8,35,1,35,3,35,881,8,35,1,36,1,36,1,37,1,
  	37,5,37,887,8,37,10,37,12,37,890,9,37,1,37,3,37,893,8,37,1,38,1,38,3,
  	38,897,8,38,1,38,1,38,1,38,1,38,5,38,903,8,38,10,38,12,38,906,9,38,1,
  	38,3,38,909,8,38,1,39,1,39,4,39,913,8,39,11,39,12,39,914,1,40,1,40,3,
  	40,919,8,40,1,41,1,41,1,41,1,41,1,41,3,41,926,8,41,1,42,1,42,1,42,5,42,
  	931,8,42,10,42,12,42,934,9,42,1,42,3,42,937,8,42,1,42,4,42,940,8,42,11,
  	42,12,42,941,1,42,5,42,945,8,42,10,42,12,42,948,9,42,1,42,3,42,951,8,
  	42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,3,43,967,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,977,8,44,
  	1,45,1,45,1,45,1,45,1,45,3,45,984,8,45,1,45,1,45,1,45,1,45,1,45,3,45,
  	991,8,45,1,45,1,45,1,45,1,45,3,45,997,8,45,1,45,1,45,1,45,4,45,1002,8,
  	45,11,45,12,45,1003,1,45,1,45,3,45,1008,8,45,1,45,1,45,1,45,1,45,3,45,
  	1014,8,45,3,45,1016,8,45,1,46,1,46,3,46,1020,8,46,1,47,1,47,1,48,1,48,
  	3,48,1026,8,48,1,49,1,49,1,49,1,49,3,49,1032,8,49,1,49,3,49,1035,8,49,
  	1,50,1,50,1,50,1,50,5,50,1041,8,50,10,50,12,50,1044,9,50,1,51,1,51,1,
  	51,1,51,5,51,1050,8,51,10,51,12,51,1053,9,51,1,52,1,52,1,52,1,53,1,53,
  	1,54,1,54,1,54,1,54,3,54,1064,8,54,1,55,1,55,3,55,1068,8,55,1,56,1,56,
  	1,56,1,57,1,57,5,57,1075,8,57,10,57,12,57,1078,9,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,4,57,1086,8,57,11,57,12,57,1087,1,57,1,57,3,57,1092,8,57,
  	1,58,1,58,1,58,3,58,1097,8,58,1,58,1,58,1,58,1,58,3,58,1103,8,58,1,59,
  	1,59,1,59,5,59,1108,8,59,10,59,12,59,1111,9,59,1,60,1,60,1,60,3,60,1116,
  	8,60,1,61,1,61,1,61,5,61,1121,8,61,10,61,12,61,1124,9,61,1,62,1,62,1,
  	62,3,62,1129,8,62,1,63,1,63,1,63,1,63,1,63,1,63,5,63,1137,8,63,10,63,
  	12,63,1140,9,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1148,8,64,1,65,1,65,
  	1,65,1,65,4,65,1154,8,65,11,65,12,65,1155,1,66,3,66,1159,8,66,1,66,1,
  	66,1,67,1,67,1,67,3,67,1166,8,67,1,67,1,67,3,67,1170,8,67,1,67,3,67,1173,
  	8,67,1,67,1,67,1,67,1,68,3,68,1179,8,68,1,68,1,68,1,69,3,69,1184,8,69,
  	1,69,1,69,1,69,3,69,1189,8,69,1,69,1,69,3,69,1193,8,69,1,69,1,69,1,69,
  	3,69,1198,8,69,1,69,1,69,3,69,1202,8,69,1,69,1,69,1,70,1,70,1,71,1,71,
  	5,71,1210,8,71,10,71,12,71,1213,9,71,1,71,5,71,1216,8,71,10,71,12,71,
  	1219,9,71,1,71,3,71,1222,8,71,1,71,1,71,5,71,1226,8,71,10,71,12,71,1229,
  	9,71,1,71,3,71,1232,8,71,1,71,4,71,1235,8,71,11,71,12,71,1236,1,71,5,
  	71,1240,8,71,10,71,12,71,1243,9,71,1,71,3,71,1246,8,71,1,71,4,71,1249,
  	8,71,11,71,12,71,1250,1,71,3,71,1254,8,71,1,71,3,71,1257,8,71,1,72,4,
  	72,1260,8,72,11,72,12,72,1261,1,72,1,72,3,72,1266,8,72,1,73,5,73,1269,
  	8,73,10,73,12,73,1272,9,73,1,73,4,73,1275,8,73,11,73,12,73,1276,1,73,
  	1,73,3,73,1281,8,73,1,74,1,74,1,74,5,74,1286,8,74,10,74,12,74,1289,9,
  	74,1,74,3,74,1292,8,74,1,74,1,74,1,74,5,74,1297,8,74,10,74,12,74,1300,
  	9,74,1,74,3,74,1303,8,74,1,74,1,74,1,74,4,74,1308,8,74,11,74,12,74,1309,
  	1,74,3,74,1313,8,74,1,74,3,74,1316,8,74,1,75,1,75,1,75,1,76,1,76,1,76,
  	1,76,3,76,1325,8,76,1,77,1,77,1,77,1,77,3,77,1331,8,77,1,78,1,78,1,78,
  	1,78,1,78,1,78,1,78,3,78,1340,8,78,1,79,1,79,3,79,1344,8,79,1,79,1,79,
  	1,79,1,79,3,79,1350,8,79,3,79,1352,8,79,1,80,1,80,3,80,1356,8,80,1,81,
  	1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1381,8,85,3,85,1383,8,85,
  	1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1396,8,86,
  	3,86,1398,8,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,3,88,1409,
  	8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1418,8,89,1,89,1,89,1,89,
  	1,89,1,89,1,89,1,89,1,89,3,89,1428,8,89,3,89,1430,8,89,1,90,1,90,1,90,
  	1,90,1,90,5,90,1437,8,90,10,90,12,90,1440,9,90,1,90,3,90,1443,8,90,1,
  	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,5,90,1453,8,90,10,90,12,90,1456,
  	9,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,5,90,1467,8,90,10,90,
  	12,90,1470,9,90,1,90,3,90,1473,8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
  	1,90,1,90,5,90,1484,8,90,10,90,12,90,1487,9,90,1,90,1,90,1,90,3,90,1492,
  	8,90,1,91,1,91,1,91,1,91,1,91,3,91,1499,8,91,1,92,1,92,1,92,1,92,1,92,
  	1,92,1,92,1,92,1,92,4,92,1510,8,92,11,92,12,92,1511,1,92,3,92,1515,8,
  	92,1,92,3,92,1518,8,92,1,92,1,92,1,92,1,92,4,92,1524,8,92,11,92,12,92,
  	1525,1,92,3,92,1529,8,92,1,92,3,92,1532,8,92,3,92,1534,8,92,1,93,1,93,
  	1,93,1,93,3,93,1540,8,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1548,8,93,
  	1,94,1,94,1,94,1,94,1,94,3,94,1555,8,94,1,94,1,94,1,94,1,95,1,95,1,95,
  	1,95,1,96,1,96,1,96,1,96,1,96,1,96,4,96,1570,8,96,11,96,12,96,1571,1,
  	96,1,96,1,97,1,97,1,97,3,97,1579,8,97,1,97,3,97,1582,8,97,1,98,1,98,1,
  	98,3,98,1587,8,98,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,3,100,1597,
  	8,100,1,101,1,101,3,101,1601,8,101,1,102,1,102,1,102,1,102,1,103,1,103,
  	1,103,5,103,1610,8,103,10,103,12,103,1613,9,103,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,3,104,1623,8,104,1,105,1,105,1,105,1,105,1,105,
  	1,105,3,105,1631,8,105,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1639,
  	8,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1649,8,107,
  	1,108,1,108,1,108,3,108,1654,8,108,1,109,1,109,1,109,3,109,1659,8,109,
  	1,110,1,110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,
  	1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,1,117,5,117,1683,
  	8,117,10,117,12,117,1686,9,117,1,118,1,118,1,118,1,118,1,119,1,119,3,
  	119,1694,8,119,1,119,1,119,1,119,3,119,1699,8,119,1,119,3,119,1702,8,
  	119,1,120,1,120,1,120,3,120,1707,8,120,1,121,1,121,1,121,5,121,1712,8,
  	121,10,121,12,121,1715,9,121,1,121,3,121,1718,8,121,1,122,1,122,3,122,
  	1722,8,122,1,123,1,123,1,123,1,123,3,123,1728,8,123,1,124,1,124,1,124,
  	1,124,1,124,3,124,1735,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
  	3,124,1744,8,124,1,124,1,124,1,124,1,124,1,124,3,124,1751,8,124,1,124,
  	1,124,3,124,1755,8,124,1,125,1,125,1,125,5,125,1760,8,125,10,125,12,125,
  	1763,9,125,1,126,1,126,3,126,1767,8,126,1,126,1,126,1,126,1,127,1,127,
  	1,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1783,8,128,
  	1,128,1,128,1,128,1,128,1,128,1,128,3,128,1791,8,128,1,128,1,128,1,128,
  	1,128,1,128,1,128,1,128,1,128,3,128,1801,8,128,1,128,1,128,3,128,1805,
  	8,128,1,129,1,129,1,129,5,129,1810,8,129,10,129,12,129,1813,9,129,1,130,
  	1,130,1,130,5,130,1818,8,130,10,130,12,130,1821,9,130,1,131,1,131,1,131,
  	1,131,1,132,1,132,1,132,3,132,1830,8,132,1,132,1,132,1,132,1,133,1,133,
  	1,133,1,133,1,134,1,134,1,134,5,134,1842,8,134,10,134,12,134,1845,9,134,
  	1,134,3,134,1848,8,134,1,135,1,135,3,135,1852,8,135,1,135,1,135,1,135,
  	1,135,3,135,1858,8,135,1,136,1,136,1,136,1,137,1,137,1,137,5,137,1866,
  	8,137,10,137,12,137,1869,9,137,1,137,3,137,1872,8,137,1,138,1,138,1,138,
  	1,138,1,138,1,138,1,138,1,138,3,138,1882,8,138,1,139,1,139,1,139,1,139,
  	1,139,3,139,1889,8,139,3,139,1891,8,139,1,140,1,140,1,140,5,140,1896,
  	8,140,10,140,12,140,1899,9,140,1,140,3,140,1902,8,140,1,141,1,141,1,141,
  	3,141,1907,8,141,1,142,1,142,1,142,5,142,1912,8,142,10,142,12,142,1915,
  	9,142,1,142,3,142,1918,8,142,1,143,1,143,1,143,3,143,1923,8,143,1,144,
  	1,144,1,144,1,144,1,145,1,145,3,145,1931,8,145,1,146,1,146,1,146,5,146,
  	1936,8,146,10,146,12,146,1939,9,146,1,147,1,147,1,147,5,147,1944,8,147,
  	10,147,12,147,1947,9,147,1,148,1,148,1,148,3,148,1952,8,148,1,149,1,149,
  	5,149,1956,8,149,10,149,12,149,1959,9,149,1,150,1,150,1,150,1,150,1,150,
  	1,150,1,150,1,150,1,150,1,150,3,150,1971,8,150,1,151,1,151,1,151,1,152,
  	1,152,1,152,1,153,1,153,1,153,1,154,1,154,1,154,1,155,1,155,1,155,1,156,
  	1,156,1,156,1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,159,1,159,1,159,
  	1,159,1,160,1,160,1,160,1,161,1,161,1,161,1,161,1,161,1,161,5,161,2011,
  	8,161,10,161,12,161,2014,9,161,1,162,1,162,1,162,1,162,1,162,1,162,5,
  	162,2022,8,162,10,162,12,162,2025,9,162,1,163,1,163,1,163,1,163,1,163,
  	1,163,5,163,2033,8,163,10,163,12,163,2036,9,163,1,164,1,164,1,164,1,164,
  	1,164,1,164,1,164,1,164,1,164,5,164,2047,8,164,10,164,12,164,2050,9,164,
  	1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,5,165,2061,8,165,
  	10,165,12,165,2064,9,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,
  	166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,5,166,
  	2084,8,166,10,166,12,166,2087,9,166,1,167,1,167,1,167,1,167,1,167,1,167,
  	1,167,3,167,2096,8,167,1,168,1,168,1,168,1,168,1,168,3,168,2103,8,168,
  	1,169,1,169,1,169,3,169,2108,8,169,1,170,1,170,1,170,1,170,1,170,1,170,
  	1,170,1,170,1,170,1,170,1,170,3,170,2121,8,170,1,170,1,170,1,170,1,170,
  	1,170,1,170,5,170,2129,8,170,10,170,12,170,2132,9,170,1,171,1,171,3,171,
  	2136,8,171,1,171,1,171,1,171,3,171,2141,8,171,5,171,2143,8,171,10,171,
  	12,171,2146,9,171,1,171,3,171,2149,8,171,1,172,3,172,2152,8,172,1,172,
  	1,172,3,172,2156,8,172,1,172,1,172,3,172,2160,8,172,3,172,2162,8,172,
  	1,172,3,172,2165,8,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
  	1,173,1,173,3,173,2177,8,173,1,173,1,173,3,173,2181,8,173,1,173,1,173,
  	1,173,1,173,3,173,2187,8,173,1,173,3,173,2190,8,173,1,174,1,174,1,174,
  	3,174,2195,8,174,1,174,1,174,1,175,1,175,3,175,2201,8,175,1,175,1,175,
  	1,175,1,176,1,176,1,177,1,177,5,177,2210,8,177,10,177,12,177,2213,9,177,
  	1,177,5,177,2216,8,177,10,177,12,177,2219,9,177,1,177,3,177,2222,8,177,
  	1,177,1,177,5,177,2226,8,177,10,177,12,177,2229,9,177,1,177,3,177,2232,
  	8,177,1,177,4,177,2235,8,177,11,177,12,177,2236,1,177,5,177,2240,8,177,
  	10,177,12,177,2243,9,177,1,177,3,177,2246,8,177,1,177,4,177,2249,8,177,
  	11,177,12,177,2250,1,177,3,177,2254,8,177,1,177,3,177,2257,8,177,1,178,
  	4,178,2260,8,178,11,178,12,178,2261,1,178,1,178,3,178,2266,8,178,1,179,
  	5,179,2269,8,179,10,179,12,179,2272,9,179,1,179,4,179,2275,8,179,11,179,
  	12,179,2276,1,179,1,179,3,179,2281,8,179,1,180,1,180,1,180,5,180,2286,
  	8,180,10,180,12,180,2289,9,180,1,180,3,180,2292,8,180,1,180,1,180,1,180,
  	4,180,2297,8,180,11,180,12,180,2298,1,180,3,180,2302,8,180,1,180,3,180,
  	2305,8,180,1,181,1,181,1,181,1,182,1,182,3,182,2312,8,182,1,183,1,183,
  	1,183,3,183,2317,8,183,1,184,1,184,3,184,2321,8,184,1,184,3,184,2324,
  	8,184,1,185,1,185,1,186,1,186,3,186,2330,8,186,1,187,1,187,1,187,3,187,
  	2335,8,187,1,187,3,187,2338,8,187,1,187,3,187,2341,8,187,1,187,3,187,
  	2344,8,187,1,187,1,187,1,188,1,188,1,188,3,188,2351,8,188,1,189,1,189,
  	5,189,2355,8,189,10,189,12,189,2358,9,189,1,190,1,190,3,190,2362,8,190,
  	1,191,1,191,5,191,2366,8,191,10,191,12,191,2369,9,191,1,191,1,191,1,192,
  	1,192,1,193,1,193,4,193,2377,8,193,11,193,12,193,2378,1,194,1,194,3,194,
  	2383,8,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,3,195,2392,8,195,
  	1,195,1,195,1,196,1,196,1,196,1,196,1,197,1,197,3,197,2402,8,197,1,197,
  	1,197,1,198,1,198,1,198,5,198,2409,8,198,10,198,12,198,2412,9,198,1,198,
  	3,198,2415,8,198,1,199,1,199,1,199,3,199,2420,8,199,1,200,1,200,1,200,
  	1,200,1,201,4,201,2427,8,201,11,201,12,201,2428,1,202,3,202,2432,8,202,
  	1,202,1,202,1,202,1,202,1,202,1,202,5,202,2440,8,202,10,202,12,202,2443,
  	9,202,1,203,1,203,1,203,1,203,1,203,1,204,1,204,1,204,1,204,1,204,1,205,
  	1,205,1,205,3,205,2458,8,205,1,205,1,205,1,205,1,206,1,206,1,206,1,206,
  	1,206,1,207,1,207,3,207,2470,8,207,1,208,1,208,1,208,5,208,2475,8,208,
  	10,208,12,208,2478,9,208,1,208,1,208,3,208,2482,8,208,1,208,3,208,2485,
  	8,208,1,209,1,209,1,209,3,209,2490,8,209,1,210,1,210,1,210,5,210,2495,
  	8,210,10,210,12,210,2498,9,210,1,210,1,210,1,210,1,210,5,210,2504,8,210,
  	10,210,12,210,2507,9,210,1,210,1,210,1,210,5,210,2512,8,210,10,210,12,
  	210,2515,9,210,1,210,1,210,1,210,5,210,2520,8,210,10,210,12,210,2523,
  	9,210,3,210,2525,8,210,1,211,1,211,1,211,1,212,1,212,1,212,1,212,3,212,
  	2534,8,212,1,213,1,213,1,213,1,213,1,213,3,213,2541,8,213,1,214,1,214,
  	1,214,5,214,2546,8,214,10,214,12,214,2549,9,214,1,214,3,214,2552,8,214,
  	1,215,1,215,1,215,5,215,2557,8,215,10,215,12,215,2560,9,215,1,215,3,215,
  	2563,8,215,1,216,1,216,1,216,4,216,2568,8,216,11,216,12,216,2569,1,216,
  	3,216,2573,8,216,1,216,1,216,1,216,3,216,2578,8,216,1,217,1,217,1,217,
  	3,217,2583,8,217,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
  	1,218,3,218,2595,8,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,
  	2604,8,219,1,219,1,219,1,219,3,219,2609,8,219,1,219,3,219,2612,8,219,
  	1,220,1,220,1,220,1,220,1,220,1,220,3,220,2620,8,220,1,221,1,221,1,221,
  	1,221,1,221,1,221,1,221,1,221,1,221,3,221,2631,8,221,1,222,1,222,1,222,
  	1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
  	1,222,3,222,2649,8,222,1,222,5,222,2652,8,222,10,222,12,222,2655,9,222,
  	1,223,1,223,1,223,5,223,2660,8,223,10,223,12,223,2663,9,223,1,223,3,223,
  	2666,8,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
  	3,224,2678,8,224,1,225,1,225,1,225,3,225,2683,8,225,1,225,1,225,1,225,
  	3,225,2688,8,225,1,225,3,225,2691,8,225,1,226,1,226,1,226,5,226,2696,
  	8,226,10,226,12,226,2699,9,226,1,226,1,226,1,226,1,226,1,226,1,226,1,
  	226,1,226,1,226,1,226,5,226,2711,8,226,10,226,12,226,2714,9,226,1,226,
  	1,226,1,226,1,226,1,226,1,226,1,226,5,226,2723,8,226,10,226,12,226,2726,
  	9,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
  	1,226,1,226,1,226,1,226,1,226,1,226,5,226,2745,8,226,10,226,12,226,2748,
  	9,226,3,226,2750,8,226,1,227,1,227,1,227,0,12,30,52,126,234,322,324,326,
  	328,330,332,340,444,228,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
  	34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
  	80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
  	120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
  	156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
  	192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
  	228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
  	264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
  	300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
  	336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
  	372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
  	408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
  	444,446,448,450,452,454,0,4,2,1,71,71,113,113,1,0,89,95,1,0,98,110,2,
  	0,63,63,65,65,2982,0,456,1,0,0,0,2,462,1,0,0,0,4,480,1,0,0,0,6,528,1,
  	0,0,0,8,542,1,0,0,0,10,544,1,0,0,0,12,552,1,0,0,0,14,564,1,0,0,0,16,566,
  	1,0,0,0,18,569,1,0,0,0,20,572,1,0,0,0,22,591,1,0,0,0,24,602,1,0,0,0,26,
  	604,1,0,0,0,28,616,1,0,0,0,30,620,1,0,0,0,32,644,1,0,0,0,34,681,1,0,0,
  	0,36,688,1,0,0,0,38,729,1,0,0,0,40,731,1,0,0,0,42,739,1,0,0,0,44,753,
  	1,0,0,0,46,755,1,0,0,0,48,767,1,0,0,0,50,774,1,0,0,0,52,776,1,0,0,0,54,
  	801,1,0,0,0,56,808,1,0,0,0,58,810,1,0,0,0,60,821,1,0,0,0,62,827,1,0,0,
  	0,64,857,1,0,0,0,66,861,1,0,0,0,68,866,1,0,0,0,70,877,1,0,0,0,72,882,
  	1,0,0,0,74,884,1,0,0,0,76,894,1,0,0,0,78,912,1,0,0,0,80,918,1,0,0,0,82,
  	925,1,0,0,0,84,927,1,0,0,0,86,966,1,0,0,0,88,976,1,0,0,0,90,1015,1,0,
  	0,0,92,1019,1,0,0,0,94,1021,1,0,0,0,96,1023,1,0,0,0,98,1034,1,0,0,0,100,
  	1036,1,0,0,0,102,1045,1,0,0,0,104,1054,1,0,0,0,106,1057,1,0,0,0,108,1059,
  	1,0,0,0,110,1067,1,0,0,0,112,1069,1,0,0,0,114,1091,1,0,0,0,116,1102,1,
  	0,0,0,118,1104,1,0,0,0,120,1112,1,0,0,0,122,1117,1,0,0,0,124,1125,1,0,
  	0,0,126,1130,1,0,0,0,128,1147,1,0,0,0,130,1153,1,0,0,0,132,1158,1,0,0,
  	0,134,1162,1,0,0,0,136,1178,1,0,0,0,138,1183,1,0,0,0,140,1205,1,0,0,0,
  	142,1256,1,0,0,0,144,1259,1,0,0,0,146,1270,1,0,0,0,148,1315,1,0,0,0,150,
  	1317,1,0,0,0,152,1324,1,0,0,0,154,1330,1,0,0,0,156,1339,1,0,0,0,158,1351,
  	1,0,0,0,160,1353,1,0,0,0,162,1357,1,0,0,0,164,1360,1,0,0,0,166,1363,1,
  	0,0,0,168,1366,1,0,0,0,170,1382,1,0,0,0,172,1397,1,0,0,0,174,1399,1,0,
  	0,0,176,1403,1,0,0,0,178,1429,1,0,0,0,180,1491,1,0,0,0,182,1498,1,0,0,
  	0,184,1533,1,0,0,0,186,1547,1,0,0,0,188,1549,1,0,0,0,190,1559,1,0,0,0,
  	192,1563,1,0,0,0,194,1581,1,0,0,0,196,1583,1,0,0,0,198,1591,1,0,0,0,200,
  	1596,1,0,0,0,202,1600,1,0,0,0,204,1602,1,0,0,0,206,1606,1,0,0,0,208,1622,
  	1,0,0,0,210,1630,1,0,0,0,212,1638,1,0,0,0,214,1648,1,0,0,0,216,1653,1,
  	0,0,0,218,1658,1,0,0,0,220,1660,1,0,0,0,222,1662,1,0,0,0,224,1664,1,0,
  	0,0,226,1666,1,0,0,0,228,1668,1,0,0,0,230,1670,1,0,0,0,232,1672,1,0,0,
  	0,234,1676,1,0,0,0,236,1687,1,0,0,0,238,1701,1,0,0,0,240,1703,1,0,0,0,
  	242,1708,1,0,0,0,244,1721,1,0,0,0,246,1727,1,0,0,0,248,1754,1,0,0,0,250,
  	1756,1,0,0,0,252,1766,1,0,0,0,254,1771,1,0,0,0,256,1804,1,0,0,0,258,1806,
  	1,0,0,0,260,1814,1,0,0,0,262,1822,1,0,0,0,264,1826,1,0,0,0,266,1834,1,
  	0,0,0,268,1838,1,0,0,0,270,1857,1,0,0,0,272,1859,1,0,0,0,274,1862,1,0,
  	0,0,276,1881,1,0,0,0,278,1890,1,0,0,0,280,1892,1,0,0,0,282,1906,1,0,0,
  	0,284,1908,1,0,0,0,286,1922,1,0,0,0,288,1924,1,0,0,0,290,1930,1,0,0,0,
  	292,1932,1,0,0,0,294,1940,1,0,0,0,296,1951,1,0,0,0,298,1953,1,0,0,0,300,
  	1970,1,0,0,0,302,1972,1,0,0,0,304,1975,1,0,0,0,306,1978,1,0,0,0,308,1981,
  	1,0,0,0,310,1984,1,0,0,0,312,1987,1,0,0,0,314,1990,1,0,0,0,316,1994,1,
  	0,0,0,318,1997,1,0,0,0,320,2001,1,0,0,0,322,2004,1,0,0,0,324,2015,1,0,
  	0,0,326,2026,1,0,0,0,328,2037,1,0,0,0,330,2051,1,0,0,0,332,2065,1,0,0,
  	0,334,2095,1,0,0,0,336,2102,1,0,0,0,338,2107,1,0,0,0,340,2109,1,0,0,0,
  	342,2135,1,0,0,0,344,2164,1,0,0,0,346,2189,1,0,0,0,348,2191,1,0,0,0,350,
  	2198,1,0,0,0,352,2205,1,0,0,0,354,2256,1,0,0,0,356,2259,1,0,0,0,358,2270,
  	1,0,0,0,360,2304,1,0,0,0,362,2306,1,0,0,0,364,2309,1,0,0,0,366,2313,1,
  	0,0,0,368,2318,1,0,0,0,370,2325,1,0,0,0,372,2329,1,0,0,0,374,2331,1,0,
  	0,0,376,2350,1,0,0,0,378,2352,1,0,0,0,380,2361,1,0,0,0,382,2363,1,0,0,
  	0,384,2372,1,0,0,0,386,2376,1,0,0,0,388,2380,1,0,0,0,390,2386,1,0,0,0,
  	392,2395,1,0,0,0,394,2399,1,0,0,0,396,2405,1,0,0,0,398,2419,1,0,0,0,400,
  	2421,1,0,0,0,402,2426,1,0,0,0,404,2431,1,0,0,0,406,2444,1,0,0,0,408,2449,
  	1,0,0,0,410,2454,1,0,0,0,412,2462,1,0,0,0,414,2467,1,0,0,0,416,2484,1,
  	0,0,0,418,2489,1,0,0,0,420,2524,1,0,0,0,422,2526,1,0,0,0,424,2533,1,0,
  	0,0,426,2540,1,0,0,0,428,2542,1,0,0,0,430,2553,1,0,0,0,432,2577,1,0,0,
  	0,434,2582,1,0,0,0,436,2594,1,0,0,0,438,2611,1,0,0,0,440,2619,1,0,0,0,
  	442,2630,1,0,0,0,444,2632,1,0,0,0,446,2656,1,0,0,0,448,2677,1,0,0,0,450,
  	2690,1,0,0,0,452,2749,1,0,0,0,454,2751,1,0,0,0,456,457,3,2,1,0,457,458,
  	5,0,0,1,458,1,1,0,0,0,459,461,5,113,0,0,460,459,1,0,0,0,461,464,1,0,0,
  	0,462,460,1,0,0,0,462,463,1,0,0,0,463,474,1,0,0,0,464,462,1,0,0,0,465,
  	469,3,4,2,0,466,468,5,113,0,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,
  	1,0,0,0,469,470,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,472,465,1,0,0,
  	0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,3,1,0,0,0,476,474,
  	1,0,0,0,477,481,3,6,3,0,478,481,3,34,17,0,479,481,3,66,33,0,480,477,1,
  	0,0,0,480,478,1,0,0,0,480,479,1,0,0,0,481,5,1,0,0,0,482,483,3,8,4,0,483,
  	484,3,28,14,0,484,485,5,60,0,0,485,488,3,10,5,0,486,487,5,111,0,0,487,
  	489,3,276,138,0,488,486,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,494,
  	7,0,0,0,491,493,5,2,0,0,492,491,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,
  	0,494,495,1,0,0,0,495,529,1,0,0,0,496,494,1,0,0,0,497,498,3,8,4,0,498,
  	499,3,28,14,0,499,500,5,60,0,0,500,503,3,10,5,0,501,502,5,73,0,0,502,
  	504,3,276,138,0,503,501,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,509,
  	7,0,0,0,506,508,5,2,0,0,507,506,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,
  	0,509,510,1,0,0,0,510,529,1,0,0,0,511,509,1,0,0,0,512,513,3,8,4,0,513,
  	514,3,28,14,0,514,515,5,60,0,0,515,519,3,10,5,0,516,517,5,70,0,0,517,
  	518,5,70,0,0,518,520,3,276,138,0,519,516,1,0,0,0,519,520,1,0,0,0,520,
  	521,1,0,0,0,521,525,7,0,0,0,522,524,5,2,0,0,523,522,1,0,0,0,524,527,1,
  	0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,
  	528,482,1,0,0,0,528,497,1,0,0,0,528,512,1,0,0,0,529,7,1,0,0,0,530,532,
  	5,1,0,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,
  	0,534,543,1,0,0,0,535,533,1,0,0,0,536,538,5,2,0,0,537,536,1,0,0,0,538,
  	541,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,543,1,0,0,0,541,539,1,
  	0,0,0,542,533,1,0,0,0,542,539,1,0,0,0,543,9,1,0,0,0,544,549,3,12,6,0,
  	545,546,5,76,0,0,546,548,3,12,6,0,547,545,1,0,0,0,548,551,1,0,0,0,549,
  	547,1,0,0,0,549,550,1,0,0,0,550,11,1,0,0,0,551,549,1,0,0,0,552,556,3,
  	14,7,0,553,555,3,14,7,0,554,553,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,
  	0,556,557,1,0,0,0,557,13,1,0,0,0,558,556,1,0,0,0,559,565,3,24,12,0,560,
  	565,3,16,8,0,561,565,3,18,9,0,562,565,3,20,10,0,563,565,3,22,11,0,564,
  	559,1,0,0,0,564,560,1,0,0,0,564,561,1,0,0,0,564,562,1,0,0,0,564,563,1,
  	0,0,0,565,15,1,0,0,0,566,567,3,24,12,0,567,568,5,66,0,0,568,17,1,0,0,
  	0,569,570,3,24,12,0,570,571,5,81,0,0,571,19,1,0,0,0,572,573,3,24,12,0,
  	573,574,5,61,0,0,574,21,1,0,0,0,575,576,3,24,12,0,576,577,5,87,0,0,577,
  	578,3,276,138,0,578,579,5,88,0,0,579,592,1,0,0,0,580,581,3,24,12,0,581,
  	583,5,87,0,0,582,584,3,276,138,0,583,582,1,0,0,0,583,584,1,0,0,0,584,
  	585,1,0,0,0,585,587,5,69,0,0,586,588,3,276,138,0,587,586,1,0,0,0,587,
  	588,1,0,0,0,588,589,1,0,0,0,589,590,5,88,0,0,590,592,1,0,0,0,591,575,
  	1,0,0,0,591,580,1,0,0,0,592,23,1,0,0,0,593,603,3,26,13,0,594,603,5,3,
  	0,0,595,603,5,4,0,0,596,603,3,30,15,0,597,603,3,32,16,0,598,599,5,67,
  	0,0,599,600,3,10,5,0,600,601,5,68,0,0,601,603,1,0,0,0,602,593,1,0,0,0,
  	602,594,1,0,0,0,602,595,1,0,0,0,602,596,1,0,0,0,602,597,1,0,0,0,602,598,
  	1,0,0,0,603,25,1,0,0,0,604,611,5,89,0,0,605,606,5,51,0,0,606,608,5,70,
  	0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,610,5,51,0,0,
  	610,612,5,70,0,0,611,607,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,
  	614,5,51,0,0,614,615,5,90,0,0,615,27,1,0,0,0,616,617,5,89,0,0,617,618,
  	5,51,0,0,618,619,5,90,0,0,619,29,1,0,0,0,620,621,6,15,-1,0,621,622,5,
  	51,0,0,622,641,1,0,0,0,623,624,10,4,0,0,624,625,5,63,0,0,625,640,5,51,
  	0,0,626,627,10,3,0,0,627,628,5,74,0,0,628,629,3,342,171,0,629,630,5,75,
  	0,0,630,640,1,0,0,0,631,632,10,2,0,0,632,640,3,410,205,0,633,634,10,1,
  	0,0,634,636,5,67,0,0,635,637,3,414,207,0,636,635,1,0,0,0,636,637,1,0,
  	0,0,637,638,1,0,0,0,638,640,5,68,0,0,639,623,1,0,0,0,639,626,1,0,0,0,
  	639,631,1,0,0,0,639,633,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,
  	1,0,0,0,642,31,1,0,0,0,643,641,1,0,0,0,644,646,5,74,0,0,645,647,5,77,
  	0,0,646,645,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,649,5,3,0,0,649,
  	650,5,75,0,0,650,33,1,0,0,0,651,652,5,44,0,0,652,653,3,36,18,0,653,657,
  	7,0,0,0,654,656,5,2,0,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,
  	0,657,658,1,0,0,0,658,682,1,0,0,0,659,657,1,0,0,0,660,661,5,50,0,0,661,
  	662,3,48,24,0,662,666,7,0,0,0,663,665,5,2,0,0,664,663,1,0,0,0,665,668,
  	1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,682,1,0,0,0,668,666,1,0,0,
  	0,669,670,5,49,0,0,670,671,3,48,24,0,671,675,7,0,0,0,672,674,5,2,0,0,
  	673,672,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,682,
  	1,0,0,0,677,675,1,0,0,0,678,679,3,36,18,0,679,680,5,71,0,0,680,682,1,
  	0,0,0,681,651,1,0,0,0,681,660,1,0,0,0,681,669,1,0,0,0,681,678,1,0,0,0,
  	682,35,1,0,0,0,683,684,3,38,19,0,684,685,5,97,0,0,685,686,3,36,18,0,686,
  	689,1,0,0,0,687,689,3,38,19,0,688,683,1,0,0,0,688,687,1,0,0,0,689,37,
  	1,0,0,0,690,691,5,47,0,0,691,692,3,28,14,0,692,693,5,29,0,0,693,694,3,
  	52,26,0,694,707,5,70,0,0,695,696,5,113,0,0,696,697,5,1,0,0,697,701,3,
  	38,19,0,698,700,5,113,0,0,699,698,1,0,0,0,700,703,1,0,0,0,701,699,1,0,
  	0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,701,1,0,0,0,704,705,5,2,0,0,705,
  	708,1,0,0,0,706,708,3,38,19,0,707,695,1,0,0,0,707,706,1,0,0,0,708,730,
  	1,0,0,0,709,710,5,48,0,0,710,711,3,28,14,0,711,712,5,29,0,0,712,713,3,
  	52,26,0,713,726,5,70,0,0,714,715,5,113,0,0,715,716,5,1,0,0,716,720,3,
  	38,19,0,717,719,5,113,0,0,718,717,1,0,0,0,719,722,1,0,0,0,720,718,1,0,
  	0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,0,0,0,723,724,5,2,0,0,724,
  	727,1,0,0,0,725,727,3,38,19,0,726,714,1,0,0,0,726,725,1,0,0,0,727,730,
  	1,0,0,0,728,730,3,40,20,0,729,690,1,0,0,0,729,709,1,0,0,0,729,728,1,0,
  	0,0,730,39,1,0,0,0,731,736,3,42,21,0,732,733,5,36,0,0,733,735,3,42,21,
  	0,734,732,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,
  	41,1,0,0,0,738,736,1,0,0,0,739,744,3,44,22,0,740,741,5,8,0,0,741,743,
  	3,44,22,0,742,740,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,
  	0,0,745,43,1,0,0,0,746,744,1,0,0,0,747,754,3,46,23,0,748,749,5,67,0,0,
  	749,750,3,36,18,0,750,751,5,68,0,0,751,754,1,0,0,0,752,754,3,48,24,0,
  	753,747,1,0,0,0,753,748,1,0,0,0,753,752,1,0,0,0,754,45,1,0,0,0,755,756,
  	3,48,24,0,756,757,7,1,0,0,757,758,3,48,24,0,758,47,1,0,0,0,759,768,3,
  	50,25,0,760,768,3,296,148,0,761,762,3,296,148,0,762,763,5,27,0,0,763,
  	764,3,296,148,0,764,765,5,20,0,0,765,766,3,296,148,0,766,768,1,0,0,0,
  	767,759,1,0,0,0,767,760,1,0,0,0,767,761,1,0,0,0,768,49,1,0,0,0,769,770,
  	5,76,0,0,770,771,3,52,26,0,771,772,5,76,0,0,772,775,1,0,0,0,773,775,3,
  	52,26,0,774,769,1,0,0,0,774,773,1,0,0,0,775,51,1,0,0,0,776,777,6,26,-1,
  	0,777,778,3,54,27,0,778,787,1,0,0,0,779,780,10,2,0,0,780,781,5,63,0,0,
  	781,786,3,54,27,0,782,783,10,1,0,0,783,784,5,64,0,0,784,786,3,54,27,0,
  	785,779,1,0,0,0,785,782,1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,
  	1,0,0,0,788,53,1,0,0,0,789,787,1,0,0,0,790,802,3,56,28,0,791,792,3,56,
  	28,0,792,793,5,74,0,0,793,794,3,62,31,0,794,795,5,75,0,0,795,802,1,0,
  	0,0,796,797,3,56,28,0,797,798,5,87,0,0,798,799,3,58,29,0,799,800,5,88,
  	0,0,800,802,1,0,0,0,801,790,1,0,0,0,801,791,1,0,0,0,801,796,1,0,0,0,802,
  	55,1,0,0,0,803,809,3,28,14,0,804,805,5,67,0,0,805,806,3,52,26,0,806,807,
  	5,68,0,0,807,809,1,0,0,0,808,803,1,0,0,0,808,804,1,0,0,0,809,57,1,0,0,
  	0,810,815,3,60,30,0,811,812,5,69,0,0,812,814,3,60,30,0,813,811,1,0,0,
  	0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,819,1,0,0,0,817,
  	815,1,0,0,0,818,820,5,69,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,59,1,
  	0,0,0,821,822,5,66,0,0,822,825,3,28,14,0,823,824,5,70,0,0,824,826,3,64,
  	32,0,825,823,1,0,0,0,825,826,1,0,0,0,826,61,1,0,0,0,827,832,3,64,32,0,
  	828,829,5,69,0,0,829,831,3,64,32,0,830,828,1,0,0,0,831,834,1,0,0,0,832,
  	830,1,0,0,0,832,833,1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,835,837,5,
  	69,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,63,1,0,0,0,838,858,5,4,0,0,
  	839,841,5,4,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,844,
  	5,70,0,0,843,845,5,4,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,858,1,0,
  	0,0,846,848,5,4,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,
  	851,5,70,0,0,850,852,5,4,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,
  	1,0,0,0,853,855,5,70,0,0,854,856,5,4,0,0,855,854,1,0,0,0,855,856,1,0,
  	0,0,856,858,1,0,0,0,857,838,1,0,0,0,857,840,1,0,0,0,857,847,1,0,0,0,858,
  	65,1,0,0,0,859,862,3,88,44,0,860,862,3,86,43,0,861,859,1,0,0,0,861,860,
  	1,0,0,0,862,67,1,0,0,0,863,865,5,113,0,0,864,863,1,0,0,0,865,868,1,0,
  	0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,866,1,0,0,0,869,
  	873,3,80,40,0,870,872,5,113,0,0,871,870,1,0,0,0,872,875,1,0,0,0,873,871,
  	1,0,0,0,873,874,1,0,0,0,874,69,1,0,0,0,875,873,1,0,0,0,876,878,3,78,39,
  	0,877,876,1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,881,5,0,0,1,880,
  	879,1,0,0,0,880,881,1,0,0,0,881,71,1,0,0,0,882,883,3,82,41,0,883,73,1,
  	0,0,0,884,888,3,274,137,0,885,887,5,113,0,0,886,885,1,0,0,0,887,890,1,
  	0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,
  	891,893,5,0,0,1,892,891,1,0,0,0,892,893,1,0,0,0,893,75,1,0,0,0,894,896,
  	5,67,0,0,895,897,3,452,226,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,
  	1,0,0,0,898,899,5,68,0,0,899,900,5,97,0,0,900,904,3,276,138,0,901,903,
  	5,113,0,0,902,901,1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,
  	0,0,905,908,1,0,0,0,906,904,1,0,0,0,907,909,5,0,0,1,908,907,1,0,0,0,908,
  	909,1,0,0,0,909,77,1,0,0,0,910,913,3,80,40,0,911,913,5,113,0,0,912,910,
  	1,0,0,0,912,911,1,0,0,0,913,914,1,0,0,0,914,912,1,0,0,0,914,915,1,0,0,
  	0,915,79,1,0,0,0,916,919,3,88,44,0,917,919,3,84,42,0,918,916,1,0,0,0,
  	918,917,1,0,0,0,919,81,1,0,0,0,920,921,3,88,44,0,921,922,5,113,0,0,922,
  	926,1,0,0,0,923,926,3,84,42,0,924,926,5,113,0,0,925,920,1,0,0,0,925,923,
  	1,0,0,0,925,924,1,0,0,0,926,83,1,0,0,0,927,932,3,86,43,0,928,929,5,71,
  	0,0,929,931,3,86,43,0,930,928,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,
  	932,933,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,935,937,5,71,0,0,936,
  	935,1,0,0,0,936,937,1,0,0,0,937,950,1,0,0,0,938,940,5,113,0,0,939,938,
  	1,0,0,0,940,941,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,951,1,0,0,
  	0,943,945,5,113,0,0,944,943,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,946,
  	947,1,0,0,0,947,949,1,0,0,0,948,946,1,0,0,0,949,951,5,0,0,1,950,939,1,
  	0,0,0,950,946,1,0,0,0,951,85,1,0,0,0,952,967,3,90,45,0,953,967,3,264,
  	132,0,954,967,3,280,140,0,955,967,3,96,48,0,956,967,3,110,55,0,957,967,
  	3,98,49,0,958,967,5,37,0,0,959,967,3,104,52,0,960,967,3,106,53,0,961,
  	967,3,108,54,0,962,967,5,13,0,0,963,967,5,16,0,0,964,967,3,100,50,0,965,
  	967,3,102,51,0,966,952,1,0,0,0,966,953,1,0,0,0,966,954,1,0,0,0,966,955,
  	1,0,0,0,966,956,1,0,0,0,966,957,1,0,0,0,966,958,1,0,0,0,966,959,1,0,0,
  	0,966,960,1,0,0,0,966,961,1,0,0,0,966,962,1,0,0,0,966,963,1,0,0,0,966,
  	964,1,0,0,0,966,965,1,0,0,0,967,87,1,0,0,0,968,977,3,136,68,0,969,977,
  	3,170,85,0,970,977,3,132,66,0,971,977,3,180,90,0,972,977,3,178,89,0,973,
  	977,3,184,92,0,974,977,3,176,88,0,975,977,3,192,96,0,976,968,1,0,0,0,
  	976,969,1,0,0,0,976,970,1,0,0,0,976,971,1,0,0,0,976,972,1,0,0,0,976,973,
  	1,0,0,0,976,974,1,0,0,0,976,975,1,0,0,0,977,89,1,0,0,0,978,979,5,51,0,
  	0,979,980,5,70,0,0,980,983,3,276,138,0,981,982,5,73,0,0,982,984,3,92,
  	46,0,983,981,1,0,0,0,983,984,1,0,0,0,984,1016,1,0,0,0,985,986,5,67,0,
  	0,986,987,3,440,220,0,987,988,5,68,0,0,988,991,1,0,0,0,989,991,3,442,
  	221,0,990,985,1,0,0,0,990,989,1,0,0,0,991,992,1,0,0,0,992,993,5,70,0,
  	0,993,996,3,276,138,0,994,995,5,73,0,0,995,997,3,92,46,0,996,994,1,0,
  	0,0,996,997,1,0,0,0,997,1016,1,0,0,0,998,999,3,428,214,0,999,1000,5,73,
  	0,0,1000,1002,1,0,0,0,1001,998,1,0,0,0,1002,1003,1,0,0,0,1003,1001,1,
  	0,0,0,1003,1004,1,0,0,0,1004,1007,1,0,0,0,1005,1008,3,278,139,0,1006,
  	1008,3,280,140,0,1007,1005,1,0,0,0,1007,1006,1,0,0,0,1008,1016,1,0,0,
  	0,1009,1010,3,440,220,0,1010,1013,3,94,47,0,1011,1014,3,278,139,0,1012,
  	1014,3,280,140,0,1013,1011,1,0,0,0,1013,1012,1,0,0,0,1014,1016,1,0,0,
  	0,1015,978,1,0,0,0,1015,990,1,0,0,0,1015,1001,1,0,0,0,1015,1009,1,0,0,
  	0,1016,91,1,0,0,0,1017,1020,3,278,139,0,1018,1020,3,280,140,0,1019,1017,
  	1,0,0,0,1019,1018,1,0,0,0,1020,93,1,0,0,0,1021,1022,7,2,0,0,1022,95,1,
  	0,0,0,1023,1025,5,39,0,0,1024,1026,3,280,140,0,1025,1024,1,0,0,0,1025,
  	1026,1,0,0,0,1026,97,1,0,0,0,1027,1028,5,38,0,0,1028,1031,3,276,138,0,
  	1029,1030,5,25,0,0,1030,1032,3,276,138,0,1031,1029,1,0,0,0,1031,1032,
  	1,0,0,0,1032,1035,1,0,0,0,1033,1035,5,38,0,0,1034,1027,1,0,0,0,1034,1033,
  	1,0,0,0,1035,99,1,0,0,0,1036,1037,5,26,0,0,1037,1042,5,51,0,0,1038,1039,
  	5,69,0,0,1039,1041,5,51,0,0,1040,1038,1,0,0,0,1041,1044,1,0,0,0,1042,
  	1040,1,0,0,0,1042,1043,1,0,0,0,1043,101,1,0,0,0,1044,1042,1,0,0,0,1045,
  	1046,5,34,0,0,1046,1051,5,51,0,0,1047,1048,5,69,0,0,1048,1050,5,51,0,
  	0,1049,1047,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,
  	0,0,1052,103,1,0,0,0,1053,1051,1,0,0,0,1054,1055,5,18,0,0,1055,1056,3,
  	446,223,0,1056,105,1,0,0,0,1057,1058,3,278,139,0,1058,107,1,0,0,0,1059,
  	1060,5,10,0,0,1060,1063,3,276,138,0,1061,1062,5,69,0,0,1062,1064,3,276,
  	138,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,109,1,0,0,0,1065,1068,
  	3,112,56,0,1066,1068,3,114,57,0,1067,1065,1,0,0,0,1067,1066,1,0,0,0,1068,
  	111,1,0,0,0,1069,1070,5,28,0,0,1070,1071,3,122,61,0,1071,113,1,0,0,0,
  	1072,1076,5,25,0,0,1073,1075,7,3,0,0,1074,1073,1,0,0,0,1075,1078,1,0,
  	0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1079,1,0,0,0,1078,1076,1,
  	0,0,0,1079,1080,3,126,63,0,1080,1081,5,28,0,0,1081,1082,3,116,58,0,1082,
  	1092,1,0,0,0,1083,1085,5,25,0,0,1084,1086,7,3,0,0,1085,1084,1,0,0,0,1086,
  	1087,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,
  	1090,5,28,0,0,1090,1092,3,116,58,0,1091,1072,1,0,0,0,1091,1083,1,0,0,
  	0,1092,115,1,0,0,0,1093,1094,5,67,0,0,1094,1096,3,118,59,0,1095,1097,
  	5,69,0,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1099,
  	5,68,0,0,1099,1103,1,0,0,0,1100,1103,3,118,59,0,1101,1103,5,66,0,0,1102,
  	1093,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,117,1,0,0,0,1104,
  	1109,3,120,60,0,1105,1106,5,69,0,0,1106,1108,3,120,60,0,1107,1105,1,0,
  	0,0,1108,1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,119,1,
  	0,0,0,1111,1109,1,0,0,0,1112,1115,5,51,0,0,1113,1114,5,9,0,0,1114,1116,
  	5,51,0,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,121,1,0,0,0,1117,1122,
  	3,124,62,0,1118,1119,5,69,0,0,1119,1121,3,124,62,0,1120,1118,1,0,0,0,
  	1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,123,1,0,0,
  	0,1124,1122,1,0,0,0,1125,1128,3,126,63,0,1126,1127,5,9,0,0,1127,1129,
  	5,51,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,125,1,0,0,0,1130,1131,
  	6,63,-1,0,1131,1132,5,51,0,0,1132,1138,1,0,0,0,1133,1134,10,2,0,0,1134,
  	1135,5,63,0,0,1135,1137,5,51,0,0,1136,1133,1,0,0,0,1137,1140,1,0,0,0,
  	1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,127,1,0,0,0,1140,1138,1,0,0,
  	0,1141,1142,5,113,0,0,1142,1143,5,1,0,0,1143,1144,3,78,39,0,1144,1145,
  	5,2,0,0,1145,1148,1,0,0,0,1146,1148,3,84,42,0,1147,1141,1,0,0,0,1147,
  	1146,1,0,0,0,1148,129,1,0,0,0,1149,1150,5,96,0,0,1150,1151,3,290,145,
  	0,1151,1152,5,113,0,0,1152,1154,1,0,0,0,1153,1149,1,0,0,0,1154,1155,1,
  	0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,131,1,0,0,0,1157,1159,
  	3,130,65,0,1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,
  	1161,3,134,67,0,1161,133,1,0,0,0,1162,1163,5,15,0,0,1163,1165,5,51,0,
  	0,1164,1166,3,266,133,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1172,
  	1,0,0,0,1167,1169,5,67,0,0,1168,1170,3,414,207,0,1169,1168,1,0,0,0,1169,
  	1170,1,0,0,0,1170,1171,1,0,0,0,1171,1173,5,68,0,0,1172,1167,1,0,0,0,1172,
  	1173,1,0,0,0,1173,1174,1,0,0,0,1174,1175,5,70,0,0,1175,1176,3,128,64,
  	0,1176,135,1,0,0,0,1177,1179,3,130,65,0,1178,1177,1,0,0,0,1178,1179,1,
  	0,0,0,1179,1180,1,0,0,0,1180,1181,3,138,69,0,1181,137,1,0,0,0,1182,1184,
  	5,11,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1186,
  	5,17,0,0,1186,1188,5,51,0,0,1187,1189,3,266,133,0,1188,1187,1,0,0,0,1188,
  	1189,1,0,0,0,1189,1190,1,0,0,0,1190,1192,5,67,0,0,1191,1193,3,140,70,
  	0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,1197,5,68,
  	0,0,1195,1196,5,97,0,0,1196,1198,3,276,138,0,1197,1195,1,0,0,0,1197,1198,
  	1,0,0,0,1198,1199,1,0,0,0,1199,1201,5,70,0,0,1200,1202,3,454,227,0,1201,
  	1200,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1204,3,128,64,0,
  	1204,139,1,0,0,0,1205,1206,3,142,71,0,1206,141,1,0,0,0,1207,1211,3,144,
  	72,0,1208,1210,3,152,76,0,1209,1208,1,0,0,0,1210,1213,1,0,0,0,1211,1209,
  	1,0,0,0,1211,1212,1,0,0,0,1212,1217,1,0,0,0,1213,1211,1,0,0,0,1214,1216,
  	3,156,78,0,1215,1214,1,0,0,0,1216,1219,1,0,0,0,1217,1215,1,0,0,0,1217,
  	1218,1,0,0,0,1218,1221,1,0,0,0,1219,1217,1,0,0,0,1220,1222,3,148,74,0,
  	1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1257,1,0,0,0,1223,1227,3,146,
  	73,0,1224,1226,3,156,78,0,1225,1224,1,0,0,0,1226,1229,1,0,0,0,1227,1225,
  	1,0,0,0,1227,1228,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1230,1232,
  	3,148,74,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1257,1,0,0,0,1233,
  	1235,3,152,76,0,1234,1233,1,0,0,0,1235,1236,1,0,0,0,1236,1234,1,0,0,0,
  	1236,1237,1,0,0,0,1237,1241,1,0,0,0,1238,1240,3,156,78,0,1239,1238,1,
  	0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1245,
  	1,0,0,0,1243,1241,1,0,0,0,1244,1246,3,148,74,0,1245,1244,1,0,0,0,1245,
  	1246,1,0,0,0,1246,1257,1,0,0,0,1247,1249,3,156,78,0,1248,1247,1,0,0,0,
  	1249,1250,1,0,0,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,1253,1,0,0,
  	0,1252,1254,3,148,74,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1257,
  	1,0,0,0,1255,1257,3,148,74,0,1256,1207,1,0,0,0,1256,1223,1,0,0,0,1256,
  	1234,1,0,0,0,1256,1248,1,0,0,0,1256,1255,1,0,0,0,1257,143,1,0,0,0,1258,
  	1260,3,152,76,0,1259,1258,1,0,0,0,1260,1261,1,0,0,0,1261,1259,1,0,0,0,
  	1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1265,5,83,0,0,1264,1266,5,69,
  	0,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,145,1,0,0,0,1267,1269,3,
  	152,76,0,1268,1267,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,0,0,1270,1271,
  	1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1273,1275,3,156,78,0,1274,
  	1273,1,0,0,0,1275,1276,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,
  	1278,1,0,0,0,1278,1280,5,83,0,0,1279,1281,5,69,0,0,1280,1279,1,0,0,0,
  	1280,1281,1,0,0,0,1281,147,1,0,0,0,1282,1283,5,66,0,0,1283,1287,3,152,
  	76,0,1284,1286,3,158,79,0,1285,1284,1,0,0,0,1286,1289,1,0,0,0,1287,1285,
  	1,0,0,0,1287,1288,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1290,1292,
  	3,150,75,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1316,1,0,0,0,1293,
  	1294,5,66,0,0,1294,1298,3,154,77,0,1295,1297,3,158,79,0,1296,1295,1,0,
  	0,0,1297,1300,1,0,0,0,1298,1296,1,0,0,0,1298,1299,1,0,0,0,1299,1302,1,
  	0,0,0,1300,1298,1,0,0,0,1301,1303,3,150,75,0,1302,1301,1,0,0,0,1302,1303,
  	1,0,0,0,1303,1316,1,0,0,0,1304,1305,5,66,0,0,1305,1307,5,69,0,0,1306,
  	1308,3,158,79,0,1307,1306,1,0,0,0,1308,1309,1,0,0,0,1309,1307,1,0,0,0,
  	1309,1310,1,0,0,0,1310,1312,1,0,0,0,1311,1313,3,150,75,0,1312,1311,1,
  	0,0,0,1312,1313,1,0,0,0,1313,1316,1,0,0,0,1314,1316,3,150,75,0,1315,1282,
  	1,0,0,0,1315,1293,1,0,0,0,1315,1304,1,0,0,0,1315,1314,1,0,0,0,1316,149,
  	1,0,0,0,1317,1318,5,72,0,0,1318,1319,3,152,76,0,1319,151,1,0,0,0,1320,
  	1321,3,160,80,0,1321,1322,5,69,0,0,1322,1325,1,0,0,0,1323,1325,3,160,
  	80,0,1324,1320,1,0,0,0,1324,1323,1,0,0,0,1325,153,1,0,0,0,1326,1327,3,
  	162,81,0,1327,1328,5,69,0,0,1328,1331,1,0,0,0,1329,1331,3,162,81,0,1330,
  	1326,1,0,0,0,1330,1329,1,0,0,0,1331,155,1,0,0,0,1332,1333,3,160,80,0,
  	1333,1334,3,168,84,0,1334,1335,5,69,0,0,1335,1340,1,0,0,0,1336,1337,3,
  	160,80,0,1337,1338,3,168,84,0,1338,1340,1,0,0,0,1339,1332,1,0,0,0,1339,
  	1336,1,0,0,0,1340,157,1,0,0,0,1341,1343,3,160,80,0,1342,1344,3,168,84,
  	0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1346,5,69,
  	0,0,1346,1352,1,0,0,0,1347,1349,3,160,80,0,1348,1350,3,168,84,0,1349,
  	1348,1,0,0,0,1349,1350,1,0,0,0,1350,1352,1,0,0,0,1351,1341,1,0,0,0,1351,
  	1347,1,0,0,0,1352,159,1,0,0,0,1353,1355,5,51,0,0,1354,1356,3,164,82,0,
  	1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,161,1,0,0,0,1357,1358,5,51,0,
  	0,1358,1359,3,166,83,0,1359,163,1,0,0,0,1360,1361,5,70,0,0,1361,1362,
  	3,276,138,0,1362,165,1,0,0,0,1363,1364,5,70,0,0,1364,1365,3,282,141,0,
  	1365,167,1,0,0,0,1366,1367,5,73,0,0,1367,1368,3,276,138,0,1368,169,1,
  	0,0,0,1369,1370,5,27,0,0,1370,1371,3,290,145,0,1371,1372,5,70,0,0,1372,
  	1373,3,128,64,0,1373,1374,3,172,86,0,1374,1383,1,0,0,0,1375,1376,5,27,
  	0,0,1376,1377,3,290,145,0,1377,1378,5,70,0,0,1378,1380,3,128,64,0,1379,
  	1381,3,174,87,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1383,1,0,0,0,
  	1382,1369,1,0,0,0,1382,1375,1,0,0,0,1383,171,1,0,0,0,1384,1385,5,19,0,
  	0,1385,1386,3,290,145,0,1386,1387,5,70,0,0,1387,1388,3,128,64,0,1388,
  	1389,3,172,86,0,1389,1398,1,0,0,0,1390,1391,5,19,0,0,1391,1392,3,290,
  	145,0,1392,1393,5,70,0,0,1393,1395,3,128,64,0,1394,1396,3,174,87,0,1395,
  	1394,1,0,0,0,1395,1396,1,0,0,0,1396,1398,1,0,0,0,1397,1384,1,0,0,0,1397,
  	1390,1,0,0,0,1398,173,1,0,0,0,1399,1400,5,20,0,0,1400,1401,5,70,0,0,1401,
  	1402,3,128,64,0,1402,175,1,0,0,0,1403,1404,5,43,0,0,1404,1405,3,290,145,
  	0,1405,1406,5,70,0,0,1406,1408,3,128,64,0,1407,1409,3,174,87,0,1408,1407,
  	1,0,0,0,1408,1409,1,0,0,0,1409,177,1,0,0,0,1410,1411,5,24,0,0,1411,1412,
  	3,428,214,0,1412,1413,5,29,0,0,1413,1414,3,280,140,0,1414,1415,5,70,0,
  	0,1415,1417,3,128,64,0,1416,1418,3,174,87,0,1417,1416,1,0,0,0,1417,1418,
  	1,0,0,0,1418,1430,1,0,0,0,1419,1420,5,11,0,0,1420,1421,5,24,0,0,1421,
  	1422,3,428,214,0,1422,1423,5,29,0,0,1423,1424,3,280,140,0,1424,1425,5,
  	70,0,0,1425,1427,3,128,64,0,1426,1428,3,174,87,0,1427,1426,1,0,0,0,1427,
  	1428,1,0,0,0,1428,1430,1,0,0,0,1429,1410,1,0,0,0,1429,1419,1,0,0,0,1430,
  	179,1,0,0,0,1431,1432,5,45,0,0,1432,1433,5,67,0,0,1433,1438,3,182,91,
  	0,1434,1435,5,69,0,0,1435,1437,3,182,91,0,1436,1434,1,0,0,0,1437,1440,
  	1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,0,1439,1442,1,0,0,0,1440,1438,
  	1,0,0,0,1441,1443,5,69,0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,
  	1,0,0,0,1444,1445,5,68,0,0,1445,1446,5,70,0,0,1446,1447,3,128,64,0,1447,
  	1492,1,0,0,0,1448,1449,5,45,0,0,1449,1454,3,182,91,0,1450,1451,5,69,0,
  	0,1451,1453,3,182,91,0,1452,1450,1,0,0,0,1453,1456,1,0,0,0,1454,1452,
  	1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,0,1456,1454,1,0,0,0,1457,1458,
  	5,70,0,0,1458,1459,3,128,64,0,1459,1492,1,0,0,0,1460,1461,5,11,0,0,1461,
  	1462,5,45,0,0,1462,1463,5,67,0,0,1463,1468,3,182,91,0,1464,1465,5,69,
  	0,0,1465,1467,3,182,91,0,1466,1464,1,0,0,0,1467,1470,1,0,0,0,1468,1466,
  	1,0,0,0,1468,1469,1,0,0,0,1469,1472,1,0,0,0,1470,1468,1,0,0,0,1471,1473,
  	5,69,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,0,1474,1475,
  	5,68,0,0,1475,1476,5,70,0,0,1476,1477,3,128,64,0,1477,1492,1,0,0,0,1478,
  	1479,5,11,0,0,1479,1480,5,45,0,0,1480,1485,3,182,91,0,1481,1482,5,69,
  	0,0,1482,1484,3,182,91,0,1483,1481,1,0,0,0,1484,1487,1,0,0,0,1485,1483,
  	1,0,0,0,1485,1486,1,0,0,0,1486,1488,1,0,0,0,1487,1485,1,0,0,0,1488,1489,
  	5,70,0,0,1489,1490,3,128,64,0,1490,1492,1,0,0,0,1491,1431,1,0,0,0,1491,
  	1448,1,0,0,0,1491,1460,1,0,0,0,1491,1478,1,0,0,0,1492,181,1,0,0,0,1493,
  	1494,3,276,138,0,1494,1495,5,9,0,0,1495,1496,3,434,217,0,1496,1499,1,
  	0,0,0,1497,1499,3,276,138,0,1498,1493,1,0,0,0,1498,1497,1,0,0,0,1499,
  	183,1,0,0,0,1500,1501,5,41,0,0,1501,1502,5,70,0,0,1502,1503,3,128,64,
  	0,1503,1504,3,190,95,0,1504,1534,1,0,0,0,1505,1506,5,41,0,0,1506,1507,
  	5,70,0,0,1507,1509,3,128,64,0,1508,1510,3,186,93,0,1509,1508,1,0,0,0,
  	1510,1511,1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1514,1,0,0,
  	0,1513,1515,3,174,87,0,1514,1513,1,0,0,0,1514,1515,1,0,0,0,1515,1517,
  	1,0,0,0,1516,1518,3,190,95,0,1517,1516,1,0,0,0,1517,1518,1,0,0,0,1518,
  	1534,1,0,0,0,1519,1520,5,41,0,0,1520,1521,5,70,0,0,1521,1523,3,128,64,
  	0,1522,1524,3,188,94,0,1523,1522,1,0,0,0,1524,1525,1,0,0,0,1525,1523,
  	1,0,0,0,1525,1526,1,0,0,0,1526,1528,1,0,0,0,1527,1529,3,174,87,0,1528,
  	1527,1,0,0,0,1528,1529,1,0,0,0,1529,1531,1,0,0,0,1530,1532,3,190,95,0,
  	1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1534,1,0,0,0,1533,1500,1,0,0,
  	0,1533,1505,1,0,0,0,1533,1519,1,0,0,0,1534,185,1,0,0,0,1535,1536,5,21,
  	0,0,1536,1539,3,276,138,0,1537,1538,5,9,0,0,1538,1540,5,51,0,0,1539,1537,
  	1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1542,5,70,0,0,1542,1543,
  	3,128,64,0,1543,1548,1,0,0,0,1544,1545,5,21,0,0,1545,1546,5,70,0,0,1546,
  	1548,3,128,64,0,1547,1535,1,0,0,0,1547,1544,1,0,0,0,1548,187,1,0,0,0,
  	1549,1550,5,21,0,0,1550,1551,5,66,0,0,1551,1554,3,276,138,0,1552,1553,
  	5,9,0,0,1553,1555,5,51,0,0,1554,1552,1,0,0,0,1554,1555,1,0,0,0,1555,1556,
  	1,0,0,0,1556,1557,5,70,0,0,1557,1558,3,128,64,0,1558,189,1,0,0,0,1559,
  	1560,5,23,0,0,1560,1561,5,70,0,0,1561,1562,3,128,64,0,1562,191,1,0,0,
  	0,1563,1564,5,32,0,0,1564,1565,3,194,97,0,1565,1566,5,70,0,0,1566,1567,
  	5,113,0,0,1567,1569,5,1,0,0,1568,1570,3,196,98,0,1569,1568,1,0,0,0,1570,
  	1571,1,0,0,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,
  	1574,5,2,0,0,1574,193,1,0,0,0,1575,1576,3,286,143,0,1576,1578,5,69,0,
  	0,1577,1579,3,284,142,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1582,
  	1,0,0,0,1580,1582,3,290,145,0,1581,1575,1,0,0,0,1581,1580,1,0,0,0,1582,
  	195,1,0,0,0,1583,1584,5,14,0,0,1584,1586,3,200,100,0,1585,1587,3,198,
  	99,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1589,
  	5,70,0,0,1589,1590,3,128,64,0,1590,197,1,0,0,0,1591,1592,5,27,0,0,1592,
  	1593,3,290,145,0,1593,199,1,0,0,0,1594,1597,3,240,120,0,1595,1597,3,202,
  	101,0,1596,1594,1,0,0,0,1596,1595,1,0,0,0,1597,201,1,0,0,0,1598,1601,
  	3,204,102,0,1599,1601,3,206,103,0,1600,1598,1,0,0,0,1600,1599,1,0,0,0,
  	1601,203,1,0,0,0,1602,1603,3,206,103,0,1603,1604,5,9,0,0,1604,1605,3,
  	226,113,0,1605,205,1,0,0,0,1606,1611,3,208,104,0,1607,1608,5,76,0,0,1608,
  	1610,3,208,104,0,1609,1607,1,0,0,0,1610,1613,1,0,0,0,1611,1609,1,0,0,
  	0,1611,1612,1,0,0,0,1612,207,1,0,0,0,1613,1611,1,0,0,0,1614,1623,3,210,
  	105,0,1615,1623,3,224,112,0,1616,1623,3,228,114,0,1617,1623,3,230,115,
  	0,1618,1623,3,236,118,0,1619,1623,3,238,119,0,1620,1623,3,248,124,0,1621,
  	1623,3,256,128,0,1622,1614,1,0,0,0,1622,1615,1,0,0,0,1622,1616,1,0,0,
  	0,1622,1617,1,0,0,0,1622,1618,1,0,0,0,1622,1619,1,0,0,0,1622,1620,1,0,
  	0,0,1622,1621,1,0,0,0,1623,209,1,0,0,0,1624,1631,3,216,108,0,1625,1631,
  	3,214,107,0,1626,1631,3,386,193,0,1627,1631,5,33,0,0,1628,1631,5,40,0,
  	0,1629,1631,5,22,0,0,1630,1624,1,0,0,0,1630,1625,1,0,0,0,1630,1626,1,
  	0,0,0,1630,1627,1,0,0,0,1630,1628,1,0,0,0,1630,1629,1,0,0,0,1631,211,
  	1,0,0,0,1632,1639,3,216,108,0,1633,1639,3,214,107,0,1634,1639,3,386,193,
  	0,1635,1639,5,33,0,0,1636,1639,5,40,0,0,1637,1639,5,22,0,0,1638,1632,
  	1,0,0,0,1638,1633,1,0,0,0,1638,1634,1,0,0,0,1638,1635,1,0,0,0,1638,1636,
  	1,0,0,0,1638,1637,1,0,0,0,1639,213,1,0,0,0,1640,1641,3,218,109,0,1641,
  	1642,5,81,0,0,1642,1643,3,222,111,0,1643,1649,1,0,0,0,1644,1645,3,218,
  	109,0,1645,1646,5,82,0,0,1646,1647,3,222,111,0,1647,1649,1,0,0,0,1648,
  	1640,1,0,0,0,1648,1644,1,0,0,0,1649,215,1,0,0,0,1650,1654,5,4,0,0,1651,
  	1652,5,82,0,0,1652,1654,5,4,0,0,1653,1650,1,0,0,0,1653,1651,1,0,0,0,1654,
  	217,1,0,0,0,1655,1659,3,220,110,0,1656,1657,5,82,0,0,1657,1659,3,220,
  	110,0,1658,1655,1,0,0,0,1658,1656,1,0,0,0,1659,219,1,0,0,0,1660,1661,
  	5,4,0,0,1661,221,1,0,0,0,1662,1663,5,4,0,0,1663,223,1,0,0,0,1664,1665,
  	3,226,113,0,1665,225,1,0,0,0,1666,1667,5,51,0,0,1667,227,1,0,0,0,1668,
  	1669,5,116,0,0,1669,229,1,0,0,0,1670,1671,3,232,116,0,1671,231,1,0,0,
  	0,1672,1673,3,234,117,0,1673,1674,5,63,0,0,1674,1675,5,51,0,0,1675,233,
  	1,0,0,0,1676,1677,6,117,-1,0,1677,1678,5,51,0,0,1678,1684,1,0,0,0,1679,
  	1680,10,2,0,0,1680,1681,5,63,0,0,1681,1683,5,51,0,0,1682,1679,1,0,0,0,
  	1683,1686,1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,235,1,0,0,
  	0,1686,1684,1,0,0,0,1687,1688,5,67,0,0,1688,1689,3,202,101,0,1689,1690,
  	5,68,0,0,1690,237,1,0,0,0,1691,1693,5,74,0,0,1692,1694,3,242,121,0,1693,
  	1692,1,0,0,0,1693,1694,1,0,0,0,1694,1695,1,0,0,0,1695,1702,5,75,0,0,1696,
  	1698,5,67,0,0,1697,1699,3,240,120,0,1698,1697,1,0,0,0,1698,1699,1,0,0,
  	0,1699,1700,1,0,0,0,1700,1702,5,68,0,0,1701,1691,1,0,0,0,1701,1696,1,
  	0,0,0,1702,239,1,0,0,0,1703,1704,3,244,122,0,1704,1706,5,69,0,0,1705,
  	1707,3,242,121,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,241,1,0,0,0,
  	1708,1713,3,244,122,0,1709,1710,5,69,0,0,1710,1712,3,244,122,0,1711,1709,
  	1,0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,1717,
  	1,0,0,0,1715,1713,1,0,0,0,1716,1718,5,69,0,0,1717,1716,1,0,0,0,1717,1718,
  	1,0,0,0,1718,243,1,0,0,0,1719,1722,3,246,123,0,1720,1722,3,202,101,0,
  	1721,1719,1,0,0,0,1721,1720,1,0,0,0,1722,245,1,0,0,0,1723,1724,5,66,0,
  	0,1724,1728,3,226,113,0,1725,1726,5,66,0,0,1726,1728,3,228,114,0,1727,
  	1723,1,0,0,0,1727,1725,1,0,0,0,1728,247,1,0,0,0,1729,1730,5,87,0,0,1730,
  	1755,5,88,0,0,1731,1732,5,87,0,0,1732,1734,3,254,127,0,1733,1735,5,69,
  	0,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1737,5,
  	88,0,0,1737,1755,1,0,0,0,1738,1739,5,87,0,0,1739,1740,3,250,125,0,1740,
  	1741,5,69,0,0,1741,1743,3,254,127,0,1742,1744,5,69,0,0,1743,1742,1,0,
  	0,0,1743,1744,1,0,0,0,1744,1745,1,0,0,0,1745,1746,5,88,0,0,1746,1755,
  	1,0,0,0,1747,1748,5,87,0,0,1748,1750,3,250,125,0,1749,1751,5,69,0,0,1750,
  	1749,1,0,0,0,1750,1751,1,0,0,0,1751,1752,1,0,0,0,1752,1753,5,88,0,0,1753,
  	1755,1,0,0,0,1754,1729,1,0,0,0,1754,1731,1,0,0,0,1754,1738,1,0,0,0,1754,
  	1747,1,0,0,0,1755,249,1,0,0,0,1756,1761,3,252,126,0,1757,1758,5,69,0,
  	0,1758,1760,3,252,126,0,1759,1757,1,0,0,0,1760,1763,1,0,0,0,1761,1759,
  	1,0,0,0,1761,1762,1,0,0,0,1762,251,1,0,0,0,1763,1761,1,0,0,0,1764,1767,
  	3,212,106,0,1765,1767,3,232,116,0,1766,1764,1,0,0,0,1766,1765,1,0,0,0,
  	1767,1768,1,0,0,0,1768,1769,5,70,0,0,1769,1770,3,202,101,0,1770,253,1,
  	0,0,0,1771,1772,5,72,0,0,1772,1773,3,226,113,0,1773,255,1,0,0,0,1774,
  	1775,3,234,117,0,1775,1776,5,67,0,0,1776,1777,5,68,0,0,1777,1805,1,0,
  	0,0,1778,1779,3,234,117,0,1779,1780,5,67,0,0,1780,1782,3,258,129,0,1781,
  	1783,5,69,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,
  	1785,5,68,0,0,1785,1805,1,0,0,0,1786,1787,3,234,117,0,1787,1788,5,67,
  	0,0,1788,1790,3,260,130,0,1789,1791,5,69,0,0,1790,1789,1,0,0,0,1790,1791,
  	1,0,0,0,1791,1792,1,0,0,0,1792,1793,5,68,0,0,1793,1805,1,0,0,0,1794,1795,
  	3,234,117,0,1795,1796,5,67,0,0,1796,1797,3,258,129,0,1797,1798,5,69,0,
  	0,1798,1800,3,260,130,0,1799,1801,5,69,0,0,1800,1799,1,0,0,0,1800,1801,
  	1,0,0,0,1801,1802,1,0,0,0,1802,1803,5,68,0,0,1803,1805,1,0,0,0,1804,1774,
  	1,0,0,0,1804,1778,1,0,0,0,1804,1786,1,0,0,0,1804,1794,1,0,0,0,1805,257,
  	1,0,0,0,1806,1811,3,202,101,0,1807,1808,5,69,0,0,1808,1810,3,202,101,
  	0,1809,1807,1,0,0,0,1810,1813,1,0,0,0,1811,1809,1,0,0,0,1811,1812,1,0,
  	0,0,1812,259,1,0,0,0,1813,1811,1,0,0,0,1814,1819,3,262,131,0,1815,1816,
  	5,69,0,0,1816,1818,3,262,131,0,1817,1815,1,0,0,0,1818,1821,1,0,0,0,1819,
  	1817,1,0,0,0,1819,1820,1,0,0,0,1820,261,1,0,0,0,1821,1819,1,0,0,0,1822,
  	1823,5,51,0,0,1823,1824,5,73,0,0,1824,1825,3,202,101,0,1825,263,1,0,0,
  	0,1826,1827,5,42,0,0,1827,1829,5,51,0,0,1828,1830,3,266,133,0,1829,1828,
  	1,0,0,0,1829,1830,1,0,0,0,1830,1831,1,0,0,0,1831,1832,5,73,0,0,1832,1833,
  	3,276,138,0,1833,265,1,0,0,0,1834,1835,5,74,0,0,1835,1836,3,268,134,0,
  	1836,1837,5,75,0,0,1837,267,1,0,0,0,1838,1843,3,270,135,0,1839,1840,5,
  	69,0,0,1840,1842,3,270,135,0,1841,1839,1,0,0,0,1842,1845,1,0,0,0,1843,
  	1841,1,0,0,0,1843,1844,1,0,0,0,1844,1847,1,0,0,0,1845,1843,1,0,0,0,1846,
  	1848,5,69,0,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,269,1,0,0,0,1849,
  	1851,5,51,0,0,1850,1852,3,272,136,0,1851,1850,1,0,0,0,1851,1852,1,0,0,
  	0,1852,1858,1,0,0,0,1853,1854,5,66,0,0,1854,1858,5,51,0,0,1855,1856,5,
  	72,0,0,1856,1858,5,51,0,0,1857,1849,1,0,0,0,1857,1853,1,0,0,0,1857,1855,
  	1,0,0,0,1858,271,1,0,0,0,1859,1860,5,70,0,0,1860,1861,3,276,138,0,1861,
  	273,1,0,0,0,1862,1867,3,276,138,0,1863,1864,5,69,0,0,1864,1866,3,276,
  	138,0,1865,1863,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,1867,1868,
  	1,0,0,0,1868,1871,1,0,0,0,1869,1867,1,0,0,0,1870,1872,5,69,0,0,1871,1870,
  	1,0,0,0,1871,1872,1,0,0,0,1872,275,1,0,0,0,1873,1874,3,292,146,0,1874,
  	1875,5,27,0,0,1875,1876,3,292,146,0,1876,1877,5,20,0,0,1877,1878,3,276,
  	138,0,1878,1882,1,0,0,0,1879,1882,3,292,146,0,1880,1882,3,350,175,0,1881,
  	1873,1,0,0,0,1881,1879,1,0,0,0,1881,1880,1,0,0,0,1882,277,1,0,0,0,1883,
  	1884,5,46,0,0,1884,1885,5,25,0,0,1885,1891,3,276,138,0,1886,1888,5,46,
  	0,0,1887,1889,3,280,140,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,1891,
  	1,0,0,0,1890,1883,1,0,0,0,1890,1886,1,0,0,0,1891,279,1,0,0,0,1892,1897,
  	3,282,141,0,1893,1894,5,69,0,0,1894,1896,3,282,141,0,1895,1893,1,0,0,
  	0,1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1901,1,0,
  	0,0,1899,1897,1,0,0,0,1900,1902,5,69,0,0,1901,1900,1,0,0,0,1901,1902,
  	1,0,0,0,1902,281,1,0,0,0,1903,1904,5,66,0,0,1904,1907,3,322,161,0,1905,
  	1907,3,276,138,0,1906,1903,1,0,0,0,1906,1905,1,0,0,0,1907,283,1,0,0,0,
  	1908,1913,3,286,143,0,1909,1910,5,69,0,0,1910,1912,3,286,143,0,1911,1909,
  	1,0,0,0,1912,1915,1,0,0,0,1913,1911,1,0,0,0,1913,1914,1,0,0,0,1914,1917,
  	1,0,0,0,1915,1913,1,0,0,0,1916,1918,5,69,0,0,1917,1916,1,0,0,0,1917,1918,
  	1,0,0,0,1918,285,1,0,0,0,1919,1920,5,66,0,0,1920,1923,3,322,161,0,1921,
  	1923,3,290,145,0,1922,1919,1,0,0,0,1922,1921,1,0,0,0,1923,287,1,0,0,0,
  	1924,1925,5,51,0,0,1925,1926,5,111,0,0,1926,1927,3,276,138,0,1927,289,
  	1,0,0,0,1928,1931,3,288,144,0,1929,1931,3,276,138,0,1930,1928,1,0,0,0,
  	1930,1929,1,0,0,0,1931,291,1,0,0,0,1932,1937,3,294,147,0,1933,1934,5,
  	36,0,0,1934,1936,3,294,147,0,1935,1933,1,0,0,0,1936,1939,1,0,0,0,1937,
  	1935,1,0,0,0,1937,1938,1,0,0,0,1938,293,1,0,0,0,1939,1937,1,0,0,0,1940,
  	1945,3,296,148,0,1941,1942,5,8,0,0,1942,1944,3,296,148,0,1943,1941,1,
  	0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,295,
  	1,0,0,0,1947,1945,1,0,0,0,1948,1949,5,35,0,0,1949,1952,3,296,148,0,1950,
  	1952,3,298,149,0,1951,1948,1,0,0,0,1951,1950,1,0,0,0,1952,297,1,0,0,0,
  	1953,1957,3,322,161,0,1954,1956,3,300,150,0,1955,1954,1,0,0,0,1956,1959,
  	1,0,0,0,1957,1955,1,0,0,0,1957,1958,1,0,0,0,1958,299,1,0,0,0,1959,1957,
  	1,0,0,0,1960,1971,3,302,151,0,1961,1971,3,304,152,0,1962,1971,3,306,153,
  	0,1963,1971,3,308,154,0,1964,1971,3,310,155,0,1965,1971,3,312,156,0,1966,
  	1971,3,314,157,0,1967,1971,3,316,158,0,1968,1971,3,318,159,0,1969,1971,
  	3,320,160,0,1970,1960,1,0,0,0,1970,1961,1,0,0,0,1970,1962,1,0,0,0,1970,
  	1963,1,0,0,0,1970,1964,1,0,0,0,1970,1965,1,0,0,0,1970,1966,1,0,0,0,1970,
  	1967,1,0,0,0,1970,1968,1,0,0,0,1970,1969,1,0,0,0,1971,301,1,0,0,0,1972,
  	1973,5,91,0,0,1973,1974,3,322,161,0,1974,303,1,0,0,0,1975,1976,5,95,0,
  	0,1976,1977,3,322,161,0,1977,305,1,0,0,0,1978,1979,5,93,0,0,1979,1980,
  	3,322,161,0,1980,307,1,0,0,0,1981,1982,5,89,0,0,1982,1983,3,322,161,0,
  	1983,309,1,0,0,0,1984,1985,5,92,0,0,1985,1986,3,322,161,0,1986,311,1,
  	0,0,0,1987,1988,5,90,0,0,1988,1989,3,322,161,0,1989,313,1,0,0,0,1990,
  	1991,5,35,0,0,1991,1992,5,29,0,0,1992,1993,3,322,161,0,1993,315,1,0,0,
  	0,1994,1995,5,29,0,0,1995,1996,3,322,161,0,1996,317,1,0,0,0,1997,1998,
  	5,30,0,0,1998,1999,5,35,0,0,1999,2000,3,322,161,0,2000,319,1,0,0,0,2001,
  	2002,5,30,0,0,2002,2003,3,322,161,0,2003,321,1,0,0,0,2004,2005,6,161,
  	-1,0,2005,2006,3,324,162,0,2006,2012,1,0,0,0,2007,2008,10,2,0,0,2008,
  	2009,5,76,0,0,2009,2011,3,324,162,0,2010,2007,1,0,0,0,2011,2014,1,0,0,
  	0,2012,2010,1,0,0,0,2012,2013,1,0,0,0,2013,323,1,0,0,0,2014,2012,1,0,
  	0,0,2015,2016,6,162,-1,0,2016,2017,3,326,163,0,2017,2023,1,0,0,0,2018,
  	2019,10,2,0,0,2019,2020,5,77,0,0,2020,2022,3,326,163,0,2021,2018,1,0,
  	0,0,2022,2025,1,0,0,0,2023,2021,1,0,0,0,2023,2024,1,0,0,0,2024,325,1,
  	0,0,0,2025,2023,1,0,0,0,2026,2027,6,163,-1,0,2027,2028,3,328,164,0,2028,
  	2034,1,0,0,0,2029,2030,10,2,0,0,2030,2031,5,78,0,0,2031,2033,3,328,164,
  	0,2032,2029,1,0,0,0,2033,2036,1,0,0,0,2034,2032,1,0,0,0,2034,2035,1,0,
  	0,0,2035,327,1,0,0,0,2036,2034,1,0,0,0,2037,2038,6,164,-1,0,2038,2039,
  	3,330,165,0,2039,2048,1,0,0,0,2040,2041,10,3,0,0,2041,2042,5,79,0,0,2042,
  	2047,3,330,165,0,2043,2044,10,2,0,0,2044,2045,5,80,0,0,2045,2047,3,330,
  	165,0,2046,2040,1,0,0,0,2046,2043,1,0,0,0,2047,2050,1,0,0,0,2048,2046,
  	1,0,0,0,2048,2049,1,0,0,0,2049,329,1,0,0,0,2050,2048,1,0,0,0,2051,2052,
  	6,165,-1,0,2052,2053,3,332,166,0,2053,2062,1,0,0,0,2054,2055,10,3,0,0,
  	2055,2056,5,81,0,0,2056,2061,3,332,166,0,2057,2058,10,2,0,0,2058,2059,
  	5,82,0,0,2059,2061,3,332,166,0,2060,2054,1,0,0,0,2060,2057,1,0,0,0,2061,
  	2064,1,0,0,0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,331,1,0,0,0,2064,
  	2062,1,0,0,0,2065,2066,6,166,-1,0,2066,2067,3,334,167,0,2067,2085,1,0,
  	0,0,2068,2069,10,6,0,0,2069,2070,5,66,0,0,2070,2084,3,334,167,0,2071,
  	2072,10,5,0,0,2072,2073,5,83,0,0,2073,2084,3,334,167,0,2074,2075,10,4,
  	0,0,2075,2076,5,85,0,0,2076,2084,3,334,167,0,2077,2078,10,3,0,0,2078,
  	2079,5,84,0,0,2079,2084,3,334,167,0,2080,2081,10,2,0,0,2081,2082,5,96,
  	0,0,2082,2084,3,334,167,0,2083,2068,1,0,0,0,2083,2071,1,0,0,0,2083,2074,
  	1,0,0,0,2083,2077,1,0,0,0,2083,2080,1,0,0,0,2084,2087,1,0,0,0,2085,2083,
  	1,0,0,0,2085,2086,1,0,0,0,2086,333,1,0,0,0,2087,2085,1,0,0,0,2088,2089,
  	5,81,0,0,2089,2096,3,334,167,0,2090,2091,5,82,0,0,2091,2096,3,334,167,
  	0,2092,2093,5,86,0,0,2093,2096,3,334,167,0,2094,2096,3,336,168,0,2095,
  	2088,1,0,0,0,2095,2090,1,0,0,0,2095,2092,1,0,0,0,2095,2094,1,0,0,0,2096,
  	335,1,0,0,0,2097,2098,3,338,169,0,2098,2099,5,72,0,0,2099,2100,3,334,
  	167,0,2100,2103,1,0,0,0,2101,2103,3,338,169,0,2102,2097,1,0,0,0,2102,
  	2101,1,0,0,0,2103,337,1,0,0,0,2104,2105,5,12,0,0,2105,2108,3,340,170,
  	0,2106,2108,3,340,170,0,2107,2104,1,0,0,0,2107,2106,1,0,0,0,2108,339,
  	1,0,0,0,2109,2110,6,170,-1,0,2110,2111,3,346,173,0,2111,2130,1,0,0,0,
  	2112,2113,10,5,0,0,2113,2114,5,63,0,0,2114,2129,5,51,0,0,2115,2116,10,
  	4,0,0,2116,2129,3,410,205,0,2117,2118,10,3,0,0,2118,2120,5,67,0,0,2119,
  	2121,3,414,207,0,2120,2119,1,0,0,0,2120,2121,1,0,0,0,2121,2122,1,0,0,
  	0,2122,2129,5,68,0,0,2123,2124,10,2,0,0,2124,2125,5,74,0,0,2125,2126,
  	3,342,171,0,2126,2127,5,75,0,0,2127,2129,1,0,0,0,2128,2112,1,0,0,0,2128,
  	2115,1,0,0,0,2128,2117,1,0,0,0,2128,2123,1,0,0,0,2129,2132,1,0,0,0,2130,
  	2128,1,0,0,0,2130,2131,1,0,0,0,2131,341,1,0,0,0,2132,2130,1,0,0,0,2133,
  	2136,3,344,172,0,2134,2136,3,422,211,0,2135,2133,1,0,0,0,2135,2134,1,
  	0,0,0,2136,2144,1,0,0,0,2137,2140,5,69,0,0,2138,2141,3,344,172,0,2139,
  	2141,3,422,211,0,2140,2138,1,0,0,0,2140,2139,1,0,0,0,2141,2143,1,0,0,
  	0,2142,2137,1,0,0,0,2143,2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,
  	0,0,2145,2148,1,0,0,0,2146,2144,1,0,0,0,2147,2149,5,69,0,0,2148,2147,
  	1,0,0,0,2148,2149,1,0,0,0,2149,343,1,0,0,0,2150,2152,3,276,138,0,2151,
  	2150,1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2155,5,70,0,0,2154,
  	2156,3,276,138,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,2161,1,0,0,
  	0,2157,2159,5,70,0,0,2158,2160,3,276,138,0,2159,2158,1,0,0,0,2159,2160,
  	1,0,0,0,2160,2162,1,0,0,0,2161,2157,1,0,0,0,2161,2162,1,0,0,0,2162,2165,
  	1,0,0,0,2163,2165,3,290,145,0,2164,2151,1,0,0,0,2164,2163,1,0,0,0,2165,
  	345,1,0,0,0,2166,2190,3,50,25,0,2167,2190,5,51,0,0,2168,2190,5,40,0,0,
  	2169,2190,5,22,0,0,2170,2190,5,33,0,0,2171,2190,3,386,193,0,2172,2190,
  	5,4,0,0,2173,2177,3,390,195,0,2174,2177,3,348,174,0,2175,2177,3,410,205,
  	0,2176,2173,1,0,0,0,2176,2174,1,0,0,0,2176,2175,1,0,0,0,2177,2190,1,0,
  	0,0,2178,2181,3,388,194,0,2179,2181,3,406,203,0,2180,2178,1,0,0,0,2180,
  	2179,1,0,0,0,2181,2190,1,0,0,0,2182,2187,3,394,197,0,2183,2187,3,392,
  	196,0,2184,2187,3,412,206,0,2185,2187,3,408,204,0,2186,2182,1,0,0,0,2186,
  	2183,1,0,0,0,2186,2184,1,0,0,0,2186,2185,1,0,0,0,2187,2190,1,0,0,0,2188,
  	2190,5,65,0,0,2189,2166,1,0,0,0,2189,2167,1,0,0,0,2189,2168,1,0,0,0,2189,
  	2169,1,0,0,0,2189,2170,1,0,0,0,2189,2171,1,0,0,0,2189,2172,1,0,0,0,2189,
  	2176,1,0,0,0,2189,2180,1,0,0,0,2189,2186,1,0,0,0,2189,2188,1,0,0,0,2190,
  	347,1,0,0,0,2191,2194,5,67,0,0,2192,2195,3,278,139,0,2193,2195,3,290,
  	145,0,2194,2192,1,0,0,0,2194,2193,1,0,0,0,2195,2196,1,0,0,0,2196,2197,
  	5,68,0,0,2197,349,1,0,0,0,2198,2200,5,31,0,0,2199,2201,3,352,176,0,2200,
  	2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,0,0,2202,2203,5,70,0,0,2203,
  	2204,3,276,138,0,2204,351,1,0,0,0,2205,2206,3,354,177,0,2206,353,1,0,
  	0,0,2207,2211,3,356,178,0,2208,2210,3,364,182,0,2209,2208,1,0,0,0,2210,
  	2213,1,0,0,0,2211,2209,1,0,0,0,2211,2212,1,0,0,0,2212,2217,1,0,0,0,2213,
  	2211,1,0,0,0,2214,2216,3,366,183,0,2215,2214,1,0,0,0,2216,2219,1,0,0,
  	0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,2221,1,0,0,0,2219,2217,1,0,
  	0,0,2220,2222,3,360,180,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,2257,
  	1,0,0,0,2223,2227,3,358,179,0,2224,2226,3,366,183,0,2225,2224,1,0,0,0,
  	2226,2229,1,0,0,0,2227,2225,1,0,0,0,2227,2228,1,0,0,0,2228,2231,1,0,0,
  	0,2229,2227,1,0,0,0,2230,2232,3,360,180,0,2231,2230,1,0,0,0,2231,2232,
  	1,0,0,0,2232,2257,1,0,0,0,2233,2235,3,364,182,0,2234,2233,1,0,0,0,2235,
  	2236,1,0,0,0,2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,2241,1,0,0,0,2238,
  	2240,3,366,183,0,2239,2238,1,0,0,0,2240,2243,1,0,0,0,2241,2239,1,0,0,
  	0,2241,2242,1,0,0,0,2242,2245,1,0,0,0,2243,2241,1,0,0,0,2244,2246,3,360,
  	180,0,2245,2244,1,0,0,0,2245,2246,1,0,0,0,2246,2257,1,0,0,0,2247,2249,
  	3,366,183,0,2248,2247,1,0,0,0,2249,2250,1,0,0,0,2250,2248,1,0,0,0,2250,
  	2251,1,0,0,0,2251,2253,1,0,0,0,2252,2254,3,360,180,0,2253,2252,1,0,0,
  	0,2253,2254,1,0,0,0,2254,2257,1,0,0,0,2255,2257,3,360,180,0,2256,2207,
  	1,0,0,0,2256,2223,1,0,0,0,2256,2234,1,0,0,0,2256,2248,1,0,0,0,2256,2255,
  	1,0,0,0,2257,355,1,0,0,0,2258,2260,3,364,182,0,2259,2258,1,0,0,0,2260,
  	2261,1,0,0,0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,2263,1,0,0,0,2263,
  	2265,5,83,0,0,2264,2266,5,69,0,0,2265,2264,1,0,0,0,2265,2266,1,0,0,0,
  	2266,357,1,0,0,0,2267,2269,3,364,182,0,2268,2267,1,0,0,0,2269,2272,1,
  	0,0,0,2270,2268,1,0,0,0,2270,2271,1,0,0,0,2271,2274,1,0,0,0,2272,2270,
  	1,0,0,0,2273,2275,3,366,183,0,2274,2273,1,0,0,0,2275,2276,1,0,0,0,2276,
  	2274,1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,2280,5,83,0,0,2279,
  	2281,5,69,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,359,1,0,0,0,2282,
  	2283,5,66,0,0,2283,2287,3,364,182,0,2284,2286,3,368,184,0,2285,2284,1,
  	0,0,0,2286,2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,1,0,0,0,2288,2291,
  	1,0,0,0,2289,2287,1,0,0,0,2290,2292,3,362,181,0,2291,2290,1,0,0,0,2291,
  	2292,1,0,0,0,2292,2305,1,0,0,0,2293,2294,5,66,0,0,2294,2296,5,69,0,0,
  	2295,2297,3,368,184,0,2296,2295,1,0,0,0,2297,2298,1,0,0,0,2298,2296,1,
  	0,0,0,2298,2299,1,0,0,0,2299,2301,1,0,0,0,2300,2302,3,362,181,0,2301,
  	2300,1,0,0,0,2301,2302,1,0,0,0,2302,2305,1,0,0,0,2303,2305,3,362,181,
  	0,2304,2282,1,0,0,0,2304,2293,1,0,0,0,2304,2303,1,0,0,0,2305,361,1,0,
  	0,0,2306,2307,5,72,0,0,2307,2308,3,364,182,0,2308,363,1,0,0,0,2309,2311,
  	3,370,185,0,2310,2312,5,69,0,0,2311,2310,1,0,0,0,2311,2312,1,0,0,0,2312,
  	365,1,0,0,0,2313,2314,3,370,185,0,2314,2316,3,168,84,0,2315,2317,5,69,
  	0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,367,1,0,0,0,2318,2320,3,
  	370,185,0,2319,2321,3,168,84,0,2320,2319,1,0,0,0,2320,2321,1,0,0,0,2321,
  	2323,1,0,0,0,2322,2324,5,69,0,0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,
  	369,1,0,0,0,2325,2326,5,51,0,0,2326,371,1,0,0,0,2327,2330,3,374,187,0,
  	2328,2330,5,117,0,0,2329,2327,1,0,0,0,2329,2328,1,0,0,0,2330,373,1,0,
  	0,0,2331,2334,5,87,0,0,2332,2335,3,278,139,0,2333,2335,3,280,140,0,2334,
  	2332,1,0,0,0,2334,2333,1,0,0,0,2335,2337,1,0,0,0,2336,2338,5,73,0,0,2337,
  	2336,1,0,0,0,2337,2338,1,0,0,0,2338,2340,1,0,0,0,2339,2341,3,376,188,
  	0,2340,2339,1,0,0,0,2340,2341,1,0,0,0,2341,2343,1,0,0,0,2342,2344,3,378,
  	189,0,2343,2342,1,0,0,0,2343,2344,1,0,0,0,2344,2345,1,0,0,0,2345,2346,
  	5,88,0,0,2346,375,1,0,0,0,2347,2351,1,0,0,0,2348,2349,5,112,0,0,2349,
  	2351,5,51,0,0,2350,2347,1,0,0,0,2350,2348,1,0,0,0,2351,377,1,0,0,0,2352,
  	2356,5,70,0,0,2353,2355,3,380,190,0,2354,2353,1,0,0,0,2355,2358,1,0,0,
  	0,2356,2354,1,0,0,0,2356,2357,1,0,0,0,2357,379,1,0,0,0,2358,2356,1,0,
  	0,0,2359,2362,5,117,0,0,2360,2362,3,374,187,0,2361,2359,1,0,0,0,2361,
  	2360,1,0,0,0,2362,381,1,0,0,0,2363,2367,5,118,0,0,2364,2366,3,372,186,
  	0,2365,2364,1,0,0,0,2366,2369,1,0,0,0,2367,2365,1,0,0,0,2367,2368,1,0,
  	0,0,2368,2370,1,0,0,0,2369,2367,1,0,0,0,2370,2371,5,119,0,0,2371,383,
  	1,0,0,0,2372,2373,5,3,0,0,2373,385,1,0,0,0,2374,2377,3,382,191,0,2375,
  	2377,3,384,192,0,2376,2374,1,0,0,0,2376,2375,1,0,0,0,2377,2378,1,0,0,
  	0,2378,2376,1,0,0,0,2378,2379,1,0,0,0,2379,387,1,0,0,0,2380,2382,5,74,
  	0,0,2381,2383,3,284,142,0,2382,2381,1,0,0,0,2382,2383,1,0,0,0,2383,2384,
  	1,0,0,0,2384,2385,5,75,0,0,2385,389,1,0,0,0,2386,2391,5,67,0,0,2387,2388,
  	3,286,143,0,2388,2389,5,69,0,0,2389,2390,3,284,142,0,2390,2392,1,0,0,
  	0,2391,2387,1,0,0,0,2391,2392,1,0,0,0,2392,2393,1,0,0,0,2393,2394,5,68,
  	0,0,2394,391,1,0,0,0,2395,2396,5,87,0,0,2396,2397,3,284,142,0,2397,2398,
  	5,88,0,0,2398,393,1,0,0,0,2399,2401,5,87,0,0,2400,2402,3,396,198,0,2401,
  	2400,1,0,0,0,2401,2402,1,0,0,0,2402,2403,1,0,0,0,2403,2404,5,88,0,0,2404,
  	395,1,0,0,0,2405,2410,3,398,199,0,2406,2407,5,69,0,0,2407,2409,3,398,
  	199,0,2408,2406,1,0,0,0,2409,2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,
  	1,0,0,0,2411,2414,1,0,0,0,2412,2410,1,0,0,0,2413,2415,5,69,0,0,2414,2413,
  	1,0,0,0,2414,2415,1,0,0,0,2415,397,1,0,0,0,2416,2417,5,72,0,0,2417,2420,
  	3,322,161,0,2418,2420,3,400,200,0,2419,2416,1,0,0,0,2419,2418,1,0,0,0,
  	2420,399,1,0,0,0,2421,2422,3,276,138,0,2422,2423,5,70,0,0,2423,2424,3,
  	276,138,0,2424,401,1,0,0,0,2425,2427,3,404,202,0,2426,2425,1,0,0,0,2427,
  	2428,1,0,0,0,2428,2426,1,0,0,0,2428,2429,1,0,0,0,2429,403,1,0,0,0,2430,
  	2432,5,11,0,0,2431,2430,1,0,0,0,2431,2432,1,0,0,0,2432,2433,1,0,0,0,2433,
  	2434,5,24,0,0,2434,2435,3,428,214,0,2435,2436,5,29,0,0,2436,2441,3,292,
  	146,0,2437,2438,5,27,0,0,2438,2440,3,292,146,0,2439,2437,1,0,0,0,2440,
  	2443,1,0,0,0,2441,2439,1,0,0,0,2441,2442,1,0,0,0,2442,405,1,0,0,0,2443,
  	2441,1,0,0,0,2444,2445,5,74,0,0,2445,2446,3,290,145,0,2446,2447,3,402,
  	201,0,2447,2448,5,75,0,0,2448,407,1,0,0,0,2449,2450,5,87,0,0,2450,2451,
  	3,290,145,0,2451,2452,3,402,201,0,2452,2453,5,88,0,0,2453,409,1,0,0,0,
  	2454,2457,5,67,0,0,2455,2458,3,288,144,0,2456,2458,3,276,138,0,2457,2455,
  	1,0,0,0,2457,2456,1,0,0,0,2458,2459,1,0,0,0,2459,2460,3,402,201,0,2460,
  	2461,5,68,0,0,2461,411,1,0,0,0,2462,2463,5,87,0,0,2463,2464,3,400,200,
  	0,2464,2465,3,402,201,0,2465,2466,5,88,0,0,2466,413,1,0,0,0,2467,2469,
  	3,416,208,0,2468,2470,5,69,0,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,
  	415,1,0,0,0,2471,2476,3,418,209,0,2472,2473,5,69,0,0,2473,2475,3,418,
  	209,0,2474,2472,1,0,0,0,2475,2478,1,0,0,0,2476,2474,1,0,0,0,2476,2477,
  	1,0,0,0,2477,2481,1,0,0,0,2478,2476,1,0,0,0,2479,2480,5,69,0,0,2480,2482,
  	3,420,210,0,2481,2479,1,0,0,0,2481,2482,1,0,0,0,2482,2485,1,0,0,0,2483,
  	2485,3,420,210,0,2484,2471,1,0,0,0,2484,2483,1,0,0,0,2485,417,1,0,0,0,
  	2486,2490,3,422,211,0,2487,2490,3,288,144,0,2488,2490,3,276,138,0,2489,
  	2486,1,0,0,0,2489,2487,1,0,0,0,2489,2488,1,0,0,0,2490,419,1,0,0,0,2491,
  	2496,3,424,212,0,2492,2493,5,69,0,0,2493,2495,3,424,212,0,2494,2492,1,
  	0,0,0,2495,2498,1,0,0,0,2496,2494,1,0,0,0,2496,2497,1,0,0,0,2497,2499,
  	1,0,0,0,2498,2496,1,0,0,0,2499,2500,5,69,0,0,2500,2505,3,426,213,0,2501,
  	2502,5,69,0,0,2502,2504,3,426,213,0,2503,2501,1,0,0,0,2504,2507,1,0,0,
  	0,2505,2503,1,0,0,0,2505,2506,1,0,0,0,2506,2525,1,0,0,0,2507,2505,1,0,
  	0,0,2508,2513,3,424,212,0,2509,2510,5,69,0,0,2510,2512,3,424,212,0,2511,
  	2509,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,2514,1,0,0,0,2514,
  	2525,1,0,0,0,2515,2513,1,0,0,0,2516,2521,3,426,213,0,2517,2518,5,69,0,
  	0,2518,2520,3,426,213,0,2519,2517,1,0,0,0,2520,2523,1,0,0,0,2521,2519,
  	1,0,0,0,2521,2522,1,0,0,0,2522,2525,1,0,0,0,2523,2521,1,0,0,0,2524,2491,
  	1,0,0,0,2524,2508,1,0,0,0,2524,2516,1,0,0,0,2525,421,1,0,0,0,2526,2527,
  	5,66,0,0,2527,2528,3,276,138,0,2528,423,1,0,0,0,2529,2530,5,51,0,0,2530,
  	2531,5,73,0,0,2531,2534,3,276,138,0,2532,2534,3,422,211,0,2533,2529,1,
  	0,0,0,2533,2532,1,0,0,0,2534,425,1,0,0,0,2535,2536,5,51,0,0,2536,2537,
  	5,73,0,0,2537,2541,3,276,138,0,2538,2539,5,72,0,0,2539,2541,3,276,138,
  	0,2540,2535,1,0,0,0,2540,2538,1,0,0,0,2541,427,1,0,0,0,2542,2547,3,434,
  	217,0,2543,2544,5,69,0,0,2544,2546,3,434,217,0,2545,2543,1,0,0,0,2546,
  	2549,1,0,0,0,2547,2545,1,0,0,0,2547,2548,1,0,0,0,2548,2551,1,0,0,0,2549,
  	2547,1,0,0,0,2550,2552,5,69,0,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,
  	429,1,0,0,0,2553,2558,3,434,217,0,2554,2555,5,69,0,0,2555,2557,3,434,
  	217,0,2556,2554,1,0,0,0,2557,2560,1,0,0,0,2558,2556,1,0,0,0,2558,2559,
  	1,0,0,0,2559,2562,1,0,0,0,2560,2558,1,0,0,0,2561,2563,5,69,0,0,2562,2561,
  	1,0,0,0,2562,2563,1,0,0,0,2563,431,1,0,0,0,2564,2567,3,434,217,0,2565,
  	2566,5,69,0,0,2566,2568,3,434,217,0,2567,2565,1,0,0,0,2568,2569,1,0,0,
  	0,2569,2567,1,0,0,0,2569,2570,1,0,0,0,2570,2572,1,0,0,0,2571,2573,5,69,
  	0,0,2572,2571,1,0,0,0,2572,2573,1,0,0,0,2573,2578,1,0,0,0,2574,2575,3,
  	434,217,0,2575,2576,5,69,0,0,2576,2578,1,0,0,0,2577,2564,1,0,0,0,2577,
  	2574,1,0,0,0,2578,433,1,0,0,0,2579,2580,5,66,0,0,2580,2583,3,434,217,
  	0,2581,2583,3,436,218,0,2582,2579,1,0,0,0,2582,2581,1,0,0,0,2583,435,
  	1,0,0,0,2584,2585,3,444,222,0,2585,2586,5,63,0,0,2586,2587,5,51,0,0,2587,
  	2595,1,0,0,0,2588,2589,3,444,222,0,2589,2590,5,74,0,0,2590,2591,3,342,
  	171,0,2591,2592,5,75,0,0,2592,2595,1,0,0,0,2593,2595,3,438,219,0,2594,
  	2584,1,0,0,0,2594,2588,1,0,0,0,2594,2593,1,0,0,0,2595,437,1,0,0,0,2596,
  	2612,5,51,0,0,2597,2598,5,67,0,0,2598,2599,3,436,218,0,2599,2600,5,68,
  	0,0,2600,2612,1,0,0,0,2601,2603,5,67,0,0,2602,2604,3,432,216,0,2603,2602,
  	1,0,0,0,2603,2604,1,0,0,0,2604,2605,1,0,0,0,2605,2612,5,68,0,0,2606,2608,
  	5,74,0,0,2607,2609,3,430,215,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,
  	2610,1,0,0,0,2610,2612,5,75,0,0,2611,2596,1,0,0,0,2611,2597,1,0,0,0,2611,
  	2601,1,0,0,0,2611,2606,1,0,0,0,2612,439,1,0,0,0,2613,2620,3,442,221,0,
  	2614,2620,5,51,0,0,2615,2616,5,67,0,0,2616,2617,3,440,220,0,2617,2618,
  	5,68,0,0,2618,2620,1,0,0,0,2619,2613,1,0,0,0,2619,2614,1,0,0,0,2619,2615,
  	1,0,0,0,2620,441,1,0,0,0,2621,2622,3,444,222,0,2622,2623,5,63,0,0,2623,
  	2624,5,51,0,0,2624,2631,1,0,0,0,2625,2626,3,444,222,0,2626,2627,5,74,
  	0,0,2627,2628,3,342,171,0,2628,2629,5,75,0,0,2629,2631,1,0,0,0,2630,2621,
  	1,0,0,0,2630,2625,1,0,0,0,2631,443,1,0,0,0,2632,2633,6,222,-1,0,2633,
  	2634,3,346,173,0,2634,2653,1,0,0,0,2635,2636,10,5,0,0,2636,2637,5,63,
  	0,0,2637,2652,5,51,0,0,2638,2639,10,4,0,0,2639,2640,5,74,0,0,2640,2641,
  	3,342,171,0,2641,2642,5,75,0,0,2642,2652,1,0,0,0,2643,2644,10,3,0,0,2644,
  	2652,3,410,205,0,2645,2646,10,2,0,0,2646,2648,5,67,0,0,2647,2649,3,414,
  	207,0,2648,2647,1,0,0,0,2648,2649,1,0,0,0,2649,2650,1,0,0,0,2650,2652,
  	5,68,0,0,2651,2635,1,0,0,0,2651,2638,1,0,0,0,2651,2643,1,0,0,0,2651,2645,
  	1,0,0,0,2652,2655,1,0,0,0,2653,2651,1,0,0,0,2653,2654,1,0,0,0,2654,445,
  	1,0,0,0,2655,2653,1,0,0,0,2656,2661,3,448,224,0,2657,2658,5,69,0,0,2658,
  	2660,3,448,224,0,2659,2657,1,0,0,0,2660,2663,1,0,0,0,2661,2659,1,0,0,
  	0,2661,2662,1,0,0,0,2662,2665,1,0,0,0,2663,2661,1,0,0,0,2664,2666,5,69,
  	0,0,2665,2664,1,0,0,0,2665,2666,1,0,0,0,2666,447,1,0,0,0,2667,2668,3,
  	444,222,0,2668,2669,5,63,0,0,2669,2670,5,51,0,0,2670,2678,1,0,0,0,2671,
  	2672,3,444,222,0,2672,2673,5,74,0,0,2673,2674,3,342,171,0,2674,2675,5,
  	75,0,0,2675,2678,1,0,0,0,2676,2678,3,450,225,0,2677,2667,1,0,0,0,2677,
  	2671,1,0,0,0,2677,2676,1,0,0,0,2678,449,1,0,0,0,2679,2691,5,51,0,0,2680,
  	2682,5,67,0,0,2681,2683,3,446,223,0,2682,2681,1,0,0,0,2682,2683,1,0,0,
  	0,2683,2684,1,0,0,0,2684,2691,5,68,0,0,2685,2687,5,74,0,0,2686,2688,3,
  	446,223,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,2689,
  	2691,5,75,0,0,2690,2679,1,0,0,0,2690,2680,1,0,0,0,2690,2685,1,0,0,0,2691,
  	451,1,0,0,0,2692,2697,3,276,138,0,2693,2694,5,69,0,0,2694,2696,3,276,
  	138,0,2695,2693,1,0,0,0,2696,2699,1,0,0,0,2697,2695,1,0,0,0,2697,2698,
  	1,0,0,0,2698,2700,1,0,0,0,2699,2697,1,0,0,0,2700,2701,5,69,0,0,2701,2702,
  	5,66,0,0,2702,2703,3,276,138,0,2703,2704,5,69,0,0,2704,2705,5,72,0,0,
  	2705,2706,3,276,138,0,2706,2750,1,0,0,0,2707,2712,3,276,138,0,2708,2709,
  	5,69,0,0,2709,2711,3,276,138,0,2710,2708,1,0,0,0,2711,2714,1,0,0,0,2712,
  	2710,1,0,0,0,2712,2713,1,0,0,0,2713,2715,1,0,0,0,2714,2712,1,0,0,0,2715,
  	2716,5,69,0,0,2716,2717,5,66,0,0,2717,2718,3,276,138,0,2718,2750,1,0,
  	0,0,2719,2724,3,276,138,0,2720,2721,5,69,0,0,2721,2723,3,276,138,0,2722,
  	2720,1,0,0,0,2723,2726,1,0,0,0,2724,2722,1,0,0,0,2724,2725,1,0,0,0,2725,
  	2727,1,0,0,0,2726,2724,1,0,0,0,2727,2728,5,69,0,0,2728,2729,5,72,0,0,
  	2729,2730,3,276,138,0,2730,2750,1,0,0,0,2731,2732,5,66,0,0,2732,2733,
  	3,276,138,0,2733,2734,5,69,0,0,2734,2735,5,72,0,0,2735,2736,3,276,138,
  	0,2736,2750,1,0,0,0,2737,2738,5,66,0,0,2738,2750,3,276,138,0,2739,2740,
  	5,72,0,0,2740,2750,3,276,138,0,2741,2746,3,276,138,0,2742,2743,5,69,0,
  	0,2743,2745,3,276,138,0,2744,2742,1,0,0,0,2745,2748,1,0,0,0,2746,2744,
  	1,0,0,0,2746,2747,1,0,0,0,2747,2750,1,0,0,0,2748,2746,1,0,0,0,2749,2692,
  	1,0,0,0,2749,2707,1,0,0,0,2749,2719,1,0,0,0,2749,2731,1,0,0,0,2749,2737,
  	1,0,0,0,2749,2739,1,0,0,0,2749,2741,1,0,0,0,2750,453,1,0,0,0,2751,2752,
  	5,113,0,0,2752,455,1,0,0,0,343,462,469,474,480,488,494,503,509,519,525,
  	528,533,539,542,549,556,564,583,587,591,602,607,611,636,639,641,646,657,
  	666,675,681,688,701,707,720,726,729,736,744,753,767,774,785,787,801,808,
  	815,819,825,832,836,840,844,847,851,855,857,861,866,873,877,880,888,892,
  	896,904,908,912,914,918,925,932,936,941,946,950,966,976,983,990,996,1003,
  	1007,1013,1015,1019,1025,1031,1034,1042,1051,1063,1067,1076,1087,1091,
  	1096,1102,1109,1115,1122,1128,1138,1147,1155,1158,1165,1169,1172,1178,
  	1183,1188,1192,1197,1201,1211,1217,1221,1227,1231,1236,1241,1245,1250,
  	1253,1256,1261,1265,1270,1276,1280,1287,1291,1298,1302,1309,1312,1315,
  	1324,1330,1339,1343,1349,1351,1355,1380,1382,1395,1397,1408,1417,1427,
  	1429,1438,1442,1454,1468,1472,1485,1491,1498,1511,1514,1517,1525,1528,
  	1531,1533,1539,1547,1554,1571,1578,1581,1586,1596,1600,1611,1622,1630,
  	1638,1648,1653,1658,1684,1693,1698,1701,1706,1713,1717,1721,1727,1734,
  	1743,1750,1754,1761,1766,1782,1790,1800,1804,1811,1819,1829,1843,1847,
  	1851,1857,1867,1871,1881,1888,1890,1897,1901,1906,1913,1917,1922,1930,
  	1937,1945,1951,1957,1970,2012,2023,2034,2046,2048,2060,2062,2083,2085,
  	2095,2102,2107,2120,2128,2130,2135,2140,2144,2148,2151,2155,2159,2161,
  	2164,2176,2180,2186,2189,2194,2200,2211,2217,2221,2227,2231,2236,2241,
  	2245,2250,2253,2256,2261,2265,2270,2276,2280,2287,2291,2298,2301,2304,
  	2311,2316,2320,2323,2329,2334,2337,2340,2343,2350,2356,2361,2367,2376,
  	2378,2382,2391,2401,2410,2414,2419,2428,2431,2441,2457,2469,2476,2481,
  	2484,2489,2496,2505,2513,2521,2524,2533,2540,2547,2551,2558,2562,2569,
  	2572,2577,2582,2594,2603,2608,2611,2619,2630,2648,2651,2653,2661,2665,
  	2677,2682,2687,2690,2697,2712,2724,2746,2749
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fandangoparserParserStaticData = std::move(staticData);
}

}

FandangoParser::FandangoParser(TokenStream *input) : FandangoParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FandangoParser::FandangoParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FandangoParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *fandangoparserParserStaticData->atn, fandangoparserParserStaticData->decisionToDFA, fandangoparserParserStaticData->sharedContextCache, options);
}

FandangoParser::~FandangoParser() {
  delete _interpreter;
}

const atn::ATN& FandangoParser::getATN() const {
  return *fandangoparserParserStaticData->atn;
}

std::string FandangoParser::getGrammarFileName() const {
  return "FandangoParser.g4";
}

const std::vector<std::string>& FandangoParser::getRuleNames() const {
  return fandangoparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& FandangoParser::getVocabulary() const {
  return fandangoparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FandangoParser::getSerializedATN() const {
  return fandangoparserParserStaticData->serializedATN;
}


//----------------- FandangoContext ------------------------------------------------------------------

FandangoParser::FandangoContext::FandangoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProgramContext* FandangoParser::FandangoContext::program() {
  return getRuleContext<FandangoParser::ProgramContext>(0);
}

tree::TerminalNode* FandangoParser::FandangoContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::FandangoContext::getRuleIndex() const {
  return FandangoParser::RuleFandango;
}


std::any FandangoParser::FandangoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFandango(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FandangoContext* FandangoParser::fandango() {
  FandangoContext *_localctx = _tracker.createInstance<FandangoContext>(_ctx, getState());
  enterRule(_localctx, 0, FandangoParser::RuleFandango);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(456);
    program();
    setState(457);
    match(FandangoParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

FandangoParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::ProgramContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ProgramContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

std::vector<FandangoParser::StatementContext *> FandangoParser::ProgramContext::statement() {
  return getRuleContexts<FandangoParser::StatementContext>();
}

FandangoParser::StatementContext* FandangoParser::ProgramContext::statement(size_t i) {
  return getRuleContext<FandangoParser::StatementContext>(i);
}


size_t FandangoParser::ProgramContext::getRuleIndex() const {
  return FandangoParser::RuleProgram;
}


std::any FandangoParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProgramContext* FandangoParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, FandangoParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(462);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(459);
      match(FandangoParser::NEWLINE);
      setState(464);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(474);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4503529285205022) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007201425492487) != 0)) {
      setState(465);
      statement();
      setState(469);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NEWLINE) {
        setState(466);
        match(FandangoParser::NEWLINE);
        setState(471);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(476);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

FandangoParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProductionContext* FandangoParser::StatementContext::production() {
  return getRuleContext<FandangoParser::ProductionContext>(0);
}

FandangoParser::ConstraintContext* FandangoParser::StatementContext::constraint() {
  return getRuleContext<FandangoParser::ConstraintContext>(0);
}

FandangoParser::PythonContext* FandangoParser::StatementContext::python() {
  return getRuleContext<FandangoParser::PythonContext>(0);
}


size_t FandangoParser::StatementContext::getRuleIndex() const {
  return FandangoParser::RuleStatement;
}


std::any FandangoParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementContext* FandangoParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, FandangoParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(480);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(477);
      production();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(478);
      constraint();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(479);
      python();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProductionContext ------------------------------------------------------------------

FandangoParser::ProductionContext::ProductionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Opt_indentationContext* FandangoParser::ProductionContext::opt_indentation() {
  return getRuleContext<FandangoParser::Opt_indentationContext>(0);
}

FandangoParser::NonterminalContext* FandangoParser::ProductionContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::GRAMMAR_ASSIGN() {
  return getToken(FandangoParser::GRAMMAR_ASSIGN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::ProductionContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ProductionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::DEDENT() {
  return getTokens(FandangoParser::DEDENT);
}

tree::TerminalNode* FandangoParser::ProductionContext::DEDENT(size_t i) {
  return getToken(FandangoParser::DEDENT, i);
}

tree::TerminalNode* FandangoParser::ProductionContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::ProductionContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::ProductionContext::getRuleIndex() const {
  return FandangoParser::RuleProduction;
}


std::any FandangoParser::ProductionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProduction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProductionContext* FandangoParser::production() {
  ProductionContext *_localctx = _tracker.createInstance<ProductionContext>(_ctx, getState());
  enterRule(_localctx, 6, FandangoParser::RuleProduction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(528);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(482);
      opt_indentation();
      setState(483);
      nonterminal();
      setState(484);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(485);
      alternative();
      setState(488);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::EXPR_ASSIGN) {
        setState(486);
        match(FandangoParser::EXPR_ASSIGN);
        setState(487);
        expression();
      }
      setState(490);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(494);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(491);
          match(FandangoParser::DEDENT); 
        }
        setState(496);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(497);
      opt_indentation();
      setState(498);
      nonterminal();
      setState(499);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(500);
      alternative();
      setState(503);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(501);
        match(FandangoParser::ASSIGN);
        setState(502);
        expression();
      }
      setState(505);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(509);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(506);
          match(FandangoParser::DEDENT); 
        }
        setState(511);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(512);
      opt_indentation();
      setState(513);
      nonterminal();
      setState(514);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(515);
      alternative();
      setState(519);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(516);
        match(FandangoParser::COLON);
        setState(517);
        match(FandangoParser::COLON);
        setState(518);
        expression();
      }
      setState(521);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(525);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(522);
          match(FandangoParser::DEDENT); 
        }
        setState(527);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Opt_indentationContext ------------------------------------------------------------------

FandangoParser::Opt_indentationContext::Opt_indentationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Opt_indentationContext::INDENT() {
  return getTokens(FandangoParser::INDENT);
}

tree::TerminalNode* FandangoParser::Opt_indentationContext::INDENT(size_t i) {
  return getToken(FandangoParser::INDENT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Opt_indentationContext::DEDENT() {
  return getTokens(FandangoParser::DEDENT);
}

tree::TerminalNode* FandangoParser::Opt_indentationContext::DEDENT(size_t i) {
  return getToken(FandangoParser::DEDENT, i);
}


size_t FandangoParser::Opt_indentationContext::getRuleIndex() const {
  return FandangoParser::RuleOpt_indentation;
}


std::any FandangoParser::Opt_indentationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOpt_indentation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Opt_indentationContext* FandangoParser::opt_indentation() {
  Opt_indentationContext *_localctx = _tracker.createInstance<Opt_indentationContext>(_ctx, getState());
  enterRule(_localctx, 8, FandangoParser::RuleOpt_indentation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(542);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(533);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(530);
        match(FandangoParser::INDENT);
        setState(535);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(539);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(536);
        match(FandangoParser::DEDENT);
        setState(541);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlternativeContext ------------------------------------------------------------------

FandangoParser::AlternativeContext::AlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConcatenationContext *> FandangoParser::AlternativeContext::concatenation() {
  return getRuleContexts<FandangoParser::ConcatenationContext>();
}

FandangoParser::ConcatenationContext* FandangoParser::AlternativeContext::concatenation(size_t i) {
  return getRuleContext<FandangoParser::ConcatenationContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::AlternativeContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::AlternativeContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::AlternativeContext::getRuleIndex() const {
  return FandangoParser::RuleAlternative;
}


std::any FandangoParser::AlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAlternative(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AlternativeContext* FandangoParser::alternative() {
  AlternativeContext *_localctx = _tracker.createInstance<AlternativeContext>(_ctx, getState());
  enterRule(_localctx, 10, FandangoParser::RuleAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    concatenation();
    setState(549);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(545);
      match(FandangoParser::OR_OP);
      setState(546);
      concatenation();
      setState(551);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConcatenationContext ------------------------------------------------------------------

FandangoParser::ConcatenationContext::ConcatenationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::OperatorContext *> FandangoParser::ConcatenationContext::operator_() {
  return getRuleContexts<FandangoParser::OperatorContext>();
}

FandangoParser::OperatorContext* FandangoParser::ConcatenationContext::operator_(size_t i) {
  return getRuleContext<FandangoParser::OperatorContext>(i);
}


size_t FandangoParser::ConcatenationContext::getRuleIndex() const {
  return FandangoParser::RuleConcatenation;
}


std::any FandangoParser::ConcatenationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConcatenation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConcatenationContext* FandangoParser::concatenation() {
  ConcatenationContext *_localctx = _tracker.createInstance<ConcatenationContext>(_ctx, getState());
  enterRule(_localctx, 12, FandangoParser::RuleConcatenation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(552);
    operator_();
    setState(556);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813685272) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4194433) != 0)) {
      setState(553);
      operator_();
      setState(558);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorContext ------------------------------------------------------------------

FandangoParser::OperatorContext::OperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OperatorContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

FandangoParser::KleeneContext* FandangoParser::OperatorContext::kleene() {
  return getRuleContext<FandangoParser::KleeneContext>(0);
}

FandangoParser::PlusContext* FandangoParser::OperatorContext::plus() {
  return getRuleContext<FandangoParser::PlusContext>(0);
}

FandangoParser::OptionContext* FandangoParser::OperatorContext::option() {
  return getRuleContext<FandangoParser::OptionContext>(0);
}

FandangoParser::RepeatContext* FandangoParser::OperatorContext::repeat() {
  return getRuleContext<FandangoParser::RepeatContext>(0);
}


size_t FandangoParser::OperatorContext::getRuleIndex() const {
  return FandangoParser::RuleOperator;
}


std::any FandangoParser::OperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOperator(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OperatorContext* FandangoParser::operator_() {
  OperatorContext *_localctx = _tracker.createInstance<OperatorContext>(_ctx, getState());
  enterRule(_localctx, 14, FandangoParser::RuleOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(564);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(559);
      symbol();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(560);
      kleene();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(561);
      plus();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(562);
      option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(563);
      repeat();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KleeneContext ------------------------------------------------------------------

FandangoParser::KleeneContext::KleeneContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::KleeneContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::KleeneContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::KleeneContext::getRuleIndex() const {
  return FandangoParser::RuleKleene;
}


std::any FandangoParser::KleeneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKleene(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KleeneContext* FandangoParser::kleene() {
  KleeneContext *_localctx = _tracker.createInstance<KleeneContext>(_ctx, getState());
  enterRule(_localctx, 16, FandangoParser::RuleKleene);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(566);
    symbol();
    setState(567);
    match(FandangoParser::STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlusContext ------------------------------------------------------------------

FandangoParser::PlusContext::PlusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::PlusContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::PlusContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}


size_t FandangoParser::PlusContext::getRuleIndex() const {
  return FandangoParser::RulePlus;
}


std::any FandangoParser::PlusContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPlus(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PlusContext* FandangoParser::plus() {
  PlusContext *_localctx = _tracker.createInstance<PlusContext>(_ctx, getState());
  enterRule(_localctx, 18, FandangoParser::RulePlus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(569);
    symbol();
    setState(570);
    match(FandangoParser::ADD);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionContext ------------------------------------------------------------------

FandangoParser::OptionContext::OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OptionContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::OptionContext::QUESTION() {
  return getToken(FandangoParser::QUESTION, 0);
}


size_t FandangoParser::OptionContext::getRuleIndex() const {
  return FandangoParser::RuleOption;
}


std::any FandangoParser::OptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOption(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OptionContext* FandangoParser::option() {
  OptionContext *_localctx = _tracker.createInstance<OptionContext>(_ctx, getState());
  enterRule(_localctx, 20, FandangoParser::RuleOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(572);
    symbol();
    setState(573);
    match(FandangoParser::QUESTION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatContext ------------------------------------------------------------------

FandangoParser::RepeatContext::RepeatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::RepeatContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::RepeatContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::RepeatContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::RepeatContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::RepeatContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::RepeatContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::RepeatContext::getRuleIndex() const {
  return FandangoParser::RuleRepeat;
}


std::any FandangoParser::RepeatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRepeat(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::RepeatContext* FandangoParser::repeat() {
  RepeatContext *_localctx = _tracker.createInstance<RepeatContext>(_ctx, getState());
  enterRule(_localctx, 22, FandangoParser::RuleRepeat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(591);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(575);
      symbol();
      setState(576);
      match(FandangoParser::OPEN_BRACE);

      setState(577);
      expression();
      setState(578);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(580);
      symbol();
      setState(581);
      match(FandangoParser::OPEN_BRACE);
      setState(583);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199278008837) != 0)) {
        setState(582);
        expression();
      }
      setState(585);
      match(FandangoParser::COMMA);
      setState(587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199278008837) != 0)) {
        setState(586);
        expression();
      }
      setState(589);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolContext ------------------------------------------------------------------

FandangoParser::SymbolContext::SymbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Nonterminal_rightContext* FandangoParser::SymbolContext::nonterminal_right() {
  return getRuleContext<FandangoParser::Nonterminal_rightContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}

tree::TerminalNode* FandangoParser::SymbolContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::Generator_callContext* FandangoParser::SymbolContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

FandangoParser::Char_setContext* FandangoParser::SymbolContext::char_set() {
  return getRuleContext<FandangoParser::Char_setContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::SymbolContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::SymbolContext::getRuleIndex() const {
  return FandangoParser::RuleSymbol;
}


std::any FandangoParser::SymbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSymbol(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SymbolContext* FandangoParser::symbol() {
  SymbolContext *_localctx = _tracker.createInstance<SymbolContext>(_ctx, getState());
  enterRule(_localctx, 24, FandangoParser::RuleSymbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(602);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 1);
        setState(593);
        nonterminal_right();
        break;
      }

      case FandangoParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(594);
        match(FandangoParser::STRING);
        break;
      }

      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(595);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 4);
        setState(596);
        generator_call(0);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 5);
        setState(597);
        char_set();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 6);
        setState(598);
        match(FandangoParser::OPEN_PAREN);
        setState(599);
        alternative();
        setState(600);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonterminal_rightContext ------------------------------------------------------------------

FandangoParser::Nonterminal_rightContext::Nonterminal_rightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonterminal_rightContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonterminal_rightContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::Nonterminal_rightContext::getRuleIndex() const {
  return FandangoParser::RuleNonterminal_right;
}


std::any FandangoParser::Nonterminal_rightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonterminal_right(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Nonterminal_rightContext* FandangoParser::nonterminal_right() {
  Nonterminal_rightContext *_localctx = _tracker.createInstance<Nonterminal_rightContext>(_ctx, getState());
  enterRule(_localctx, 26, FandangoParser::RuleNonterminal_right);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(604);
    match(FandangoParser::LESS_THAN);
    setState(611);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(607);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
      case 1: {
        setState(605);
        match(FandangoParser::NAME);
        setState(606);
        match(FandangoParser::COLON);
        break;
      }

      default:
        break;
      }
      setState(609);
      match(FandangoParser::NAME);
      setState(610);
      match(FandangoParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(613);
    match(FandangoParser::NAME);
    setState(614);
    match(FandangoParser::GREATER_THAN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonterminalContext ------------------------------------------------------------------

FandangoParser::NonterminalContext::NonterminalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::NonterminalContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

tree::TerminalNode* FandangoParser::NonterminalContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::NonterminalContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}


size_t FandangoParser::NonterminalContext::getRuleIndex() const {
  return FandangoParser::RuleNonterminal;
}


std::any FandangoParser::NonterminalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonterminal(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::NonterminalContext* FandangoParser::nonterminal() {
  NonterminalContext *_localctx = _tracker.createInstance<NonterminalContext>(_ctx, getState());
  enterRule(_localctx, 28, FandangoParser::RuleNonterminal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    match(FandangoParser::LESS_THAN);
    setState(617);
    match(FandangoParser::NAME);
    setState(618);
    match(FandangoParser::GREATER_THAN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generator_callContext ------------------------------------------------------------------

FandangoParser::Generator_callContext::Generator_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Generator_callContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Generator_callContext* FandangoParser::Generator_callContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Generator_callContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::Generator_callContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Generator_callContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Generator_callContext::getRuleIndex() const {
  return FandangoParser::RuleGenerator_call;
}


std::any FandangoParser::Generator_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenerator_call(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Generator_callContext* FandangoParser::generator_call() {
   return generator_call(0);
}

FandangoParser::Generator_callContext* FandangoParser::generator_call(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Generator_callContext *_localctx = _tracker.createInstance<Generator_callContext>(_ctx, parentState);
  FandangoParser::Generator_callContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 30;
  enterRecursionRule(_localctx, 30, FandangoParser::RuleGenerator_call, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(621);
    match(FandangoParser::NAME);
    _ctx->stop = _input->LT(-1);
    setState(641);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(639);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(623);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(624);
          match(FandangoParser::DOT);
          setState(625);
          match(FandangoParser::NAME);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(626);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(627);
          match(FandangoParser::OPEN_BRACK);
          setState(628);
          slices();
          setState(629);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(631);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(632);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(633);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(634);
          match(FandangoParser::OPEN_PAREN);
          setState(636);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 9007199278008967) != 0)) {
            setState(635);
            arguments();
          }
          setState(638);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(643);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Char_setContext ------------------------------------------------------------------

FandangoParser::Char_setContext::Char_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Char_setContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Char_setContext::getRuleIndex() const {
  return FandangoParser::RuleChar_set;
}


std::any FandangoParser::Char_setContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitChar_set(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Char_setContext* FandangoParser::char_set() {
  Char_setContext *_localctx = _tracker.createInstance<Char_setContext>(_ctx, getState());
  enterRule(_localctx, 32, FandangoParser::RuleChar_set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(644);
    match(FandangoParser::OPEN_BRACK);
    setState(646);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::XOR) {
      setState(645);
      match(FandangoParser::XOR);
    }
    setState(648);
    match(FandangoParser::STRING);
    setState(649);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

FandangoParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ConstraintContext::WHERE() {
  return getToken(FandangoParser::WHERE, 0);
}

FandangoParser::ImpliesContext* FandangoParser::ConstraintContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ConstraintContext::DEDENT() {
  return getTokens(FandangoParser::DEDENT);
}

tree::TerminalNode* FandangoParser::ConstraintContext::DEDENT(size_t i) {
  return getToken(FandangoParser::DEDENT, i);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MINIMIZING() {
  return getToken(FandangoParser::MINIMIZING, 0);
}

FandangoParser::ExprContext* FandangoParser::ConstraintContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MAXIMIZING() {
  return getToken(FandangoParser::MAXIMIZING, 0);
}


size_t FandangoParser::ConstraintContext::getRuleIndex() const {
  return FandangoParser::RuleConstraint;
}


std::any FandangoParser::ConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConstraint(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConstraintContext* FandangoParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 34, FandangoParser::RuleConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::WHERE: {
        enterOuterAlt(_localctx, 1);
        setState(651);
        match(FandangoParser::WHERE);
        setState(652);
        implies();
        setState(653);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

        || _la == FandangoParser::NEWLINE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(657);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(654);
            match(FandangoParser::DEDENT); 
          }
          setState(659);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
        }
        break;
      }

      case FandangoParser::MINIMIZING: {
        enterOuterAlt(_localctx, 2);
        setState(660);
        match(FandangoParser::MINIMIZING);
        setState(661);
        expr();
        setState(662);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

        || _la == FandangoParser::NEWLINE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(666);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(663);
            match(FandangoParser::DEDENT); 
          }
          setState(668);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
        }
        break;
      }

      case FandangoParser::MAXIMIZING: {
        enterOuterAlt(_localctx, 3);
        setState(669);
        match(FandangoParser::MAXIMIZING);
        setState(670);
        expr();
        setState(671);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

        || _la == FandangoParser::NEWLINE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(675);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(672);
            match(FandangoParser::DEDENT); 
          }
          setState(677);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
        }
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 4);
        setState(678);
        implies();
        setState(679);
        match(FandangoParser::SEMI_COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImpliesContext ------------------------------------------------------------------

FandangoParser::ImpliesContext::ImpliesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::QuantifierContext* FandangoParser::ImpliesContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ImpliesContext* FandangoParser::ImpliesContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}


size_t FandangoParser::ImpliesContext::getRuleIndex() const {
  return FandangoParser::RuleImplies;
}


std::any FandangoParser::ImpliesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImplies(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ImpliesContext* FandangoParser::implies() {
  ImpliesContext *_localctx = _tracker.createInstance<ImpliesContext>(_ctx, getState());
  enterRule(_localctx, 36, FandangoParser::RuleImplies);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(688);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(683);
      quantifier();
      setState(684);
      match(FandangoParser::ARROW);
      setState(685);
      implies();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(687);
      quantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantifierContext ------------------------------------------------------------------

FandangoParser::QuantifierContext::QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::QuantifierContext::FORALL() {
  return getToken(FandangoParser::FORALL, 0);
}

FandangoParser::NonterminalContext* FandangoParser::QuantifierContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::SelectorContext* FandangoParser::QuantifierContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::QuantifierContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::QuantifierContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::QuantifierContext* FandangoParser::QuantifierContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::EXISTS() {
  return getToken(FandangoParser::EXISTS, 0);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::QuantifierContext::formula_disjunction() {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(0);
}


size_t FandangoParser::QuantifierContext::getRuleIndex() const {
  return FandangoParser::RuleQuantifier;
}


std::any FandangoParser::QuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitQuantifier(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::QuantifierContext* FandangoParser::quantifier() {
  QuantifierContext *_localctx = _tracker.createInstance<QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 38, FandangoParser::RuleQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(729);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FORALL: {
        enterOuterAlt(_localctx, 1);
        setState(690);
        match(FandangoParser::FORALL);
        setState(691);
        nonterminal();
        setState(692);
        match(FandangoParser::IN);
        setState(693);
        selector(0);
        setState(694);
        match(FandangoParser::COLON);
        setState(707);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FandangoParser::NEWLINE: {
            setState(695);
            match(FandangoParser::NEWLINE);
            setState(696);
            match(FandangoParser::INDENT);
            setState(697);
            quantifier();
            setState(701);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == FandangoParser::NEWLINE) {
              setState(698);
              match(FandangoParser::NEWLINE);
              setState(703);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            setState(704);
            match(FandangoParser::DEDENT);
            break;
          }

          case FandangoParser::STRING:
          case FandangoParser::NUMBER:
          case FandangoParser::AWAIT:
          case FandangoParser::FALSE:
          case FandangoParser::NONE:
          case FandangoParser::NOT:
          case FandangoParser::TRUE:
          case FandangoParser::FORALL:
          case FandangoParser::EXISTS:
          case FandangoParser::NAME:
          case FandangoParser::ELLIPSIS:
          case FandangoParser::OPEN_PAREN:
          case FandangoParser::OPEN_BRACK:
          case FandangoParser::OR_OP:
          case FandangoParser::ADD:
          case FandangoParser::MINUS:
          case FandangoParser::NOT_OP:
          case FandangoParser::OPEN_BRACE:
          case FandangoParser::LESS_THAN:
          case FandangoParser::FSTRING_START: {
            setState(706);
            quantifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FandangoParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(709);
        match(FandangoParser::EXISTS);
        setState(710);
        nonterminal();
        setState(711);
        match(FandangoParser::IN);
        setState(712);
        selector(0);
        setState(713);
        match(FandangoParser::COLON);
        setState(726);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FandangoParser::NEWLINE: {
            setState(714);
            match(FandangoParser::NEWLINE);
            setState(715);
            match(FandangoParser::INDENT);
            setState(716);
            quantifier();
            setState(720);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == FandangoParser::NEWLINE) {
              setState(717);
              match(FandangoParser::NEWLINE);
              setState(722);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            setState(723);
            match(FandangoParser::DEDENT);
            break;
          }

          case FandangoParser::STRING:
          case FandangoParser::NUMBER:
          case FandangoParser::AWAIT:
          case FandangoParser::FALSE:
          case FandangoParser::NONE:
          case FandangoParser::NOT:
          case FandangoParser::TRUE:
          case FandangoParser::FORALL:
          case FandangoParser::EXISTS:
          case FandangoParser::NAME:
          case FandangoParser::ELLIPSIS:
          case FandangoParser::OPEN_PAREN:
          case FandangoParser::OPEN_BRACK:
          case FandangoParser::OR_OP:
          case FandangoParser::ADD:
          case FandangoParser::MINUS:
          case FandangoParser::NOT_OP:
          case FandangoParser::OPEN_BRACE:
          case FandangoParser::LESS_THAN:
          case FandangoParser::FSTRING_START: {
            setState(725);
            quantifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 3);
        setState(728);
        formula_disjunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_disjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_disjunctionContext::Formula_disjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_conjunctionContext *> FandangoParser::Formula_disjunctionContext::formula_conjunction() {
  return getRuleContexts<FandangoParser::Formula_conjunctionContext>();
}

FandangoParser::Formula_conjunctionContext* FandangoParser::Formula_disjunctionContext::formula_conjunction(size_t i) {
  return getRuleContext<FandangoParser::Formula_conjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_disjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::Formula_disjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::Formula_disjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_disjunction;
}


std::any FandangoParser::Formula_disjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_disjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::formula_disjunction() {
  Formula_disjunctionContext *_localctx = _tracker.createInstance<Formula_disjunctionContext>(_ctx, getState());
  enterRule(_localctx, 40, FandangoParser::RuleFormula_disjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(731);
    formula_conjunction();
    setState(736);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(732);
      match(FandangoParser::OR);
      setState(733);
      formula_conjunction();
      setState(738);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_conjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_conjunctionContext::Formula_conjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_atomContext *> FandangoParser::Formula_conjunctionContext::formula_atom() {
  return getRuleContexts<FandangoParser::Formula_atomContext>();
}

FandangoParser::Formula_atomContext* FandangoParser::Formula_conjunctionContext::formula_atom(size_t i) {
  return getRuleContext<FandangoParser::Formula_atomContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_conjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::Formula_conjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::Formula_conjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_conjunction;
}


std::any FandangoParser::Formula_conjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_conjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_conjunctionContext* FandangoParser::formula_conjunction() {
  Formula_conjunctionContext *_localctx = _tracker.createInstance<Formula_conjunctionContext>(_ctx, getState());
  enterRule(_localctx, 42, FandangoParser::RuleFormula_conjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(739);
    formula_atom();
    setState(744);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(740);
      match(FandangoParser::AND);
      setState(741);
      formula_atom();
      setState(746);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_atomContext ------------------------------------------------------------------

FandangoParser::Formula_atomContext::Formula_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Formula_comparisonContext* FandangoParser::Formula_atomContext::formula_comparison() {
  return getRuleContext<FandangoParser::Formula_comparisonContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::ImpliesContext* FandangoParser::Formula_atomContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ExprContext* FandangoParser::Formula_atomContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}


size_t FandangoParser::Formula_atomContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_atom;
}


std::any FandangoParser::Formula_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_atomContext* FandangoParser::formula_atom() {
  Formula_atomContext *_localctx = _tracker.createInstance<Formula_atomContext>(_ctx, getState());
  enterRule(_localctx, 44, FandangoParser::RuleFormula_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(747);
      formula_comparison();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(748);
      match(FandangoParser::OPEN_PAREN);
      setState(749);
      implies();
      setState(750);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(752);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_comparisonContext ------------------------------------------------------------------

FandangoParser::Formula_comparisonContext::Formula_comparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExprContext *> FandangoParser::Formula_comparisonContext::expr() {
  return getRuleContexts<FandangoParser::ExprContext>();
}

FandangoParser::ExprContext* FandangoParser::Formula_comparisonContext::expr(size_t i) {
  return getRuleContext<FandangoParser::ExprContext>(i);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_1() {
  return getToken(FandangoParser::NOT_EQ_1, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}


size_t FandangoParser::Formula_comparisonContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_comparison;
}


std::any FandangoParser::Formula_comparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_comparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_comparisonContext* FandangoParser::formula_comparison() {
  Formula_comparisonContext *_localctx = _tracker.createInstance<Formula_comparisonContext>(_ctx, getState());
  enterRule(_localctx, 46, FandangoParser::RuleFormula_comparison);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(755);
    expr();
    setState(756);
    _la = _input->LA(1);
    if (!(((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(757);
    expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

FandangoParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::ExprContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ExprContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ExprContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

tree::TerminalNode* FandangoParser::ExprContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExprContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}


size_t FandangoParser::ExprContext::getRuleIndex() const {
  return FandangoParser::RuleExpr;
}


std::any FandangoParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExprContext* FandangoParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 48, FandangoParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(767);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(759);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(760);
      inversion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(761);
      inversion();
      setState(762);
      match(FandangoParser::IF);
      setState(763);
      inversion();
      setState(764);
      match(FandangoParser::ELSE);
      setState(765);
      inversion();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selector_lengthContext ------------------------------------------------------------------

FandangoParser::Selector_lengthContext::Selector_lengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Selector_lengthContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}

FandangoParser::SelectorContext* FandangoParser::Selector_lengthContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}


size_t FandangoParser::Selector_lengthContext::getRuleIndex() const {
  return FandangoParser::RuleSelector_length;
}


std::any FandangoParser::Selector_lengthContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelector_length(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Selector_lengthContext* FandangoParser::selector_length() {
  Selector_lengthContext *_localctx = _tracker.createInstance<Selector_lengthContext>(_ctx, getState());
  enterRule(_localctx, 50, FandangoParser::RuleSelector_length);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(774);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OR_OP: {
        enterOuterAlt(_localctx, 1);
        setState(769);
        match(FandangoParser::OR_OP);
        setState(770);
        selector(0);
        setState(771);
        match(FandangoParser::OR_OP);
        break;
      }

      case FandangoParser::OPEN_PAREN:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(773);
        selector(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorContext ------------------------------------------------------------------

FandangoParser::SelectorContext::SelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SelectionContext* FandangoParser::SelectorContext::selection() {
  return getRuleContext<FandangoParser::SelectionContext>(0);
}

FandangoParser::SelectorContext* FandangoParser::SelectorContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}

tree::TerminalNode* FandangoParser::SelectorContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::SelectorContext::DOTDOT() {
  return getToken(FandangoParser::DOTDOT, 0);
}


size_t FandangoParser::SelectorContext::getRuleIndex() const {
  return FandangoParser::RuleSelector;
}


std::any FandangoParser::SelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelector(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::SelectorContext* FandangoParser::selector() {
   return selector(0);
}

FandangoParser::SelectorContext* FandangoParser::selector(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::SelectorContext *_localctx = _tracker.createInstance<SelectorContext>(_ctx, parentState);
  FandangoParser::SelectorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 52;
  enterRecursionRule(_localctx, 52, FandangoParser::RuleSelector, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(777);
    selection();
    _ctx->stop = _input->LT(-1);
    setState(787);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(785);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SelectorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSelector);
          setState(779);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(780);
          match(FandangoParser::DOT);
          setState(781);
          selection();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SelectorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSelector);
          setState(782);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(783);
          match(FandangoParser::DOTDOT);
          setState(784);
          selection();
          break;
        }

        default:
          break;
        } 
      }
      setState(789);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SelectionContext ------------------------------------------------------------------

FandangoParser::SelectionContext::SelectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Base_selectionContext* FandangoParser::SelectionContext::base_selection() {
  return getRuleContext<FandangoParser::Base_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Rs_slicesContext* FandangoParser::SelectionContext::rs_slices() {
  return getRuleContext<FandangoParser::Rs_slicesContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Rs_pairsContext* FandangoParser::SelectionContext::rs_pairs() {
  return getRuleContext<FandangoParser::Rs_pairsContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SelectionContext::getRuleIndex() const {
  return FandangoParser::RuleSelection;
}


std::any FandangoParser::SelectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SelectionContext* FandangoParser::selection() {
  SelectionContext *_localctx = _tracker.createInstance<SelectionContext>(_ctx, getState());
  enterRule(_localctx, 54, FandangoParser::RuleSelection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(801);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(790);
      base_selection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(791);
      base_selection();
      setState(792);
      match(FandangoParser::OPEN_BRACK);
      setState(793);
      rs_slices();
      setState(794);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(796);
      base_selection();
      setState(797);
      match(FandangoParser::OPEN_BRACE);
      setState(798);
      rs_pairs();
      setState(799);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_selectionContext ------------------------------------------------------------------

FandangoParser::Base_selectionContext::Base_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::NonterminalContext* FandangoParser::Base_selectionContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::SelectorContext* FandangoParser::Base_selectionContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Base_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleBase_selection;
}


std::any FandangoParser::Base_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBase_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Base_selectionContext* FandangoParser::base_selection() {
  Base_selectionContext *_localctx = _tracker.createInstance<Base_selectionContext>(_ctx, getState());
  enterRule(_localctx, 56, FandangoParser::RuleBase_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(808);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 1);
        setState(803);
        nonterminal();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(804);
        match(FandangoParser::OPEN_PAREN);
        setState(805);
        selector(0);
        setState(806);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairsContext ------------------------------------------------------------------

FandangoParser::Rs_pairsContext::Rs_pairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_pairContext *> FandangoParser::Rs_pairsContext::rs_pair() {
  return getRuleContexts<FandangoParser::Rs_pairContext>();
}

FandangoParser::Rs_pairContext* FandangoParser::Rs_pairsContext::rs_pair(size_t i) {
  return getRuleContext<FandangoParser::Rs_pairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_pairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_pairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_pairsContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pairs;
}


std::any FandangoParser::Rs_pairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairsContext* FandangoParser::rs_pairs() {
  Rs_pairsContext *_localctx = _tracker.createInstance<Rs_pairsContext>(_ctx, getState());
  enterRule(_localctx, 58, FandangoParser::RuleRs_pairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(810);
    rs_pair();
    setState(815);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(811);
        match(FandangoParser::COMMA);
        setState(812);
        rs_pair(); 
      }
      setState(817);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
    setState(819);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(818);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairContext ------------------------------------------------------------------

FandangoParser::Rs_pairContext::Rs_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Rs_pairContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::NonterminalContext* FandangoParser::Rs_pairContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::Rs_pairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_pairContext::rs_slice() {
  return getRuleContext<FandangoParser::Rs_sliceContext>(0);
}


size_t FandangoParser::Rs_pairContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pair;
}


std::any FandangoParser::Rs_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairContext* FandangoParser::rs_pair() {
  Rs_pairContext *_localctx = _tracker.createInstance<Rs_pairContext>(_ctx, getState());
  enterRule(_localctx, 60, FandangoParser::RuleRs_pair);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(821);
    match(FandangoParser::STAR);
    setState(822);
    nonterminal();
    setState(825);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(823);
      match(FandangoParser::COLON);
      setState(824);
      rs_slice();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_slicesContext ------------------------------------------------------------------

FandangoParser::Rs_slicesContext::Rs_slicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_sliceContext *> FandangoParser::Rs_slicesContext::rs_slice() {
  return getRuleContexts<FandangoParser::Rs_sliceContext>();
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_slicesContext::rs_slice(size_t i) {
  return getRuleContext<FandangoParser::Rs_sliceContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_slicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_slicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_slicesContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slices;
}


std::any FandangoParser::Rs_slicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_slicesContext* FandangoParser::rs_slices() {
  Rs_slicesContext *_localctx = _tracker.createInstance<Rs_slicesContext>(_ctx, getState());
  enterRule(_localctx, 62, FandangoParser::RuleRs_slices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(827);
    rs_slice();
    setState(832);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(828);
        match(FandangoParser::COMMA);
        setState(829);
        rs_slice(); 
      }
      setState(834);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    }
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(835);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_sliceContext ------------------------------------------------------------------

FandangoParser::Rs_sliceContext::Rs_sliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::NUMBER() {
  return getTokens(FandangoParser::NUMBER);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::NUMBER(size_t i) {
  return getToken(FandangoParser::NUMBER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::Rs_sliceContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slice;
}


std::any FandangoParser::Rs_sliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_sliceContext* FandangoParser::rs_slice() {
  Rs_sliceContext *_localctx = _tracker.createInstance<Rs_sliceContext>(_ctx, getState());
  enterRule(_localctx, 64, FandangoParser::RuleRs_slice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(857);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(838);
      match(FandangoParser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(840);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(839);
        match(FandangoParser::NUMBER);
      }
      setState(842);
      match(FandangoParser::COLON);
      setState(844);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(843);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(847);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(846);
        match(FandangoParser::NUMBER);
      }
      setState(849);
      match(FandangoParser::COLON);
      setState(851);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(850);
        match(FandangoParser::NUMBER);
      }
      setState(853);
      match(FandangoParser::COLON);
      setState(855);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(854);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PythonContext ------------------------------------------------------------------

FandangoParser::PythonContext::PythonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::PythonContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtContext* FandangoParser::PythonContext::simple_stmt() {
  return getRuleContext<FandangoParser::Simple_stmtContext>(0);
}


size_t FandangoParser::PythonContext::getRuleIndex() const {
  return FandangoParser::RulePython;
}


std::any FandangoParser::PythonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PythonContext* FandangoParser::python() {
  PythonContext *_localctx = _tracker.createInstance<PythonContext>(_ctx, getState());
  enterRule(_localctx, 66, FandangoParser::RulePython);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(861);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(859);
        compound_stmt();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(860);
        simple_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_tagContext ------------------------------------------------------------------

FandangoParser::Python_tagContext::Python_tagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StmtContext* FandangoParser::Python_tagContext::stmt() {
  return getRuleContext<FandangoParser::StmtContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Python_tagContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Python_tagContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Python_tagContext::getRuleIndex() const {
  return FandangoParser::RulePython_tag;
}


std::any FandangoParser::Python_tagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_tag(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_tagContext* FandangoParser::python_tag() {
  Python_tagContext *_localctx = _tracker.createInstance<Python_tagContext>(_ctx, getState());
  enterRule(_localctx, 68, FandangoParser::RulePython_tag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(863);
      match(FandangoParser::NEWLINE);
      setState(868);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(869);
    stmt();
    setState(873);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(870);
      match(FandangoParser::NEWLINE);
      setState(875);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_fileContext ------------------------------------------------------------------

FandangoParser::Python_fileContext::Python_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StatementsContext* FandangoParser::Python_fileContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::Python_fileContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Python_fileContext::getRuleIndex() const {
  return FandangoParser::RulePython_file;
}


std::any FandangoParser::Python_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_file(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_fileContext* FandangoParser::python_file() {
  Python_fileContext *_localctx = _tracker.createInstance<Python_fileContext>(_ctx, getState());
  enterRule(_localctx, 70, FandangoParser::RulePython_file);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2374874773830680) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9288676402203143) != 0)) {
      setState(876);
      statements();
    }
    setState(880);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      setState(879);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InteractiveContext ------------------------------------------------------------------

FandangoParser::InteractiveContext::InteractiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Statement_newlineContext* FandangoParser::InteractiveContext::statement_newline() {
  return getRuleContext<FandangoParser::Statement_newlineContext>(0);
}


size_t FandangoParser::InteractiveContext::getRuleIndex() const {
  return FandangoParser::RuleInteractive;
}


std::any FandangoParser::InteractiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInteractive(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InteractiveContext* FandangoParser::interactive() {
  InteractiveContext *_localctx = _tracker.createInstance<InteractiveContext>(_ctx, getState());
  enterRule(_localctx, 72, FandangoParser::RuleInteractive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    statement_newline();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

FandangoParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionsContext* FandangoParser::EvalContext::expressions() {
  return getRuleContext<FandangoParser::ExpressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::EvalContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::EvalContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::EvalContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::EvalContext::getRuleIndex() const {
  return FandangoParser::RuleEval;
}


std::any FandangoParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::EvalContext* FandangoParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 74, FandangoParser::RuleEval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(884);
    expressions();
    setState(888);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(885);
      match(FandangoParser::NEWLINE);
      setState(890);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(892);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(891);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_typeContext ------------------------------------------------------------------

FandangoParser::Func_typeContext::Func_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_typeContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Func_typeContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_expressionsContext* FandangoParser::Func_typeContext::type_expressions() {
  return getRuleContext<FandangoParser::Type_expressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Func_typeContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Func_typeContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::Func_typeContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Func_typeContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type;
}


std::any FandangoParser::Func_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_typeContext* FandangoParser::func_type() {
  Func_typeContext *_localctx = _tracker.createInstance<Func_typeContext>(_ctx, getState());
  enterRule(_localctx, 76, FandangoParser::RuleFunc_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(894);
    match(FandangoParser::OPEN_PAREN);
    setState(896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007199278008967) != 0)) {
      setState(895);
      type_expressions();
    }
    setState(898);
    match(FandangoParser::CLOSE_PAREN);
    setState(899);
    match(FandangoParser::ARROW);
    setState(900);
    expression();
    setState(904);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(901);
      match(FandangoParser::NEWLINE);
      setState(906);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(908);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(907);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

FandangoParser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::StmtContext *> FandangoParser::StatementsContext::stmt() {
  return getRuleContexts<FandangoParser::StmtContext>();
}

FandangoParser::StmtContext* FandangoParser::StatementsContext::stmt(size_t i) {
  return getRuleContext<FandangoParser::StmtContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::StatementsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::StatementsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::StatementsContext::getRuleIndex() const {
  return FandangoParser::RuleStatements;
}


std::any FandangoParser::StatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatements(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementsContext* FandangoParser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 78, FandangoParser::RuleStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(912);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::ASSERT:
        case FandangoParser::ASYNC:
        case FandangoParser::AWAIT:
        case FandangoParser::BREAK:
        case FandangoParser::CLASS:
        case FandangoParser::CONTINUE:
        case FandangoParser::DEF:
        case FandangoParser::DEL:
        case FandangoParser::FALSE:
        case FandangoParser::FOR:
        case FandangoParser::FROM:
        case FandangoParser::GLOBAL:
        case FandangoParser::IF:
        case FandangoParser::IMPORT:
        case FandangoParser::LAMBDA:
        case FandangoParser::MATCH:
        case FandangoParser::NONE:
        case FandangoParser::NONLOCAL:
        case FandangoParser::NOT:
        case FandangoParser::PASS:
        case FandangoParser::RAISE:
        case FandangoParser::RETURN:
        case FandangoParser::TRUE:
        case FandangoParser::TRY:
        case FandangoParser::TYPE:
        case FandangoParser::WHILE:
        case FandangoParser::WITH:
        case FandangoParser::YIELD:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN:
        case FandangoParser::AT:
        case FandangoParser::FSTRING_START: {
          setState(910);
          stmt();
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(911);
          match(FandangoParser::NEWLINE);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(914); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2374874773830680) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9288676402203143) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

FandangoParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::StmtContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::StmtContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::StmtContext::getRuleIndex() const {
  return FandangoParser::RuleStmt;
}


std::any FandangoParser::StmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StmtContext* FandangoParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 80, FandangoParser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(918);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(916);
        compound_stmt();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(917);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_newlineContext ------------------------------------------------------------------

FandangoParser::Statement_newlineContext::Statement_newlineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::Statement_newlineContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Statement_newlineContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::Statement_newlineContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::Statement_newlineContext::getRuleIndex() const {
  return FandangoParser::RuleStatement_newline;
}


std::any FandangoParser::Statement_newlineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement_newline(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Statement_newlineContext* FandangoParser::statement_newline() {
  Statement_newlineContext *_localctx = _tracker.createInstance<Statement_newlineContext>(_ctx, getState());
  enterRule(_localctx, 82, FandangoParser::RuleStatement_newline);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(925);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(920);
        compound_stmt();
        setState(921);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(923);
        simple_stmts();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 3);
        setState(924);
        match(FandangoParser::NEWLINE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtsContext ------------------------------------------------------------------

FandangoParser::Simple_stmtsContext::Simple_stmtsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Simple_stmtContext *> FandangoParser::Simple_stmtsContext::simple_stmt() {
  return getRuleContexts<FandangoParser::Simple_stmtContext>();
}

FandangoParser::Simple_stmtContext* FandangoParser::Simple_stmtsContext::simple_stmt(size_t i) {
  return getRuleContext<FandangoParser::Simple_stmtContext>(i);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::SEMI_COLON() {
  return getTokens(FandangoParser::SEMI_COLON);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::SEMI_COLON(size_t i) {
  return getToken(FandangoParser::SEMI_COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Simple_stmtsContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmts;
}


std::any FandangoParser::Simple_stmtsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmts(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtsContext* FandangoParser::simple_stmts() {
  Simple_stmtsContext *_localctx = _tracker.createInstance<Simple_stmtsContext>(_ctx, getState());
  enterRule(_localctx, 84, FandangoParser::RuleSimple_stmts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(927);
    simple_stmt();
    setState(932);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(928);
        match(FandangoParser::SEMI_COLON);
        setState(929);
        simple_stmt(); 
      }
      setState(934);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
    }
    setState(936);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::SEMI_COLON) {
      setState(935);
      match(FandangoParser::SEMI_COLON);
    }
    setState(950);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(939); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(938);
                match(FandangoParser::NEWLINE);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(941); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(946);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NEWLINE) {
        setState(943);
        match(FandangoParser::NEWLINE);
        setState(948);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(949);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtContext ------------------------------------------------------------------

FandangoParser::Simple_stmtContext::Simple_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AssignmentContext* FandangoParser::Simple_stmtContext::assignment() {
  return getRuleContext<FandangoParser::AssignmentContext>(0);
}

FandangoParser::Type_aliasContext* FandangoParser::Simple_stmtContext::type_alias() {
  return getRuleContext<FandangoParser::Type_aliasContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Simple_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

FandangoParser::Return_stmtContext* FandangoParser::Simple_stmtContext::return_stmt() {
  return getRuleContext<FandangoParser::Return_stmtContext>(0);
}

FandangoParser::Import_stmtContext* FandangoParser::Simple_stmtContext::import_stmt() {
  return getRuleContext<FandangoParser::Import_stmtContext>(0);
}

FandangoParser::Raise_stmtContext* FandangoParser::Simple_stmtContext::raise_stmt() {
  return getRuleContext<FandangoParser::Raise_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::PASS() {
  return getToken(FandangoParser::PASS, 0);
}

FandangoParser::Del_stmtContext* FandangoParser::Simple_stmtContext::del_stmt() {
  return getRuleContext<FandangoParser::Del_stmtContext>(0);
}

FandangoParser::Yield_stmtContext* FandangoParser::Simple_stmtContext::yield_stmt() {
  return getRuleContext<FandangoParser::Yield_stmtContext>(0);
}

FandangoParser::Assert_stmtContext* FandangoParser::Simple_stmtContext::assert_stmt() {
  return getRuleContext<FandangoParser::Assert_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::BREAK() {
  return getToken(FandangoParser::BREAK, 0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::CONTINUE() {
  return getToken(FandangoParser::CONTINUE, 0);
}

FandangoParser::Global_stmtContext* FandangoParser::Simple_stmtContext::global_stmt() {
  return getRuleContext<FandangoParser::Global_stmtContext>(0);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::Simple_stmtContext::nonlocal_stmt() {
  return getRuleContext<FandangoParser::Nonlocal_stmtContext>(0);
}


size_t FandangoParser::Simple_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmt;
}


std::any FandangoParser::Simple_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtContext* FandangoParser::simple_stmt() {
  Simple_stmtContext *_localctx = _tracker.createInstance<Simple_stmtContext>(_ctx, getState());
  enterRule(_localctx, 86, FandangoParser::RuleSimple_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(966);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(952);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(953);
      type_alias();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(954);
      star_expressions();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(955);
      return_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(956);
      import_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(957);
      raise_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(958);
      match(FandangoParser::PASS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(959);
      del_stmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(960);
      yield_stmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(961);
      assert_stmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(962);
      match(FandangoParser::BREAK);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(963);
      match(FandangoParser::CONTINUE);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(964);
      global_stmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(965);
      nonlocal_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_stmtContext ------------------------------------------------------------------

FandangoParser::Compound_stmtContext::Compound_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_defContext* FandangoParser::Compound_stmtContext::function_def() {
  return getRuleContext<FandangoParser::Function_defContext>(0);
}

FandangoParser::If_stmtContext* FandangoParser::Compound_stmtContext::if_stmt() {
  return getRuleContext<FandangoParser::If_stmtContext>(0);
}

FandangoParser::Class_defContext* FandangoParser::Compound_stmtContext::class_def() {
  return getRuleContext<FandangoParser::Class_defContext>(0);
}

FandangoParser::With_stmtContext* FandangoParser::Compound_stmtContext::with_stmt() {
  return getRuleContext<FandangoParser::With_stmtContext>(0);
}

FandangoParser::For_stmtContext* FandangoParser::Compound_stmtContext::for_stmt() {
  return getRuleContext<FandangoParser::For_stmtContext>(0);
}

FandangoParser::Try_stmtContext* FandangoParser::Compound_stmtContext::try_stmt() {
  return getRuleContext<FandangoParser::Try_stmtContext>(0);
}

FandangoParser::While_stmtContext* FandangoParser::Compound_stmtContext::while_stmt() {
  return getRuleContext<FandangoParser::While_stmtContext>(0);
}

FandangoParser::Match_stmtContext* FandangoParser::Compound_stmtContext::match_stmt() {
  return getRuleContext<FandangoParser::Match_stmtContext>(0);
}


size_t FandangoParser::Compound_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleCompound_stmt;
}


std::any FandangoParser::Compound_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompound_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compound_stmtContext* FandangoParser::compound_stmt() {
  Compound_stmtContext *_localctx = _tracker.createInstance<Compound_stmtContext>(_ctx, getState());
  enterRule(_localctx, 88, FandangoParser::RuleCompound_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(976);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(968);
      function_def();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(969);
      if_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(970);
      class_def();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(971);
      with_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(972);
      for_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(973);
      try_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(974);
      while_stmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(975);
      match_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

FandangoParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AssignmentContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AssignmentContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::AssignmentContext::ASSIGN() {
  return getTokens(FandangoParser::ASSIGN);
}

tree::TerminalNode* FandangoParser::AssignmentContext::ASSIGN(size_t i) {
  return getToken(FandangoParser::ASSIGN, i);
}

FandangoParser::Annotated_rhsContext* FandangoParser::AssignmentContext::annotated_rhs() {
  return getRuleContext<FandangoParser::Annotated_rhsContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::AssignmentContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::AssignmentContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

FandangoParser::Yield_exprContext* FandangoParser::AssignmentContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::AssignmentContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

std::vector<FandangoParser::Star_targetsContext *> FandangoParser::AssignmentContext::star_targets() {
  return getRuleContexts<FandangoParser::Star_targetsContext>();
}

FandangoParser::Star_targetsContext* FandangoParser::AssignmentContext::star_targets(size_t i) {
  return getRuleContext<FandangoParser::Star_targetsContext>(i);
}

FandangoParser::AugassignContext* FandangoParser::AssignmentContext::augassign() {
  return getRuleContext<FandangoParser::AugassignContext>(0);
}


size_t FandangoParser::AssignmentContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment;
}


std::any FandangoParser::AssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AssignmentContext* FandangoParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 90, FandangoParser::RuleAssignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1015);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(978);
      match(FandangoParser::NAME);
      setState(979);
      match(FandangoParser::COLON);
      setState(980);
      expression();
      setState(983);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(981);
        match(FandangoParser::ASSIGN);
        setState(982);
        annotated_rhs();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(990);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
      case 1: {
        setState(985);
        match(FandangoParser::OPEN_PAREN);
        setState(986);
        single_target();
        setState(987);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case 2: {
        setState(989);
        single_subscript_attribute_target();
        break;
      }

      default:
        break;
      }
      setState(992);
      match(FandangoParser::COLON);
      setState(993);
      expression();
      setState(996);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(994);
        match(FandangoParser::ASSIGN);
        setState(995);
        annotated_rhs();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1001); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(998);
                star_targets();
                setState(999);
                match(FandangoParser::ASSIGN);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1003); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1007);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(1005);
          yield_expr();
          break;
        }

        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN:
        case FandangoParser::FSTRING_START: {
          setState(1006);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1009);
      single_target();
      setState(1010);
      augassign();
      setState(1013);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(1011);
          yield_expr();
          break;
        }

        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN:
        case FandangoParser::FSTRING_START: {
          setState(1012);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotated_rhsContext ------------------------------------------------------------------

FandangoParser::Annotated_rhsContext::Annotated_rhsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Annotated_rhsContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Annotated_rhsContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Annotated_rhsContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotated_rhs;
}


std::any FandangoParser::Annotated_rhsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotated_rhs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Annotated_rhsContext* FandangoParser::annotated_rhs() {
  Annotated_rhsContext *_localctx = _tracker.createInstance<Annotated_rhsContext>(_ctx, getState());
  enterRule(_localctx, 92, FandangoParser::RuleAnnotated_rhs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1019);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        enterOuterAlt(_localctx, 1);
        setState(1017);
        yield_expr();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1018);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AugassignContext ------------------------------------------------------------------

FandangoParser::AugassignContext::AugassignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AugassignContext::ADD_ASSIGN() {
  return getToken(FandangoParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::SUB_ASSIGN() {
  return getToken(FandangoParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MULT_ASSIGN() {
  return getToken(FandangoParser::MULT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AT_ASSIGN() {
  return getToken(FandangoParser::AT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::DIV_ASSIGN() {
  return getToken(FandangoParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MOD_ASSIGN() {
  return getToken(FandangoParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AND_ASSIGN() {
  return getToken(FandangoParser::AND_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::OR_ASSIGN() {
  return getToken(FandangoParser::OR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::XOR_ASSIGN() {
  return getToken(FandangoParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::LEFT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::LEFT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::RIGHT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::RIGHT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::POWER_ASSIGN() {
  return getToken(FandangoParser::POWER_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::IDIV_ASSIGN() {
  return getToken(FandangoParser::IDIV_ASSIGN, 0);
}


size_t FandangoParser::AugassignContext::getRuleIndex() const {
  return FandangoParser::RuleAugassign;
}


std::any FandangoParser::AugassignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAugassign(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AugassignContext* FandangoParser::augassign() {
  AugassignContext *_localctx = _tracker.createInstance<AugassignContext>(_ctx, getState());
  enterRule(_localctx, 94, FandangoParser::RuleAugassign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1021);
    _la = _input->LA(1);
    if (!(((((_la - 98) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 98)) & 8191) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_stmtContext ------------------------------------------------------------------

FandangoParser::Return_stmtContext::Return_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Return_stmtContext::RETURN() {
  return getToken(FandangoParser::RETURN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Return_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Return_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleReturn_stmt;
}


std::any FandangoParser::Return_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReturn_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Return_stmtContext* FandangoParser::return_stmt() {
  Return_stmtContext *_localctx = _tracker.createInstance<Return_stmtContext>(_ctx, getState());
  enterRule(_localctx, 96, FandangoParser::RuleReturn_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1023);
    match(FandangoParser::RETURN);
    setState(1025);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(1024);
      star_expressions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raise_stmtContext ------------------------------------------------------------------

FandangoParser::Raise_stmtContext::Raise_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::RAISE() {
  return getToken(FandangoParser::RAISE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Raise_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Raise_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}


size_t FandangoParser::Raise_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleRaise_stmt;
}


std::any FandangoParser::Raise_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRaise_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Raise_stmtContext* FandangoParser::raise_stmt() {
  Raise_stmtContext *_localctx = _tracker.createInstance<Raise_stmtContext>(_ctx, getState());
  enterRule(_localctx, 98, FandangoParser::RuleRaise_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1027);
      match(FandangoParser::RAISE);
      setState(1028);
      expression();
      setState(1031);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
      case 1: {
        setState(1029);
        match(FandangoParser::FROM);
        setState(1030);
        expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1033);
      match(FandangoParser::RAISE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_stmtContext ------------------------------------------------------------------

FandangoParser::Global_stmtContext::Global_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Global_stmtContext::GLOBAL() {
  return getToken(FandangoParser::GLOBAL, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Global_stmtContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Global_stmtContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Global_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Global_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Global_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleGlobal_stmt;
}


std::any FandangoParser::Global_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Global_stmtContext* FandangoParser::global_stmt() {
  Global_stmtContext *_localctx = _tracker.createInstance<Global_stmtContext>(_ctx, getState());
  enterRule(_localctx, 100, FandangoParser::RuleGlobal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1036);
    match(FandangoParser::GLOBAL);
    setState(1037);
    match(FandangoParser::NAME);
    setState(1042);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1038);
      match(FandangoParser::COMMA);
      setState(1039);
      match(FandangoParser::NAME);
      setState(1044);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonlocal_stmtContext ------------------------------------------------------------------

FandangoParser::Nonlocal_stmtContext::Nonlocal_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::NONLOCAL() {
  return getToken(FandangoParser::NONLOCAL, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonlocal_stmtContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonlocal_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Nonlocal_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleNonlocal_stmt;
}


std::any FandangoParser::Nonlocal_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonlocal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::nonlocal_stmt() {
  Nonlocal_stmtContext *_localctx = _tracker.createInstance<Nonlocal_stmtContext>(_ctx, getState());
  enterRule(_localctx, 102, FandangoParser::RuleNonlocal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1045);
    match(FandangoParser::NONLOCAL);
    setState(1046);
    match(FandangoParser::NAME);
    setState(1051);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1047);
      match(FandangoParser::COMMA);
      setState(1048);
      match(FandangoParser::NAME);
      setState(1053);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_stmtContext ------------------------------------------------------------------

FandangoParser::Del_stmtContext::Del_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Del_stmtContext::DEL() {
  return getToken(FandangoParser::DEL, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_stmtContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}


size_t FandangoParser::Del_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleDel_stmt;
}


std::any FandangoParser::Del_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_stmtContext* FandangoParser::del_stmt() {
  Del_stmtContext *_localctx = _tracker.createInstance<Del_stmtContext>(_ctx, getState());
  enterRule(_localctx, 104, FandangoParser::RuleDel_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1054);
    match(FandangoParser::DEL);
    setState(1055);
    del_targets();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_stmtContext ------------------------------------------------------------------

FandangoParser::Yield_stmtContext::Yield_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Yield_stmtContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}


size_t FandangoParser::Yield_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleYield_stmt;
}


std::any FandangoParser::Yield_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_stmtContext* FandangoParser::yield_stmt() {
  Yield_stmtContext *_localctx = _tracker.createInstance<Yield_stmtContext>(_ctx, getState());
  enterRule(_localctx, 106, FandangoParser::RuleYield_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1057);
    yield_expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assert_stmtContext ------------------------------------------------------------------

FandangoParser::Assert_stmtContext::Assert_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::ASSERT() {
  return getToken(FandangoParser::ASSERT, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Assert_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Assert_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Assert_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleAssert_stmt;
}


std::any FandangoParser::Assert_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssert_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assert_stmtContext* FandangoParser::assert_stmt() {
  Assert_stmtContext *_localctx = _tracker.createInstance<Assert_stmtContext>(_ctx, getState());
  enterRule(_localctx, 108, FandangoParser::RuleAssert_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1059);
    match(FandangoParser::ASSERT);
    setState(1060);
    expression();
    setState(1063);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1061);
      match(FandangoParser::COMMA);
      setState(1062);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_stmtContext ------------------------------------------------------------------

FandangoParser::Import_stmtContext::Import_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Import_nameContext* FandangoParser::Import_stmtContext::import_name() {
  return getRuleContext<FandangoParser::Import_nameContext>(0);
}

FandangoParser::Import_fromContext* FandangoParser::Import_stmtContext::import_from() {
  return getRuleContext<FandangoParser::Import_fromContext>(0);
}


size_t FandangoParser::Import_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleImport_stmt;
}


std::any FandangoParser::Import_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_stmtContext* FandangoParser::import_stmt() {
  Import_stmtContext *_localctx = _tracker.createInstance<Import_stmtContext>(_ctx, getState());
  enterRule(_localctx, 110, FandangoParser::RuleImport_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1067);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::IMPORT: {
        enterOuterAlt(_localctx, 1);
        setState(1065);
        import_name();
        break;
      }

      case FandangoParser::FROM: {
        enterOuterAlt(_localctx, 2);
        setState(1066);
        import_from();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_nameContext ------------------------------------------------------------------

FandangoParser::Import_nameContext::Import_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_nameContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::Import_nameContext::dotted_as_names() {
  return getRuleContext<FandangoParser::Dotted_as_namesContext>(0);
}


size_t FandangoParser::Import_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_name;
}


std::any FandangoParser::Import_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_nameContext* FandangoParser::import_name() {
  Import_nameContext *_localctx = _tracker.createInstance<Import_nameContext>(_ctx, getState());
  enterRule(_localctx, 112, FandangoParser::RuleImport_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1069);
    match(FandangoParser::IMPORT);
    setState(1070);
    dotted_as_names();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_fromContext ------------------------------------------------------------------

FandangoParser::Import_fromContext::Import_fromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_fromContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Import_fromContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Import_fromContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Import_from_targetsContext* FandangoParser::Import_fromContext::import_from_targets() {
  return getRuleContext<FandangoParser::Import_from_targetsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::DOT() {
  return getTokens(FandangoParser::DOT);
}

tree::TerminalNode* FandangoParser::Import_fromContext::DOT(size_t i) {
  return getToken(FandangoParser::DOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::ELLIPSIS() {
  return getTokens(FandangoParser::ELLIPSIS);
}

tree::TerminalNode* FandangoParser::Import_fromContext::ELLIPSIS(size_t i) {
  return getToken(FandangoParser::ELLIPSIS, i);
}


size_t FandangoParser::Import_fromContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from;
}


std::any FandangoParser::Import_fromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_fromContext* FandangoParser::import_from() {
  Import_fromContext *_localctx = _tracker.createInstance<Import_fromContext>(_ctx, getState());
  enterRule(_localctx, 114, FandangoParser::RuleImport_from);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1091);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1072);
      match(FandangoParser::FROM);
      setState(1076);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DOT

      || _la == FandangoParser::ELLIPSIS) {
        setState(1073);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::DOT

        || _la == FandangoParser::ELLIPSIS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1078);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1079);
      dotted_name(0);
      setState(1080);
      match(FandangoParser::IMPORT);
      setState(1081);
      import_from_targets();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1083);
      match(FandangoParser::FROM);
      setState(1085); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1084);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::DOT

        || _la == FandangoParser::ELLIPSIS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1087); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::DOT

      || _la == FandangoParser::ELLIPSIS);
      setState(1089);
      match(FandangoParser::IMPORT);
      setState(1090);
      import_from_targets();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_targetsContext ------------------------------------------------------------------

FandangoParser::Import_from_targetsContext::Import_from_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::Import_from_targetsContext::import_from_as_names() {
  return getRuleContext<FandangoParser::Import_from_as_namesContext>(0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::Import_from_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_targets;
}


std::any FandangoParser::Import_from_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_targetsContext* FandangoParser::import_from_targets() {
  Import_from_targetsContext *_localctx = _tracker.createInstance<Import_from_targetsContext>(_ctx, getState());
  enterRule(_localctx, 116, FandangoParser::RuleImport_from_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1102);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1093);
        match(FandangoParser::OPEN_PAREN);
        setState(1094);
        import_from_as_names();
        setState(1096);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COMMA) {
          setState(1095);
          match(FandangoParser::COMMA);
        }
        setState(1098);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(1100);
        import_from_as_names();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 3);
        setState(1101);
        match(FandangoParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_namesContext ------------------------------------------------------------------

FandangoParser::Import_from_as_namesContext::Import_from_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Import_from_as_nameContext *> FandangoParser::Import_from_as_namesContext::import_from_as_name() {
  return getRuleContexts<FandangoParser::Import_from_as_nameContext>();
}

FandangoParser::Import_from_as_nameContext* FandangoParser::Import_from_as_namesContext::import_from_as_name(size_t i) {
  return getRuleContext<FandangoParser::Import_from_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_from_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Import_from_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Import_from_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_names;
}


std::any FandangoParser::Import_from_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::import_from_as_names() {
  Import_from_as_namesContext *_localctx = _tracker.createInstance<Import_from_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 118, FandangoParser::RuleImport_from_as_names);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1104);
    import_from_as_name();
    setState(1109);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1105);
        match(FandangoParser::COMMA);
        setState(1106);
        import_from_as_name(); 
      }
      setState(1111);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_nameContext ------------------------------------------------------------------

FandangoParser::Import_from_as_nameContext::Import_from_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Import_from_as_nameContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Import_from_as_nameContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

tree::TerminalNode* FandangoParser::Import_from_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}


size_t FandangoParser::Import_from_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_name;
}


std::any FandangoParser::Import_from_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_nameContext* FandangoParser::import_from_as_name() {
  Import_from_as_nameContext *_localctx = _tracker.createInstance<Import_from_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 120, FandangoParser::RuleImport_from_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1112);
    match(FandangoParser::NAME);
    setState(1115);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1113);
      match(FandangoParser::AS);
      setState(1114);
      match(FandangoParser::NAME);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_namesContext ------------------------------------------------------------------

FandangoParser::Dotted_as_namesContext::Dotted_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Dotted_as_nameContext *> FandangoParser::Dotted_as_namesContext::dotted_as_name() {
  return getRuleContexts<FandangoParser::Dotted_as_nameContext>();
}

FandangoParser::Dotted_as_nameContext* FandangoParser::Dotted_as_namesContext::dotted_as_name(size_t i) {
  return getRuleContext<FandangoParser::Dotted_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Dotted_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Dotted_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Dotted_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_names;
}


std::any FandangoParser::Dotted_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::dotted_as_names() {
  Dotted_as_namesContext *_localctx = _tracker.createInstance<Dotted_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 122, FandangoParser::RuleDotted_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1117);
    dotted_as_name();
    setState(1122);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1118);
      match(FandangoParser::COMMA);
      setState(1119);
      dotted_as_name();
      setState(1124);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_as_nameContext::Dotted_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_as_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

tree::TerminalNode* FandangoParser::Dotted_as_nameContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Dotted_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_name;
}


std::any FandangoParser::Dotted_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_nameContext* FandangoParser::dotted_as_name() {
  Dotted_as_nameContext *_localctx = _tracker.createInstance<Dotted_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 124, FandangoParser::RuleDotted_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1125);
    dotted_name(0);
    setState(1128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1126);
      match(FandangoParser::AS);
      setState(1127);
      match(FandangoParser::NAME);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_nameContext::Dotted_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Dotted_nameContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_nameContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Dotted_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_name;
}


std::any FandangoParser::Dotted_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_name(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Dotted_nameContext* FandangoParser::dotted_name() {
   return dotted_name(0);
}

FandangoParser::Dotted_nameContext* FandangoParser::dotted_name(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Dotted_nameContext *_localctx = _tracker.createInstance<Dotted_nameContext>(_ctx, parentState);
  FandangoParser::Dotted_nameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 126;
  enterRecursionRule(_localctx, 126, FandangoParser::RuleDotted_name, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1131);
    match(FandangoParser::NAME);
    _ctx->stop = _input->LT(-1);
    setState(1138);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Dotted_nameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDotted_name);
        setState(1133);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1134);
        match(FandangoParser::DOT);
        setState(1135);
        match(FandangoParser::NAME); 
      }
      setState(1140);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

FandangoParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::BlockContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::BlockContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::StatementsContext* FandangoParser::BlockContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::BlockContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::BlockContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::BlockContext::getRuleIndex() const {
  return FandangoParser::RuleBlock;
}


std::any FandangoParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::BlockContext* FandangoParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 128, FandangoParser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1147);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 1);
        setState(1141);
        match(FandangoParser::NEWLINE);
        setState(1142);
        match(FandangoParser::INDENT);
        setState(1143);
        statements();
        setState(1144);
        match(FandangoParser::DEDENT);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1146);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratorsContext ------------------------------------------------------------------

FandangoParser::DecoratorsContext::DecoratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::AT() {
  return getTokens(FandangoParser::AT);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::AT(size_t i) {
  return getToken(FandangoParser::AT, i);
}

std::vector<FandangoParser::Named_expressionContext *> FandangoParser::DecoratorsContext::named_expression() {
  return getRuleContexts<FandangoParser::Named_expressionContext>();
}

FandangoParser::Named_expressionContext* FandangoParser::DecoratorsContext::named_expression(size_t i) {
  return getRuleContext<FandangoParser::Named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::DecoratorsContext::getRuleIndex() const {
  return FandangoParser::RuleDecorators;
}


std::any FandangoParser::DecoratorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDecorators(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DecoratorsContext* FandangoParser::decorators() {
  DecoratorsContext *_localctx = _tracker.createInstance<DecoratorsContext>(_ctx, getState());
  enterRule(_localctx, 130, FandangoParser::RuleDecorators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1153); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1149);
      match(FandangoParser::AT);
      setState(1150);
      named_expression();
      setState(1151);
      match(FandangoParser::NEWLINE);
      setState(1155); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::AT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_defContext ------------------------------------------------------------------

FandangoParser::Class_defContext::Class_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Class_def_rawContext* FandangoParser::Class_defContext::class_def_raw() {
  return getRuleContext<FandangoParser::Class_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Class_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Class_defContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def;
}


std::any FandangoParser::Class_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_defContext* FandangoParser::class_def() {
  Class_defContext *_localctx = _tracker.createInstance<Class_defContext>(_ctx, getState());
  enterRule(_localctx, 132, FandangoParser::RuleClass_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1158);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1157);
      decorators();
    }
    setState(1160);
    class_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_def_rawContext ------------------------------------------------------------------

FandangoParser::Class_def_rawContext::Class_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLASS() {
  return getToken(FandangoParser::CLASS, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Class_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Class_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Class_def_rawContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Class_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def_raw;
}


std::any FandangoParser::Class_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_def_rawContext* FandangoParser::class_def_raw() {
  Class_def_rawContext *_localctx = _tracker.createInstance<Class_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 134, FandangoParser::RuleClass_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    match(FandangoParser::CLASS);
    setState(1163);
    match(FandangoParser::NAME);
    setState(1165);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1164);
      type_params();
    }
    setState(1172);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_PAREN) {
      setState(1167);
      match(FandangoParser::OPEN_PAREN);
      setState(1169);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199278008967) != 0)) {
        setState(1168);
        arguments();
      }
      setState(1171);
      match(FandangoParser::CLOSE_PAREN);
    }
    setState(1174);
    match(FandangoParser::COLON);
    setState(1175);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_defContext ------------------------------------------------------------------

FandangoParser::Function_defContext::Function_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_def_rawContext* FandangoParser::Function_defContext::function_def_raw() {
  return getRuleContext<FandangoParser::Function_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Function_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Function_defContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def;
}


std::any FandangoParser::Function_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_defContext* FandangoParser::function_def() {
  Function_defContext *_localctx = _tracker.createInstance<Function_defContext>(_ctx, getState());
  enterRule(_localctx, 136, FandangoParser::RuleFunction_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1178);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1177);
      decorators();
    }
    setState(1180);
    function_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_def_rawContext ------------------------------------------------------------------

FandangoParser::Function_def_rawContext::Function_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::DEF() {
  return getToken(FandangoParser::DEF, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Function_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

FandangoParser::Type_paramsContext* FandangoParser::Function_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

FandangoParser::ParamsContext* FandangoParser::Function_def_rawContext::params() {
  return getRuleContext<FandangoParser::ParamsContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Function_def_rawContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Func_type_commentContext* FandangoParser::Function_def_rawContext::func_type_comment() {
  return getRuleContext<FandangoParser::Func_type_commentContext>(0);
}


size_t FandangoParser::Function_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def_raw;
}


std::any FandangoParser::Function_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_def_rawContext* FandangoParser::function_def_raw() {
  Function_def_rawContext *_localctx = _tracker.createInstance<Function_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 138, FandangoParser::RuleFunction_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1183);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(1182);
      match(FandangoParser::ASYNC);
    }
    setState(1185);
    match(FandangoParser::DEF);
    setState(1186);
    match(FandangoParser::NAME);
    setState(1188);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1187);
      type_params();
    }
    setState(1190);
    match(FandangoParser::OPEN_PAREN);
    setState(1192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 2129921) != 0)) {
      setState(1191);
      params();
    }
    setState(1194);
    match(FandangoParser::CLOSE_PAREN);
    setState(1197);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ARROW) {
      setState(1195);
      match(FandangoParser::ARROW);
      setState(1196);
      expression();
    }
    setState(1199);
    match(FandangoParser::COLON);
    setState(1201);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1200);
      func_type_comment();
      break;
    }

    default:
      break;
    }
    setState(1203);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

FandangoParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParametersContext* FandangoParser::ParamsContext::parameters() {
  return getRuleContext<FandangoParser::ParametersContext>(0);
}


size_t FandangoParser::ParamsContext::getRuleIndex() const {
  return FandangoParser::RuleParams;
}


std::any FandangoParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamsContext* FandangoParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 140, FandangoParser::RuleParams);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1205);
    parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

FandangoParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Slash_no_defaultContext* FandangoParser::ParametersContext::slash_no_default() {
  return getRuleContext<FandangoParser::Slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::ParametersContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::ParametersContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::ParametersContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::ParametersContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

FandangoParser::Star_etcContext* FandangoParser::ParametersContext::star_etc() {
  return getRuleContext<FandangoParser::Star_etcContext>(0);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::ParametersContext::slash_with_default() {
  return getRuleContext<FandangoParser::Slash_with_defaultContext>(0);
}


size_t FandangoParser::ParametersContext::getRuleIndex() const {
  return FandangoParser::RuleParameters;
}


std::any FandangoParser::ParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParametersContext* FandangoParser::parameters() {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
  enterRule(_localctx, 142, FandangoParser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1256);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1207);
      slash_no_default();
      setState(1211);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1208);
          param_no_default(); 
        }
        setState(1213);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
      }
      setState(1217);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1214);
        param_with_default();
        setState(1219);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1221);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1220);
        star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1223);
      slash_with_default();
      setState(1227);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1224);
        param_with_default();
        setState(1229);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1231);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1230);
        star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1234); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1233);
                param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1236); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1241);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1238);
        param_with_default();
        setState(1243);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1245);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1244);
        star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1248); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1247);
        param_with_default();
        setState(1250); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(1253);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1252);
        star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1255);
      star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_no_defaultContext::Slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_no_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_no_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_no_default;
}


std::any FandangoParser::Slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_no_defaultContext* FandangoParser::slash_no_default() {
  Slash_no_defaultContext *_localctx = _tracker.createInstance<Slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 144, FandangoParser::RuleSlash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1259); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1258);
      param_no_default();
      setState(1261); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(1263);
    match(FandangoParser::DIV);
    setState(1265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1264);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_with_defaultContext::Slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_with_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_with_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::Slash_with_defaultContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::Slash_with_defaultContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_with_default;
}


std::any FandangoParser::Slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::slash_with_default() {
  Slash_with_defaultContext *_localctx = _tracker.createInstance<Slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 146, FandangoParser::RuleSlash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1270);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1267);
        param_no_default(); 
      }
      setState(1272);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
    }
    setState(1274); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1273);
      param_with_default();
      setState(1276); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(1278);
    match(FandangoParser::DIV);
    setState(1280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1279);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_etcContext ------------------------------------------------------------------

FandangoParser::Star_etcContext::Star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::Star_etcContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_maybe_defaultContext *> FandangoParser::Star_etcContext::param_maybe_default() {
  return getRuleContexts<FandangoParser::Param_maybe_defaultContext>();
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::Star_etcContext::param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Param_maybe_defaultContext>(i);
}

FandangoParser::KwdsContext* FandangoParser::Star_etcContext::kwds() {
  return getRuleContext<FandangoParser::KwdsContext>(0);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::Star_etcContext::param_no_default_star_annotation() {
  return getRuleContext<FandangoParser::Param_no_default_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleStar_etc;
}


std::any FandangoParser::Star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_etcContext* FandangoParser::star_etc() {
  Star_etcContext *_localctx = _tracker.createInstance<Star_etcContext>(_ctx, getState());
  enterRule(_localctx, 148, FandangoParser::RuleStar_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1315);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1282);
      match(FandangoParser::STAR);
      setState(1283);
      param_no_default();
      setState(1287);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1284);
        param_maybe_default();
        setState(1289);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1290);
        kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1293);
      match(FandangoParser::STAR);
      setState(1294);
      param_no_default_star_annotation();
      setState(1298);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1295);
        param_maybe_default();
        setState(1300);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1302);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1301);
        kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1304);
      match(FandangoParser::STAR);
      setState(1305);
      match(FandangoParser::COMMA);
      setState(1307); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1306);
        param_maybe_default();
        setState(1309); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(1312);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1311);
        kwds();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1314);
      kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwdsContext ------------------------------------------------------------------

FandangoParser::KwdsContext::KwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::KwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::KwdsContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}


size_t FandangoParser::KwdsContext::getRuleIndex() const {
  return FandangoParser::RuleKwds;
}


std::any FandangoParser::KwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwdsContext* FandangoParser::kwds() {
  KwdsContext *_localctx = _tracker.createInstance<KwdsContext>(_ctx, getState());
  enterRule(_localctx, 150, FandangoParser::RuleKwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1317);
    match(FandangoParser::POWER);
    setState(1318);
    param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Param_no_defaultContext::Param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_no_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default;
}


std::any FandangoParser::Param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_defaultContext* FandangoParser::param_no_default() {
  Param_no_defaultContext *_localctx = _tracker.createInstance<Param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 152, FandangoParser::RuleParam_no_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1324);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1320);
      param();
      setState(1321);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1323);
      param();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_default_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_no_default_star_annotationContext::Param_no_default_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Param_star_annotationContext* FandangoParser::Param_no_default_star_annotationContext::param_star_annotation() {
  return getRuleContext<FandangoParser::Param_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_default_star_annotationContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_default_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default_star_annotation;
}


std::any FandangoParser::Param_no_default_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::param_no_default_star_annotation() {
  Param_no_default_star_annotationContext *_localctx = _tracker.createInstance<Param_no_default_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 154, FandangoParser::RuleParam_no_default_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1330);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1326);
      param_star_annotation();
      setState(1327);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1329);
      param_star_annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Param_with_defaultContext::Param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_with_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_with_default;
}


std::any FandangoParser::Param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_with_defaultContext* FandangoParser::param_with_default() {
  Param_with_defaultContext *_localctx = _tracker.createInstance<Param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 156, FandangoParser::RuleParam_with_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1339);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1332);
      param();
      setState(1333);
      default_();
      setState(1334);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1336);
      param();
      setState(1337);
      default_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Param_maybe_defaultContext::Param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_maybe_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::DefaultContext* FandangoParser::Param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}


size_t FandangoParser::Param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_maybe_default;
}


std::any FandangoParser::Param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::param_maybe_default() {
  Param_maybe_defaultContext *_localctx = _tracker.createInstance<Param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 158, FandangoParser::RuleParam_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1351);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1341);
      param();
      setState(1343);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1342);
        default_();
      }
      setState(1345);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1347);
      param();
      setState(1349);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1348);
        default_();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

FandangoParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ParamContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::AnnotationContext* FandangoParser::ParamContext::annotation() {
  return getRuleContext<FandangoParser::AnnotationContext>(0);
}


size_t FandangoParser::ParamContext::getRuleIndex() const {
  return FandangoParser::RuleParam;
}


std::any FandangoParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamContext* FandangoParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 160, FandangoParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1353);
    match(FandangoParser::NAME);
    setState(1355);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(1354);
      annotation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_star_annotationContext::Param_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Param_star_annotationContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Star_annotationContext* FandangoParser::Param_star_annotationContext::star_annotation() {
  return getRuleContext<FandangoParser::Star_annotationContext>(0);
}


size_t FandangoParser::Param_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_star_annotation;
}


std::any FandangoParser::Param_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_star_annotationContext* FandangoParser::param_star_annotation() {
  Param_star_annotationContext *_localctx = _tracker.createInstance<Param_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 162, FandangoParser::RuleParam_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    match(FandangoParser::NAME);
    setState(1358);
    star_annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

FandangoParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AnnotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AnnotationContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::AnnotationContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotation;
}


std::any FandangoParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AnnotationContext* FandangoParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 164, FandangoParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1360);
    match(FandangoParser::COLON);
    setState(1361);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_annotationContext ------------------------------------------------------------------

FandangoParser::Star_annotationContext::Star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_annotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Star_expressionContext* FandangoParser::Star_annotationContext::star_expression() {
  return getRuleContext<FandangoParser::Star_expressionContext>(0);
}


size_t FandangoParser::Star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleStar_annotation;
}


std::any FandangoParser::Star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_annotationContext* FandangoParser::star_annotation() {
  Star_annotationContext *_localctx = _tracker.createInstance<Star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 166, FandangoParser::RuleStar_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1363);
    match(FandangoParser::COLON);
    setState(1364);
    star_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultContext ------------------------------------------------------------------

FandangoParser::DefaultContext::DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DefaultContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::DefaultContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::DefaultContext::getRuleIndex() const {
  return FandangoParser::RuleDefault;
}


std::any FandangoParser::DefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDefault(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DefaultContext* FandangoParser::default_() {
  DefaultContext *_localctx = _tracker.createInstance<DefaultContext>(_ctx, getState());
  enterRule(_localctx, 168, FandangoParser::RuleDefault);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1366);
    match(FandangoParser::ASSIGN);
    setState(1367);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_stmtContext ------------------------------------------------------------------

FandangoParser::If_stmtContext::If_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::If_stmtContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::If_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::If_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::If_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::If_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::If_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::If_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleIf_stmt;
}


std::any FandangoParser::If_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIf_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::If_stmtContext* FandangoParser::if_stmt() {
  If_stmtContext *_localctx = _tracker.createInstance<If_stmtContext>(_ctx, getState());
  enterRule(_localctx, 170, FandangoParser::RuleIf_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1382);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1369);
      match(FandangoParser::IF);
      setState(1370);
      named_expression();
      setState(1371);
      match(FandangoParser::COLON);
      setState(1372);
      block();
      setState(1373);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1375);
      match(FandangoParser::IF);
      setState(1376);
      named_expression();
      setState(1377);
      match(FandangoParser::COLON);
      setState(1378);
      block();
      setState(1380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1379);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elif_stmtContext ------------------------------------------------------------------

FandangoParser::Elif_stmtContext::Elif_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::ELIF() {
  return getToken(FandangoParser::ELIF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::Elif_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Elif_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::Elif_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::Elif_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::Elif_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleElif_stmt;
}


std::any FandangoParser::Elif_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElif_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Elif_stmtContext* FandangoParser::elif_stmt() {
  Elif_stmtContext *_localctx = _tracker.createInstance<Elif_stmtContext>(_ctx, getState());
  enterRule(_localctx, 172, FandangoParser::RuleElif_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1397);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1384);
      match(FandangoParser::ELIF);
      setState(1385);
      named_expression();
      setState(1386);
      match(FandangoParser::COLON);
      setState(1387);
      block();
      setState(1388);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1390);
      match(FandangoParser::ELIF);
      setState(1391);
      named_expression();
      setState(1392);
      match(FandangoParser::COLON);
      setState(1393);
      block();
      setState(1395);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1394);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Else_blockContext ------------------------------------------------------------------

FandangoParser::Else_blockContext::Else_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Else_blockContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

tree::TerminalNode* FandangoParser::Else_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Else_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Else_blockContext::getRuleIndex() const {
  return FandangoParser::RuleElse_block;
}


std::any FandangoParser::Else_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElse_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Else_blockContext* FandangoParser::else_block() {
  Else_blockContext *_localctx = _tracker.createInstance<Else_blockContext>(_ctx, getState());
  enterRule(_localctx, 174, FandangoParser::RuleElse_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1399);
    match(FandangoParser::ELSE);
    setState(1400);
    match(FandangoParser::COLON);
    setState(1401);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_stmtContext ------------------------------------------------------------------

FandangoParser::While_stmtContext::While_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::While_stmtContext::WHILE() {
  return getToken(FandangoParser::WHILE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::While_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::While_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::While_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::While_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::While_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWhile_stmt;
}


std::any FandangoParser::While_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWhile_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::While_stmtContext* FandangoParser::while_stmt() {
  While_stmtContext *_localctx = _tracker.createInstance<While_stmtContext>(_ctx, getState());
  enterRule(_localctx, 176, FandangoParser::RuleWhile_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1403);
    match(FandangoParser::WHILE);
    setState(1404);
    named_expression();
    setState(1405);
    match(FandangoParser::COLON);
    setState(1406);
    block();
    setState(1408);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ELSE) {
      setState(1407);
      else_block();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_stmtContext ------------------------------------------------------------------

FandangoParser::For_stmtContext::For_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_stmtContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_stmtContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::For_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::For_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::For_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::For_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleFor_stmt;
}


std::any FandangoParser::For_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_stmtContext* FandangoParser::for_stmt() {
  For_stmtContext *_localctx = _tracker.createInstance<For_stmtContext>(_ctx, getState());
  enterRule(_localctx, 178, FandangoParser::RuleFor_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1429);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(1410);
        match(FandangoParser::FOR);
        setState(1411);
        star_targets();
        setState(1412);
        match(FandangoParser::IN);
        setState(1413);
        star_expressions();
        setState(1414);
        match(FandangoParser::COLON);
        setState(1415);
        block();
        setState(1417);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1416);
          else_block();
        }
        break;
      }

      case FandangoParser::ASYNC: {
        enterOuterAlt(_localctx, 2);
        setState(1419);
        match(FandangoParser::ASYNC);
        setState(1420);
        match(FandangoParser::FOR);
        setState(1421);
        star_targets();
        setState(1422);
        match(FandangoParser::IN);
        setState(1423);
        star_expressions();
        setState(1424);
        match(FandangoParser::COLON);
        setState(1425);
        block();
        setState(1427);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1426);
          else_block();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_stmtContext ------------------------------------------------------------------

FandangoParser::With_stmtContext::With_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::With_stmtContext::WITH() {
  return getToken(FandangoParser::WITH, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

std::vector<FandangoParser::With_itemContext *> FandangoParser::With_stmtContext::with_item() {
  return getRuleContexts<FandangoParser::With_itemContext>();
}

FandangoParser::With_itemContext* FandangoParser::With_stmtContext::with_item(size_t i) {
  return getRuleContext<FandangoParser::With_itemContext>(i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::With_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::With_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::With_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWith_stmt;
}


std::any FandangoParser::With_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_stmtContext* FandangoParser::with_stmt() {
  With_stmtContext *_localctx = _tracker.createInstance<With_stmtContext>(_ctx, getState());
  enterRule(_localctx, 180, FandangoParser::RuleWith_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1491);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1431);
      match(FandangoParser::WITH);
      setState(1432);
      match(FandangoParser::OPEN_PAREN);
      setState(1433);
      with_item();
      setState(1438);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1434);
          match(FandangoParser::COMMA);
          setState(1435);
          with_item(); 
        }
        setState(1440);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
      }
      setState(1442);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1441);
        match(FandangoParser::COMMA);
      }
      setState(1444);
      match(FandangoParser::CLOSE_PAREN);
      setState(1445);
      match(FandangoParser::COLON);
      setState(1446);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1448);
      match(FandangoParser::WITH);
      setState(1449);
      with_item();
      setState(1454);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1450);
        match(FandangoParser::COMMA);
        setState(1451);
        with_item();
        setState(1456);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1457);
      match(FandangoParser::COLON);
      setState(1458);
      block();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1460);
      match(FandangoParser::ASYNC);
      setState(1461);
      match(FandangoParser::WITH);
      setState(1462);
      match(FandangoParser::OPEN_PAREN);
      setState(1463);
      with_item();
      setState(1468);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1464);
          match(FandangoParser::COMMA);
          setState(1465);
          with_item(); 
        }
        setState(1470);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
      }
      setState(1472);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1471);
        match(FandangoParser::COMMA);
      }
      setState(1474);
      match(FandangoParser::CLOSE_PAREN);
      setState(1475);
      match(FandangoParser::COLON);
      setState(1476);
      block();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1478);
      match(FandangoParser::ASYNC);
      setState(1479);
      match(FandangoParser::WITH);
      setState(1480);
      with_item();
      setState(1485);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1481);
        match(FandangoParser::COMMA);
        setState(1482);
        with_item();
        setState(1487);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1488);
      match(FandangoParser::COLON);
      setState(1489);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_itemContext ------------------------------------------------------------------

FandangoParser::With_itemContext::With_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionContext* FandangoParser::With_itemContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::With_itemContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Star_targetContext* FandangoParser::With_itemContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}


size_t FandangoParser::With_itemContext::getRuleIndex() const {
  return FandangoParser::RuleWith_item;
}


std::any FandangoParser::With_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_item(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_itemContext* FandangoParser::with_item() {
  With_itemContext *_localctx = _tracker.createInstance<With_itemContext>(_ctx, getState());
  enterRule(_localctx, 182, FandangoParser::RuleWith_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1498);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1493);
      expression();
      setState(1494);
      match(FandangoParser::AS);
      setState(1495);
      star_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1497);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_stmtContext ------------------------------------------------------------------

FandangoParser::Try_stmtContext::Try_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Try_stmtContext::TRY() {
  return getToken(FandangoParser::TRY, 0);
}

tree::TerminalNode* FandangoParser::Try_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Try_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Finally_blockContext* FandangoParser::Try_stmtContext::finally_block() {
  return getRuleContext<FandangoParser::Finally_blockContext>(0);
}

std::vector<FandangoParser::Except_blockContext *> FandangoParser::Try_stmtContext::except_block() {
  return getRuleContexts<FandangoParser::Except_blockContext>();
}

FandangoParser::Except_blockContext* FandangoParser::Try_stmtContext::except_block(size_t i) {
  return getRuleContext<FandangoParser::Except_blockContext>(i);
}

FandangoParser::Else_blockContext* FandangoParser::Try_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

std::vector<FandangoParser::Except_star_blockContext *> FandangoParser::Try_stmtContext::except_star_block() {
  return getRuleContexts<FandangoParser::Except_star_blockContext>();
}

FandangoParser::Except_star_blockContext* FandangoParser::Try_stmtContext::except_star_block(size_t i) {
  return getRuleContext<FandangoParser::Except_star_blockContext>(i);
}


size_t FandangoParser::Try_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleTry_stmt;
}


std::any FandangoParser::Try_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTry_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Try_stmtContext* FandangoParser::try_stmt() {
  Try_stmtContext *_localctx = _tracker.createInstance<Try_stmtContext>(_ctx, getState());
  enterRule(_localctx, 184, FandangoParser::RuleTry_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1533);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1500);
      match(FandangoParser::TRY);
      setState(1501);
      match(FandangoParser::COLON);
      setState(1502);
      block();
      setState(1503);
      finally_block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1505);
      match(FandangoParser::TRY);
      setState(1506);
      match(FandangoParser::COLON);
      setState(1507);
      block();
      setState(1509); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1508);
        except_block();
        setState(1511); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1513);
        else_block();
      }
      setState(1517);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1516);
        finally_block();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1519);
      match(FandangoParser::TRY);
      setState(1520);
      match(FandangoParser::COLON);
      setState(1521);
      block();
      setState(1523); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1522);
        except_star_block();
        setState(1525); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1528);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1527);
        else_block();
      }
      setState(1531);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1530);
        finally_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_blockContext ------------------------------------------------------------------

FandangoParser::Except_blockContext::Except_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Except_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_block;
}


std::any FandangoParser::Except_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_blockContext* FandangoParser::except_block() {
  Except_blockContext *_localctx = _tracker.createInstance<Except_blockContext>(_ctx, getState());
  enterRule(_localctx, 186, FandangoParser::RuleExcept_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1547);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1535);
      match(FandangoParser::EXCEPT);
      setState(1536);
      expression();
      setState(1539);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::AS) {
        setState(1537);
        match(FandangoParser::AS);
        setState(1538);
        match(FandangoParser::NAME);
      }
      setState(1541);
      match(FandangoParser::COLON);
      setState(1542);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1544);
      match(FandangoParser::EXCEPT);
      setState(1545);
      match(FandangoParser::COLON);
      setState(1546);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_star_blockContext ------------------------------------------------------------------

FandangoParser::Except_star_blockContext::Except_star_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_star_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_star_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Except_star_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_star_block;
}


std::any FandangoParser::Except_star_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_star_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_star_blockContext* FandangoParser::except_star_block() {
  Except_star_blockContext *_localctx = _tracker.createInstance<Except_star_blockContext>(_ctx, getState());
  enterRule(_localctx, 188, FandangoParser::RuleExcept_star_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1549);
    match(FandangoParser::EXCEPT);
    setState(1550);
    match(FandangoParser::STAR);
    setState(1551);
    expression();
    setState(1554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1552);
      match(FandangoParser::AS);
      setState(1553);
      match(FandangoParser::NAME);
    }
    setState(1556);
    match(FandangoParser::COLON);
    setState(1557);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_blockContext ------------------------------------------------------------------

FandangoParser::Finally_blockContext::Finally_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Finally_blockContext::FINALLY() {
  return getToken(FandangoParser::FINALLY, 0);
}

tree::TerminalNode* FandangoParser::Finally_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Finally_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Finally_blockContext::getRuleIndex() const {
  return FandangoParser::RuleFinally_block;
}


std::any FandangoParser::Finally_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFinally_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Finally_blockContext* FandangoParser::finally_block() {
  Finally_blockContext *_localctx = _tracker.createInstance<Finally_blockContext>(_ctx, getState());
  enterRule(_localctx, 190, FandangoParser::RuleFinally_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1559);
    match(FandangoParser::FINALLY);
    setState(1560);
    match(FandangoParser::COLON);
    setState(1561);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Match_stmtContext ------------------------------------------------------------------

FandangoParser::Match_stmtContext::Match_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Match_stmtContext::MATCH() {
  return getToken(FandangoParser::MATCH, 0);
}

FandangoParser::Subject_exprContext* FandangoParser::Match_stmtContext::subject_expr() {
  return getRuleContext<FandangoParser::Subject_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

std::vector<FandangoParser::Case_blockContext *> FandangoParser::Match_stmtContext::case_block() {
  return getRuleContexts<FandangoParser::Case_blockContext>();
}

FandangoParser::Case_blockContext* FandangoParser::Match_stmtContext::case_block(size_t i) {
  return getRuleContext<FandangoParser::Case_blockContext>(i);
}


size_t FandangoParser::Match_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleMatch_stmt;
}


std::any FandangoParser::Match_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMatch_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Match_stmtContext* FandangoParser::match_stmt() {
  Match_stmtContext *_localctx = _tracker.createInstance<Match_stmtContext>(_ctx, getState());
  enterRule(_localctx, 192, FandangoParser::RuleMatch_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    match(FandangoParser::MATCH);
    setState(1564);
    subject_expr();
    setState(1565);
    match(FandangoParser::COLON);
    setState(1566);
    match(FandangoParser::NEWLINE);
    setState(1567);
    match(FandangoParser::INDENT);
    setState(1569); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1568);
      case_block();
      setState(1571); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::CASE);
    setState(1573);
    match(FandangoParser::DEDENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subject_exprContext ------------------------------------------------------------------

FandangoParser::Subject_exprContext::Subject_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_named_expressionContext* FandangoParser::Subject_exprContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Subject_exprContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::Subject_exprContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Subject_exprContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Subject_exprContext::getRuleIndex() const {
  return FandangoParser::RuleSubject_expr;
}


std::any FandangoParser::Subject_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSubject_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Subject_exprContext* FandangoParser::subject_expr() {
  Subject_exprContext *_localctx = _tracker.createInstance<Subject_exprContext>(_ctx, getState());
  enterRule(_localctx, 194, FandangoParser::RuleSubject_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1581);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1575);
      star_named_expression();
      setState(1576);
      match(FandangoParser::COMMA);
      setState(1578);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199278008839) != 0)) {
        setState(1577);
        star_named_expressions();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1580);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_blockContext ------------------------------------------------------------------

FandangoParser::Case_blockContext::Case_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Case_blockContext::CASE() {
  return getToken(FandangoParser::CASE, 0);
}

FandangoParser::PatternsContext* FandangoParser::Case_blockContext::patterns() {
  return getRuleContext<FandangoParser::PatternsContext>(0);
}

tree::TerminalNode* FandangoParser::Case_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Case_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::GuardContext* FandangoParser::Case_blockContext::guard() {
  return getRuleContext<FandangoParser::GuardContext>(0);
}


size_t FandangoParser::Case_blockContext::getRuleIndex() const {
  return FandangoParser::RuleCase_block;
}


std::any FandangoParser::Case_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCase_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Case_blockContext* FandangoParser::case_block() {
  Case_blockContext *_localctx = _tracker.createInstance<Case_blockContext>(_ctx, getState());
  enterRule(_localctx, 196, FandangoParser::RuleCase_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583);
    match(FandangoParser::CASE);
    setState(1584);
    patterns();
    setState(1586);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::IF) {
      setState(1585);
      guard();
    }
    setState(1588);
    match(FandangoParser::COLON);
    setState(1589);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardContext ------------------------------------------------------------------

FandangoParser::GuardContext::GuardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GuardContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::GuardContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GuardContext::getRuleIndex() const {
  return FandangoParser::RuleGuard;
}


std::any FandangoParser::GuardContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGuard(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GuardContext* FandangoParser::guard() {
  GuardContext *_localctx = _tracker.createInstance<GuardContext>(_ctx, getState());
  enterRule(_localctx, 198, FandangoParser::RuleGuard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1591);
    match(FandangoParser::IF);
    setState(1592);
    named_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternsContext ------------------------------------------------------------------

FandangoParser::PatternsContext::PatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Open_sequence_patternContext* FandangoParser::PatternsContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::PatternsContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::PatternsContext::getRuleIndex() const {
  return FandangoParser::RulePatterns;
}


std::any FandangoParser::PatternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPatterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternsContext* FandangoParser::patterns() {
  PatternsContext *_localctx = _tracker.createInstance<PatternsContext>(_ctx, getState());
  enterRule(_localctx, 200, FandangoParser::RulePatterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1596);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1594);
      open_sequence_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1595);
      pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

FandangoParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::As_patternContext* FandangoParser::PatternContext::as_pattern() {
  return getRuleContext<FandangoParser::As_patternContext>(0);
}

FandangoParser::Or_patternContext* FandangoParser::PatternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}


size_t FandangoParser::PatternContext::getRuleIndex() const {
  return FandangoParser::RulePattern;
}


std::any FandangoParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternContext* FandangoParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 202, FandangoParser::RulePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1600);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1598);
      as_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1599);
      or_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- As_patternContext ------------------------------------------------------------------

FandangoParser::As_patternContext::As_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Or_patternContext* FandangoParser::As_patternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}

tree::TerminalNode* FandangoParser::As_patternContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::As_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::As_patternContext::getRuleIndex() const {
  return FandangoParser::RuleAs_pattern;
}


std::any FandangoParser::As_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAs_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::As_patternContext* FandangoParser::as_pattern() {
  As_patternContext *_localctx = _tracker.createInstance<As_patternContext>(_ctx, getState());
  enterRule(_localctx, 204, FandangoParser::RuleAs_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1602);
    or_pattern();
    setState(1603);
    match(FandangoParser::AS);
    setState(1604);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Or_patternContext ------------------------------------------------------------------

FandangoParser::Or_patternContext::Or_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Closed_patternContext *> FandangoParser::Or_patternContext::closed_pattern() {
  return getRuleContexts<FandangoParser::Closed_patternContext>();
}

FandangoParser::Closed_patternContext* FandangoParser::Or_patternContext::closed_pattern(size_t i) {
  return getRuleContext<FandangoParser::Closed_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Or_patternContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Or_patternContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::Or_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOr_pattern;
}


std::any FandangoParser::Or_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOr_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Or_patternContext* FandangoParser::or_pattern() {
  Or_patternContext *_localctx = _tracker.createInstance<Or_patternContext>(_ctx, getState());
  enterRule(_localctx, 206, FandangoParser::RuleOr_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1606);
    closed_pattern();
    setState(1611);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(1607);
      match(FandangoParser::OR_OP);
      setState(1608);
      closed_pattern();
      setState(1613);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Closed_patternContext ------------------------------------------------------------------

FandangoParser::Closed_patternContext::Closed_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Literal_patternContext* FandangoParser::Closed_patternContext::literal_pattern() {
  return getRuleContext<FandangoParser::Literal_patternContext>(0);
}

FandangoParser::Capture_patternContext* FandangoParser::Closed_patternContext::capture_pattern() {
  return getRuleContext<FandangoParser::Capture_patternContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Closed_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}

FandangoParser::Value_patternContext* FandangoParser::Closed_patternContext::value_pattern() {
  return getRuleContext<FandangoParser::Value_patternContext>(0);
}

FandangoParser::Group_patternContext* FandangoParser::Closed_patternContext::group_pattern() {
  return getRuleContext<FandangoParser::Group_patternContext>(0);
}

FandangoParser::Sequence_patternContext* FandangoParser::Closed_patternContext::sequence_pattern() {
  return getRuleContext<FandangoParser::Sequence_patternContext>(0);
}

FandangoParser::Mapping_patternContext* FandangoParser::Closed_patternContext::mapping_pattern() {
  return getRuleContext<FandangoParser::Mapping_patternContext>(0);
}

FandangoParser::Class_patternContext* FandangoParser::Closed_patternContext::class_pattern() {
  return getRuleContext<FandangoParser::Class_patternContext>(0);
}


size_t FandangoParser::Closed_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClosed_pattern;
}


std::any FandangoParser::Closed_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClosed_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Closed_patternContext* FandangoParser::closed_pattern() {
  Closed_patternContext *_localctx = _tracker.createInstance<Closed_patternContext>(_ctx, getState());
  enterRule(_localctx, 208, FandangoParser::RuleClosed_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1622);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1614);
      literal_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1615);
      capture_pattern();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1616);
      wildcard_pattern();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1617);
      value_pattern();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1618);
      group_pattern();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1619);
      sequence_pattern();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1620);
      mapping_pattern();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1621);
      class_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_patternContext ------------------------------------------------------------------

FandangoParser::Literal_patternContext::Literal_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_patternContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_patternContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_patternContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_patternContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_pattern;
}


std::any FandangoParser::Literal_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_patternContext* FandangoParser::literal_pattern() {
  Literal_patternContext *_localctx = _tracker.createInstance<Literal_patternContext>(_ctx, getState());
  enterRule(_localctx, 210, FandangoParser::RuleLiteral_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1630);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1624);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1625);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1626);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1627);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1628);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1629);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_exprContext ------------------------------------------------------------------

FandangoParser::Literal_exprContext::Literal_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_exprContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_exprContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_exprContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_exprContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_expr;
}


std::any FandangoParser::Literal_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_exprContext* FandangoParser::literal_expr() {
  Literal_exprContext *_localctx = _tracker.createInstance<Literal_exprContext>(_ctx, getState());
  enterRule(_localctx, 212, FandangoParser::RuleLiteral_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1638);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1632);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1633);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1634);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1635);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1636);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1637);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Complex_numberContext ------------------------------------------------------------------

FandangoParser::Complex_numberContext::Complex_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_real_numberContext* FandangoParser::Complex_numberContext::signed_real_number() {
  return getRuleContext<FandangoParser::Signed_real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::Imaginary_numberContext* FandangoParser::Complex_numberContext::imaginary_number() {
  return getRuleContext<FandangoParser::Imaginary_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Complex_numberContext::getRuleIndex() const {
  return FandangoParser::RuleComplex_number;
}


std::any FandangoParser::Complex_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComplex_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Complex_numberContext* FandangoParser::complex_number() {
  Complex_numberContext *_localctx = _tracker.createInstance<Complex_numberContext>(_ctx, getState());
  enterRule(_localctx, 214, FandangoParser::RuleComplex_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1648);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1640);
      signed_real_number();
      setState(1641);
      match(FandangoParser::ADD);
      setState(1642);
      imaginary_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1644);
      signed_real_number();
      setState(1645);
      match(FandangoParser::MINUS);
      setState(1646);
      imaginary_number();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_numberContext ------------------------------------------------------------------

FandangoParser::Signed_numberContext::Signed_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Signed_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

tree::TerminalNode* FandangoParser::Signed_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_number;
}


std::any FandangoParser::Signed_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_numberContext* FandangoParser::signed_number() {
  Signed_numberContext *_localctx = _tracker.createInstance<Signed_numberContext>(_ctx, getState());
  enterRule(_localctx, 216, FandangoParser::RuleSigned_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1653);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(1650);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(1651);
        match(FandangoParser::MINUS);
        setState(1652);
        match(FandangoParser::NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_real_numberContext ------------------------------------------------------------------

FandangoParser::Signed_real_numberContext::Signed_real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Real_numberContext* FandangoParser::Signed_real_numberContext::real_number() {
  return getRuleContext<FandangoParser::Real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Signed_real_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_real_number;
}


std::any FandangoParser::Signed_real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_real_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_real_numberContext* FandangoParser::signed_real_number() {
  Signed_real_numberContext *_localctx = _tracker.createInstance<Signed_real_numberContext>(_ctx, getState());
  enterRule(_localctx, 218, FandangoParser::RuleSigned_real_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1658);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(1655);
        real_number();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(1656);
        match(FandangoParser::MINUS);
        setState(1657);
        real_number();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_numberContext ------------------------------------------------------------------

FandangoParser::Real_numberContext::Real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Real_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleReal_number;
}


std::any FandangoParser::Real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReal_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Real_numberContext* FandangoParser::real_number() {
  Real_numberContext *_localctx = _tracker.createInstance<Real_numberContext>(_ctx, getState());
  enterRule(_localctx, 220, FandangoParser::RuleReal_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1660);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Imaginary_numberContext ------------------------------------------------------------------

FandangoParser::Imaginary_numberContext::Imaginary_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Imaginary_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Imaginary_numberContext::getRuleIndex() const {
  return FandangoParser::RuleImaginary_number;
}


std::any FandangoParser::Imaginary_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImaginary_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Imaginary_numberContext* FandangoParser::imaginary_number() {
  Imaginary_numberContext *_localctx = _tracker.createInstance<Imaginary_numberContext>(_ctx, getState());
  enterRule(_localctx, 222, FandangoParser::RuleImaginary_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1662);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Capture_patternContext ------------------------------------------------------------------

FandangoParser::Capture_patternContext::Capture_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Capture_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Capture_patternContext::getRuleIndex() const {
  return FandangoParser::RuleCapture_pattern;
}


std::any FandangoParser::Capture_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCapture_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Capture_patternContext* FandangoParser::capture_pattern() {
  Capture_patternContext *_localctx = _tracker.createInstance<Capture_patternContext>(_ctx, getState());
  enterRule(_localctx, 224, FandangoParser::RuleCapture_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1664);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pattern_capture_targetContext ------------------------------------------------------------------

FandangoParser::Pattern_capture_targetContext::Pattern_capture_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Pattern_capture_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Pattern_capture_targetContext::getRuleIndex() const {
  return FandangoParser::RulePattern_capture_target;
}


std::any FandangoParser::Pattern_capture_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern_capture_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::pattern_capture_target() {
  Pattern_capture_targetContext *_localctx = _tracker.createInstance<Pattern_capture_targetContext>(_ctx, getState());
  enterRule(_localctx, 226, FandangoParser::RulePattern_capture_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1666);
    match(FandangoParser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wildcard_patternContext ------------------------------------------------------------------

FandangoParser::Wildcard_patternContext::Wildcard_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Wildcard_patternContext::UNDERSCORE() {
  return getToken(FandangoParser::UNDERSCORE, 0);
}


size_t FandangoParser::Wildcard_patternContext::getRuleIndex() const {
  return FandangoParser::RuleWildcard_pattern;
}


std::any FandangoParser::Wildcard_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWildcard_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Wildcard_patternContext* FandangoParser::wildcard_pattern() {
  Wildcard_patternContext *_localctx = _tracker.createInstance<Wildcard_patternContext>(_ctx, getState());
  enterRule(_localctx, 228, FandangoParser::RuleWildcard_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1668);
    match(FandangoParser::UNDERSCORE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_patternContext ------------------------------------------------------------------

FandangoParser::Value_patternContext::Value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AttrContext* FandangoParser::Value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleValue_pattern;
}


std::any FandangoParser::Value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitValue_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Value_patternContext* FandangoParser::value_pattern() {
  Value_patternContext *_localctx = _tracker.createInstance<Value_patternContext>(_ctx, getState());
  enterRule(_localctx, 230, FandangoParser::RuleValue_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1670);
    attr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrContext ------------------------------------------------------------------

FandangoParser::AttrContext::AttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::AttrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::AttrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::AttrContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::AttrContext::getRuleIndex() const {
  return FandangoParser::RuleAttr;
}


std::any FandangoParser::AttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAttr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AttrContext* FandangoParser::attr() {
  AttrContext *_localctx = _tracker.createInstance<AttrContext>(_ctx, getState());
  enterRule(_localctx, 232, FandangoParser::RuleAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1672);
    name_or_attr(0);
    setState(1673);
    match(FandangoParser::DOT);
    setState(1674);
    match(FandangoParser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Name_or_attrContext ------------------------------------------------------------------

FandangoParser::Name_or_attrContext::Name_or_attrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Name_or_attrContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Name_or_attrContext* FandangoParser::Name_or_attrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Name_or_attrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Name_or_attrContext::getRuleIndex() const {
  return FandangoParser::RuleName_or_attr;
}


std::any FandangoParser::Name_or_attrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitName_or_attr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr() {
   return name_or_attr(0);
}

FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Name_or_attrContext *_localctx = _tracker.createInstance<Name_or_attrContext>(_ctx, parentState);
  FandangoParser::Name_or_attrContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 234;
  enterRecursionRule(_localctx, 234, FandangoParser::RuleName_or_attr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1677);
    match(FandangoParser::NAME);
    _ctx->stop = _input->LT(-1);
    setState(1684);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Name_or_attrContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleName_or_attr);
        setState(1679);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1680);
        match(FandangoParser::DOT);
        setState(1681);
        match(FandangoParser::NAME); 
      }
      setState(1686);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Group_patternContext ------------------------------------------------------------------

FandangoParser::Group_patternContext::Group_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Group_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::PatternContext* FandangoParser::Group_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

tree::TerminalNode* FandangoParser::Group_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Group_patternContext::getRuleIndex() const {
  return FandangoParser::RuleGroup_pattern;
}


std::any FandangoParser::Group_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Group_patternContext* FandangoParser::group_pattern() {
  Group_patternContext *_localctx = _tracker.createInstance<Group_patternContext>(_ctx, getState());
  enterRule(_localctx, 236, FandangoParser::RuleGroup_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1687);
    match(FandangoParser::OPEN_PAREN);
    setState(1688);
    pattern();
    setState(1689);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_patternContext ------------------------------------------------------------------

FandangoParser::Sequence_patternContext::Sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::Sequence_patternContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}


size_t FandangoParser::Sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleSequence_pattern;
}


std::any FandangoParser::Sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Sequence_patternContext* FandangoParser::sequence_pattern() {
  Sequence_patternContext *_localctx = _tracker.createInstance<Sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 238, FandangoParser::RuleSequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1701);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 1);
        setState(1691);
        match(FandangoParser::OPEN_BRACK);
        setState(1693);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2252907919441944) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 66)) & 5629499536376067) != 0)) {
          setState(1692);
          maybe_sequence_pattern();
        }
        setState(1695);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1696);
        match(FandangoParser::OPEN_PAREN);
        setState(1698);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2252907919441944) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 66)) & 5629499536376067) != 0)) {
          setState(1697);
          open_sequence_pattern();
        }
        setState(1700);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Open_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Open_sequence_patternContext::Open_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Open_sequence_patternContext::maybe_star_pattern() {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Open_sequence_patternContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Open_sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}


size_t FandangoParser::Open_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOpen_sequence_pattern;
}


std::any FandangoParser::Open_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOpen_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::open_sequence_pattern() {
  Open_sequence_patternContext *_localctx = _tracker.createInstance<Open_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 240, FandangoParser::RuleOpen_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1703);
    maybe_star_pattern();
    setState(1704);
    match(FandangoParser::COMMA);
    setState(1706);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252907919441944) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 5629499536376067) != 0)) {
      setState(1705);
      maybe_sequence_pattern();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_sequence_patternContext::Maybe_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Maybe_star_patternContext *> FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern() {
  return getRuleContexts<FandangoParser::Maybe_star_patternContext>();
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern(size_t i) {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Maybe_sequence_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Maybe_sequence_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Maybe_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_sequence_pattern;
}


std::any FandangoParser::Maybe_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::maybe_sequence_pattern() {
  Maybe_sequence_patternContext *_localctx = _tracker.createInstance<Maybe_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 242, FandangoParser::RuleMaybe_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1708);
    maybe_star_pattern();
    setState(1713);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1709);
        match(FandangoParser::COMMA);
        setState(1710);
        maybe_star_pattern(); 
      }
      setState(1715);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    }
    setState(1717);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1716);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_star_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_star_patternContext::Maybe_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_patternContext* FandangoParser::Maybe_star_patternContext::star_pattern() {
  return getRuleContext<FandangoParser::Star_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::Maybe_star_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Maybe_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_star_pattern;
}


std::any FandangoParser::Maybe_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_star_patternContext* FandangoParser::maybe_star_pattern() {
  Maybe_star_patternContext *_localctx = _tracker.createInstance<Maybe_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 244, FandangoParser::RuleMaybe_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1721);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1719);
        star_pattern();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::MINUS:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::UNDERSCORE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1720);
        pattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_patternContext ------------------------------------------------------------------

FandangoParser::Star_patternContext::Star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_patternContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Star_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}


size_t FandangoParser::Star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleStar_pattern;
}


std::any FandangoParser::Star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_patternContext* FandangoParser::star_pattern() {
  Star_patternContext *_localctx = _tracker.createInstance<Star_patternContext>(_ctx, getState());
  enterRule(_localctx, 246, FandangoParser::RuleStar_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1727);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1723);
      match(FandangoParser::STAR);
      setState(1724);
      pattern_capture_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1725);
      match(FandangoParser::STAR);
      setState(1726);
      wildcard_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mapping_patternContext ------------------------------------------------------------------

FandangoParser::Mapping_patternContext::Mapping_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_star_patternContext* FandangoParser::Mapping_patternContext::double_star_pattern() {
  return getRuleContext<FandangoParser::Double_star_patternContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Mapping_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Items_patternContext* FandangoParser::Mapping_patternContext::items_pattern() {
  return getRuleContext<FandangoParser::Items_patternContext>(0);
}


size_t FandangoParser::Mapping_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMapping_pattern;
}


std::any FandangoParser::Mapping_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMapping_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Mapping_patternContext* FandangoParser::mapping_pattern() {
  Mapping_patternContext *_localctx = _tracker.createInstance<Mapping_patternContext>(_ctx, getState());
  enterRule(_localctx, 248, FandangoParser::RuleMapping_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1754);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1729);
      match(FandangoParser::OPEN_BRACE);
      setState(1730);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1731);
      match(FandangoParser::OPEN_BRACE);
      setState(1732);
      double_star_pattern();
      setState(1734);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1733);
        match(FandangoParser::COMMA);
      }
      setState(1736);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1738);
      match(FandangoParser::OPEN_BRACE);
      setState(1739);
      items_pattern();
      setState(1740);
      match(FandangoParser::COMMA);
      setState(1741);
      double_star_pattern();
      setState(1743);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1742);
        match(FandangoParser::COMMA);
      }
      setState(1745);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1747);
      match(FandangoParser::OPEN_BRACE);
      setState(1748);
      items_pattern();
      setState(1750);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1749);
        match(FandangoParser::COMMA);
      }
      setState(1752);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Items_patternContext ------------------------------------------------------------------

FandangoParser::Items_patternContext::Items_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Key_value_patternContext *> FandangoParser::Items_patternContext::key_value_pattern() {
  return getRuleContexts<FandangoParser::Key_value_patternContext>();
}

FandangoParser::Key_value_patternContext* FandangoParser::Items_patternContext::key_value_pattern(size_t i) {
  return getRuleContext<FandangoParser::Key_value_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Items_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Items_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Items_patternContext::getRuleIndex() const {
  return FandangoParser::RuleItems_pattern;
}


std::any FandangoParser::Items_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitItems_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Items_patternContext* FandangoParser::items_pattern() {
  Items_patternContext *_localctx = _tracker.createInstance<Items_patternContext>(_ctx, getState());
  enterRule(_localctx, 250, FandangoParser::RuleItems_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1756);
    key_value_pattern();
    setState(1761);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1757);
        match(FandangoParser::COMMA);
        setState(1758);
        key_value_pattern(); 
      }
      setState(1763);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Key_value_patternContext ------------------------------------------------------------------

FandangoParser::Key_value_patternContext::Key_value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Key_value_patternContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::PatternContext* FandangoParser::Key_value_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

FandangoParser::Literal_exprContext* FandangoParser::Key_value_patternContext::literal_expr() {
  return getRuleContext<FandangoParser::Literal_exprContext>(0);
}

FandangoParser::AttrContext* FandangoParser::Key_value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Key_value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKey_value_pattern;
}


std::any FandangoParser::Key_value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKey_value_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Key_value_patternContext* FandangoParser::key_value_pattern() {
  Key_value_patternContext *_localctx = _tracker.createInstance<Key_value_patternContext>(_ctx, getState());
  enterRule(_localctx, 252, FandangoParser::RuleKey_value_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1766);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::MINUS:
      case FandangoParser::FSTRING_START: {
        setState(1764);
        literal_expr();
        break;
      }

      case FandangoParser::NAME: {
        setState(1765);
        attr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1768);
    match(FandangoParser::COLON);
    setState(1769);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_star_patternContext ------------------------------------------------------------------

FandangoParser::Double_star_patternContext::Double_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_star_patternContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Double_star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Double_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_star_pattern;
}


std::any FandangoParser::Double_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_star_patternContext* FandangoParser::double_star_pattern() {
  Double_star_patternContext *_localctx = _tracker.createInstance<Double_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 254, FandangoParser::RuleDouble_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1771);
    match(FandangoParser::POWER);
    setState(1772);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_patternContext ------------------------------------------------------------------

FandangoParser::Class_patternContext::Class_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::Class_patternContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Positional_patternsContext* FandangoParser::Class_patternContext::positional_patterns() {
  return getRuleContext<FandangoParser::Positional_patternsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Class_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Class_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Keyword_patternsContext* FandangoParser::Class_patternContext::keyword_patterns() {
  return getRuleContext<FandangoParser::Keyword_patternsContext>(0);
}


size_t FandangoParser::Class_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClass_pattern;
}


std::any FandangoParser::Class_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_patternContext* FandangoParser::class_pattern() {
  Class_patternContext *_localctx = _tracker.createInstance<Class_patternContext>(_ctx, getState());
  enterRule(_localctx, 256, FandangoParser::RuleClass_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1804);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1774);
      name_or_attr(0);
      setState(1775);
      match(FandangoParser::OPEN_PAREN);
      setState(1776);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1778);
      name_or_attr(0);
      setState(1779);
      match(FandangoParser::OPEN_PAREN);
      setState(1780);
      positional_patterns();
      setState(1782);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1781);
        match(FandangoParser::COMMA);
      }
      setState(1784);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1786);
      name_or_attr(0);
      setState(1787);
      match(FandangoParser::OPEN_PAREN);
      setState(1788);
      keyword_patterns();
      setState(1790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1789);
        match(FandangoParser::COMMA);
      }
      setState(1792);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1794);
      name_or_attr(0);
      setState(1795);
      match(FandangoParser::OPEN_PAREN);
      setState(1796);
      positional_patterns();
      setState(1797);
      match(FandangoParser::COMMA);
      setState(1798);
      keyword_patterns();
      setState(1800);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1799);
        match(FandangoParser::COMMA);
      }
      setState(1802);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_patternsContext ------------------------------------------------------------------

FandangoParser::Positional_patternsContext::Positional_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::PatternContext *> FandangoParser::Positional_patternsContext::pattern() {
  return getRuleContexts<FandangoParser::PatternContext>();
}

FandangoParser::PatternContext* FandangoParser::Positional_patternsContext::pattern(size_t i) {
  return getRuleContext<FandangoParser::PatternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Positional_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Positional_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Positional_patternsContext::getRuleIndex() const {
  return FandangoParser::RulePositional_patterns;
}


std::any FandangoParser::Positional_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPositional_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Positional_patternsContext* FandangoParser::positional_patterns() {
  Positional_patternsContext *_localctx = _tracker.createInstance<Positional_patternsContext>(_ctx, getState());
  enterRule(_localctx, 258, FandangoParser::RulePositional_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1806);
    pattern();
    setState(1811);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1807);
        match(FandangoParser::COMMA);
        setState(1808);
        pattern(); 
      }
      setState(1813);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternsContext ------------------------------------------------------------------

FandangoParser::Keyword_patternsContext::Keyword_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Keyword_patternContext *> FandangoParser::Keyword_patternsContext::keyword_pattern() {
  return getRuleContexts<FandangoParser::Keyword_patternContext>();
}

FandangoParser::Keyword_patternContext* FandangoParser::Keyword_patternsContext::keyword_pattern(size_t i) {
  return getRuleContext<FandangoParser::Keyword_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Keyword_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Keyword_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Keyword_patternsContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_patterns;
}


std::any FandangoParser::Keyword_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternsContext* FandangoParser::keyword_patterns() {
  Keyword_patternsContext *_localctx = _tracker.createInstance<Keyword_patternsContext>(_ctx, getState());
  enterRule(_localctx, 260, FandangoParser::RuleKeyword_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1814);
    keyword_pattern();
    setState(1819);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1815);
        match(FandangoParser::COMMA);
        setState(1816);
        keyword_pattern(); 
      }
      setState(1821);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternContext ------------------------------------------------------------------

FandangoParser::Keyword_patternContext::Keyword_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Keyword_patternContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Keyword_patternContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::PatternContext* FandangoParser::Keyword_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Keyword_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_pattern;
}


std::any FandangoParser::Keyword_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternContext* FandangoParser::keyword_pattern() {
  Keyword_patternContext *_localctx = _tracker.createInstance<Keyword_patternContext>(_ctx, getState());
  enterRule(_localctx, 262, FandangoParser::RuleKeyword_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1822);
    match(FandangoParser::NAME);
    setState(1823);
    match(FandangoParser::ASSIGN);
    setState(1824);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_aliasContext ------------------------------------------------------------------

FandangoParser::Type_aliasContext::Type_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_aliasContext::TYPE() {
  return getToken(FandangoParser::TYPE, 0);
}

tree::TerminalNode* FandangoParser::Type_aliasContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Type_aliasContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_aliasContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Type_aliasContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}


size_t FandangoParser::Type_aliasContext::getRuleIndex() const {
  return FandangoParser::RuleType_alias;
}


std::any FandangoParser::Type_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_alias(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_aliasContext* FandangoParser::type_alias() {
  Type_aliasContext *_localctx = _tracker.createInstance<Type_aliasContext>(_ctx, getState());
  enterRule(_localctx, 264, FandangoParser::RuleType_alias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1826);
    match(FandangoParser::TYPE);
    setState(1827);
    match(FandangoParser::NAME);
    setState(1829);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1828);
      type_params();
    }
    setState(1831);
    match(FandangoParser::ASSIGN);
    setState(1832);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramsContext ------------------------------------------------------------------

FandangoParser::Type_paramsContext::Type_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_paramsContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Type_param_seqContext* FandangoParser::Type_paramsContext::type_param_seq() {
  return getRuleContext<FandangoParser::Type_param_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramsContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Type_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleType_params;
}


std::any FandangoParser::Type_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramsContext* FandangoParser::type_params() {
  Type_paramsContext *_localctx = _tracker.createInstance<Type_paramsContext>(_ctx, getState());
  enterRule(_localctx, 266, FandangoParser::RuleType_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1834);
    match(FandangoParser::OPEN_BRACK);
    setState(1835);
    type_param_seq();
    setState(1836);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_seqContext ------------------------------------------------------------------

FandangoParser::Type_param_seqContext::Type_param_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Type_paramContext *> FandangoParser::Type_param_seqContext::type_param() {
  return getRuleContexts<FandangoParser::Type_paramContext>();
}

FandangoParser::Type_paramContext* FandangoParser::Type_param_seqContext::type_param(size_t i) {
  return getRuleContext<FandangoParser::Type_paramContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_param_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_param_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Type_param_seqContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_seq;
}


std::any FandangoParser::Type_param_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_seqContext* FandangoParser::type_param_seq() {
  Type_param_seqContext *_localctx = _tracker.createInstance<Type_param_seqContext>(_ctx, getState());
  enterRule(_localctx, 268, FandangoParser::RuleType_param_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1838);
    type_param();
    setState(1843);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1839);
        match(FandangoParser::COMMA);
        setState(1840);
        type_param(); 
      }
      setState(1845);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    }
    setState(1847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1846);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramContext ------------------------------------------------------------------

FandangoParser::Type_paramContext::Type_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_paramContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Type_param_boundContext* FandangoParser::Type_paramContext::type_param_bound() {
  return getRuleContext<FandangoParser::Type_param_boundContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_paramContext::getRuleIndex() const {
  return FandangoParser::RuleType_param;
}


std::any FandangoParser::Type_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramContext* FandangoParser::type_param() {
  Type_paramContext *_localctx = _tracker.createInstance<Type_paramContext>(_ctx, getState());
  enterRule(_localctx, 270, FandangoParser::RuleType_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1857);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1849);
        match(FandangoParser::NAME);
        setState(1851);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COLON) {
          setState(1850);
          type_param_bound();
        }
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(1853);
        match(FandangoParser::STAR);
        setState(1854);
        match(FandangoParser::NAME);
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 3);
        setState(1855);
        match(FandangoParser::POWER);
        setState(1856);
        match(FandangoParser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_boundContext ------------------------------------------------------------------

FandangoParser::Type_param_boundContext::Type_param_boundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_param_boundContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_param_boundContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Type_param_boundContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_bound;
}


std::any FandangoParser::Type_param_boundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_bound(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_boundContext* FandangoParser::type_param_bound() {
  Type_param_boundContext *_localctx = _tracker.createInstance<Type_param_boundContext>(_ctx, getState());
  enterRule(_localctx, 272, FandangoParser::RuleType_param_bound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1859);
    match(FandangoParser::COLON);
    setState(1860);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsContext ------------------------------------------------------------------

FandangoParser::ExpressionsContext::ExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::ExpressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ExpressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ExpressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::ExpressionsContext::getRuleIndex() const {
  return FandangoParser::RuleExpressions;
}


std::any FandangoParser::ExpressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionsContext* FandangoParser::expressions() {
  ExpressionsContext *_localctx = _tracker.createInstance<ExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 274, FandangoParser::RuleExpressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1862);
    expression();
    setState(1867);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1863);
        match(FandangoParser::COMMA);
        setState(1864);
        expression(); 
      }
      setState(1869);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    }
    setState(1871);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1870);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

FandangoParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::ExpressionContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::ExpressionContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::ExpressionContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExpressionContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::LambdefContext* FandangoParser::ExpressionContext::lambdef() {
  return getRuleContext<FandangoParser::LambdefContext>(0);
}


size_t FandangoParser::ExpressionContext::getRuleIndex() const {
  return FandangoParser::RuleExpression;
}


std::any FandangoParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionContext* FandangoParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 276, FandangoParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1881);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1873);
      disjunction();
      setState(1874);
      match(FandangoParser::IF);
      setState(1875);
      disjunction();
      setState(1876);
      match(FandangoParser::ELSE);
      setState(1877);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1879);
      disjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1880);
      lambdef();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_exprContext ------------------------------------------------------------------

FandangoParser::Yield_exprContext::Yield_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Yield_exprContext::YIELD() {
  return getToken(FandangoParser::YIELD, 0);
}

tree::TerminalNode* FandangoParser::Yield_exprContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Yield_exprContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Yield_exprContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Yield_exprContext::getRuleIndex() const {
  return FandangoParser::RuleYield_expr;
}


std::any FandangoParser::Yield_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_exprContext* FandangoParser::yield_expr() {
  Yield_exprContext *_localctx = _tracker.createInstance<Yield_exprContext>(_ctx, getState());
  enterRule(_localctx, 278, FandangoParser::RuleYield_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1890);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1883);
      match(FandangoParser::YIELD);
      setState(1884);
      match(FandangoParser::FROM);
      setState(1885);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1886);
      match(FandangoParser::YIELD);
      setState(1888);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
      case 1: {
        setState(1887);
        star_expressions();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_expressionsContext::Star_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_expressionContext *> FandangoParser::Star_expressionsContext::star_expression() {
  return getRuleContexts<FandangoParser::Star_expressionContext>();
}

FandangoParser::Star_expressionContext* FandangoParser::Star_expressionsContext::star_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expressions;
}


std::any FandangoParser::Star_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionsContext* FandangoParser::star_expressions() {
  Star_expressionsContext *_localctx = _tracker.createInstance<Star_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 280, FandangoParser::RuleStar_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1892);
    star_expression();
    setState(1897);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1893);
        match(FandangoParser::COMMA);
        setState(1894);
        star_expression(); 
      }
      setState(1899);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    }
    setState(1901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1900);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionContext ------------------------------------------------------------------

FandangoParser::Star_expressionContext::Star_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Star_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Star_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expression;
}


std::any FandangoParser::Star_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionContext* FandangoParser::star_expression() {
  Star_expressionContext *_localctx = _tracker.createInstance<Star_expressionContext>(_ctx, getState());
  enterRule(_localctx, 282, FandangoParser::RuleStar_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1906);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1903);
        match(FandangoParser::STAR);
        setState(1904);
        bitwise_or(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1905);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionsContext::Star_named_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_named_expressionContext *> FandangoParser::Star_named_expressionsContext::star_named_expression() {
  return getRuleContexts<FandangoParser::Star_named_expressionContext>();
}

FandangoParser::Star_named_expressionContext* FandangoParser::Star_named_expressionsContext::star_named_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_named_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_named_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_named_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expressions;
}


std::any FandangoParser::Star_named_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::star_named_expressions() {
  Star_named_expressionsContext *_localctx = _tracker.createInstance<Star_named_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 284, FandangoParser::RuleStar_named_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1908);
    star_named_expression();
    setState(1913);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1909);
        match(FandangoParser::COMMA);
        setState(1910);
        star_named_expression(); 
      }
      setState(1915);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx);
    }
    setState(1917);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1916);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionContext::Star_named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_named_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_named_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Star_named_expressionContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Star_named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expression;
}


std::any FandangoParser::Star_named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionContext* FandangoParser::star_named_expression() {
  Star_named_expressionContext *_localctx = _tracker.createInstance<Star_named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 286, FandangoParser::RuleStar_named_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1922);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1919);
        match(FandangoParser::STAR);
        setState(1920);
        bitwise_or(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1921);
        named_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_expressionContext ------------------------------------------------------------------

FandangoParser::Assignment_expressionContext::Assignment_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Assignment_expressionContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Assignment_expressionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Assignment_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Assignment_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment_expression;
}


std::any FandangoParser::Assignment_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assignment_expressionContext* FandangoParser::assignment_expression() {
  Assignment_expressionContext *_localctx = _tracker.createInstance<Assignment_expressionContext>(_ctx, getState());
  enterRule(_localctx, 288, FandangoParser::RuleAssignment_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1924);
    match(FandangoParser::NAME);
    setState(1925);
    match(FandangoParser::EXPR_ASSIGN);
    setState(1926);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_expressionContext ------------------------------------------------------------------

FandangoParser::Named_expressionContext::Named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Assignment_expressionContext* FandangoParser::Named_expressionContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Named_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleNamed_expression;
}


std::any FandangoParser::Named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNamed_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Named_expressionContext* FandangoParser::named_expression() {
  Named_expressionContext *_localctx = _tracker.createInstance<Named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 290, FandangoParser::RuleNamed_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1930);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1928);
      assignment_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1929);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjunctionContext ------------------------------------------------------------------

FandangoParser::DisjunctionContext::DisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConjunctionContext *> FandangoParser::DisjunctionContext::conjunction() {
  return getRuleContexts<FandangoParser::ConjunctionContext>();
}

FandangoParser::ConjunctionContext* FandangoParser::DisjunctionContext::conjunction(size_t i) {
  return getRuleContext<FandangoParser::ConjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DisjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::DisjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::DisjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleDisjunction;
}


std::any FandangoParser::DisjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDisjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DisjunctionContext* FandangoParser::disjunction() {
  DisjunctionContext *_localctx = _tracker.createInstance<DisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 292, FandangoParser::RuleDisjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1932);
    conjunction();
    setState(1937);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(1933);
      match(FandangoParser::OR);
      setState(1934);
      conjunction();
      setState(1939);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

FandangoParser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ConjunctionContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ConjunctionContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ConjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::ConjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::ConjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleConjunction;
}


std::any FandangoParser::ConjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConjunctionContext* FandangoParser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 294, FandangoParser::RuleConjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1940);
    inversion();
    setState(1945);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(1941);
      match(FandangoParser::AND);
      setState(1942);
      inversion();
      setState(1947);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InversionContext ------------------------------------------------------------------

FandangoParser::InversionContext::InversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::InversionContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::InversionContext* FandangoParser::InversionContext::inversion() {
  return getRuleContext<FandangoParser::InversionContext>(0);
}

FandangoParser::ComparisonContext* FandangoParser::InversionContext::comparison() {
  return getRuleContext<FandangoParser::ComparisonContext>(0);
}


size_t FandangoParser::InversionContext::getRuleIndex() const {
  return FandangoParser::RuleInversion;
}


std::any FandangoParser::InversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InversionContext* FandangoParser::inversion() {
  InversionContext *_localctx = _tracker.createInstance<InversionContext>(_ctx, getState());
  enterRule(_localctx, 296, FandangoParser::RuleInversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NOT: {
        enterOuterAlt(_localctx, 1);
        setState(1948);
        match(FandangoParser::NOT);
        setState(1949);
        inversion();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1950);
        comparison();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonContext ------------------------------------------------------------------

FandangoParser::ComparisonContext::ComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_orContext* FandangoParser::ComparisonContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

std::vector<FandangoParser::Compare_op_bitwise_or_pairContext *> FandangoParser::ComparisonContext::compare_op_bitwise_or_pair() {
  return getRuleContexts<FandangoParser::Compare_op_bitwise_or_pairContext>();
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::ComparisonContext::compare_op_bitwise_or_pair(size_t i) {
  return getRuleContext<FandangoParser::Compare_op_bitwise_or_pairContext>(i);
}


size_t FandangoParser::ComparisonContext::getRuleIndex() const {
  return FandangoParser::RuleComparison;
}


std::any FandangoParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ComparisonContext* FandangoParser::comparison() {
  ComparisonContext *_localctx = _tracker.createInstance<ComparisonContext>(_ctx, getState());
  enterRule(_localctx, 298, FandangoParser::RuleComparison);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1953);
    bitwise_or(0);
    setState(1957);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1954);
        compare_op_bitwise_or_pair(); 
      }
      setState(1959);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compare_op_bitwise_or_pairContext ------------------------------------------------------------------

FandangoParser::Compare_op_bitwise_or_pairContext::Compare_op_bitwise_or_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::eq_bitwise_or() {
  return getRuleContext<FandangoParser::Eq_bitwise_orContext>(0);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::noteq_bitwise_or() {
  return getRuleContext<FandangoParser::Noteq_bitwise_orContext>(0);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lte_bitwise_or() {
  return getRuleContext<FandangoParser::Lte_bitwise_orContext>(0);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lt_bitwise_or() {
  return getRuleContext<FandangoParser::Lt_bitwise_orContext>(0);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gte_bitwise_or() {
  return getRuleContext<FandangoParser::Gte_bitwise_orContext>(0);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gt_bitwise_or() {
  return getRuleContext<FandangoParser::Gt_bitwise_orContext>(0);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::notin_bitwise_or() {
  return getRuleContext<FandangoParser::Notin_bitwise_orContext>(0);
}

FandangoParser::In_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::in_bitwise_or() {
  return getRuleContext<FandangoParser::In_bitwise_orContext>(0);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::isnot_bitwise_or() {
  return getRuleContext<FandangoParser::Isnot_bitwise_orContext>(0);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::is_bitwise_or() {
  return getRuleContext<FandangoParser::Is_bitwise_orContext>(0);
}


size_t FandangoParser::Compare_op_bitwise_or_pairContext::getRuleIndex() const {
  return FandangoParser::RuleCompare_op_bitwise_or_pair;
}


std::any FandangoParser::Compare_op_bitwise_or_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompare_op_bitwise_or_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::compare_op_bitwise_or_pair() {
  Compare_op_bitwise_or_pairContext *_localctx = _tracker.createInstance<Compare_op_bitwise_or_pairContext>(_ctx, getState());
  enterRule(_localctx, 300, FandangoParser::RuleCompare_op_bitwise_or_pair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1970);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1960);
      eq_bitwise_or();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1961);
      noteq_bitwise_or();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1962);
      lte_bitwise_or();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1963);
      lt_bitwise_or();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1964);
      gte_bitwise_or();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1965);
      gt_bitwise_or();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1966);
      notin_bitwise_or();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1967);
      in_bitwise_or();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1968);
      isnot_bitwise_or();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1969);
      is_bitwise_or();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Eq_bitwise_orContext::Eq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Eq_bitwise_orContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Eq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Eq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleEq_bitwise_or;
}


std::any FandangoParser::Eq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::eq_bitwise_or() {
  Eq_bitwise_orContext *_localctx = _tracker.createInstance<Eq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 302, FandangoParser::RuleEq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1972);
    match(FandangoParser::EQUALS);
    setState(1973);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noteq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Noteq_bitwise_orContext::Noteq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Noteq_bitwise_orContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Noteq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Noteq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNoteq_bitwise_or;
}


std::any FandangoParser::Noteq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNoteq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::noteq_bitwise_or() {
  Noteq_bitwise_orContext *_localctx = _tracker.createInstance<Noteq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 304, FandangoParser::RuleNoteq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1975);
    match(FandangoParser::NOT_EQ_2);
    setState(1976);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lte_bitwise_orContext::Lte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lte_bitwise_orContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLte_bitwise_or;
}


std::any FandangoParser::Lte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::lte_bitwise_or() {
  Lte_bitwise_orContext *_localctx = _tracker.createInstance<Lte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 306, FandangoParser::RuleLte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1978);
    match(FandangoParser::LT_EQ);
    setState(1979);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lt_bitwise_orContext::Lt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lt_bitwise_orContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLt_bitwise_or;
}


std::any FandangoParser::Lt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::lt_bitwise_or() {
  Lt_bitwise_orContext *_localctx = _tracker.createInstance<Lt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 308, FandangoParser::RuleLt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1981);
    match(FandangoParser::LESS_THAN);
    setState(1982);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gte_bitwise_orContext::Gte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gte_bitwise_orContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGte_bitwise_or;
}


std::any FandangoParser::Gte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::gte_bitwise_or() {
  Gte_bitwise_orContext *_localctx = _tracker.createInstance<Gte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 310, FandangoParser::RuleGte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1984);
    match(FandangoParser::GT_EQ);
    setState(1985);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gt_bitwise_orContext::Gt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gt_bitwise_orContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGt_bitwise_or;
}


std::any FandangoParser::Gt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::gt_bitwise_or() {
  Gt_bitwise_orContext *_localctx = _tracker.createInstance<Gt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 312, FandangoParser::RuleGt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1987);
    match(FandangoParser::GREATER_THAN);
    setState(1988);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Notin_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Notin_bitwise_orContext::Notin_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Notin_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Notin_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNotin_bitwise_or;
}


std::any FandangoParser::Notin_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNotin_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::notin_bitwise_or() {
  Notin_bitwise_orContext *_localctx = _tracker.createInstance<Notin_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 314, FandangoParser::RuleNotin_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1990);
    match(FandangoParser::NOT);
    setState(1991);
    match(FandangoParser::IN);
    setState(1992);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- In_bitwise_orContext ------------------------------------------------------------------

FandangoParser::In_bitwise_orContext::In_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::In_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::In_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::In_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIn_bitwise_or;
}


std::any FandangoParser::In_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIn_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::In_bitwise_orContext* FandangoParser::in_bitwise_or() {
  In_bitwise_orContext *_localctx = _tracker.createInstance<In_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 316, FandangoParser::RuleIn_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1994);
    match(FandangoParser::IN);
    setState(1995);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Isnot_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Isnot_bitwise_orContext::Isnot_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Isnot_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Isnot_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIsnot_bitwise_or;
}


std::any FandangoParser::Isnot_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIsnot_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::isnot_bitwise_or() {
  Isnot_bitwise_orContext *_localctx = _tracker.createInstance<Isnot_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 318, FandangoParser::RuleIsnot_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1997);
    match(FandangoParser::IS);
    setState(1998);
    match(FandangoParser::NOT);
    setState(1999);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Is_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Is_bitwise_orContext::Is_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Is_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Is_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Is_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIs_bitwise_or;
}


std::any FandangoParser::Is_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIs_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::is_bitwise_or() {
  Is_bitwise_orContext *_localctx = _tracker.createInstance<Is_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 320, FandangoParser::RuleIs_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2001);
    match(FandangoParser::IS);
    setState(2002);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_orContext ------------------------------------------------------------------

FandangoParser::Bitwise_orContext::Bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_orContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_orContext::OR_OP() {
  return getToken(FandangoParser::OR_OP, 0);
}


size_t FandangoParser::Bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_or;
}


std::any FandangoParser::Bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_or(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or() {
   return bitwise_or(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_orContext *_localctx = _tracker.createInstance<Bitwise_orContext>(_ctx, parentState);
  FandangoParser::Bitwise_orContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 322;
  enterRecursionRule(_localctx, 322, FandangoParser::RuleBitwise_or, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2005);
    bitwise_xor(0);
    _ctx->stop = _input->LT(-1);
    setState(2012);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_orContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_or);
        setState(2007);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2008);
        match(FandangoParser::OR_OP);
        setState(2009);
        bitwise_xor(0); 
      }
      setState(2014);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_xorContext ------------------------------------------------------------------

FandangoParser::Bitwise_xorContext::Bitwise_xorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_xorContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_xorContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_xorContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Bitwise_xorContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_xor;
}


std::any FandangoParser::Bitwise_xorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_xor(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor() {
   return bitwise_xor(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_xorContext *_localctx = _tracker.createInstance<Bitwise_xorContext>(_ctx, parentState);
  FandangoParser::Bitwise_xorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 324;
  enterRecursionRule(_localctx, 324, FandangoParser::RuleBitwise_xor, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2016);
    bitwise_and(0);
    _ctx->stop = _input->LT(-1);
    setState(2023);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_xorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_xor);
        setState(2018);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2019);
        match(FandangoParser::XOR);
        setState(2020);
        bitwise_and(0); 
      }
      setState(2025);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_andContext ------------------------------------------------------------------

FandangoParser::Bitwise_andContext::Bitwise_andContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Shift_exprContext* FandangoParser::Bitwise_andContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_andContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_andContext::AND_OP() {
  return getToken(FandangoParser::AND_OP, 0);
}


size_t FandangoParser::Bitwise_andContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_and;
}


std::any FandangoParser::Bitwise_andContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_and(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and() {
   return bitwise_and(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_andContext *_localctx = _tracker.createInstance<Bitwise_andContext>(_ctx, parentState);
  FandangoParser::Bitwise_andContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 326;
  enterRecursionRule(_localctx, 326, FandangoParser::RuleBitwise_and, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2027);
    shift_expr(0);
    _ctx->stop = _input->LT(-1);
    setState(2034);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_andContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_and);
        setState(2029);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2030);
        match(FandangoParser::AND_OP);
        setState(2031);
        shift_expr(0); 
      }
      setState(2036);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Shift_exprContext ------------------------------------------------------------------

FandangoParser::Shift_exprContext::Shift_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SumContext* FandangoParser::Shift_exprContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

FandangoParser::Shift_exprContext* FandangoParser::Shift_exprContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::LEFT_SHIFT() {
  return getToken(FandangoParser::LEFT_SHIFT, 0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::RIGHT_SHIFT() {
  return getToken(FandangoParser::RIGHT_SHIFT, 0);
}


size_t FandangoParser::Shift_exprContext::getRuleIndex() const {
  return FandangoParser::RuleShift_expr;
}


std::any FandangoParser::Shift_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitShift_expr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Shift_exprContext* FandangoParser::shift_expr() {
   return shift_expr(0);
}

FandangoParser::Shift_exprContext* FandangoParser::shift_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Shift_exprContext *_localctx = _tracker.createInstance<Shift_exprContext>(_ctx, parentState);
  FandangoParser::Shift_exprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 328;
  enterRecursionRule(_localctx, 328, FandangoParser::RuleShift_expr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2038);
    sum(0);
    _ctx->stop = _input->LT(-1);
    setState(2048);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2046);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2040);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2041);
          match(FandangoParser::LEFT_SHIFT);
          setState(2042);
          sum(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2043);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2044);
          match(FandangoParser::RIGHT_SHIFT);
          setState(2045);
          sum(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2050);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SumContext ------------------------------------------------------------------

FandangoParser::SumContext::SumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::TermContext* FandangoParser::SumContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

FandangoParser::SumContext* FandangoParser::SumContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

tree::TerminalNode* FandangoParser::SumContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

tree::TerminalNode* FandangoParser::SumContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::SumContext::getRuleIndex() const {
  return FandangoParser::RuleSum;
}


std::any FandangoParser::SumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSum(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::SumContext* FandangoParser::sum() {
   return sum(0);
}

FandangoParser::SumContext* FandangoParser::sum(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::SumContext *_localctx = _tracker.createInstance<SumContext>(_ctx, parentState);
  FandangoParser::SumContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 330;
  enterRecursionRule(_localctx, 330, FandangoParser::RuleSum, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2052);
    term(0);
    _ctx->stop = _input->LT(-1);
    setState(2062);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2060);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2054);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2055);
          match(FandangoParser::ADD);
          setState(2056);
          term(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2057);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2058);
          match(FandangoParser::MINUS);
          setState(2059);
          term(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2064);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

FandangoParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::FactorContext* FandangoParser::TermContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

FandangoParser::TermContext* FandangoParser::TermContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

tree::TerminalNode* FandangoParser::TermContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::TermContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::IDIV() {
  return getToken(FandangoParser::IDIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::MOD() {
  return getToken(FandangoParser::MOD, 0);
}

tree::TerminalNode* FandangoParser::TermContext::AT() {
  return getToken(FandangoParser::AT, 0);
}


size_t FandangoParser::TermContext::getRuleIndex() const {
  return FandangoParser::RuleTerm;
}


std::any FandangoParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::TermContext* FandangoParser::term() {
   return term(0);
}

FandangoParser::TermContext* FandangoParser::term(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, parentState);
  FandangoParser::TermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 332;
  enterRecursionRule(_localctx, 332, FandangoParser::RuleTerm, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2066);
    factor();
    _ctx->stop = _input->LT(-1);
    setState(2085);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2083);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2068);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(2069);
          match(FandangoParser::STAR);
          setState(2070);
          factor();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2071);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2072);
          match(FandangoParser::DIV);
          setState(2073);
          factor();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2074);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2075);
          match(FandangoParser::IDIV);
          setState(2076);
          factor();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2077);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2078);
          match(FandangoParser::MOD);
          setState(2079);
          factor();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2080);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2081);
          match(FandangoParser::AT);
          setState(2082);
          factor();
          break;
        }

        default:
          break;
        } 
      }
      setState(2087);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

FandangoParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FactorContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::FactorContext* FandangoParser::FactorContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

tree::TerminalNode* FandangoParser::FactorContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}

tree::TerminalNode* FandangoParser::FactorContext::NOT_OP() {
  return getToken(FandangoParser::NOT_OP, 0);
}

FandangoParser::PowerContext* FandangoParser::FactorContext::power() {
  return getRuleContext<FandangoParser::PowerContext>(0);
}


size_t FandangoParser::FactorContext::getRuleIndex() const {
  return FandangoParser::RuleFactor;
}


std::any FandangoParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FactorContext* FandangoParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 334, FandangoParser::RuleFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2095);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ADD: {
        enterOuterAlt(_localctx, 1);
        setState(2088);
        match(FandangoParser::ADD);
        setState(2089);
        factor();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2090);
        match(FandangoParser::MINUS);
        setState(2091);
        factor();
        break;
      }

      case FandangoParser::NOT_OP: {
        enterOuterAlt(_localctx, 3);
        setState(2092);
        match(FandangoParser::NOT_OP);
        setState(2093);
        factor();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 4);
        setState(2094);
        power();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerContext ------------------------------------------------------------------

FandangoParser::PowerContext::PowerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Await_primaryContext* FandangoParser::PowerContext::await_primary() {
  return getRuleContext<FandangoParser::Await_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::PowerContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::FactorContext* FandangoParser::PowerContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}


size_t FandangoParser::PowerContext::getRuleIndex() const {
  return FandangoParser::RulePower;
}


std::any FandangoParser::PowerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPower(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PowerContext* FandangoParser::power() {
  PowerContext *_localctx = _tracker.createInstance<PowerContext>(_ctx, getState());
  enterRule(_localctx, 336, FandangoParser::RulePower);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2102);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2097);
      await_primary();
      setState(2098);
      match(FandangoParser::POWER);
      setState(2099);
      factor();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2101);
      await_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Await_primaryContext ------------------------------------------------------------------

FandangoParser::Await_primaryContext::Await_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Await_primaryContext::AWAIT() {
  return getToken(FandangoParser::AWAIT, 0);
}

FandangoParser::PrimaryContext* FandangoParser::Await_primaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}


size_t FandangoParser::Await_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleAwait_primary;
}


std::any FandangoParser::Await_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAwait_primary(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Await_primaryContext* FandangoParser::await_primary() {
  Await_primaryContext *_localctx = _tracker.createInstance<Await_primaryContext>(_ctx, getState());
  enterRule(_localctx, 338, FandangoParser::RuleAwait_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2107);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::AWAIT: {
        enterOuterAlt(_localctx, 1);
        setState(2104);
        match(FandangoParser::AWAIT);
        setState(2105);
        primary(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2106);
        primary(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

FandangoParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::PrimaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::PrimaryContext* FandangoParser::PrimaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::GenexpContext* FandangoParser::PrimaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::PrimaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::PrimaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::PrimaryContext::getRuleIndex() const {
  return FandangoParser::RulePrimary;
}


std::any FandangoParser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::PrimaryContext* FandangoParser::primary() {
   return primary(0);
}

FandangoParser::PrimaryContext* FandangoParser::primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, parentState);
  FandangoParser::PrimaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 340;
  enterRecursionRule(_localctx, 340, FandangoParser::RulePrimary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2110);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(2130);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2128);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2112);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2113);
          match(FandangoParser::DOT);
          setState(2114);
          match(FandangoParser::NAME);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2115);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2116);
          genexp();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2117);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2118);
          match(FandangoParser::OPEN_PAREN);
          setState(2120);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 9007199278008967) != 0)) {
            setState(2119);
            arguments();
          }
          setState(2122);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2123);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2124);
          match(FandangoParser::OPEN_BRACK);
          setState(2125);
          slices();
          setState(2126);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        default:
          break;
        } 
      }
      setState(2132);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SlicesContext ------------------------------------------------------------------

FandangoParser::SlicesContext::SlicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::SliceContext *> FandangoParser::SlicesContext::slice() {
  return getRuleContexts<FandangoParser::SliceContext>();
}

FandangoParser::SliceContext* FandangoParser::SlicesContext::slice(size_t i) {
  return getRuleContext<FandangoParser::SliceContext>(i);
}

std::vector<FandangoParser::Starred_expressionContext *> FandangoParser::SlicesContext::starred_expression() {
  return getRuleContexts<FandangoParser::Starred_expressionContext>();
}

FandangoParser::Starred_expressionContext* FandangoParser::SlicesContext::starred_expression(size_t i) {
  return getRuleContext<FandangoParser::Starred_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::SlicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::SlicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::SlicesContext::getRuleIndex() const {
  return FandangoParser::RuleSlices;
}


std::any FandangoParser::SlicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SlicesContext* FandangoParser::slices() {
  SlicesContext *_localctx = _tracker.createInstance<SlicesContext>(_ctx, getState());
  enterRule(_localctx, 342, FandangoParser::RuleSlices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2135);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::COLON:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        setState(2133);
        slice();
        break;
      }

      case FandangoParser::STAR: {
        setState(2134);
        starred_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2144);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2137);
        match(FandangoParser::COMMA);
        setState(2140);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FandangoParser::STRING:
          case FandangoParser::NUMBER:
          case FandangoParser::AWAIT:
          case FandangoParser::FALSE:
          case FandangoParser::LAMBDA:
          case FandangoParser::NONE:
          case FandangoParser::NOT:
          case FandangoParser::TRUE:
          case FandangoParser::NAME:
          case FandangoParser::ELLIPSIS:
          case FandangoParser::OPEN_PAREN:
          case FandangoParser::COLON:
          case FandangoParser::OPEN_BRACK:
          case FandangoParser::OR_OP:
          case FandangoParser::ADD:
          case FandangoParser::MINUS:
          case FandangoParser::NOT_OP:
          case FandangoParser::OPEN_BRACE:
          case FandangoParser::LESS_THAN:
          case FandangoParser::FSTRING_START: {
            setState(2138);
            slice();
            break;
          }

          case FandangoParser::STAR: {
            setState(2139);
            starred_expression();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2146);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx);
    }
    setState(2148);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2147);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SliceContext ------------------------------------------------------------------

FandangoParser::SliceContext::SliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::SliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::SliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::SliceContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::SliceContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

FandangoParser::Named_expressionContext* FandangoParser::SliceContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::SliceContext::getRuleIndex() const {
  return FandangoParser::RuleSlice;
}


std::any FandangoParser::SliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SliceContext* FandangoParser::slice() {
  SliceContext *_localctx = _tracker.createInstance<SliceContext>(_ctx, getState());
  enterRule(_localctx, 344, FandangoParser::RuleSlice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2164);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2151);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199278008837) != 0)) {
        setState(2150);
        expression();
      }
      setState(2153);
      match(FandangoParser::COLON);
      setState(2155);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199278008837) != 0)) {
        setState(2154);
        expression();
      }
      setState(2161);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(2157);
        match(FandangoParser::COLON);
        setState(2159);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 9007199278008837) != 0)) {
          setState(2158);
          expression();
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2163);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

FandangoParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::AtomContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

FandangoParser::StringsContext* FandangoParser::AtomContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::TupleContext* FandangoParser::AtomContext::tuple() {
  return getRuleContext<FandangoParser::TupleContext>(0);
}

FandangoParser::GroupContext* FandangoParser::AtomContext::group() {
  return getRuleContext<FandangoParser::GroupContext>(0);
}

FandangoParser::GenexpContext* FandangoParser::AtomContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

FandangoParser::ListContext* FandangoParser::AtomContext::list() {
  return getRuleContext<FandangoParser::ListContext>(0);
}

FandangoParser::ListcompContext* FandangoParser::AtomContext::listcomp() {
  return getRuleContext<FandangoParser::ListcompContext>(0);
}

FandangoParser::DictContext* FandangoParser::AtomContext::dict() {
  return getRuleContext<FandangoParser::DictContext>(0);
}

FandangoParser::SetContext* FandangoParser::AtomContext::set() {
  return getRuleContext<FandangoParser::SetContext>(0);
}

FandangoParser::DictcompContext* FandangoParser::AtomContext::dictcomp() {
  return getRuleContext<FandangoParser::DictcompContext>(0);
}

FandangoParser::SetcompContext* FandangoParser::AtomContext::setcomp() {
  return getRuleContext<FandangoParser::SetcompContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::ELLIPSIS() {
  return getToken(FandangoParser::ELLIPSIS, 0);
}


size_t FandangoParser::AtomContext::getRuleIndex() const {
  return FandangoParser::RuleAtom;
}


std::any FandangoParser::AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAtom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AtomContext* FandangoParser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 346, FandangoParser::RuleAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2189);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2166);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2167);
      match(FandangoParser::NAME);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2168);
      match(FandangoParser::TRUE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2169);
      match(FandangoParser::FALSE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2170);
      match(FandangoParser::NONE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2171);
      strings();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2172);
      match(FandangoParser::NUMBER);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2176);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
      case 1: {
        setState(2173);
        tuple();
        break;
      }

      case 2: {
        setState(2174);
        group();
        break;
      }

      case 3: {
        setState(2175);
        genexp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2180);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
      case 1: {
        setState(2178);
        list();
        break;
      }

      case 2: {
        setState(2179);
        listcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2186);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
      case 1: {
        setState(2182);
        dict();
        break;
      }

      case 2: {
        setState(2183);
        set();
        break;
      }

      case 3: {
        setState(2184);
        dictcomp();
        break;
      }

      case 4: {
        setState(2185);
        setcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2188);
      match(FandangoParser::ELLIPSIS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupContext ------------------------------------------------------------------

FandangoParser::GroupContext::GroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GroupContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::GroupContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::GroupContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::GroupContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GroupContext::getRuleIndex() const {
  return FandangoParser::RuleGroup;
}


std::any FandangoParser::GroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GroupContext* FandangoParser::group() {
  GroupContext *_localctx = _tracker.createInstance<GroupContext>(_ctx, getState());
  enterRule(_localctx, 348, FandangoParser::RuleGroup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2191);
    match(FandangoParser::OPEN_PAREN);
    setState(2194);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2192);
        yield_expr();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        setState(2193);
        named_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2196);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdefContext ------------------------------------------------------------------

FandangoParser::LambdefContext::LambdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::LambdefContext::LAMBDA() {
  return getToken(FandangoParser::LAMBDA, 0);
}

tree::TerminalNode* FandangoParser::LambdefContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::LambdefContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Lambda_paramsContext* FandangoParser::LambdefContext::lambda_params() {
  return getRuleContext<FandangoParser::Lambda_paramsContext>(0);
}


size_t FandangoParser::LambdefContext::getRuleIndex() const {
  return FandangoParser::RuleLambdef;
}


std::any FandangoParser::LambdefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambdef(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::LambdefContext* FandangoParser::lambdef() {
  LambdefContext *_localctx = _tracker.createInstance<LambdefContext>(_ctx, getState());
  enterRule(_localctx, 350, FandangoParser::RuleLambdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2198);
    match(FandangoParser::LAMBDA);
    setState(2200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 2129921) != 0)) {
      setState(2199);
      lambda_params();
    }
    setState(2202);
    match(FandangoParser::COLON);
    setState(2203);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramsContext ------------------------------------------------------------------

FandangoParser::Lambda_paramsContext::Lambda_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_parametersContext* FandangoParser::Lambda_paramsContext::lambda_parameters() {
  return getRuleContext<FandangoParser::Lambda_parametersContext>(0);
}


size_t FandangoParser::Lambda_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_params;
}


std::any FandangoParser::Lambda_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramsContext* FandangoParser::lambda_params() {
  Lambda_paramsContext *_localctx = _tracker.createInstance<Lambda_paramsContext>(_ctx, getState());
  enterRule(_localctx, 352, FandangoParser::RuleLambda_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2205);
    lambda_parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_parametersContext ------------------------------------------------------------------

FandangoParser::Lambda_parametersContext::Lambda_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_no_default() {
  return getRuleContext<FandangoParser::Lambda_slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::Lambda_parametersContext::lambda_star_etc() {
  return getRuleContext<FandangoParser::Lambda_star_etcContext>(0);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_with_default() {
  return getRuleContext<FandangoParser::Lambda_slash_with_defaultContext>(0);
}


size_t FandangoParser::Lambda_parametersContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_parameters;
}


std::any FandangoParser::Lambda_parametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_parameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_parametersContext* FandangoParser::lambda_parameters() {
  Lambda_parametersContext *_localctx = _tracker.createInstance<Lambda_parametersContext>(_ctx, getState());
  enterRule(_localctx, 354, FandangoParser::RuleLambda_parameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2256);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2207);
      lambda_slash_no_default();
      setState(2211);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2208);
          lambda_param_no_default(); 
        }
        setState(2213);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx);
      }
      setState(2217);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2214);
        lambda_param_with_default();
        setState(2219);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2221);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2220);
        lambda_star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2223);
      lambda_slash_with_default();
      setState(2227);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2224);
        lambda_param_with_default();
        setState(2229);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2231);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2230);
        lambda_star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2234); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2233);
                lambda_param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2236); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2241);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2238);
        lambda_param_with_default();
        setState(2243);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2245);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2244);
        lambda_star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2248); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2247);
        lambda_param_with_default();
        setState(2250); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(2253);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2252);
        lambda_star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2255);
      lambda_star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_no_defaultContext::Lambda_slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_no_default;
}


std::any FandangoParser::Lambda_slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::lambda_slash_no_default() {
  Lambda_slash_no_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 356, FandangoParser::RuleLambda_slash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2259); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2258);
      lambda_param_no_default();
      setState(2261); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(2263);
    match(FandangoParser::DIV);
    setState(2265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2264);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_with_defaultContext::Lambda_slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_with_default;
}


std::any FandangoParser::Lambda_slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::lambda_slash_with_default() {
  Lambda_slash_with_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 358, FandangoParser::RuleLambda_slash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2270);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2267);
        lambda_param_no_default(); 
      }
      setState(2272);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx);
    }
    setState(2274); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2273);
      lambda_param_with_default();
      setState(2276); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(2278);
    match(FandangoParser::DIV);
    setState(2280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2279);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_star_etcContext ------------------------------------------------------------------

FandangoParser::Lambda_star_etcContext::Lambda_star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_maybe_defaultContext *> FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default() {
  return getRuleContexts<FandangoParser::Lambda_param_maybe_defaultContext>();
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_maybe_defaultContext>(i);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::Lambda_star_etcContext::lambda_kwds() {
  return getRuleContext<FandangoParser::Lambda_kwdsContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_star_etc;
}


std::any FandangoParser::Lambda_star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_star_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::lambda_star_etc() {
  Lambda_star_etcContext *_localctx = _tracker.createInstance<Lambda_star_etcContext>(_ctx, getState());
  enterRule(_localctx, 360, FandangoParser::RuleLambda_star_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2304);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2282);
      match(FandangoParser::STAR);
      setState(2283);
      lambda_param_no_default();
      setState(2287);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2284);
        lambda_param_maybe_default();
        setState(2289);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2290);
        lambda_kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2293);
      match(FandangoParser::STAR);
      setState(2294);
      match(FandangoParser::COMMA);
      setState(2296); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2295);
        lambda_param_maybe_default();
        setState(2298); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(2301);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2300);
        lambda_kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2303);
      lambda_kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_kwdsContext ------------------------------------------------------------------

FandangoParser::Lambda_kwdsContext::Lambda_kwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_kwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_kwdsContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}


size_t FandangoParser::Lambda_kwdsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_kwds;
}


std::any FandangoParser::Lambda_kwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_kwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::lambda_kwds() {
  Lambda_kwdsContext *_localctx = _tracker.createInstance<Lambda_kwdsContext>(_ctx, getState());
  enterRule(_localctx, 362, FandangoParser::RuleLambda_kwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2306);
    match(FandangoParser::POWER);
    setState(2307);
    lambda_param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_no_defaultContext::Lambda_param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_no_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_no_default;
}


std::any FandangoParser::Lambda_param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::lambda_param_no_default() {
  Lambda_param_no_defaultContext *_localctx = _tracker.createInstance<Lambda_param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 364, FandangoParser::RuleLambda_param_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2309);
    lambda_param();
    setState(2311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2310);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_with_defaultContext::Lambda_param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_with_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_with_default;
}


std::any FandangoParser::Lambda_param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::lambda_param_with_default() {
  Lambda_param_with_defaultContext *_localctx = _tracker.createInstance<Lambda_param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 366, FandangoParser::RuleLambda_param_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2313);
    lambda_param();
    setState(2314);
    default_();
    setState(2316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2315);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_maybe_defaultContext::Lambda_param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_maybe_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_maybe_default;
}


std::any FandangoParser::Lambda_param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::lambda_param_maybe_default() {
  Lambda_param_maybe_defaultContext *_localctx = _tracker.createInstance<Lambda_param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 368, FandangoParser::RuleLambda_param_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2318);
    lambda_param();
    setState(2320);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2319);
      default_();
    }
    setState(2323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2322);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramContext ------------------------------------------------------------------

FandangoParser::Lambda_paramContext::Lambda_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_paramContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Lambda_paramContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param;
}


std::any FandangoParser::Lambda_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramContext* FandangoParser::lambda_param() {
  Lambda_paramContext *_localctx = _tracker.createInstance<Lambda_paramContext>(_ctx, getState());
  enterRule(_localctx, 370, FandangoParser::RuleLambda_param);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2325);
    match(FandangoParser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middleContext ------------------------------------------------------------------

FandangoParser::Fstring_middleContext::Fstring_middleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middleContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_middleContext::FSTRING_MIDDLE() {
  return getToken(FandangoParser::FSTRING_MIDDLE, 0);
}


size_t FandangoParser::Fstring_middleContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle;
}


std::any FandangoParser::Fstring_middleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middleContext* FandangoParser::fstring_middle() {
  Fstring_middleContext *_localctx = _tracker.createInstance<Fstring_middleContext>(_ctx, getState());
  enterRule(_localctx, 372, FandangoParser::RuleFstring_middle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2329);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(2327);
        fstring_replacement_field();
        break;
      }

      case FandangoParser::FSTRING_MIDDLE: {
        enterOuterAlt(_localctx, 2);
        setState(2328);
        match(FandangoParser::FSTRING_MIDDLE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_replacement_fieldContext ------------------------------------------------------------------

FandangoParser::Fstring_replacement_fieldContext::Fstring_replacement_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::Fstring_replacement_fieldContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Fstring_replacement_fieldContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::Fstring_conversionContext* FandangoParser::Fstring_replacement_fieldContext::fstring_conversion() {
  return getRuleContext<FandangoParser::Fstring_conversionContext>(0);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::Fstring_replacement_fieldContext::fstring_full_format_spec() {
  return getRuleContext<FandangoParser::Fstring_full_format_specContext>(0);
}


size_t FandangoParser::Fstring_replacement_fieldContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_replacement_field;
}


std::any FandangoParser::Fstring_replacement_fieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_replacement_field(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::fstring_replacement_field() {
  Fstring_replacement_fieldContext *_localctx = _tracker.createInstance<Fstring_replacement_fieldContext>(_ctx, getState());
  enterRule(_localctx, 374, FandangoParser::RuleFstring_replacement_field);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2331);
    match(FandangoParser::OPEN_BRACE);
    setState(2334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2332);
        yield_expr();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        setState(2333);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2337);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2336);
      match(FandangoParser::ASSIGN);
    }
    setState(2340);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx)) {
    case 1: {
      setState(2339);
      fstring_conversion();
      break;
    }

    default:
      break;
    }
    setState(2343);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(2342);
      fstring_full_format_spec();
    }
    setState(2345);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_conversionContext ------------------------------------------------------------------

FandangoParser::Fstring_conversionContext::Fstring_conversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_conversionContext::EXCL() {
  return getToken(FandangoParser::EXCL, 0);
}

tree::TerminalNode* FandangoParser::Fstring_conversionContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Fstring_conversionContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_conversion;
}


std::any FandangoParser::Fstring_conversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_conversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_conversionContext* FandangoParser::fstring_conversion() {
  Fstring_conversionContext *_localctx = _tracker.createInstance<Fstring_conversionContext>(_ctx, getState());
  enterRule(_localctx, 376, FandangoParser::RuleFstring_conversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2350);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::COLON:
      case FandangoParser::CLOSE_BRACE: {
        enterOuterAlt(_localctx, 1);

        break;
      }

      case FandangoParser::EXCL: {
        enterOuterAlt(_localctx, 2);
        setState(2348);
        match(FandangoParser::EXCL);
        setState(2349);
        match(FandangoParser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_full_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_full_format_specContext::Fstring_full_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_full_format_specContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

std::vector<FandangoParser::Fstring_format_specContext *> FandangoParser::Fstring_full_format_specContext::fstring_format_spec() {
  return getRuleContexts<FandangoParser::Fstring_format_specContext>();
}

FandangoParser::Fstring_format_specContext* FandangoParser::Fstring_full_format_specContext::fstring_format_spec(size_t i) {
  return getRuleContext<FandangoParser::Fstring_format_specContext>(i);
}


size_t FandangoParser::Fstring_full_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_full_format_spec;
}


std::any FandangoParser::Fstring_full_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_full_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::fstring_full_format_spec() {
  Fstring_full_format_specContext *_localctx = _tracker.createInstance<Fstring_full_format_specContext>(_ctx, getState());
  enterRule(_localctx, 378, FandangoParser::RuleFstring_full_format_spec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2352);
    match(FandangoParser::COLON);
    setState(2356);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OPEN_BRACE

    || _la == FandangoParser::FSTRING_MIDDLE) {
      setState(2353);
      fstring_format_spec();
      setState(2358);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_format_specContext::Fstring_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_format_specContext::FSTRING_MIDDLE() {
  return getToken(FandangoParser::FSTRING_MIDDLE, 0);
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_format_specContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}


size_t FandangoParser::Fstring_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_format_spec;
}


std::any FandangoParser::Fstring_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_format_specContext* FandangoParser::fstring_format_spec() {
  Fstring_format_specContext *_localctx = _tracker.createInstance<Fstring_format_specContext>(_ctx, getState());
  enterRule(_localctx, 380, FandangoParser::RuleFstring_format_spec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2361);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FSTRING_MIDDLE: {
        enterOuterAlt(_localctx, 1);
        setState(2359);
        match(FandangoParser::FSTRING_MIDDLE);
        break;
      }

      case FandangoParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(2360);
        fstring_replacement_field();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FstringContext ------------------------------------------------------------------

FandangoParser::FstringContext::FstringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START() {
  return getToken(FandangoParser::FSTRING_START, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END() {
  return getToken(FandangoParser::FSTRING_END, 0);
}

std::vector<FandangoParser::Fstring_middleContext *> FandangoParser::FstringContext::fstring_middle() {
  return getRuleContexts<FandangoParser::Fstring_middleContext>();
}

FandangoParser::Fstring_middleContext* FandangoParser::FstringContext::fstring_middle(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middleContext>(i);
}


size_t FandangoParser::FstringContext::getRuleIndex() const {
  return FandangoParser::RuleFstring;
}


std::any FandangoParser::FstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FstringContext* FandangoParser::fstring() {
  FstringContext *_localctx = _tracker.createInstance<FstringContext>(_ctx, getState());
  enterRule(_localctx, 382, FandangoParser::RuleFstring);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2363);
    match(FandangoParser::FSTRING_START);
    setState(2367);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OPEN_BRACE

    || _la == FandangoParser::FSTRING_MIDDLE) {
      setState(2364);
      fstring_middle();
      setState(2369);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2370);
    match(FandangoParser::FSTRING_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

FandangoParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::StringContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}


size_t FandangoParser::StringContext::getRuleIndex() const {
  return FandangoParser::RuleString;
}


std::any FandangoParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringContext* FandangoParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 384, FandangoParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2372);
    match(FandangoParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringsContext ------------------------------------------------------------------

FandangoParser::StringsContext::StringsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::FstringContext *> FandangoParser::StringsContext::fstring() {
  return getRuleContexts<FandangoParser::FstringContext>();
}

FandangoParser::FstringContext* FandangoParser::StringsContext::fstring(size_t i) {
  return getRuleContext<FandangoParser::FstringContext>(i);
}

std::vector<FandangoParser::StringContext *> FandangoParser::StringsContext::string() {
  return getRuleContexts<FandangoParser::StringContext>();
}

FandangoParser::StringContext* FandangoParser::StringsContext::string(size_t i) {
  return getRuleContext<FandangoParser::StringContext>(i);
}


size_t FandangoParser::StringsContext::getRuleIndex() const {
  return FandangoParser::RuleStrings;
}


std::any FandangoParser::StringsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStrings(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringsContext* FandangoParser::strings() {
  StringsContext *_localctx = _tracker.createInstance<StringsContext>(_ctx, getState());
  enterRule(_localctx, 386, FandangoParser::RuleStrings);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2376); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2376);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FandangoParser::FSTRING_START: {
                  setState(2374);
                  fstring();
                  break;
                }

                case FandangoParser::STRING: {
                  setState(2375);
                  string();
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2378); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListContext ------------------------------------------------------------------

FandangoParser::ListContext::ListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::ListContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::ListContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::ListContext::getRuleIndex() const {
  return FandangoParser::RuleList;
}


std::any FandangoParser::ListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitList(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListContext* FandangoParser::list() {
  ListContext *_localctx = _tracker.createInstance<ListContext>(_ctx, getState());
  enterRule(_localctx, 388, FandangoParser::RuleList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2380);
    match(FandangoParser::OPEN_BRACK);
    setState(2382);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007199278008839) != 0)) {
      setState(2381);
      star_named_expressions();
    }
    setState(2384);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleContext ------------------------------------------------------------------

FandangoParser::TupleContext::TupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::TupleContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::TupleContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_named_expressionContext* FandangoParser::TupleContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::TupleContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::TupleContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::TupleContext::getRuleIndex() const {
  return FandangoParser::RuleTuple;
}


std::any FandangoParser::TupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTuple(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::TupleContext* FandangoParser::tuple() {
  TupleContext *_localctx = _tracker.createInstance<TupleContext>(_ctx, getState());
  enterRule(_localctx, 390, FandangoParser::RuleTuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2386);
    match(FandangoParser::OPEN_PAREN);
    setState(2391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007199278008839) != 0)) {
      setState(2387);
      star_named_expression();
      setState(2388);
      match(FandangoParser::COMMA);

      setState(2389);
      star_named_expressions();
    }
    setState(2393);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetContext ------------------------------------------------------------------

FandangoParser::SetContext::SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::SetContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::SetContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetContext::getRuleIndex() const {
  return FandangoParser::RuleSet;
}


std::any FandangoParser::SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSet(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetContext* FandangoParser::set() {
  SetContext *_localctx = _tracker.createInstance<SetContext>(_ctx, getState());
  enterRule(_localctx, 392, FandangoParser::RuleSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2395);
    match(FandangoParser::OPEN_BRACE);
    setState(2396);
    star_named_expressions();
    setState(2397);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictContext ------------------------------------------------------------------

FandangoParser::DictContext::DictContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::DictContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::DictContext::double_starred_kvpairs() {
  return getRuleContext<FandangoParser::Double_starred_kvpairsContext>(0);
}


size_t FandangoParser::DictContext::getRuleIndex() const {
  return FandangoParser::RuleDict;
}


std::any FandangoParser::DictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDict(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictContext* FandangoParser::dict() {
  DictContext *_localctx = _tracker.createInstance<DictContext>(_ctx, getState());
  enterRule(_localctx, 394, FandangoParser::RuleDict);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2399);
    match(FandangoParser::OPEN_BRACE);
    setState(2401);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007199278008965) != 0)) {
      setState(2400);
      double_starred_kvpairs();
    }
    setState(2403);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairsContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairsContext::Double_starred_kvpairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Double_starred_kvpairContext *> FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair() {
  return getRuleContexts<FandangoParser::Double_starred_kvpairContext>();
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair(size_t i) {
  return getRuleContext<FandangoParser::Double_starred_kvpairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Double_starred_kvpairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Double_starred_kvpairsContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpairs;
}


std::any FandangoParser::Double_starred_kvpairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::double_starred_kvpairs() {
  Double_starred_kvpairsContext *_localctx = _tracker.createInstance<Double_starred_kvpairsContext>(_ctx, getState());
  enterRule(_localctx, 396, FandangoParser::RuleDouble_starred_kvpairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2405);
    double_starred_kvpair();
    setState(2410);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2406);
        match(FandangoParser::COMMA);
        setState(2407);
        double_starred_kvpair(); 
      }
      setState(2412);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    }
    setState(2414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2413);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairContext::Double_starred_kvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Double_starred_kvpairContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::KvpairContext* FandangoParser::Double_starred_kvpairContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}


size_t FandangoParser::Double_starred_kvpairContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpair;
}


std::any FandangoParser::Double_starred_kvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::double_starred_kvpair() {
  Double_starred_kvpairContext *_localctx = _tracker.createInstance<Double_starred_kvpairContext>(_ctx, getState());
  enterRule(_localctx, 398, FandangoParser::RuleDouble_starred_kvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2419);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 1);
        setState(2416);
        match(FandangoParser::POWER);
        setState(2417);
        bitwise_or(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2418);
        kvpair();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvpairContext ------------------------------------------------------------------

FandangoParser::KvpairContext::KvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::KvpairContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::KvpairContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::KvpairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}


size_t FandangoParser::KvpairContext::getRuleIndex() const {
  return FandangoParser::RuleKvpair;
}


std::any FandangoParser::KvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KvpairContext* FandangoParser::kvpair() {
  KvpairContext *_localctx = _tracker.createInstance<KvpairContext>(_ctx, getState());
  enterRule(_localctx, 400, FandangoParser::RuleKvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2421);
    expression();
    setState(2422);
    match(FandangoParser::COLON);
    setState(2423);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clausesContext ------------------------------------------------------------------

FandangoParser::For_if_clausesContext::For_if_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::For_if_clauseContext *> FandangoParser::For_if_clausesContext::for_if_clause() {
  return getRuleContexts<FandangoParser::For_if_clauseContext>();
}

FandangoParser::For_if_clauseContext* FandangoParser::For_if_clausesContext::for_if_clause(size_t i) {
  return getRuleContext<FandangoParser::For_if_clauseContext>(i);
}


size_t FandangoParser::For_if_clausesContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clauses;
}


std::any FandangoParser::For_if_clausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clauses(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clausesContext* FandangoParser::for_if_clauses() {
  For_if_clausesContext *_localctx = _tracker.createInstance<For_if_clausesContext>(_ctx, getState());
  enterRule(_localctx, 402, FandangoParser::RuleFor_if_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2426); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2425);
      for_if_clause();
      setState(2428); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::ASYNC

    || _la == FandangoParser::FOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clauseContext ------------------------------------------------------------------

FandangoParser::For_if_clauseContext::For_if_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_if_clauseContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::For_if_clauseContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::For_if_clauseContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::For_if_clauseContext::IF() {
  return getTokens(FandangoParser::IF);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IF(size_t i) {
  return getToken(FandangoParser::IF, i);
}


size_t FandangoParser::For_if_clauseContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clause;
}


std::any FandangoParser::For_if_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clause(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clauseContext* FandangoParser::for_if_clause() {
  For_if_clauseContext *_localctx = _tracker.createInstance<For_if_clauseContext>(_ctx, getState());
  enterRule(_localctx, 404, FandangoParser::RuleFor_if_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2431);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(2430);
      match(FandangoParser::ASYNC);
    }
    setState(2433);
    match(FandangoParser::FOR);
    setState(2434);
    star_targets();
    setState(2435);
    match(FandangoParser::IN);
    setState(2436);
    disjunction();
    setState(2441);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::IF) {
      setState(2437);
      match(FandangoParser::IF);
      setState(2438);
      disjunction();
      setState(2443);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListcompContext ------------------------------------------------------------------

FandangoParser::ListcompContext::ListcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListcompContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::ListcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::ListcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::ListcompContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::ListcompContext::getRuleIndex() const {
  return FandangoParser::RuleListcomp;
}


std::any FandangoParser::ListcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitListcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListcompContext* FandangoParser::listcomp() {
  ListcompContext *_localctx = _tracker.createInstance<ListcompContext>(_ctx, getState());
  enterRule(_localctx, 406, FandangoParser::RuleListcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2444);
    match(FandangoParser::OPEN_BRACK);
    setState(2445);
    named_expression();
    setState(2446);
    for_if_clauses();
    setState(2447);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetcompContext ------------------------------------------------------------------

FandangoParser::SetcompContext::SetcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::SetcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::SetcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::SetcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetcompContext::getRuleIndex() const {
  return FandangoParser::RuleSetcomp;
}


std::any FandangoParser::SetcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSetcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetcompContext* FandangoParser::setcomp() {
  SetcompContext *_localctx = _tracker.createInstance<SetcompContext>(_ctx, getState());
  enterRule(_localctx, 408, FandangoParser::RuleSetcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2449);
    match(FandangoParser::OPEN_BRACE);
    setState(2450);
    named_expression();
    setState(2451);
    for_if_clauses();
    setState(2452);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenexpContext ------------------------------------------------------------------

FandangoParser::GenexpContext::GenexpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GenexpContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::For_if_clausesContext* FandangoParser::GenexpContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::GenexpContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::GenexpContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::GenexpContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::GenexpContext::getRuleIndex() const {
  return FandangoParser::RuleGenexp;
}


std::any FandangoParser::GenexpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenexp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GenexpContext* FandangoParser::genexp() {
  GenexpContext *_localctx = _tracker.createInstance<GenexpContext>(_ctx, getState());
  enterRule(_localctx, 410, FandangoParser::RuleGenexp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2454);
    match(FandangoParser::OPEN_PAREN);
    setState(2457);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      setState(2455);
      assignment_expression();
      break;
    }

    case 2: {
      setState(2456);
      expression();
      break;
    }

    default:
      break;
    }
    setState(2459);
    for_if_clauses();
    setState(2460);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictcompContext ------------------------------------------------------------------

FandangoParser::DictcompContext::DictcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::KvpairContext* FandangoParser::DictcompContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::DictcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::DictcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::DictcompContext::getRuleIndex() const {
  return FandangoParser::RuleDictcomp;
}


std::any FandangoParser::DictcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDictcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictcompContext* FandangoParser::dictcomp() {
  DictcompContext *_localctx = _tracker.createInstance<DictcompContext>(_ctx, getState());
  enterRule(_localctx, 412, FandangoParser::RuleDictcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2462);
    match(FandangoParser::OPEN_BRACE);
    setState(2463);
    kvpair();
    setState(2464);
    for_if_clauses();
    setState(2465);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

FandangoParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ArgsContext* FandangoParser::ArgumentsContext::args() {
  return getRuleContext<FandangoParser::ArgsContext>(0);
}

tree::TerminalNode* FandangoParser::ArgumentsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::ArgumentsContext::getRuleIndex() const {
  return FandangoParser::RuleArguments;
}


std::any FandangoParser::ArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArguments(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgumentsContext* FandangoParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 414, FandangoParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2467);
    args();
    setState(2469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2468);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

FandangoParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ArgContext *> FandangoParser::ArgsContext::arg() {
  return getRuleContexts<FandangoParser::ArgContext>();
}

FandangoParser::ArgContext* FandangoParser::ArgsContext::arg(size_t i) {
  return getRuleContext<FandangoParser::ArgContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ArgsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ArgsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::KwargsContext* FandangoParser::ArgsContext::kwargs() {
  return getRuleContext<FandangoParser::KwargsContext>(0);
}


size_t FandangoParser::ArgsContext::getRuleIndex() const {
  return FandangoParser::RuleArgs;
}


std::any FandangoParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgsContext* FandangoParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 416, FandangoParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2484);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2471);
      arg();
      setState(2476);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2472);
          match(FandangoParser::COMMA);
          setState(2473);
          arg(); 
        }
        setState(2478);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
      }
      setState(2481);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
      case 1: {
        setState(2479);
        match(FandangoParser::COMMA);
        setState(2480);
        kwargs();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2483);
      kwargs();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

FandangoParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Starred_expressionContext* FandangoParser::ArgContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::ArgContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::ArgContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::ArgContext::getRuleIndex() const {
  return FandangoParser::RuleArg;
}


std::any FandangoParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgContext* FandangoParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 418, FandangoParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2489);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2486);
      starred_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2487);
      assignment_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2488);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwargsContext ------------------------------------------------------------------

FandangoParser::KwargsContext::KwargsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Kwarg_or_starredContext *> FandangoParser::KwargsContext::kwarg_or_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_starredContext>();
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::KwargsContext::kwarg_or_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_starredContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::KwargsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::KwargsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

std::vector<FandangoParser::Kwarg_or_double_starredContext *> FandangoParser::KwargsContext::kwarg_or_double_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_double_starredContext>();
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::KwargsContext::kwarg_or_double_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_double_starredContext>(i);
}


size_t FandangoParser::KwargsContext::getRuleIndex() const {
  return FandangoParser::RuleKwargs;
}


std::any FandangoParser::KwargsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwargs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwargsContext* FandangoParser::kwargs() {
  KwargsContext *_localctx = _tracker.createInstance<KwargsContext>(_ctx, getState());
  enterRule(_localctx, 420, FandangoParser::RuleKwargs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2524);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2491);
      kwarg_or_starred();
      setState(2496);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2492);
          match(FandangoParser::COMMA);
          setState(2493);
          kwarg_or_starred(); 
        }
        setState(2498);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
      }
      setState(2499);
      match(FandangoParser::COMMA);
      setState(2500);
      kwarg_or_double_starred();
      setState(2505);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2501);
          match(FandangoParser::COMMA);
          setState(2502);
          kwarg_or_double_starred(); 
        }
        setState(2507);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2508);
      kwarg_or_starred();
      setState(2513);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2509);
          match(FandangoParser::COMMA);
          setState(2510);
          kwarg_or_starred(); 
        }
        setState(2515);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2516);
      kwarg_or_double_starred();
      setState(2521);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2517);
          match(FandangoParser::COMMA);
          setState(2518);
          kwarg_or_double_starred(); 
        }
        setState(2523);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Starred_expressionContext ------------------------------------------------------------------

FandangoParser::Starred_expressionContext::Starred_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Starred_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Starred_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Starred_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStarred_expression;
}


std::any FandangoParser::Starred_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStarred_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Starred_expressionContext* FandangoParser::starred_expression() {
  Starred_expressionContext *_localctx = _tracker.createInstance<Starred_expressionContext>(_ctx, getState());
  enterRule(_localctx, 422, FandangoParser::RuleStarred_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2526);
    match(FandangoParser::STAR);
    setState(2527);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_starredContext::Kwarg_or_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Kwarg_or_starredContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Starred_expressionContext* FandangoParser::Kwarg_or_starredContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}


size_t FandangoParser::Kwarg_or_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_starred;
}


std::any FandangoParser::Kwarg_or_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::kwarg_or_starred() {
  Kwarg_or_starredContext *_localctx = _tracker.createInstance<Kwarg_or_starredContext>(_ctx, getState());
  enterRule(_localctx, 424, FandangoParser::RuleKwarg_or_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2533);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2529);
        match(FandangoParser::NAME);
        setState(2530);
        match(FandangoParser::ASSIGN);
        setState(2531);
        expression();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(2532);
        starred_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_double_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_double_starredContext::Kwarg_or_double_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_double_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Kwarg_or_double_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_double_starred;
}


std::any FandangoParser::Kwarg_or_double_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_double_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::kwarg_or_double_starred() {
  Kwarg_or_double_starredContext *_localctx = _tracker.createInstance<Kwarg_or_double_starredContext>(_ctx, getState());
  enterRule(_localctx, 426, FandangoParser::RuleKwarg_or_double_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2540);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2535);
        match(FandangoParser::NAME);
        setState(2536);
        match(FandangoParser::ASSIGN);
        setState(2537);
        expression();
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(2538);
        match(FandangoParser::POWER);
        setState(2539);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetsContext ------------------------------------------------------------------

FandangoParser::Star_targetsContext::Star_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targetsContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetsContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets;
}


std::any FandangoParser::Star_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetsContext* FandangoParser::star_targets() {
  Star_targetsContext *_localctx = _tracker.createInstance<Star_targetsContext>(_ctx, getState());
  enterRule(_localctx, 428, FandangoParser::RuleStar_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2542);
    star_target();
    setState(2547);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2543);
        match(FandangoParser::COMMA);
        setState(2544);
        star_target(); 
      }
      setState(2549);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx);
    }
    setState(2551);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2550);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_list_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_list_seqContext::Star_targets_list_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_list_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_list_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_list_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_list_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_list_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_list_seq;
}


std::any FandangoParser::Star_targets_list_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_list_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::star_targets_list_seq() {
  Star_targets_list_seqContext *_localctx = _tracker.createInstance<Star_targets_list_seqContext>(_ctx, getState());
  enterRule(_localctx, 430, FandangoParser::RuleStar_targets_list_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2553);
    star_target();
    setState(2558);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2554);
        match(FandangoParser::COMMA);
        setState(2555);
        star_target(); 
      }
      setState(2560);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    }
    setState(2562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2561);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_tuple_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_tuple_seqContext::Star_targets_tuple_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_tuple_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_tuple_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_tuple_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_tuple_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_tuple_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_tuple_seq;
}


std::any FandangoParser::Star_targets_tuple_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_tuple_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::star_targets_tuple_seq() {
  Star_targets_tuple_seqContext *_localctx = _tracker.createInstance<Star_targets_tuple_seqContext>(_ctx, getState());
  enterRule(_localctx, 432, FandangoParser::RuleStar_targets_tuple_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2577);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2564);
      star_target();
      setState(2567); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2565);
                match(FandangoParser::COMMA);
                setState(2566);
                star_target();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2569); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2572);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2571);
        match(FandangoParser::COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2574);
      star_target();
      setState(2575);
      match(FandangoParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetContext ------------------------------------------------------------------

FandangoParser::Star_targetContext::Star_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_targetContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_targetContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}


size_t FandangoParser::Star_targetContext::getRuleIndex() const {
  return FandangoParser::RuleStar_target;
}


std::any FandangoParser::Star_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetContext* FandangoParser::star_target() {
  Star_targetContext *_localctx = _tracker.createInstance<Star_targetContext>(_ctx, getState());
  enterRule(_localctx, 434, FandangoParser::RuleStar_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2582);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(2579);
        match(FandangoParser::STAR);
        setState(2580);
        star_target();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2581);
        target_with_star_atom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_with_star_atomContext ------------------------------------------------------------------

FandangoParser::Target_with_star_atomContext::Target_with_star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Target_with_star_atomContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Target_with_star_atomContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_atomContext* FandangoParser::Target_with_star_atomContext::star_atom() {
  return getRuleContext<FandangoParser::Star_atomContext>(0);
}


size_t FandangoParser::Target_with_star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleTarget_with_star_atom;
}


std::any FandangoParser::Target_with_star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTarget_with_star_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::target_with_star_atom() {
  Target_with_star_atomContext *_localctx = _tracker.createInstance<Target_with_star_atomContext>(_ctx, getState());
  enterRule(_localctx, 436, FandangoParser::RuleTarget_with_star_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2594);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2584);
      t_primary(0);
      setState(2585);
      match(FandangoParser::DOT);
      setState(2586);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2588);
      t_primary(0);
      setState(2589);
      match(FandangoParser::OPEN_BRACK);
      setState(2590);
      slices();
      setState(2591);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2593);
      star_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_atomContext ------------------------------------------------------------------

FandangoParser::Star_atomContext::Star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_atomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_atomContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::Star_atomContext::star_targets_tuple_seq() {
  return getRuleContext<FandangoParser::Star_targets_tuple_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::Star_atomContext::star_targets_list_seq() {
  return getRuleContext<FandangoParser::Star_targets_list_seqContext>(0);
}


size_t FandangoParser::Star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleStar_atom;
}


std::any FandangoParser::Star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_atomContext* FandangoParser::star_atom() {
  Star_atomContext *_localctx = _tracker.createInstance<Star_atomContext>(_ctx, getState());
  enterRule(_localctx, 438, FandangoParser::RuleStar_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2611);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2596);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2597);
      match(FandangoParser::OPEN_PAREN);
      setState(2598);
      target_with_star_atom();
      setState(2599);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2601);
      match(FandangoParser::OPEN_PAREN);
      setState(2603);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252907919441944) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199275715079) != 0)) {
        setState(2602);
        star_targets_tuple_seq();
      }
      setState(2605);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2606);
      match(FandangoParser::OPEN_BRACK);
      setState(2608);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2252907919441944) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007199275715079) != 0)) {
        setState(2607);
        star_targets_list_seq();
      }
      setState(2610);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_targetContext ------------------------------------------------------------------

FandangoParser::Single_targetContext::Single_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::Single_targetContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::Single_targetContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Single_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_target;
}


std::any FandangoParser::Single_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_targetContext* FandangoParser::single_target() {
  Single_targetContext *_localctx = _tracker.createInstance<Single_targetContext>(_ctx, getState());
  enterRule(_localctx, 440, FandangoParser::RuleSingle_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2619);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2613);
      single_subscript_attribute_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2614);
      match(FandangoParser::NAME);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2615);
      match(FandangoParser::OPEN_PAREN);
      setState(2616);
      single_target();
      setState(2617);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_subscript_attribute_targetContext ------------------------------------------------------------------

FandangoParser::Single_subscript_attribute_targetContext::Single_subscript_attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Single_subscript_attribute_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Single_subscript_attribute_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Single_subscript_attribute_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_subscript_attribute_target;
}


std::any FandangoParser::Single_subscript_attribute_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_subscript_attribute_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::single_subscript_attribute_target() {
  Single_subscript_attribute_targetContext *_localctx = _tracker.createInstance<Single_subscript_attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 442, FandangoParser::RuleSingle_subscript_attribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2630);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2621);
      t_primary(0);
      setState(2622);
      match(FandangoParser::DOT);
      setState(2623);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2625);
      t_primary(0);
      setState(2626);
      match(FandangoParser::OPEN_BRACK);
      setState(2627);
      slices();
      setState(2628);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- T_primaryContext ------------------------------------------------------------------

FandangoParser::T_primaryContext::T_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::T_primaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::T_primaryContext* FandangoParser::T_primaryContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::T_primaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::T_primaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::T_primaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::T_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleT_primary;
}


std::any FandangoParser::T_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitT_primary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::T_primaryContext* FandangoParser::t_primary() {
   return t_primary(0);
}

FandangoParser::T_primaryContext* FandangoParser::t_primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::T_primaryContext *_localctx = _tracker.createInstance<T_primaryContext>(_ctx, parentState);
  FandangoParser::T_primaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 444;
  enterRecursionRule(_localctx, 444, FandangoParser::RuleT_primary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2633);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(2653);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2651);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2635);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2636);
          match(FandangoParser::DOT);
          setState(2637);
          match(FandangoParser::NAME);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2638);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2639);
          match(FandangoParser::OPEN_BRACK);
          setState(2640);
          slices();
          setState(2641);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2643);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2644);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2645);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2646);
          match(FandangoParser::OPEN_PAREN);
          setState(2648);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 2252944426668056) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 9007199278008967) != 0)) {
            setState(2647);
            arguments();
          }
          setState(2650);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(2655);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Del_targetsContext ------------------------------------------------------------------

FandangoParser::Del_targetsContext::Del_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Del_targetContext *> FandangoParser::Del_targetsContext::del_target() {
  return getRuleContexts<FandangoParser::Del_targetContext>();
}

FandangoParser::Del_targetContext* FandangoParser::Del_targetsContext::del_target(size_t i) {
  return getRuleContext<FandangoParser::Del_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Del_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Del_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Del_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleDel_targets;
}


std::any FandangoParser::Del_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetsContext* FandangoParser::del_targets() {
  Del_targetsContext *_localctx = _tracker.createInstance<Del_targetsContext>(_ctx, getState());
  enterRule(_localctx, 446, FandangoParser::RuleDel_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2656);
    del_target();
    setState(2661);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2657);
        match(FandangoParser::COMMA);
        setState(2658);
        del_target(); 
      }
      setState(2663);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx);
    }
    setState(2665);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2664);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_targetContext ------------------------------------------------------------------

FandangoParser::Del_targetContext::Del_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Del_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Del_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Del_t_atomContext* FandangoParser::Del_targetContext::del_t_atom() {
  return getRuleContext<FandangoParser::Del_t_atomContext>(0);
}


size_t FandangoParser::Del_targetContext::getRuleIndex() const {
  return FandangoParser::RuleDel_target;
}


std::any FandangoParser::Del_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetContext* FandangoParser::del_target() {
  Del_targetContext *_localctx = _tracker.createInstance<Del_targetContext>(_ctx, getState());
  enterRule(_localctx, 448, FandangoParser::RuleDel_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2677);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2667);
      t_primary(0);
      setState(2668);
      match(FandangoParser::DOT);
      setState(2669);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2671);
      t_primary(0);
      setState(2672);
      match(FandangoParser::OPEN_BRACK);
      setState(2673);
      slices();
      setState(2674);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2676);
      del_t_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_t_atomContext ------------------------------------------------------------------

FandangoParser::Del_t_atomContext::Del_t_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_t_atomContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Del_t_atomContext::getRuleIndex() const {
  return FandangoParser::RuleDel_t_atom;
}


std::any FandangoParser::Del_t_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_t_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_t_atomContext* FandangoParser::del_t_atom() {
  Del_t_atomContext *_localctx = _tracker.createInstance<Del_t_atomContext>(_ctx, getState());
  enterRule(_localctx, 450, FandangoParser::RuleDel_t_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2690);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2679);
        match(FandangoParser::NAME);
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2680);
        match(FandangoParser::OPEN_PAREN);
        setState(2682);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2252907919441944) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 9007199275715077) != 0)) {
          setState(2681);
          del_targets();
        }
        setState(2684);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 3);
        setState(2685);
        match(FandangoParser::OPEN_BRACK);
        setState(2687);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2252907919441944) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 9007199275715077) != 0)) {
          setState(2686);
          del_targets();
        }
        setState(2689);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_expressionsContext ------------------------------------------------------------------

FandangoParser::Type_expressionsContext::Type_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Type_expressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Type_expressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleType_expressions;
}


std::any FandangoParser::Type_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_expressionsContext* FandangoParser::type_expressions() {
  Type_expressionsContext *_localctx = _tracker.createInstance<Type_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 452, FandangoParser::RuleType_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2749);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2692);
      expression();
      setState(2697);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2693);
          match(FandangoParser::COMMA);
          setState(2694);
          expression(); 
        }
        setState(2699);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx);
      }
      setState(2700);
      match(FandangoParser::COMMA);
      setState(2701);
      match(FandangoParser::STAR);
      setState(2702);
      expression();
      setState(2703);
      match(FandangoParser::COMMA);
      setState(2704);
      match(FandangoParser::POWER);
      setState(2705);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2707);
      expression();
      setState(2712);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2708);
          match(FandangoParser::COMMA);
          setState(2709);
          expression(); 
        }
        setState(2714);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
      }
      setState(2715);
      match(FandangoParser::COMMA);
      setState(2716);
      match(FandangoParser::STAR);
      setState(2717);
      expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2719);
      expression();
      setState(2724);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2720);
          match(FandangoParser::COMMA);
          setState(2721);
          expression(); 
        }
        setState(2726);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
      }
      setState(2727);
      match(FandangoParser::COMMA);
      setState(2728);
      match(FandangoParser::POWER);
      setState(2729);
      expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2731);
      match(FandangoParser::STAR);
      setState(2732);
      expression();
      setState(2733);
      match(FandangoParser::COMMA);
      setState(2734);
      match(FandangoParser::POWER);
      setState(2735);
      expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2737);
      match(FandangoParser::STAR);
      setState(2738);
      expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2739);
      match(FandangoParser::POWER);
      setState(2740);
      expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2741);
      expression();
      setState(2746);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(2742);
        match(FandangoParser::COMMA);
        setState(2743);
        expression();
        setState(2748);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_type_commentContext ------------------------------------------------------------------

FandangoParser::Func_type_commentContext::Func_type_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_type_commentContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}


size_t FandangoParser::Func_type_commentContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type_comment;
}


std::any FandangoParser::Func_type_commentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type_comment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_type_commentContext* FandangoParser::func_type_comment() {
  Func_type_commentContext *_localctx = _tracker.createInstance<Func_type_commentContext>(_ctx, getState());
  enterRule(_localctx, 454, FandangoParser::RuleFunc_type_comment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2751);
    match(FandangoParser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool FandangoParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 15: return generator_callSempred(antlrcpp::downCast<Generator_callContext *>(context), predicateIndex);
    case 26: return selectorSempred(antlrcpp::downCast<SelectorContext *>(context), predicateIndex);
    case 63: return dotted_nameSempred(antlrcpp::downCast<Dotted_nameContext *>(context), predicateIndex);
    case 117: return name_or_attrSempred(antlrcpp::downCast<Name_or_attrContext *>(context), predicateIndex);
    case 161: return bitwise_orSempred(antlrcpp::downCast<Bitwise_orContext *>(context), predicateIndex);
    case 162: return bitwise_xorSempred(antlrcpp::downCast<Bitwise_xorContext *>(context), predicateIndex);
    case 163: return bitwise_andSempred(antlrcpp::downCast<Bitwise_andContext *>(context), predicateIndex);
    case 164: return shift_exprSempred(antlrcpp::downCast<Shift_exprContext *>(context), predicateIndex);
    case 165: return sumSempred(antlrcpp::downCast<SumContext *>(context), predicateIndex);
    case 166: return termSempred(antlrcpp::downCast<TermContext *>(context), predicateIndex);
    case 170: return primarySempred(antlrcpp::downCast<PrimaryContext *>(context), predicateIndex);
    case 222: return t_primarySempred(antlrcpp::downCast<T_primaryContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool FandangoParser::generator_callSempred(Generator_callContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);
    case 1: return precpred(_ctx, 3);
    case 2: return precpred(_ctx, 2);
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::selectorSempred(SelectorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::dotted_nameSempred(Dotted_nameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::name_or_attrSempred(Name_or_attrContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_orSempred(Bitwise_orContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_xorSempred(Bitwise_xorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_andSempred(Bitwise_andContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::shift_exprSempred(Shift_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 3);
    case 12: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::sumSempred(SumContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::termSempred(TermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 6);
    case 16: return precpred(_ctx, 5);
    case 17: return precpred(_ctx, 4);
    case 18: return precpred(_ctx, 3);
    case 19: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::primarySempred(PrimaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 5);
    case 21: return precpred(_ctx, 4);
    case 22: return precpred(_ctx, 3);
    case 23: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::t_primarySempred(T_primaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 24: return precpred(_ctx, 5);
    case 25: return precpred(_ctx, 4);
    case 26: return precpred(_ctx, 3);
    case 27: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void FandangoParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fandangoparserParserInitialize();
#else
  ::antlr4::internal::call_once(fandangoparserParserOnceFlag, fandangoparserParserInitialize);
#endif
}
