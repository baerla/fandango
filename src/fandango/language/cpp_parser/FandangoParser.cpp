
// Generated from language/FandangoParser.g4 by ANTLR 4.13.2


#include "FandangoParserVisitor.h"

#include "FandangoParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct FandangoParserStaticData final {
  FandangoParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FandangoParserStaticData(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData(FandangoParserStaticData&&) = delete;
  FandangoParserStaticData& operator=(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData& operator=(FandangoParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fandangoparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<FandangoParserStaticData> fandangoparserParserStaticData = nullptr;

void fandangoparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fandangoparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(fandangoparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FandangoParserStaticData>(
    std::vector<std::string>{
      "fandango", "program", "statement", "production", "alternative", "concatenation", 
      "operator", "kleene", "plus", "option", "repeat", "symbol", "generator_call", 
      "char_set", "constraint", "implies", "quantifier", "formula_disjunction", 
      "formula_conjunction", "formula_atom", "formula_comparison", "expr", 
      "selector_length", "selector", "selection", "base_selection", "rs_pairs", 
      "rs_pair", "rs_slices", "rs_slice", "python", "python_tag", "python_file", 
      "interactive", "eval", "func_type", "statements", "stmt", "statement_newline", 
      "simple_stmts", "simple_stmt", "compound_stmt", "assignment", "annotated_rhs", 
      "augassign", "return_stmt", "raise_stmt", "global_stmt", "nonlocal_stmt", 
      "del_stmt", "yield_stmt", "assert_stmt", "import_stmt", "import_name", 
      "import_from", "import_from_targets", "import_from_as_names", "import_from_as_name", 
      "dotted_as_names", "dotted_as_name", "dotted_name", "block", "decorators", 
      "class_def", "class_def_raw", "function_def", "function_def_raw", 
      "params", "parameters", "slash_no_default", "slash_with_default", 
      "star_etc", "kwds", "param_no_default", "param_no_default_star_annotation", 
      "param_with_default", "param_maybe_default", "param", "param_star_annotation", 
      "annotation", "star_annotation", "default", "if_stmt", "elif_stmt", 
      "else_block", "while_stmt", "for_stmt", "with_stmt", "with_item", 
      "try_stmt", "except_block", "except_star_block", "finally_block", 
      "match_stmt", "subject_expr", "case_block", "guard", "patterns", "pattern", 
      "as_pattern", "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
      "complex_number", "signed_number", "signed_real_number", "real_number", 
      "imaginary_number", "capture_pattern", "pattern_capture_target", "wildcard_pattern", 
      "value_pattern", "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
      "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
      "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
      "double_star_pattern", "class_pattern", "positional_patterns", "keyword_patterns", 
      "keyword_pattern", "type_alias", "type_params", "type_param_seq", 
      "type_param", "type_param_bound", "expressions", "expression", "yield_expr", 
      "star_expressions", "star_expression", "star_named_expressions", "star_named_expression", 
      "assignment_expression", "named_expression", "disjunction", "conjunction", 
      "inversion", "comparison", "compare_op_bitwise_or_pair", "eq_bitwise_or", 
      "noteq_bitwise_or", "lte_bitwise_or", "lt_bitwise_or", "gte_bitwise_or", 
      "gt_bitwise_or", "notin_bitwise_or", "in_bitwise_or", "isnot_bitwise_or", 
      "is_bitwise_or", "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", 
      "sum", "term", "factor", "power", "await_primary", "primary", "slices", 
      "slice", "atom", "group", "lambdef", "lambda_params", "lambda_parameters", 
      "lambda_slash_no_default", "lambda_slash_with_default", "lambda_star_etc", 
      "lambda_kwds", "lambda_param_no_default", "lambda_param_with_default", 
      "lambda_param_maybe_default", "lambda_param", "fstring_middle", "fstring_replacement_field", 
      "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
      "fstring", "string", "strings", "list", "tuple", "set", "dict", "double_starred_kvpairs", 
      "double_starred_kvpair", "kvpair", "for_if_clauses", "for_if_clause", 
      "listcomp", "setcomp", "genexp", "dictcomp", "arguments", "args", 
      "arg", "kwargs", "starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", 
      "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
      "star_target", "target_with_star_atom", "star_atom", "single_target", 
      "single_subscript_attribute_target", "t_primary", "del_targets", "del_target", 
      "del_t_atom", "type_expressions", "func_type_comment"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "'<py>'", "'</py>'", "", "'and'", "'as'", 
      "'assert'", "'async'", "'await'", "'break'", "'case'", "'class'", 
      "'continue'", "'def'", "'del'", "'elif'", "'else'", "'except'", "'False'", 
      "'finally'", "'for'", "'from'", "'global'", "'if'", "'import'", "'in'", 
      "'is'", "'lambda'", "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
      "'pass'", "'raise'", "'return'", "'True'", "'try'", "'type'", "'_'", 
      "'while'", "'where'", "'with'", "'yield'", "'forall'", "'exists'", 
      "'maximizing'", "'minimizing'", "", "", "", "", "", "", "", "", "", 
      "'::='", "'\\u003F'", "'\\'", "'.'", "'..'", "'...'", "'*'", "'('", 
      "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", 
      "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
      "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
      "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", 
      "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='", "':='", "'!'"
    },
    std::vector<std::string>{
      "", "INDENT", "DEDENT", "STRING", "NUMBER", "INTEGER", "PYTHON_START", 
      "PYTHON_END", "NONTERMINAL", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", 
      "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", "DEL", "ELIF", "ELSE", 
      "EXCEPT", "FALSE", "FINALLY", "FOR", "FROM", "GLOBAL", "IF", "IMPORT", 
      "IN", "IS", "LAMBDA", "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", 
      "RAISE", "RETURN", "TRUE", "TRY", "TYPE", "UNDERSCORE", "WHILE", "WHERE", 
      "WITH", "YIELD", "FORALL", "EXISTS", "MAXIMIZING", "MINIMIZING", "NAME", 
      "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "GRAMMAR_ASSIGN", 
      "QUESTION", "BACKSLASH", "DOT", "DOTDOT", "ELLIPSIS", "STAR", "OPEN_PAREN", 
      "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", 
      "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
      "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
      "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
      "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
      "POWER_ASSIGN", "IDIV_ASSIGN", "EXPR_ASSIGN", "EXCL", "NEWLINE", "SKIP_", 
      "UNKNOWN_CHAR", "FSTRING_MIDDLE", "FSTRING_START", "FSTRING_END"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,120,2733,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,1,0,1,0,1,0,1,1,5,1,455,8,1,10,1,12,1,458,9,1,1,1,1,1,5,1,462,8,
  	1,10,1,12,1,465,9,1,5,1,467,8,1,10,1,12,1,470,9,1,1,2,1,2,1,2,3,2,475,
  	8,2,1,3,1,3,1,3,1,3,1,3,3,3,482,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,491,
  	8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,501,8,3,1,3,1,3,3,3,505,8,3,1,
  	4,1,4,1,4,5,4,510,8,4,10,4,12,4,513,9,4,1,5,1,5,5,5,517,8,5,10,5,12,5,
  	520,9,5,1,6,1,6,1,6,1,6,1,6,3,6,527,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
  	9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,546,8,10,1,10,1,10,
  	3,10,550,8,10,1,10,1,10,3,10,554,8,10,1,11,5,11,557,8,11,10,11,12,11,
  	560,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,571,8,11,1,
  	11,5,11,574,8,11,10,11,12,11,577,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,595,8,12,1,12,5,
  	12,598,8,12,10,12,12,12,601,9,12,1,13,1,13,3,13,605,8,13,1,13,1,13,1,
  	13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,3,14,625,8,14,1,15,5,15,628,8,15,10,15,12,15,631,9,15,1,15,1,
  	15,1,15,1,15,1,15,3,15,638,8,15,1,15,5,15,641,8,15,10,15,12,15,644,9,
  	15,1,16,5,16,647,8,16,10,16,12,16,650,9,16,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,667,8,16,1,16,5,
  	16,670,8,16,10,16,12,16,673,9,16,1,17,5,17,676,8,17,10,17,12,17,679,9,
  	17,1,17,1,17,1,17,5,17,684,8,17,10,17,12,17,687,9,17,1,17,5,17,690,8,
  	17,10,17,12,17,693,9,17,1,18,5,18,696,8,18,10,18,12,18,699,9,18,1,18,
  	1,18,1,18,5,18,704,8,18,10,18,12,18,707,9,18,1,18,5,18,710,8,18,10,18,
  	12,18,713,9,18,1,19,5,19,716,8,19,10,19,12,19,719,9,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,3,19,727,8,19,1,19,5,19,730,8,19,10,19,12,19,733,9,19,
  	1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,747,
  	8,21,1,22,1,22,1,22,1,22,1,22,3,22,754,8,22,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,5,23,765,8,23,10,23,12,23,768,9,23,1,24,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,781,8,24,1,25,1,25,1,25,
  	1,25,1,25,3,25,788,8,25,1,26,1,26,1,26,5,26,793,8,26,10,26,12,26,796,
  	9,26,1,26,3,26,799,8,26,1,27,1,27,1,27,1,27,3,27,805,8,27,1,28,1,28,1,
  	28,5,28,810,8,28,10,28,12,28,813,9,28,1,28,3,28,816,8,28,1,29,1,29,3,
  	29,820,8,29,1,29,1,29,3,29,824,8,29,1,29,3,29,827,8,29,1,29,1,29,3,29,
  	831,8,29,1,29,1,29,3,29,835,8,29,3,29,837,8,29,1,30,1,30,3,30,841,8,30,
  	1,31,5,31,844,8,31,10,31,12,31,847,9,31,1,31,1,31,5,31,851,8,31,10,31,
  	12,31,854,9,31,1,32,3,32,857,8,32,1,32,3,32,860,8,32,1,33,1,33,1,34,1,
  	34,5,34,866,8,34,10,34,12,34,869,9,34,1,34,3,34,872,8,34,1,35,1,35,3,
  	35,876,8,35,1,35,1,35,1,35,1,35,5,35,882,8,35,10,35,12,35,885,9,35,1,
  	35,3,35,888,8,35,1,36,1,36,4,36,892,8,36,11,36,12,36,893,1,37,1,37,3,
  	37,898,8,37,1,38,1,38,1,38,1,38,1,38,3,38,905,8,38,1,39,1,39,1,39,5,39,
  	910,8,39,10,39,12,39,913,9,39,1,39,3,39,916,8,39,1,39,4,39,919,8,39,11,
  	39,12,39,920,1,39,5,39,924,8,39,10,39,12,39,927,9,39,1,39,3,39,930,8,
  	39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
  	40,3,40,946,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,956,8,41,
  	1,42,1,42,1,42,1,42,1,42,3,42,963,8,42,1,42,1,42,1,42,1,42,1,42,3,42,
  	970,8,42,1,42,1,42,1,42,1,42,3,42,976,8,42,1,42,1,42,1,42,4,42,981,8,
  	42,11,42,12,42,982,1,42,1,42,3,42,987,8,42,1,42,1,42,1,42,1,42,3,42,993,
  	8,42,3,42,995,8,42,1,43,1,43,3,43,999,8,43,1,44,1,44,1,45,1,45,3,45,1005,
  	8,45,1,46,1,46,1,46,1,46,3,46,1011,8,46,1,46,3,46,1014,8,46,1,47,1,47,
  	1,47,1,47,5,47,1020,8,47,10,47,12,47,1023,9,47,1,48,1,48,1,48,1,48,5,
  	48,1029,8,48,10,48,12,48,1032,9,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,
  	1,51,1,51,3,51,1043,8,51,1,52,1,52,3,52,1047,8,52,1,53,1,53,1,53,1,54,
  	1,54,5,54,1054,8,54,10,54,12,54,1057,9,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,4,54,1065,8,54,11,54,12,54,1066,1,54,1,54,3,54,1071,8,54,1,55,1,55,
  	1,55,3,55,1076,8,55,1,55,1,55,1,55,1,55,3,55,1082,8,55,1,56,1,56,1,56,
  	5,56,1087,8,56,10,56,12,56,1090,9,56,1,57,1,57,1,57,3,57,1095,8,57,1,
  	58,1,58,1,58,5,58,1100,8,58,10,58,12,58,1103,9,58,1,59,1,59,1,59,3,59,
  	1108,8,59,1,60,1,60,1,60,1,60,1,60,1,60,5,60,1116,8,60,10,60,12,60,1119,
  	9,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1127,8,61,1,62,1,62,1,62,1,62,
  	4,62,1133,8,62,11,62,12,62,1134,1,63,3,63,1138,8,63,1,63,1,63,1,64,1,
  	64,1,64,3,64,1145,8,64,1,64,1,64,3,64,1149,8,64,1,64,3,64,1152,8,64,1,
  	64,1,64,1,64,1,65,3,65,1158,8,65,1,65,1,65,1,66,3,66,1163,8,66,1,66,1,
  	66,1,66,3,66,1168,8,66,1,66,1,66,3,66,1172,8,66,1,66,1,66,1,66,3,66,1177,
  	8,66,1,66,1,66,3,66,1181,8,66,1,66,1,66,1,67,1,67,1,68,1,68,5,68,1189,
  	8,68,10,68,12,68,1192,9,68,1,68,5,68,1195,8,68,10,68,12,68,1198,9,68,
  	1,68,3,68,1201,8,68,1,68,1,68,5,68,1205,8,68,10,68,12,68,1208,9,68,1,
  	68,3,68,1211,8,68,1,68,4,68,1214,8,68,11,68,12,68,1215,1,68,5,68,1219,
  	8,68,10,68,12,68,1222,9,68,1,68,3,68,1225,8,68,1,68,4,68,1228,8,68,11,
  	68,12,68,1229,1,68,3,68,1233,8,68,1,68,3,68,1236,8,68,1,69,4,69,1239,
  	8,69,11,69,12,69,1240,1,69,1,69,3,69,1245,8,69,1,70,5,70,1248,8,70,10,
  	70,12,70,1251,9,70,1,70,4,70,1254,8,70,11,70,12,70,1255,1,70,1,70,3,70,
  	1260,8,70,1,71,1,71,1,71,5,71,1265,8,71,10,71,12,71,1268,9,71,1,71,3,
  	71,1271,8,71,1,71,1,71,1,71,5,71,1276,8,71,10,71,12,71,1279,9,71,1,71,
  	3,71,1282,8,71,1,71,1,71,1,71,4,71,1287,8,71,11,71,12,71,1288,1,71,3,
  	71,1292,8,71,1,71,3,71,1295,8,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,3,
  	73,1304,8,73,1,74,1,74,1,74,1,74,3,74,1310,8,74,1,75,1,75,1,75,1,75,1,
  	75,1,75,1,75,3,75,1319,8,75,1,76,1,76,3,76,1323,8,76,1,76,1,76,1,76,1,
  	76,3,76,1329,8,76,3,76,1331,8,76,1,77,1,77,3,77,1335,8,77,1,78,1,78,1,
  	78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,
  	82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1360,8,82,3,82,1362,8,82,1,83,1,
  	83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1375,8,83,3,83,1377,
  	8,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,1388,8,85,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,3,86,1397,8,86,1,86,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,3,86,1407,8,86,3,86,1409,8,86,1,87,1,87,1,87,1,87,1,87,
  	5,87,1416,8,87,10,87,12,87,1419,9,87,1,87,3,87,1422,8,87,1,87,1,87,1,
  	87,1,87,1,87,1,87,1,87,1,87,5,87,1432,8,87,10,87,12,87,1435,9,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,1446,8,87,10,87,12,87,1449,
  	9,87,1,87,3,87,1452,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	5,87,1463,8,87,10,87,12,87,1466,9,87,1,87,1,87,1,87,3,87,1471,8,87,1,
  	88,1,88,1,88,1,88,1,88,3,88,1478,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,
  	89,1,89,1,89,4,89,1489,8,89,11,89,12,89,1490,1,89,3,89,1494,8,89,1,89,
  	3,89,1497,8,89,1,89,1,89,1,89,1,89,4,89,1503,8,89,11,89,12,89,1504,1,
  	89,3,89,1508,8,89,1,89,3,89,1511,8,89,3,89,1513,8,89,1,90,1,90,1,90,1,
  	90,3,90,1519,8,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1527,8,90,1,91,1,
  	91,1,91,1,91,1,91,3,91,1534,8,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,
  	93,1,93,1,93,1,93,1,93,1,93,4,93,1549,8,93,11,93,12,93,1550,1,93,1,93,
  	1,94,1,94,1,94,3,94,1558,8,94,1,94,3,94,1561,8,94,1,95,1,95,1,95,3,95,
  	1566,8,95,1,95,1,95,1,95,1,96,1,96,1,96,1,97,1,97,3,97,1576,8,97,1,98,
  	1,98,3,98,1580,8,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,5,100,1589,
  	8,100,10,100,12,100,1592,9,100,1,101,1,101,1,101,1,101,1,101,1,101,1,
  	101,1,101,3,101,1602,8,101,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
  	1610,8,102,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1618,8,103,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1628,8,104,1,105,1,105,
  	1,105,3,105,1633,8,105,1,106,1,106,1,106,3,106,1638,8,106,1,107,1,107,
  	1,108,1,108,1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,1,113,1,113,
  	1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,5,114,1662,8,114,10,114,
  	12,114,1665,9,114,1,115,1,115,1,115,1,115,1,116,1,116,3,116,1673,8,116,
  	1,116,1,116,1,116,3,116,1678,8,116,1,116,3,116,1681,8,116,1,117,1,117,
  	1,117,3,117,1686,8,117,1,118,1,118,1,118,5,118,1691,8,118,10,118,12,118,
  	1694,9,118,1,118,3,118,1697,8,118,1,119,1,119,3,119,1701,8,119,1,120,
  	1,120,1,120,1,120,3,120,1707,8,120,1,121,1,121,1,121,1,121,1,121,3,121,
  	1714,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,1723,8,121,
  	1,121,1,121,1,121,1,121,1,121,3,121,1730,8,121,1,121,1,121,3,121,1734,
  	8,121,1,122,1,122,1,122,5,122,1739,8,122,10,122,12,122,1742,9,122,1,123,
  	1,123,3,123,1746,8,123,1,123,1,123,1,123,1,124,1,124,1,124,1,125,1,125,
  	1,125,1,125,1,125,1,125,1,125,1,125,3,125,1762,8,125,1,125,1,125,1,125,
  	1,125,1,125,1,125,3,125,1770,8,125,1,125,1,125,1,125,1,125,1,125,1,125,
  	1,125,1,125,3,125,1780,8,125,1,125,1,125,3,125,1784,8,125,1,126,1,126,
  	1,126,5,126,1789,8,126,10,126,12,126,1792,9,126,1,127,1,127,1,127,5,127,
  	1797,8,127,10,127,12,127,1800,9,127,1,128,1,128,1,128,1,128,1,129,1,129,
  	1,129,3,129,1809,8,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,131,
  	1,131,1,131,5,131,1821,8,131,10,131,12,131,1824,9,131,1,131,3,131,1827,
  	8,131,1,132,1,132,3,132,1831,8,132,1,132,1,132,1,132,1,132,3,132,1837,
  	8,132,1,133,1,133,1,133,1,134,1,134,1,134,5,134,1845,8,134,10,134,12,
  	134,1848,9,134,1,134,3,134,1851,8,134,1,135,1,135,1,135,1,135,1,135,1,
  	135,1,135,1,135,3,135,1861,8,135,1,136,1,136,1,136,1,136,1,136,3,136,
  	1868,8,136,3,136,1870,8,136,1,137,1,137,1,137,5,137,1875,8,137,10,137,
  	12,137,1878,9,137,1,137,3,137,1881,8,137,1,138,1,138,1,138,3,138,1886,
  	8,138,1,139,1,139,1,139,5,139,1891,8,139,10,139,12,139,1894,9,139,1,139,
  	3,139,1897,8,139,1,140,1,140,1,140,3,140,1902,8,140,1,141,1,141,1,141,
  	1,141,1,142,1,142,3,142,1910,8,142,1,143,1,143,1,143,5,143,1915,8,143,
  	10,143,12,143,1918,9,143,1,144,1,144,1,144,5,144,1923,8,144,10,144,12,
  	144,1926,9,144,1,145,1,145,1,145,3,145,1931,8,145,1,146,1,146,5,146,1935,
  	8,146,10,146,12,146,1938,9,146,1,147,1,147,1,147,1,147,1,147,1,147,1,
  	147,1,147,1,147,1,147,3,147,1950,8,147,1,148,1,148,1,148,1,149,1,149,
  	1,149,1,150,1,150,1,150,1,151,1,151,1,151,1,152,1,152,1,152,1,153,1,153,
  	1,153,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,1,156,
  	1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,158,5,158,1990,8,158,
  	10,158,12,158,1993,9,158,1,159,1,159,1,159,1,159,1,159,1,159,5,159,2001,
  	8,159,10,159,12,159,2004,9,159,1,160,1,160,1,160,1,160,1,160,1,160,5,
  	160,2012,8,160,10,160,12,160,2015,9,160,1,161,1,161,1,161,1,161,1,161,
  	1,161,1,161,1,161,1,161,5,161,2026,8,161,10,161,12,161,2029,9,161,1,162,
  	1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,5,162,2040,8,162,10,162,
  	12,162,2043,9,162,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
  	1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,5,163,2063,8,163,
  	10,163,12,163,2066,9,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,
  	164,2075,8,164,1,165,1,165,1,165,1,165,1,165,3,165,2082,8,165,1,166,1,
  	166,1,166,3,166,2087,8,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
  	1,167,1,167,1,167,1,167,3,167,2100,8,167,1,167,1,167,1,167,1,167,1,167,
  	1,167,5,167,2108,8,167,10,167,12,167,2111,9,167,1,168,1,168,3,168,2115,
  	8,168,1,168,1,168,1,168,3,168,2120,8,168,5,168,2122,8,168,10,168,12,168,
  	2125,9,168,1,168,3,168,2128,8,168,1,169,3,169,2131,8,169,1,169,1,169,
  	3,169,2135,8,169,1,169,1,169,3,169,2139,8,169,3,169,2141,8,169,1,169,
  	3,169,2144,8,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
  	1,170,3,170,2156,8,170,1,170,1,170,3,170,2160,8,170,1,170,1,170,1,170,
  	1,170,3,170,2166,8,170,1,170,3,170,2169,8,170,1,171,1,171,1,171,3,171,
  	2174,8,171,1,171,1,171,1,172,1,172,3,172,2180,8,172,1,172,1,172,1,172,
  	1,173,1,173,1,174,1,174,5,174,2189,8,174,10,174,12,174,2192,9,174,1,174,
  	5,174,2195,8,174,10,174,12,174,2198,9,174,1,174,3,174,2201,8,174,1,174,
  	1,174,5,174,2205,8,174,10,174,12,174,2208,9,174,1,174,3,174,2211,8,174,
  	1,174,4,174,2214,8,174,11,174,12,174,2215,1,174,5,174,2219,8,174,10,174,
  	12,174,2222,9,174,1,174,3,174,2225,8,174,1,174,4,174,2228,8,174,11,174,
  	12,174,2229,1,174,3,174,2233,8,174,1,174,3,174,2236,8,174,1,175,4,175,
  	2239,8,175,11,175,12,175,2240,1,175,1,175,3,175,2245,8,175,1,176,5,176,
  	2248,8,176,10,176,12,176,2251,9,176,1,176,4,176,2254,8,176,11,176,12,
  	176,2255,1,176,1,176,3,176,2260,8,176,1,177,1,177,1,177,5,177,2265,8,
  	177,10,177,12,177,2268,9,177,1,177,3,177,2271,8,177,1,177,1,177,1,177,
  	4,177,2276,8,177,11,177,12,177,2277,1,177,3,177,2281,8,177,1,177,3,177,
  	2284,8,177,1,178,1,178,1,178,1,179,1,179,3,179,2291,8,179,1,180,1,180,
  	1,180,3,180,2296,8,180,1,181,1,181,3,181,2300,8,181,1,181,3,181,2303,
  	8,181,1,182,1,182,1,183,1,183,3,183,2309,8,183,1,184,1,184,1,184,3,184,
  	2314,8,184,1,184,3,184,2317,8,184,1,184,3,184,2320,8,184,1,184,3,184,
  	2323,8,184,1,184,1,184,1,185,1,185,1,185,3,185,2330,8,185,1,186,1,186,
  	5,186,2334,8,186,10,186,12,186,2337,9,186,1,187,1,187,3,187,2341,8,187,
  	1,188,1,188,5,188,2345,8,188,10,188,12,188,2348,9,188,1,188,1,188,1,189,
  	1,189,1,190,1,190,4,190,2356,8,190,11,190,12,190,2357,1,191,1,191,3,191,
  	2362,8,191,1,191,1,191,1,192,1,192,1,192,1,192,1,192,3,192,2371,8,192,
  	1,192,1,192,1,193,1,193,1,193,1,193,1,194,1,194,3,194,2381,8,194,1,194,
  	1,194,1,195,1,195,1,195,5,195,2388,8,195,10,195,12,195,2391,9,195,1,195,
  	3,195,2394,8,195,1,196,1,196,1,196,3,196,2399,8,196,1,197,1,197,1,197,
  	1,197,1,198,4,198,2406,8,198,11,198,12,198,2407,1,199,3,199,2411,8,199,
  	1,199,1,199,1,199,1,199,1,199,1,199,5,199,2419,8,199,10,199,12,199,2422,
  	9,199,1,200,1,200,1,200,1,200,1,200,1,201,1,201,1,201,1,201,1,201,1,202,
  	1,202,1,202,3,202,2437,8,202,1,202,1,202,1,202,1,203,1,203,1,203,1,203,
  	1,203,1,204,1,204,3,204,2449,8,204,1,205,1,205,1,205,5,205,2454,8,205,
  	10,205,12,205,2457,9,205,1,205,1,205,3,205,2461,8,205,1,205,3,205,2464,
  	8,205,1,206,1,206,1,206,3,206,2469,8,206,1,207,1,207,1,207,5,207,2474,
  	8,207,10,207,12,207,2477,9,207,1,207,1,207,1,207,1,207,5,207,2483,8,207,
  	10,207,12,207,2486,9,207,1,207,1,207,1,207,5,207,2491,8,207,10,207,12,
  	207,2494,9,207,1,207,1,207,1,207,5,207,2499,8,207,10,207,12,207,2502,
  	9,207,3,207,2504,8,207,1,208,1,208,1,208,1,209,1,209,1,209,1,209,3,209,
  	2513,8,209,1,210,1,210,1,210,1,210,1,210,3,210,2520,8,210,1,211,1,211,
  	1,211,5,211,2525,8,211,10,211,12,211,2528,9,211,1,211,3,211,2531,8,211,
  	1,212,1,212,1,212,5,212,2536,8,212,10,212,12,212,2539,9,212,1,212,3,212,
  	2542,8,212,1,213,1,213,1,213,4,213,2547,8,213,11,213,12,213,2548,1,213,
  	3,213,2552,8,213,1,213,1,213,1,213,3,213,2557,8,213,1,214,1,214,1,214,
  	3,214,2562,8,214,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
  	1,215,3,215,2574,8,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,
  	2583,8,216,1,216,1,216,1,216,3,216,2588,8,216,1,216,3,216,2591,8,216,
  	1,217,1,217,1,217,1,217,1,217,1,217,3,217,2599,8,217,1,218,1,218,1,218,
  	1,218,1,218,1,218,1,218,1,218,1,218,3,218,2610,8,218,1,219,1,219,1,219,
  	1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
  	1,219,3,219,2628,8,219,1,219,5,219,2631,8,219,10,219,12,219,2634,9,219,
  	1,220,1,220,1,220,5,220,2639,8,220,10,220,12,220,2642,9,220,1,220,3,220,
  	2645,8,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
  	3,221,2657,8,221,1,222,1,222,1,222,3,222,2662,8,222,1,222,1,222,1,222,
  	3,222,2667,8,222,1,222,3,222,2670,8,222,1,223,1,223,1,223,5,223,2675,
  	8,223,10,223,12,223,2678,9,223,1,223,1,223,1,223,1,223,1,223,1,223,1,
  	223,1,223,1,223,1,223,5,223,2690,8,223,10,223,12,223,2693,9,223,1,223,
  	1,223,1,223,1,223,1,223,1,223,1,223,5,223,2702,8,223,10,223,12,223,2705,
  	9,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
  	1,223,1,223,1,223,1,223,1,223,1,223,5,223,2724,8,223,10,223,12,223,2727,
  	9,223,3,223,2729,8,223,1,224,1,224,1,224,0,12,24,46,120,228,316,318,320,
  	322,324,326,334,438,225,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
  	34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
  	80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
  	120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
  	156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
  	192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
  	228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
  	264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
  	300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
  	336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
  	372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
  	408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
  	444,446,448,0,4,2,1,73,73,115,115,1,0,91,97,1,0,100,112,2,0,65,65,67,
  	67,2961,0,450,1,0,0,0,2,456,1,0,0,0,4,474,1,0,0,0,6,504,1,0,0,0,8,506,
  	1,0,0,0,10,514,1,0,0,0,12,526,1,0,0,0,14,528,1,0,0,0,16,531,1,0,0,0,18,
  	534,1,0,0,0,20,553,1,0,0,0,22,558,1,0,0,0,24,578,1,0,0,0,26,602,1,0,0,
  	0,28,624,1,0,0,0,30,629,1,0,0,0,32,648,1,0,0,0,34,677,1,0,0,0,36,697,
  	1,0,0,0,38,717,1,0,0,0,40,734,1,0,0,0,42,746,1,0,0,0,44,753,1,0,0,0,46,
  	755,1,0,0,0,48,780,1,0,0,0,50,787,1,0,0,0,52,789,1,0,0,0,54,800,1,0,0,
  	0,56,806,1,0,0,0,58,836,1,0,0,0,60,840,1,0,0,0,62,845,1,0,0,0,64,856,
  	1,0,0,0,66,861,1,0,0,0,68,863,1,0,0,0,70,873,1,0,0,0,72,891,1,0,0,0,74,
  	897,1,0,0,0,76,904,1,0,0,0,78,906,1,0,0,0,80,945,1,0,0,0,82,955,1,0,0,
  	0,84,994,1,0,0,0,86,998,1,0,0,0,88,1000,1,0,0,0,90,1002,1,0,0,0,92,1013,
  	1,0,0,0,94,1015,1,0,0,0,96,1024,1,0,0,0,98,1033,1,0,0,0,100,1036,1,0,
  	0,0,102,1038,1,0,0,0,104,1046,1,0,0,0,106,1048,1,0,0,0,108,1070,1,0,0,
  	0,110,1081,1,0,0,0,112,1083,1,0,0,0,114,1091,1,0,0,0,116,1096,1,0,0,0,
  	118,1104,1,0,0,0,120,1109,1,0,0,0,122,1126,1,0,0,0,124,1132,1,0,0,0,126,
  	1137,1,0,0,0,128,1141,1,0,0,0,130,1157,1,0,0,0,132,1162,1,0,0,0,134,1184,
  	1,0,0,0,136,1235,1,0,0,0,138,1238,1,0,0,0,140,1249,1,0,0,0,142,1294,1,
  	0,0,0,144,1296,1,0,0,0,146,1303,1,0,0,0,148,1309,1,0,0,0,150,1318,1,0,
  	0,0,152,1330,1,0,0,0,154,1332,1,0,0,0,156,1336,1,0,0,0,158,1339,1,0,0,
  	0,160,1342,1,0,0,0,162,1345,1,0,0,0,164,1361,1,0,0,0,166,1376,1,0,0,0,
  	168,1378,1,0,0,0,170,1382,1,0,0,0,172,1408,1,0,0,0,174,1470,1,0,0,0,176,
  	1477,1,0,0,0,178,1512,1,0,0,0,180,1526,1,0,0,0,182,1528,1,0,0,0,184,1538,
  	1,0,0,0,186,1542,1,0,0,0,188,1560,1,0,0,0,190,1562,1,0,0,0,192,1570,1,
  	0,0,0,194,1575,1,0,0,0,196,1579,1,0,0,0,198,1581,1,0,0,0,200,1585,1,0,
  	0,0,202,1601,1,0,0,0,204,1609,1,0,0,0,206,1617,1,0,0,0,208,1627,1,0,0,
  	0,210,1632,1,0,0,0,212,1637,1,0,0,0,214,1639,1,0,0,0,216,1641,1,0,0,0,
  	218,1643,1,0,0,0,220,1645,1,0,0,0,222,1647,1,0,0,0,224,1649,1,0,0,0,226,
  	1651,1,0,0,0,228,1655,1,0,0,0,230,1666,1,0,0,0,232,1680,1,0,0,0,234,1682,
  	1,0,0,0,236,1687,1,0,0,0,238,1700,1,0,0,0,240,1706,1,0,0,0,242,1733,1,
  	0,0,0,244,1735,1,0,0,0,246,1745,1,0,0,0,248,1750,1,0,0,0,250,1783,1,0,
  	0,0,252,1785,1,0,0,0,254,1793,1,0,0,0,256,1801,1,0,0,0,258,1805,1,0,0,
  	0,260,1813,1,0,0,0,262,1817,1,0,0,0,264,1836,1,0,0,0,266,1838,1,0,0,0,
  	268,1841,1,0,0,0,270,1860,1,0,0,0,272,1869,1,0,0,0,274,1871,1,0,0,0,276,
  	1885,1,0,0,0,278,1887,1,0,0,0,280,1901,1,0,0,0,282,1903,1,0,0,0,284,1909,
  	1,0,0,0,286,1911,1,0,0,0,288,1919,1,0,0,0,290,1930,1,0,0,0,292,1932,1,
  	0,0,0,294,1949,1,0,0,0,296,1951,1,0,0,0,298,1954,1,0,0,0,300,1957,1,0,
  	0,0,302,1960,1,0,0,0,304,1963,1,0,0,0,306,1966,1,0,0,0,308,1969,1,0,0,
  	0,310,1973,1,0,0,0,312,1976,1,0,0,0,314,1980,1,0,0,0,316,1983,1,0,0,0,
  	318,1994,1,0,0,0,320,2005,1,0,0,0,322,2016,1,0,0,0,324,2030,1,0,0,0,326,
  	2044,1,0,0,0,328,2074,1,0,0,0,330,2081,1,0,0,0,332,2086,1,0,0,0,334,2088,
  	1,0,0,0,336,2114,1,0,0,0,338,2143,1,0,0,0,340,2168,1,0,0,0,342,2170,1,
  	0,0,0,344,2177,1,0,0,0,346,2184,1,0,0,0,348,2235,1,0,0,0,350,2238,1,0,
  	0,0,352,2249,1,0,0,0,354,2283,1,0,0,0,356,2285,1,0,0,0,358,2288,1,0,0,
  	0,360,2292,1,0,0,0,362,2297,1,0,0,0,364,2304,1,0,0,0,366,2308,1,0,0,0,
  	368,2310,1,0,0,0,370,2329,1,0,0,0,372,2331,1,0,0,0,374,2340,1,0,0,0,376,
  	2342,1,0,0,0,378,2351,1,0,0,0,380,2355,1,0,0,0,382,2359,1,0,0,0,384,2365,
  	1,0,0,0,386,2374,1,0,0,0,388,2378,1,0,0,0,390,2384,1,0,0,0,392,2398,1,
  	0,0,0,394,2400,1,0,0,0,396,2405,1,0,0,0,398,2410,1,0,0,0,400,2423,1,0,
  	0,0,402,2428,1,0,0,0,404,2433,1,0,0,0,406,2441,1,0,0,0,408,2446,1,0,0,
  	0,410,2463,1,0,0,0,412,2468,1,0,0,0,414,2503,1,0,0,0,416,2505,1,0,0,0,
  	418,2512,1,0,0,0,420,2519,1,0,0,0,422,2521,1,0,0,0,424,2532,1,0,0,0,426,
  	2556,1,0,0,0,428,2561,1,0,0,0,430,2573,1,0,0,0,432,2590,1,0,0,0,434,2598,
  	1,0,0,0,436,2609,1,0,0,0,438,2611,1,0,0,0,440,2635,1,0,0,0,442,2656,1,
  	0,0,0,444,2669,1,0,0,0,446,2728,1,0,0,0,448,2730,1,0,0,0,450,451,3,2,
  	1,0,451,452,5,0,0,1,452,1,1,0,0,0,453,455,5,115,0,0,454,453,1,0,0,0,455,
  	458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,468,1,0,0,0,458,456,1,
  	0,0,0,459,463,3,4,2,0,460,462,5,115,0,0,461,460,1,0,0,0,462,465,1,0,0,
  	0,463,461,1,0,0,0,463,464,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,466,
  	459,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,3,1,0,
  	0,0,470,468,1,0,0,0,471,475,3,6,3,0,472,475,3,28,14,0,473,475,3,60,30,
  	0,474,471,1,0,0,0,474,472,1,0,0,0,474,473,1,0,0,0,475,5,1,0,0,0,476,477,
  	5,8,0,0,477,478,5,62,0,0,478,481,3,8,4,0,479,480,5,113,0,0,480,482,3,
  	270,135,0,481,479,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,7,0,
  	0,0,484,505,1,0,0,0,485,486,5,8,0,0,486,487,5,62,0,0,487,490,3,8,4,0,
  	488,489,5,75,0,0,489,491,3,270,135,0,490,488,1,0,0,0,490,491,1,0,0,0,
  	491,492,1,0,0,0,492,493,7,0,0,0,493,505,1,0,0,0,494,495,5,8,0,0,495,496,
  	5,62,0,0,496,500,3,8,4,0,497,498,5,72,0,0,498,499,5,72,0,0,499,501,3,
  	270,135,0,500,497,1,0,0,0,500,501,1,0,0,0,501,502,1,0,0,0,502,503,7,0,
  	0,0,503,505,1,0,0,0,504,476,1,0,0,0,504,485,1,0,0,0,504,494,1,0,0,0,505,
  	7,1,0,0,0,506,511,3,10,5,0,507,508,5,78,0,0,508,510,3,10,5,0,509,507,
  	1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,9,1,0,0,0,
  	513,511,1,0,0,0,514,518,3,12,6,0,515,517,3,12,6,0,516,515,1,0,0,0,517,
  	520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,11,1,0,0,0,520,518,1,
  	0,0,0,521,527,3,22,11,0,522,527,3,14,7,0,523,527,3,16,8,0,524,527,3,18,
  	9,0,525,527,3,20,10,0,526,521,1,0,0,0,526,522,1,0,0,0,526,523,1,0,0,0,
  	526,524,1,0,0,0,526,525,1,0,0,0,527,13,1,0,0,0,528,529,3,22,11,0,529,
  	530,5,68,0,0,530,15,1,0,0,0,531,532,3,22,11,0,532,533,5,83,0,0,533,17,
  	1,0,0,0,534,535,3,22,11,0,535,536,5,63,0,0,536,19,1,0,0,0,537,538,3,22,
  	11,0,538,539,5,89,0,0,539,540,3,270,135,0,540,541,5,90,0,0,541,554,1,
  	0,0,0,542,543,3,22,11,0,543,545,5,89,0,0,544,546,3,270,135,0,545,544,
  	1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,549,5,71,0,0,548,550,3,270,
  	135,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,5,90,0,
  	0,552,554,1,0,0,0,553,537,1,0,0,0,553,542,1,0,0,0,554,21,1,0,0,0,555,
  	557,5,115,0,0,556,555,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,
  	1,0,0,0,559,570,1,0,0,0,560,558,1,0,0,0,561,571,5,8,0,0,562,571,5,3,0,
  	0,563,571,5,4,0,0,564,571,3,24,12,0,565,571,3,26,13,0,566,567,5,69,0,
  	0,567,568,3,8,4,0,568,569,5,70,0,0,569,571,1,0,0,0,570,561,1,0,0,0,570,
  	562,1,0,0,0,570,563,1,0,0,0,570,564,1,0,0,0,570,565,1,0,0,0,570,566,1,
  	0,0,0,571,575,1,0,0,0,572,574,5,115,0,0,573,572,1,0,0,0,574,577,1,0,0,
  	0,575,573,1,0,0,0,575,576,1,0,0,0,576,23,1,0,0,0,577,575,1,0,0,0,578,
  	579,6,12,-1,0,579,580,5,53,0,0,580,599,1,0,0,0,581,582,10,4,0,0,582,583,
  	5,65,0,0,583,598,5,53,0,0,584,585,10,3,0,0,585,586,5,76,0,0,586,587,3,
  	336,168,0,587,588,5,77,0,0,588,598,1,0,0,0,589,590,10,2,0,0,590,598,3,
  	404,202,0,591,592,10,1,0,0,592,594,5,69,0,0,593,595,3,408,204,0,594,593,
  	1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,5,70,0,0,597,581,1,0,
  	0,0,597,584,1,0,0,0,597,589,1,0,0,0,597,591,1,0,0,0,598,601,1,0,0,0,599,
  	597,1,0,0,0,599,600,1,0,0,0,600,25,1,0,0,0,601,599,1,0,0,0,602,604,5,
  	76,0,0,603,605,5,79,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,
  	0,606,607,5,3,0,0,607,608,5,77,0,0,608,27,1,0,0,0,609,610,5,46,0,0,610,
  	611,3,30,15,0,611,612,7,0,0,0,612,625,1,0,0,0,613,614,5,52,0,0,614,615,
  	3,42,21,0,615,616,7,0,0,0,616,625,1,0,0,0,617,618,5,51,0,0,618,619,3,
  	42,21,0,619,620,7,0,0,0,620,625,1,0,0,0,621,622,3,30,15,0,622,623,5,73,
  	0,0,623,625,1,0,0,0,624,609,1,0,0,0,624,613,1,0,0,0,624,617,1,0,0,0,624,
  	621,1,0,0,0,625,29,1,0,0,0,626,628,5,115,0,0,627,626,1,0,0,0,628,631,
  	1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,637,1,0,0,0,631,629,1,0,0,
  	0,632,633,3,32,16,0,633,634,5,99,0,0,634,635,3,30,15,0,635,638,1,0,0,
  	0,636,638,3,32,16,0,637,632,1,0,0,0,637,636,1,0,0,0,638,642,1,0,0,0,639,
  	641,5,115,0,0,640,639,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,
  	1,0,0,0,643,31,1,0,0,0,644,642,1,0,0,0,645,647,5,115,0,0,646,645,1,0,
  	0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,666,1,0,0,0,650,
  	648,1,0,0,0,651,652,5,49,0,0,652,653,5,8,0,0,653,654,5,30,0,0,654,655,
  	3,46,23,0,655,656,5,72,0,0,656,657,3,32,16,0,657,667,1,0,0,0,658,659,
  	5,50,0,0,659,660,5,8,0,0,660,661,5,30,0,0,661,662,3,46,23,0,662,663,5,
  	72,0,0,663,664,3,32,16,0,664,667,1,0,0,0,665,667,3,34,17,0,666,651,1,
  	0,0,0,666,658,1,0,0,0,666,665,1,0,0,0,667,671,1,0,0,0,668,670,5,115,0,
  	0,669,668,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,
  	33,1,0,0,0,673,671,1,0,0,0,674,676,5,115,0,0,675,674,1,0,0,0,676,679,
  	1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,
  	0,680,685,3,36,18,0,681,682,5,37,0,0,682,684,3,36,18,0,683,681,1,0,0,
  	0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,691,1,0,0,0,687,
  	685,1,0,0,0,688,690,5,115,0,0,689,688,1,0,0,0,690,693,1,0,0,0,691,689,
  	1,0,0,0,691,692,1,0,0,0,692,35,1,0,0,0,693,691,1,0,0,0,694,696,5,115,
  	0,0,695,694,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,
  	700,1,0,0,0,699,697,1,0,0,0,700,705,3,38,19,0,701,702,5,9,0,0,702,704,
  	3,38,19,0,703,701,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,
  	0,0,706,711,1,0,0,0,707,705,1,0,0,0,708,710,5,115,0,0,709,708,1,0,0,0,
  	710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,37,1,0,0,0,713,711,
  	1,0,0,0,714,716,5,115,0,0,715,714,1,0,0,0,716,719,1,0,0,0,717,715,1,0,
  	0,0,717,718,1,0,0,0,718,726,1,0,0,0,719,717,1,0,0,0,720,727,3,40,20,0,
  	721,722,5,69,0,0,722,723,3,30,15,0,723,724,5,70,0,0,724,727,1,0,0,0,725,
  	727,3,42,21,0,726,720,1,0,0,0,726,721,1,0,0,0,726,725,1,0,0,0,727,731,
  	1,0,0,0,728,730,5,115,0,0,729,728,1,0,0,0,730,733,1,0,0,0,731,729,1,0,
  	0,0,731,732,1,0,0,0,732,39,1,0,0,0,733,731,1,0,0,0,734,735,3,42,21,0,
  	735,736,7,1,0,0,736,737,3,42,21,0,737,41,1,0,0,0,738,747,3,44,22,0,739,
  	747,3,290,145,0,740,741,3,290,145,0,741,742,5,28,0,0,742,743,3,290,145,
  	0,743,744,5,21,0,0,744,745,3,290,145,0,745,747,1,0,0,0,746,738,1,0,0,
  	0,746,739,1,0,0,0,746,740,1,0,0,0,747,43,1,0,0,0,748,749,5,78,0,0,749,
  	750,3,46,23,0,750,751,5,78,0,0,751,754,1,0,0,0,752,754,3,46,23,0,753,
  	748,1,0,0,0,753,752,1,0,0,0,754,45,1,0,0,0,755,756,6,23,-1,0,756,757,
  	3,48,24,0,757,766,1,0,0,0,758,759,10,2,0,0,759,760,5,65,0,0,760,765,3,
  	48,24,0,761,762,10,1,0,0,762,763,5,66,0,0,763,765,3,48,24,0,764,758,1,
  	0,0,0,764,761,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,
  	767,47,1,0,0,0,768,766,1,0,0,0,769,781,3,50,25,0,770,771,3,50,25,0,771,
  	772,5,76,0,0,772,773,3,56,28,0,773,774,5,77,0,0,774,781,1,0,0,0,775,776,
  	3,50,25,0,776,777,5,89,0,0,777,778,3,52,26,0,778,779,5,90,0,0,779,781,
  	1,0,0,0,780,769,1,0,0,0,780,770,1,0,0,0,780,775,1,0,0,0,781,49,1,0,0,
  	0,782,788,5,8,0,0,783,784,5,69,0,0,784,785,3,46,23,0,785,786,5,70,0,0,
  	786,788,1,0,0,0,787,782,1,0,0,0,787,783,1,0,0,0,788,51,1,0,0,0,789,794,
  	3,54,27,0,790,791,5,71,0,0,791,793,3,54,27,0,792,790,1,0,0,0,793,796,
  	1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,
  	0,797,799,5,71,0,0,798,797,1,0,0,0,798,799,1,0,0,0,799,53,1,0,0,0,800,
  	801,5,68,0,0,801,804,5,8,0,0,802,803,5,72,0,0,803,805,3,58,29,0,804,802,
  	1,0,0,0,804,805,1,0,0,0,805,55,1,0,0,0,806,811,3,58,29,0,807,808,5,71,
  	0,0,808,810,3,58,29,0,809,807,1,0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,
  	811,812,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,814,816,5,71,0,0,815,
  	814,1,0,0,0,815,816,1,0,0,0,816,57,1,0,0,0,817,837,5,4,0,0,818,820,5,
  	4,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,823,5,72,0,
  	0,822,824,5,4,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,837,1,0,0,0,825,
  	827,5,4,0,0,826,825,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,830,5,
  	72,0,0,829,831,5,4,0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,
  	0,832,834,5,72,0,0,833,835,5,4,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,
  	837,1,0,0,0,836,817,1,0,0,0,836,819,1,0,0,0,836,826,1,0,0,0,837,59,1,
  	0,0,0,838,841,3,82,41,0,839,841,3,80,40,0,840,838,1,0,0,0,840,839,1,0,
  	0,0,841,61,1,0,0,0,842,844,5,115,0,0,843,842,1,0,0,0,844,847,1,0,0,0,
  	845,843,1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,845,1,0,0,0,848,852,
  	3,74,37,0,849,851,5,115,0,0,850,849,1,0,0,0,851,854,1,0,0,0,852,850,1,
  	0,0,0,852,853,1,0,0,0,853,63,1,0,0,0,854,852,1,0,0,0,855,857,3,72,36,
  	0,856,855,1,0,0,0,856,857,1,0,0,0,857,859,1,0,0,0,858,860,5,0,0,1,859,
  	858,1,0,0,0,859,860,1,0,0,0,860,65,1,0,0,0,861,862,3,76,38,0,862,67,1,
  	0,0,0,863,867,3,268,134,0,864,866,5,115,0,0,865,864,1,0,0,0,866,869,1,
  	0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,
  	870,872,5,0,0,1,871,870,1,0,0,0,871,872,1,0,0,0,872,69,1,0,0,0,873,875,
  	5,69,0,0,874,876,3,446,223,0,875,874,1,0,0,0,875,876,1,0,0,0,876,877,
  	1,0,0,0,877,878,5,70,0,0,878,879,5,99,0,0,879,883,3,270,135,0,880,882,
  	5,115,0,0,881,880,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,
  	0,0,884,887,1,0,0,0,885,883,1,0,0,0,886,888,5,0,0,1,887,886,1,0,0,0,887,
  	888,1,0,0,0,888,71,1,0,0,0,889,892,3,74,37,0,890,892,5,115,0,0,891,889,
  	1,0,0,0,891,890,1,0,0,0,892,893,1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,
  	0,894,73,1,0,0,0,895,898,3,82,41,0,896,898,3,78,39,0,897,895,1,0,0,0,
  	897,896,1,0,0,0,898,75,1,0,0,0,899,900,3,82,41,0,900,901,5,115,0,0,901,
  	905,1,0,0,0,902,905,3,78,39,0,903,905,5,115,0,0,904,899,1,0,0,0,904,902,
  	1,0,0,0,904,903,1,0,0,0,905,77,1,0,0,0,906,911,3,80,40,0,907,908,5,73,
  	0,0,908,910,3,80,40,0,909,907,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,
  	911,912,1,0,0,0,912,915,1,0,0,0,913,911,1,0,0,0,914,916,5,73,0,0,915,
  	914,1,0,0,0,915,916,1,0,0,0,916,929,1,0,0,0,917,919,5,115,0,0,918,917,
  	1,0,0,0,919,920,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,930,1,0,0,
  	0,922,924,5,115,0,0,923,922,1,0,0,0,924,927,1,0,0,0,925,923,1,0,0,0,925,
  	926,1,0,0,0,926,928,1,0,0,0,927,925,1,0,0,0,928,930,5,0,0,1,929,918,1,
  	0,0,0,929,925,1,0,0,0,930,79,1,0,0,0,931,946,3,84,42,0,932,946,3,258,
  	129,0,933,946,3,274,137,0,934,946,3,90,45,0,935,946,3,104,52,0,936,946,
  	3,92,46,0,937,946,5,38,0,0,938,946,3,98,49,0,939,946,3,100,50,0,940,946,
  	3,102,51,0,941,946,5,14,0,0,942,946,5,17,0,0,943,946,3,94,47,0,944,946,
  	3,96,48,0,945,931,1,0,0,0,945,932,1,0,0,0,945,933,1,0,0,0,945,934,1,0,
  	0,0,945,935,1,0,0,0,945,936,1,0,0,0,945,937,1,0,0,0,945,938,1,0,0,0,945,
  	939,1,0,0,0,945,940,1,0,0,0,945,941,1,0,0,0,945,942,1,0,0,0,945,943,1,
  	0,0,0,945,944,1,0,0,0,946,81,1,0,0,0,947,956,3,130,65,0,948,956,3,164,
  	82,0,949,956,3,126,63,0,950,956,3,174,87,0,951,956,3,172,86,0,952,956,
  	3,178,89,0,953,956,3,170,85,0,954,956,3,186,93,0,955,947,1,0,0,0,955,
  	948,1,0,0,0,955,949,1,0,0,0,955,950,1,0,0,0,955,951,1,0,0,0,955,952,1,
  	0,0,0,955,953,1,0,0,0,955,954,1,0,0,0,956,83,1,0,0,0,957,958,5,53,0,0,
  	958,959,5,72,0,0,959,962,3,270,135,0,960,961,5,75,0,0,961,963,3,86,43,
  	0,962,960,1,0,0,0,962,963,1,0,0,0,963,995,1,0,0,0,964,965,5,69,0,0,965,
  	966,3,434,217,0,966,967,5,70,0,0,967,970,1,0,0,0,968,970,3,436,218,0,
  	969,964,1,0,0,0,969,968,1,0,0,0,970,971,1,0,0,0,971,972,5,72,0,0,972,
  	975,3,270,135,0,973,974,5,75,0,0,974,976,3,86,43,0,975,973,1,0,0,0,975,
  	976,1,0,0,0,976,995,1,0,0,0,977,978,3,422,211,0,978,979,5,75,0,0,979,
  	981,1,0,0,0,980,977,1,0,0,0,981,982,1,0,0,0,982,980,1,0,0,0,982,983,1,
  	0,0,0,983,986,1,0,0,0,984,987,3,272,136,0,985,987,3,274,137,0,986,984,
  	1,0,0,0,986,985,1,0,0,0,987,995,1,0,0,0,988,989,3,434,217,0,989,992,3,
  	88,44,0,990,993,3,272,136,0,991,993,3,274,137,0,992,990,1,0,0,0,992,991,
  	1,0,0,0,993,995,1,0,0,0,994,957,1,0,0,0,994,969,1,0,0,0,994,980,1,0,0,
  	0,994,988,1,0,0,0,995,85,1,0,0,0,996,999,3,272,136,0,997,999,3,274,137,
  	0,998,996,1,0,0,0,998,997,1,0,0,0,999,87,1,0,0,0,1000,1001,7,2,0,0,1001,
  	89,1,0,0,0,1002,1004,5,40,0,0,1003,1005,3,274,137,0,1004,1003,1,0,0,0,
  	1004,1005,1,0,0,0,1005,91,1,0,0,0,1006,1007,5,39,0,0,1007,1010,3,270,
  	135,0,1008,1009,5,26,0,0,1009,1011,3,270,135,0,1010,1008,1,0,0,0,1010,
  	1011,1,0,0,0,1011,1014,1,0,0,0,1012,1014,5,39,0,0,1013,1006,1,0,0,0,1013,
  	1012,1,0,0,0,1014,93,1,0,0,0,1015,1016,5,27,0,0,1016,1021,5,53,0,0,1017,
  	1018,5,71,0,0,1018,1020,5,53,0,0,1019,1017,1,0,0,0,1020,1023,1,0,0,0,
  	1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,95,1,0,0,0,1023,1021,1,0,0,0,
  	1024,1025,5,35,0,0,1025,1030,5,53,0,0,1026,1027,5,71,0,0,1027,1029,5,
  	53,0,0,1028,1026,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,
  	1,0,0,0,1031,97,1,0,0,0,1032,1030,1,0,0,0,1033,1034,5,19,0,0,1034,1035,
  	3,440,220,0,1035,99,1,0,0,0,1036,1037,3,272,136,0,1037,101,1,0,0,0,1038,
  	1039,5,11,0,0,1039,1042,3,270,135,0,1040,1041,5,71,0,0,1041,1043,3,270,
  	135,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,103,1,0,0,0,1044,1047,
  	3,106,53,0,1045,1047,3,108,54,0,1046,1044,1,0,0,0,1046,1045,1,0,0,0,1047,
  	105,1,0,0,0,1048,1049,5,29,0,0,1049,1050,3,116,58,0,1050,107,1,0,0,0,
  	1051,1055,5,26,0,0,1052,1054,7,3,0,0,1053,1052,1,0,0,0,1054,1057,1,0,
  	0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,1055,1,
  	0,0,0,1058,1059,3,120,60,0,1059,1060,5,29,0,0,1060,1061,3,110,55,0,1061,
  	1071,1,0,0,0,1062,1064,5,26,0,0,1063,1065,7,3,0,0,1064,1063,1,0,0,0,1065,
  	1066,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,
  	1069,5,29,0,0,1069,1071,3,110,55,0,1070,1051,1,0,0,0,1070,1062,1,0,0,
  	0,1071,109,1,0,0,0,1072,1073,5,69,0,0,1073,1075,3,112,56,0,1074,1076,
  	5,71,0,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,
  	5,70,0,0,1078,1082,1,0,0,0,1079,1082,3,112,56,0,1080,1082,5,68,0,0,1081,
  	1072,1,0,0,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,1082,111,1,0,0,0,1083,
  	1088,3,114,57,0,1084,1085,5,71,0,0,1085,1087,3,114,57,0,1086,1084,1,0,
  	0,0,1087,1090,1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,113,1,
  	0,0,0,1090,1088,1,0,0,0,1091,1094,5,53,0,0,1092,1093,5,10,0,0,1093,1095,
  	5,53,0,0,1094,1092,1,0,0,0,1094,1095,1,0,0,0,1095,115,1,0,0,0,1096,1101,
  	3,118,59,0,1097,1098,5,71,0,0,1098,1100,3,118,59,0,1099,1097,1,0,0,0,
  	1100,1103,1,0,0,0,1101,1099,1,0,0,0,1101,1102,1,0,0,0,1102,117,1,0,0,
  	0,1103,1101,1,0,0,0,1104,1107,3,120,60,0,1105,1106,5,10,0,0,1106,1108,
  	5,53,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,119,1,0,0,0,1109,1110,
  	6,60,-1,0,1110,1111,5,53,0,0,1111,1117,1,0,0,0,1112,1113,10,2,0,0,1113,
  	1114,5,65,0,0,1114,1116,5,53,0,0,1115,1112,1,0,0,0,1116,1119,1,0,0,0,
  	1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,121,1,0,0,0,1119,1117,1,0,0,
  	0,1120,1121,5,115,0,0,1121,1122,5,1,0,0,1122,1123,3,72,36,0,1123,1124,
  	5,2,0,0,1124,1127,1,0,0,0,1125,1127,3,78,39,0,1126,1120,1,0,0,0,1126,
  	1125,1,0,0,0,1127,123,1,0,0,0,1128,1129,5,98,0,0,1129,1130,3,284,142,
  	0,1130,1131,5,115,0,0,1131,1133,1,0,0,0,1132,1128,1,0,0,0,1133,1134,1,
  	0,0,0,1134,1132,1,0,0,0,1134,1135,1,0,0,0,1135,125,1,0,0,0,1136,1138,
  	3,124,62,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,1139,1,0,0,0,1139,
  	1140,3,128,64,0,1140,127,1,0,0,0,1141,1142,5,16,0,0,1142,1144,5,53,0,
  	0,1143,1145,3,260,130,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1151,
  	1,0,0,0,1146,1148,5,69,0,0,1147,1149,3,408,204,0,1148,1147,1,0,0,0,1148,
  	1149,1,0,0,0,1149,1150,1,0,0,0,1150,1152,5,70,0,0,1151,1146,1,0,0,0,1151,
  	1152,1,0,0,0,1152,1153,1,0,0,0,1153,1154,5,72,0,0,1154,1155,3,122,61,
  	0,1155,129,1,0,0,0,1156,1158,3,124,62,0,1157,1156,1,0,0,0,1157,1158,1,
  	0,0,0,1158,1159,1,0,0,0,1159,1160,3,132,66,0,1160,131,1,0,0,0,1161,1163,
  	5,12,0,0,1162,1161,1,0,0,0,1162,1163,1,0,0,0,1163,1164,1,0,0,0,1164,1165,
  	5,18,0,0,1165,1167,5,53,0,0,1166,1168,3,260,130,0,1167,1166,1,0,0,0,1167,
  	1168,1,0,0,0,1168,1169,1,0,0,0,1169,1171,5,69,0,0,1170,1172,3,134,67,
  	0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1176,5,70,
  	0,0,1174,1175,5,99,0,0,1175,1177,3,270,135,0,1176,1174,1,0,0,0,1176,1177,
  	1,0,0,0,1177,1178,1,0,0,0,1178,1180,5,72,0,0,1179,1181,3,448,224,0,1180,
  	1179,1,0,0,0,1180,1181,1,0,0,0,1181,1182,1,0,0,0,1182,1183,3,122,61,0,
  	1183,133,1,0,0,0,1184,1185,3,136,68,0,1185,135,1,0,0,0,1186,1190,3,138,
  	69,0,1187,1189,3,146,73,0,1188,1187,1,0,0,0,1189,1192,1,0,0,0,1190,1188,
  	1,0,0,0,1190,1191,1,0,0,0,1191,1196,1,0,0,0,1192,1190,1,0,0,0,1193,1195,
  	3,150,75,0,1194,1193,1,0,0,0,1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,
  	1197,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1199,1201,3,142,71,0,
  	1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1236,1,0,0,0,1202,1206,3,140,
  	70,0,1203,1205,3,150,75,0,1204,1203,1,0,0,0,1205,1208,1,0,0,0,1206,1204,
  	1,0,0,0,1206,1207,1,0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,0,0,1209,1211,
  	3,142,71,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1236,1,0,0,0,1212,
  	1214,3,146,73,0,1213,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1213,1,0,0,0,
  	1215,1216,1,0,0,0,1216,1220,1,0,0,0,1217,1219,3,150,75,0,1218,1217,1,
  	0,0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,1224,
  	1,0,0,0,1222,1220,1,0,0,0,1223,1225,3,142,71,0,1224,1223,1,0,0,0,1224,
  	1225,1,0,0,0,1225,1236,1,0,0,0,1226,1228,3,150,75,0,1227,1226,1,0,0,0,
  	1228,1229,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,
  	0,1231,1233,3,142,71,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1236,
  	1,0,0,0,1234,1236,3,142,71,0,1235,1186,1,0,0,0,1235,1202,1,0,0,0,1235,
  	1213,1,0,0,0,1235,1227,1,0,0,0,1235,1234,1,0,0,0,1236,137,1,0,0,0,1237,
  	1239,3,146,73,0,1238,1237,1,0,0,0,1239,1240,1,0,0,0,1240,1238,1,0,0,0,
  	1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1244,5,85,0,0,1243,1245,5,71,
  	0,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,139,1,0,0,0,1246,1248,3,
  	146,73,0,1247,1246,1,0,0,0,1248,1251,1,0,0,0,1249,1247,1,0,0,0,1249,1250,
  	1,0,0,0,1250,1253,1,0,0,0,1251,1249,1,0,0,0,1252,1254,3,150,75,0,1253,
  	1252,1,0,0,0,1254,1255,1,0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,
  	1257,1,0,0,0,1257,1259,5,85,0,0,1258,1260,5,71,0,0,1259,1258,1,0,0,0,
  	1259,1260,1,0,0,0,1260,141,1,0,0,0,1261,1262,5,68,0,0,1262,1266,3,146,
  	73,0,1263,1265,3,152,76,0,1264,1263,1,0,0,0,1265,1268,1,0,0,0,1266,1264,
  	1,0,0,0,1266,1267,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,1269,1271,
  	3,144,72,0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1295,1,0,0,0,1272,
  	1273,5,68,0,0,1273,1277,3,148,74,0,1274,1276,3,152,76,0,1275,1274,1,0,
  	0,0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,1281,1,
  	0,0,0,1279,1277,1,0,0,0,1280,1282,3,144,72,0,1281,1280,1,0,0,0,1281,1282,
  	1,0,0,0,1282,1295,1,0,0,0,1283,1284,5,68,0,0,1284,1286,5,71,0,0,1285,
  	1287,3,152,76,0,1286,1285,1,0,0,0,1287,1288,1,0,0,0,1288,1286,1,0,0,0,
  	1288,1289,1,0,0,0,1289,1291,1,0,0,0,1290,1292,3,144,72,0,1291,1290,1,
  	0,0,0,1291,1292,1,0,0,0,1292,1295,1,0,0,0,1293,1295,3,144,72,0,1294,1261,
  	1,0,0,0,1294,1272,1,0,0,0,1294,1283,1,0,0,0,1294,1293,1,0,0,0,1295,143,
  	1,0,0,0,1296,1297,5,74,0,0,1297,1298,3,146,73,0,1298,145,1,0,0,0,1299,
  	1300,3,154,77,0,1300,1301,5,71,0,0,1301,1304,1,0,0,0,1302,1304,3,154,
  	77,0,1303,1299,1,0,0,0,1303,1302,1,0,0,0,1304,147,1,0,0,0,1305,1306,3,
  	156,78,0,1306,1307,5,71,0,0,1307,1310,1,0,0,0,1308,1310,3,156,78,0,1309,
  	1305,1,0,0,0,1309,1308,1,0,0,0,1310,149,1,0,0,0,1311,1312,3,154,77,0,
  	1312,1313,3,162,81,0,1313,1314,5,71,0,0,1314,1319,1,0,0,0,1315,1316,3,
  	154,77,0,1316,1317,3,162,81,0,1317,1319,1,0,0,0,1318,1311,1,0,0,0,1318,
  	1315,1,0,0,0,1319,151,1,0,0,0,1320,1322,3,154,77,0,1321,1323,3,162,81,
  	0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1324,1,0,0,0,1324,1325,5,71,
  	0,0,1325,1331,1,0,0,0,1326,1328,3,154,77,0,1327,1329,3,162,81,0,1328,
  	1327,1,0,0,0,1328,1329,1,0,0,0,1329,1331,1,0,0,0,1330,1320,1,0,0,0,1330,
  	1326,1,0,0,0,1331,153,1,0,0,0,1332,1334,5,53,0,0,1333,1335,3,158,79,0,
  	1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,155,1,0,0,0,1336,1337,5,53,0,
  	0,1337,1338,3,160,80,0,1338,157,1,0,0,0,1339,1340,5,72,0,0,1340,1341,
  	3,270,135,0,1341,159,1,0,0,0,1342,1343,5,72,0,0,1343,1344,3,276,138,0,
  	1344,161,1,0,0,0,1345,1346,5,75,0,0,1346,1347,3,270,135,0,1347,163,1,
  	0,0,0,1348,1349,5,28,0,0,1349,1350,3,284,142,0,1350,1351,5,72,0,0,1351,
  	1352,3,122,61,0,1352,1353,3,166,83,0,1353,1362,1,0,0,0,1354,1355,5,28,
  	0,0,1355,1356,3,284,142,0,1356,1357,5,72,0,0,1357,1359,3,122,61,0,1358,
  	1360,3,168,84,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,
  	1361,1348,1,0,0,0,1361,1354,1,0,0,0,1362,165,1,0,0,0,1363,1364,5,20,0,
  	0,1364,1365,3,284,142,0,1365,1366,5,72,0,0,1366,1367,3,122,61,0,1367,
  	1368,3,166,83,0,1368,1377,1,0,0,0,1369,1370,5,20,0,0,1370,1371,3,284,
  	142,0,1371,1372,5,72,0,0,1372,1374,3,122,61,0,1373,1375,3,168,84,0,1374,
  	1373,1,0,0,0,1374,1375,1,0,0,0,1375,1377,1,0,0,0,1376,1363,1,0,0,0,1376,
  	1369,1,0,0,0,1377,167,1,0,0,0,1378,1379,5,21,0,0,1379,1380,5,72,0,0,1380,
  	1381,3,122,61,0,1381,169,1,0,0,0,1382,1383,5,45,0,0,1383,1384,3,284,142,
  	0,1384,1385,5,72,0,0,1385,1387,3,122,61,0,1386,1388,3,168,84,0,1387,1386,
  	1,0,0,0,1387,1388,1,0,0,0,1388,171,1,0,0,0,1389,1390,5,25,0,0,1390,1391,
  	3,422,211,0,1391,1392,5,30,0,0,1392,1393,3,274,137,0,1393,1394,5,72,0,
  	0,1394,1396,3,122,61,0,1395,1397,3,168,84,0,1396,1395,1,0,0,0,1396,1397,
  	1,0,0,0,1397,1409,1,0,0,0,1398,1399,5,12,0,0,1399,1400,5,25,0,0,1400,
  	1401,3,422,211,0,1401,1402,5,30,0,0,1402,1403,3,274,137,0,1403,1404,5,
  	72,0,0,1404,1406,3,122,61,0,1405,1407,3,168,84,0,1406,1405,1,0,0,0,1406,
  	1407,1,0,0,0,1407,1409,1,0,0,0,1408,1389,1,0,0,0,1408,1398,1,0,0,0,1409,
  	173,1,0,0,0,1410,1411,5,47,0,0,1411,1412,5,69,0,0,1412,1417,3,176,88,
  	0,1413,1414,5,71,0,0,1414,1416,3,176,88,0,1415,1413,1,0,0,0,1416,1419,
  	1,0,0,0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,1421,1,0,0,0,1419,1417,
  	1,0,0,0,1420,1422,5,71,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,
  	1,0,0,0,1423,1424,5,70,0,0,1424,1425,5,72,0,0,1425,1426,3,122,61,0,1426,
  	1471,1,0,0,0,1427,1428,5,47,0,0,1428,1433,3,176,88,0,1429,1430,5,71,0,
  	0,1430,1432,3,176,88,0,1431,1429,1,0,0,0,1432,1435,1,0,0,0,1433,1431,
  	1,0,0,0,1433,1434,1,0,0,0,1434,1436,1,0,0,0,1435,1433,1,0,0,0,1436,1437,
  	5,72,0,0,1437,1438,3,122,61,0,1438,1471,1,0,0,0,1439,1440,5,12,0,0,1440,
  	1441,5,47,0,0,1441,1442,5,69,0,0,1442,1447,3,176,88,0,1443,1444,5,71,
  	0,0,1444,1446,3,176,88,0,1445,1443,1,0,0,0,1446,1449,1,0,0,0,1447,1445,
  	1,0,0,0,1447,1448,1,0,0,0,1448,1451,1,0,0,0,1449,1447,1,0,0,0,1450,1452,
  	5,71,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1453,1,0,0,0,1453,1454,
  	5,70,0,0,1454,1455,5,72,0,0,1455,1456,3,122,61,0,1456,1471,1,0,0,0,1457,
  	1458,5,12,0,0,1458,1459,5,47,0,0,1459,1464,3,176,88,0,1460,1461,5,71,
  	0,0,1461,1463,3,176,88,0,1462,1460,1,0,0,0,1463,1466,1,0,0,0,1464,1462,
  	1,0,0,0,1464,1465,1,0,0,0,1465,1467,1,0,0,0,1466,1464,1,0,0,0,1467,1468,
  	5,72,0,0,1468,1469,3,122,61,0,1469,1471,1,0,0,0,1470,1410,1,0,0,0,1470,
  	1427,1,0,0,0,1470,1439,1,0,0,0,1470,1457,1,0,0,0,1471,175,1,0,0,0,1472,
  	1473,3,270,135,0,1473,1474,5,10,0,0,1474,1475,3,428,214,0,1475,1478,1,
  	0,0,0,1476,1478,3,270,135,0,1477,1472,1,0,0,0,1477,1476,1,0,0,0,1478,
  	177,1,0,0,0,1479,1480,5,42,0,0,1480,1481,5,72,0,0,1481,1482,3,122,61,
  	0,1482,1483,3,184,92,0,1483,1513,1,0,0,0,1484,1485,5,42,0,0,1485,1486,
  	5,72,0,0,1486,1488,3,122,61,0,1487,1489,3,180,90,0,1488,1487,1,0,0,0,
  	1489,1490,1,0,0,0,1490,1488,1,0,0,0,1490,1491,1,0,0,0,1491,1493,1,0,0,
  	0,1492,1494,3,168,84,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,1496,
  	1,0,0,0,1495,1497,3,184,92,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,
  	1513,1,0,0,0,1498,1499,5,42,0,0,1499,1500,5,72,0,0,1500,1502,3,122,61,
  	0,1501,1503,3,182,91,0,1502,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1502,
  	1,0,0,0,1504,1505,1,0,0,0,1505,1507,1,0,0,0,1506,1508,3,168,84,0,1507,
  	1506,1,0,0,0,1507,1508,1,0,0,0,1508,1510,1,0,0,0,1509,1511,3,184,92,0,
  	1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1513,1,0,0,0,1512,1479,1,0,0,
  	0,1512,1484,1,0,0,0,1512,1498,1,0,0,0,1513,179,1,0,0,0,1514,1515,5,22,
  	0,0,1515,1518,3,270,135,0,1516,1517,5,10,0,0,1517,1519,5,53,0,0,1518,
  	1516,1,0,0,0,1518,1519,1,0,0,0,1519,1520,1,0,0,0,1520,1521,5,72,0,0,1521,
  	1522,3,122,61,0,1522,1527,1,0,0,0,1523,1524,5,22,0,0,1524,1525,5,72,0,
  	0,1525,1527,3,122,61,0,1526,1514,1,0,0,0,1526,1523,1,0,0,0,1527,181,1,
  	0,0,0,1528,1529,5,22,0,0,1529,1530,5,68,0,0,1530,1533,3,270,135,0,1531,
  	1532,5,10,0,0,1532,1534,5,53,0,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,
  	1534,1535,1,0,0,0,1535,1536,5,72,0,0,1536,1537,3,122,61,0,1537,183,1,
  	0,0,0,1538,1539,5,24,0,0,1539,1540,5,72,0,0,1540,1541,3,122,61,0,1541,
  	185,1,0,0,0,1542,1543,5,33,0,0,1543,1544,3,188,94,0,1544,1545,5,72,0,
  	0,1545,1546,5,115,0,0,1546,1548,5,1,0,0,1547,1549,3,190,95,0,1548,1547,
  	1,0,0,0,1549,1550,1,0,0,0,1550,1548,1,0,0,0,1550,1551,1,0,0,0,1551,1552,
  	1,0,0,0,1552,1553,5,2,0,0,1553,187,1,0,0,0,1554,1555,3,280,140,0,1555,
  	1557,5,71,0,0,1556,1558,3,278,139,0,1557,1556,1,0,0,0,1557,1558,1,0,0,
  	0,1558,1561,1,0,0,0,1559,1561,3,284,142,0,1560,1554,1,0,0,0,1560,1559,
  	1,0,0,0,1561,189,1,0,0,0,1562,1563,5,15,0,0,1563,1565,3,194,97,0,1564,
  	1566,3,192,96,0,1565,1564,1,0,0,0,1565,1566,1,0,0,0,1566,1567,1,0,0,0,
  	1567,1568,5,72,0,0,1568,1569,3,122,61,0,1569,191,1,0,0,0,1570,1571,5,
  	28,0,0,1571,1572,3,284,142,0,1572,193,1,0,0,0,1573,1576,3,234,117,0,1574,
  	1576,3,196,98,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,195,1,0,0,0,
  	1577,1580,3,198,99,0,1578,1580,3,200,100,0,1579,1577,1,0,0,0,1579,1578,
  	1,0,0,0,1580,197,1,0,0,0,1581,1582,3,200,100,0,1582,1583,5,10,0,0,1583,
  	1584,3,220,110,0,1584,199,1,0,0,0,1585,1590,3,202,101,0,1586,1587,5,78,
  	0,0,1587,1589,3,202,101,0,1588,1586,1,0,0,0,1589,1592,1,0,0,0,1590,1588,
  	1,0,0,0,1590,1591,1,0,0,0,1591,201,1,0,0,0,1592,1590,1,0,0,0,1593,1602,
  	3,204,102,0,1594,1602,3,218,109,0,1595,1602,3,222,111,0,1596,1602,3,224,
  	112,0,1597,1602,3,230,115,0,1598,1602,3,232,116,0,1599,1602,3,242,121,
  	0,1600,1602,3,250,125,0,1601,1593,1,0,0,0,1601,1594,1,0,0,0,1601,1595,
  	1,0,0,0,1601,1596,1,0,0,0,1601,1597,1,0,0,0,1601,1598,1,0,0,0,1601,1599,
  	1,0,0,0,1601,1600,1,0,0,0,1602,203,1,0,0,0,1603,1610,3,210,105,0,1604,
  	1610,3,208,104,0,1605,1610,3,380,190,0,1606,1610,5,34,0,0,1607,1610,5,
  	41,0,0,1608,1610,5,23,0,0,1609,1603,1,0,0,0,1609,1604,1,0,0,0,1609,1605,
  	1,0,0,0,1609,1606,1,0,0,0,1609,1607,1,0,0,0,1609,1608,1,0,0,0,1610,205,
  	1,0,0,0,1611,1618,3,210,105,0,1612,1618,3,208,104,0,1613,1618,3,380,190,
  	0,1614,1618,5,34,0,0,1615,1618,5,41,0,0,1616,1618,5,23,0,0,1617,1611,
  	1,0,0,0,1617,1612,1,0,0,0,1617,1613,1,0,0,0,1617,1614,1,0,0,0,1617,1615,
  	1,0,0,0,1617,1616,1,0,0,0,1618,207,1,0,0,0,1619,1620,3,212,106,0,1620,
  	1621,5,83,0,0,1621,1622,3,216,108,0,1622,1628,1,0,0,0,1623,1624,3,212,
  	106,0,1624,1625,5,84,0,0,1625,1626,3,216,108,0,1626,1628,1,0,0,0,1627,
  	1619,1,0,0,0,1627,1623,1,0,0,0,1628,209,1,0,0,0,1629,1633,5,4,0,0,1630,
  	1631,5,84,0,0,1631,1633,5,4,0,0,1632,1629,1,0,0,0,1632,1630,1,0,0,0,1633,
  	211,1,0,0,0,1634,1638,3,214,107,0,1635,1636,5,84,0,0,1636,1638,3,214,
  	107,0,1637,1634,1,0,0,0,1637,1635,1,0,0,0,1638,213,1,0,0,0,1639,1640,
  	5,4,0,0,1640,215,1,0,0,0,1641,1642,5,4,0,0,1642,217,1,0,0,0,1643,1644,
  	3,220,110,0,1644,219,1,0,0,0,1645,1646,5,53,0,0,1646,221,1,0,0,0,1647,
  	1648,5,44,0,0,1648,223,1,0,0,0,1649,1650,3,226,113,0,1650,225,1,0,0,0,
  	1651,1652,3,228,114,0,1652,1653,5,65,0,0,1653,1654,5,53,0,0,1654,227,
  	1,0,0,0,1655,1656,6,114,-1,0,1656,1657,5,53,0,0,1657,1663,1,0,0,0,1658,
  	1659,10,2,0,0,1659,1660,5,65,0,0,1660,1662,5,53,0,0,1661,1658,1,0,0,0,
  	1662,1665,1,0,0,0,1663,1661,1,0,0,0,1663,1664,1,0,0,0,1664,229,1,0,0,
  	0,1665,1663,1,0,0,0,1666,1667,5,69,0,0,1667,1668,3,196,98,0,1668,1669,
  	5,70,0,0,1669,231,1,0,0,0,1670,1672,5,76,0,0,1671,1673,3,236,118,0,1672,
  	1671,1,0,0,0,1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1681,5,77,0,0,1675,
  	1677,5,69,0,0,1676,1678,3,234,117,0,1677,1676,1,0,0,0,1677,1678,1,0,0,
  	0,1678,1679,1,0,0,0,1679,1681,5,70,0,0,1680,1670,1,0,0,0,1680,1675,1,
  	0,0,0,1681,233,1,0,0,0,1682,1683,3,238,119,0,1683,1685,5,71,0,0,1684,
  	1686,3,236,118,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,235,1,0,0,0,
  	1687,1692,3,238,119,0,1688,1689,5,71,0,0,1689,1691,3,238,119,0,1690,1688,
  	1,0,0,0,1691,1694,1,0,0,0,1692,1690,1,0,0,0,1692,1693,1,0,0,0,1693,1696,
  	1,0,0,0,1694,1692,1,0,0,0,1695,1697,5,71,0,0,1696,1695,1,0,0,0,1696,1697,
  	1,0,0,0,1697,237,1,0,0,0,1698,1701,3,240,120,0,1699,1701,3,196,98,0,1700,
  	1698,1,0,0,0,1700,1699,1,0,0,0,1701,239,1,0,0,0,1702,1703,5,68,0,0,1703,
  	1707,3,220,110,0,1704,1705,5,68,0,0,1705,1707,3,222,111,0,1706,1702,1,
  	0,0,0,1706,1704,1,0,0,0,1707,241,1,0,0,0,1708,1709,5,89,0,0,1709,1734,
  	5,90,0,0,1710,1711,5,89,0,0,1711,1713,3,248,124,0,1712,1714,5,71,0,0,
  	1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1716,5,90,
  	0,0,1716,1734,1,0,0,0,1717,1718,5,89,0,0,1718,1719,3,244,122,0,1719,1720,
  	5,71,0,0,1720,1722,3,248,124,0,1721,1723,5,71,0,0,1722,1721,1,0,0,0,1722,
  	1723,1,0,0,0,1723,1724,1,0,0,0,1724,1725,5,90,0,0,1725,1734,1,0,0,0,1726,
  	1727,5,89,0,0,1727,1729,3,244,122,0,1728,1730,5,71,0,0,1729,1728,1,0,
  	0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1732,5,90,0,0,1732,1734,
  	1,0,0,0,1733,1708,1,0,0,0,1733,1710,1,0,0,0,1733,1717,1,0,0,0,1733,1726,
  	1,0,0,0,1734,243,1,0,0,0,1735,1740,3,246,123,0,1736,1737,5,71,0,0,1737,
  	1739,3,246,123,0,1738,1736,1,0,0,0,1739,1742,1,0,0,0,1740,1738,1,0,0,
  	0,1740,1741,1,0,0,0,1741,245,1,0,0,0,1742,1740,1,0,0,0,1743,1746,3,206,
  	103,0,1744,1746,3,226,113,0,1745,1743,1,0,0,0,1745,1744,1,0,0,0,1746,
  	1747,1,0,0,0,1747,1748,5,72,0,0,1748,1749,3,196,98,0,1749,247,1,0,0,0,
  	1750,1751,5,74,0,0,1751,1752,3,220,110,0,1752,249,1,0,0,0,1753,1754,3,
  	228,114,0,1754,1755,5,69,0,0,1755,1756,5,70,0,0,1756,1784,1,0,0,0,1757,
  	1758,3,228,114,0,1758,1759,5,69,0,0,1759,1761,3,252,126,0,1760,1762,5,
  	71,0,0,1761,1760,1,0,0,0,1761,1762,1,0,0,0,1762,1763,1,0,0,0,1763,1764,
  	5,70,0,0,1764,1784,1,0,0,0,1765,1766,3,228,114,0,1766,1767,5,69,0,0,1767,
  	1769,3,254,127,0,1768,1770,5,71,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,
  	0,1770,1771,1,0,0,0,1771,1772,5,70,0,0,1772,1784,1,0,0,0,1773,1774,3,
  	228,114,0,1774,1775,5,69,0,0,1775,1776,3,252,126,0,1776,1777,5,71,0,0,
  	1777,1779,3,254,127,0,1778,1780,5,71,0,0,1779,1778,1,0,0,0,1779,1780,
  	1,0,0,0,1780,1781,1,0,0,0,1781,1782,5,70,0,0,1782,1784,1,0,0,0,1783,1753,
  	1,0,0,0,1783,1757,1,0,0,0,1783,1765,1,0,0,0,1783,1773,1,0,0,0,1784,251,
  	1,0,0,0,1785,1790,3,196,98,0,1786,1787,5,71,0,0,1787,1789,3,196,98,0,
  	1788,1786,1,0,0,0,1789,1792,1,0,0,0,1790,1788,1,0,0,0,1790,1791,1,0,0,
  	0,1791,253,1,0,0,0,1792,1790,1,0,0,0,1793,1798,3,256,128,0,1794,1795,
  	5,71,0,0,1795,1797,3,256,128,0,1796,1794,1,0,0,0,1797,1800,1,0,0,0,1798,
  	1796,1,0,0,0,1798,1799,1,0,0,0,1799,255,1,0,0,0,1800,1798,1,0,0,0,1801,
  	1802,5,53,0,0,1802,1803,5,75,0,0,1803,1804,3,196,98,0,1804,257,1,0,0,
  	0,1805,1806,5,43,0,0,1806,1808,5,53,0,0,1807,1809,3,260,130,0,1808,1807,
  	1,0,0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1811,5,75,0,0,1811,1812,
  	3,270,135,0,1812,259,1,0,0,0,1813,1814,5,76,0,0,1814,1815,3,262,131,0,
  	1815,1816,5,77,0,0,1816,261,1,0,0,0,1817,1822,3,264,132,0,1818,1819,5,
  	71,0,0,1819,1821,3,264,132,0,1820,1818,1,0,0,0,1821,1824,1,0,0,0,1822,
  	1820,1,0,0,0,1822,1823,1,0,0,0,1823,1826,1,0,0,0,1824,1822,1,0,0,0,1825,
  	1827,5,71,0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,263,1,0,0,0,1828,
  	1830,5,53,0,0,1829,1831,3,266,133,0,1830,1829,1,0,0,0,1830,1831,1,0,0,
  	0,1831,1837,1,0,0,0,1832,1833,5,68,0,0,1833,1837,5,53,0,0,1834,1835,5,
  	74,0,0,1835,1837,5,53,0,0,1836,1828,1,0,0,0,1836,1832,1,0,0,0,1836,1834,
  	1,0,0,0,1837,265,1,0,0,0,1838,1839,5,72,0,0,1839,1840,3,270,135,0,1840,
  	267,1,0,0,0,1841,1846,3,270,135,0,1842,1843,5,71,0,0,1843,1845,3,270,
  	135,0,1844,1842,1,0,0,0,1845,1848,1,0,0,0,1846,1844,1,0,0,0,1846,1847,
  	1,0,0,0,1847,1850,1,0,0,0,1848,1846,1,0,0,0,1849,1851,5,71,0,0,1850,1849,
  	1,0,0,0,1850,1851,1,0,0,0,1851,269,1,0,0,0,1852,1853,3,286,143,0,1853,
  	1854,5,28,0,0,1854,1855,3,286,143,0,1855,1856,5,21,0,0,1856,1857,3,270,
  	135,0,1857,1861,1,0,0,0,1858,1861,3,286,143,0,1859,1861,3,344,172,0,1860,
  	1852,1,0,0,0,1860,1858,1,0,0,0,1860,1859,1,0,0,0,1861,271,1,0,0,0,1862,
  	1863,5,48,0,0,1863,1864,5,26,0,0,1864,1870,3,270,135,0,1865,1867,5,48,
  	0,0,1866,1868,3,274,137,0,1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,1870,
  	1,0,0,0,1869,1862,1,0,0,0,1869,1865,1,0,0,0,1870,273,1,0,0,0,1871,1876,
  	3,276,138,0,1872,1873,5,71,0,0,1873,1875,3,276,138,0,1874,1872,1,0,0,
  	0,1875,1878,1,0,0,0,1876,1874,1,0,0,0,1876,1877,1,0,0,0,1877,1880,1,0,
  	0,0,1878,1876,1,0,0,0,1879,1881,5,71,0,0,1880,1879,1,0,0,0,1880,1881,
  	1,0,0,0,1881,275,1,0,0,0,1882,1883,5,68,0,0,1883,1886,3,316,158,0,1884,
  	1886,3,270,135,0,1885,1882,1,0,0,0,1885,1884,1,0,0,0,1886,277,1,0,0,0,
  	1887,1892,3,280,140,0,1888,1889,5,71,0,0,1889,1891,3,280,140,0,1890,1888,
  	1,0,0,0,1891,1894,1,0,0,0,1892,1890,1,0,0,0,1892,1893,1,0,0,0,1893,1896,
  	1,0,0,0,1894,1892,1,0,0,0,1895,1897,5,71,0,0,1896,1895,1,0,0,0,1896,1897,
  	1,0,0,0,1897,279,1,0,0,0,1898,1899,5,68,0,0,1899,1902,3,316,158,0,1900,
  	1902,3,284,142,0,1901,1898,1,0,0,0,1901,1900,1,0,0,0,1902,281,1,0,0,0,
  	1903,1904,5,53,0,0,1904,1905,5,113,0,0,1905,1906,3,270,135,0,1906,283,
  	1,0,0,0,1907,1910,3,282,141,0,1908,1910,3,270,135,0,1909,1907,1,0,0,0,
  	1909,1908,1,0,0,0,1910,285,1,0,0,0,1911,1916,3,288,144,0,1912,1913,5,
  	37,0,0,1913,1915,3,288,144,0,1914,1912,1,0,0,0,1915,1918,1,0,0,0,1916,
  	1914,1,0,0,0,1916,1917,1,0,0,0,1917,287,1,0,0,0,1918,1916,1,0,0,0,1919,
  	1924,3,290,145,0,1920,1921,5,9,0,0,1921,1923,3,290,145,0,1922,1920,1,
  	0,0,0,1923,1926,1,0,0,0,1924,1922,1,0,0,0,1924,1925,1,0,0,0,1925,289,
  	1,0,0,0,1926,1924,1,0,0,0,1927,1928,5,36,0,0,1928,1931,3,290,145,0,1929,
  	1931,3,292,146,0,1930,1927,1,0,0,0,1930,1929,1,0,0,0,1931,291,1,0,0,0,
  	1932,1936,3,316,158,0,1933,1935,3,294,147,0,1934,1933,1,0,0,0,1935,1938,
  	1,0,0,0,1936,1934,1,0,0,0,1936,1937,1,0,0,0,1937,293,1,0,0,0,1938,1936,
  	1,0,0,0,1939,1950,3,296,148,0,1940,1950,3,298,149,0,1941,1950,3,300,150,
  	0,1942,1950,3,302,151,0,1943,1950,3,304,152,0,1944,1950,3,306,153,0,1945,
  	1950,3,308,154,0,1946,1950,3,310,155,0,1947,1950,3,312,156,0,1948,1950,
  	3,314,157,0,1949,1939,1,0,0,0,1949,1940,1,0,0,0,1949,1941,1,0,0,0,1949,
  	1942,1,0,0,0,1949,1943,1,0,0,0,1949,1944,1,0,0,0,1949,1945,1,0,0,0,1949,
  	1946,1,0,0,0,1949,1947,1,0,0,0,1949,1948,1,0,0,0,1950,295,1,0,0,0,1951,
  	1952,5,93,0,0,1952,1953,3,316,158,0,1953,297,1,0,0,0,1954,1955,5,97,0,
  	0,1955,1956,3,316,158,0,1956,299,1,0,0,0,1957,1958,5,95,0,0,1958,1959,
  	3,316,158,0,1959,301,1,0,0,0,1960,1961,5,91,0,0,1961,1962,3,316,158,0,
  	1962,303,1,0,0,0,1963,1964,5,94,0,0,1964,1965,3,316,158,0,1965,305,1,
  	0,0,0,1966,1967,5,92,0,0,1967,1968,3,316,158,0,1968,307,1,0,0,0,1969,
  	1970,5,36,0,0,1970,1971,5,30,0,0,1971,1972,3,316,158,0,1972,309,1,0,0,
  	0,1973,1974,5,30,0,0,1974,1975,3,316,158,0,1975,311,1,0,0,0,1976,1977,
  	5,31,0,0,1977,1978,5,36,0,0,1978,1979,3,316,158,0,1979,313,1,0,0,0,1980,
  	1981,5,31,0,0,1981,1982,3,316,158,0,1982,315,1,0,0,0,1983,1984,6,158,
  	-1,0,1984,1985,3,318,159,0,1985,1991,1,0,0,0,1986,1987,10,2,0,0,1987,
  	1988,5,78,0,0,1988,1990,3,318,159,0,1989,1986,1,0,0,0,1990,1993,1,0,0,
  	0,1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,317,1,0,0,0,1993,1991,1,0,
  	0,0,1994,1995,6,159,-1,0,1995,1996,3,320,160,0,1996,2002,1,0,0,0,1997,
  	1998,10,2,0,0,1998,1999,5,79,0,0,1999,2001,3,320,160,0,2000,1997,1,0,
  	0,0,2001,2004,1,0,0,0,2002,2000,1,0,0,0,2002,2003,1,0,0,0,2003,319,1,
  	0,0,0,2004,2002,1,0,0,0,2005,2006,6,160,-1,0,2006,2007,3,322,161,0,2007,
  	2013,1,0,0,0,2008,2009,10,2,0,0,2009,2010,5,80,0,0,2010,2012,3,322,161,
  	0,2011,2008,1,0,0,0,2012,2015,1,0,0,0,2013,2011,1,0,0,0,2013,2014,1,0,
  	0,0,2014,321,1,0,0,0,2015,2013,1,0,0,0,2016,2017,6,161,-1,0,2017,2018,
  	3,324,162,0,2018,2027,1,0,0,0,2019,2020,10,3,0,0,2020,2021,5,81,0,0,2021,
  	2026,3,324,162,0,2022,2023,10,2,0,0,2023,2024,5,82,0,0,2024,2026,3,324,
  	162,0,2025,2019,1,0,0,0,2025,2022,1,0,0,0,2026,2029,1,0,0,0,2027,2025,
  	1,0,0,0,2027,2028,1,0,0,0,2028,323,1,0,0,0,2029,2027,1,0,0,0,2030,2031,
  	6,162,-1,0,2031,2032,3,326,163,0,2032,2041,1,0,0,0,2033,2034,10,3,0,0,
  	2034,2035,5,83,0,0,2035,2040,3,326,163,0,2036,2037,10,2,0,0,2037,2038,
  	5,84,0,0,2038,2040,3,326,163,0,2039,2033,1,0,0,0,2039,2036,1,0,0,0,2040,
  	2043,1,0,0,0,2041,2039,1,0,0,0,2041,2042,1,0,0,0,2042,325,1,0,0,0,2043,
  	2041,1,0,0,0,2044,2045,6,163,-1,0,2045,2046,3,328,164,0,2046,2064,1,0,
  	0,0,2047,2048,10,6,0,0,2048,2049,5,68,0,0,2049,2063,3,328,164,0,2050,
  	2051,10,5,0,0,2051,2052,5,85,0,0,2052,2063,3,328,164,0,2053,2054,10,4,
  	0,0,2054,2055,5,87,0,0,2055,2063,3,328,164,0,2056,2057,10,3,0,0,2057,
  	2058,5,86,0,0,2058,2063,3,328,164,0,2059,2060,10,2,0,0,2060,2061,5,98,
  	0,0,2061,2063,3,328,164,0,2062,2047,1,0,0,0,2062,2050,1,0,0,0,2062,2053,
  	1,0,0,0,2062,2056,1,0,0,0,2062,2059,1,0,0,0,2063,2066,1,0,0,0,2064,2062,
  	1,0,0,0,2064,2065,1,0,0,0,2065,327,1,0,0,0,2066,2064,1,0,0,0,2067,2068,
  	5,83,0,0,2068,2075,3,328,164,0,2069,2070,5,84,0,0,2070,2075,3,328,164,
  	0,2071,2072,5,88,0,0,2072,2075,3,328,164,0,2073,2075,3,330,165,0,2074,
  	2067,1,0,0,0,2074,2069,1,0,0,0,2074,2071,1,0,0,0,2074,2073,1,0,0,0,2075,
  	329,1,0,0,0,2076,2077,3,332,166,0,2077,2078,5,74,0,0,2078,2079,3,328,
  	164,0,2079,2082,1,0,0,0,2080,2082,3,332,166,0,2081,2076,1,0,0,0,2081,
  	2080,1,0,0,0,2082,331,1,0,0,0,2083,2084,5,13,0,0,2084,2087,3,334,167,
  	0,2085,2087,3,334,167,0,2086,2083,1,0,0,0,2086,2085,1,0,0,0,2087,333,
  	1,0,0,0,2088,2089,6,167,-1,0,2089,2090,3,340,170,0,2090,2109,1,0,0,0,
  	2091,2092,10,5,0,0,2092,2093,5,65,0,0,2093,2108,5,53,0,0,2094,2095,10,
  	4,0,0,2095,2108,3,404,202,0,2096,2097,10,3,0,0,2097,2099,5,69,0,0,2098,
  	2100,3,408,204,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,
  	0,2101,2108,5,70,0,0,2102,2103,10,2,0,0,2103,2104,5,76,0,0,2104,2105,
  	3,336,168,0,2105,2106,5,77,0,0,2106,2108,1,0,0,0,2107,2091,1,0,0,0,2107,
  	2094,1,0,0,0,2107,2096,1,0,0,0,2107,2102,1,0,0,0,2108,2111,1,0,0,0,2109,
  	2107,1,0,0,0,2109,2110,1,0,0,0,2110,335,1,0,0,0,2111,2109,1,0,0,0,2112,
  	2115,3,338,169,0,2113,2115,3,416,208,0,2114,2112,1,0,0,0,2114,2113,1,
  	0,0,0,2115,2123,1,0,0,0,2116,2119,5,71,0,0,2117,2120,3,338,169,0,2118,
  	2120,3,416,208,0,2119,2117,1,0,0,0,2119,2118,1,0,0,0,2120,2122,1,0,0,
  	0,2121,2116,1,0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,
  	0,0,2124,2127,1,0,0,0,2125,2123,1,0,0,0,2126,2128,5,71,0,0,2127,2126,
  	1,0,0,0,2127,2128,1,0,0,0,2128,337,1,0,0,0,2129,2131,3,270,135,0,2130,
  	2129,1,0,0,0,2130,2131,1,0,0,0,2131,2132,1,0,0,0,2132,2134,5,72,0,0,2133,
  	2135,3,270,135,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,2140,1,0,0,
  	0,2136,2138,5,72,0,0,2137,2139,3,270,135,0,2138,2137,1,0,0,0,2138,2139,
  	1,0,0,0,2139,2141,1,0,0,0,2140,2136,1,0,0,0,2140,2141,1,0,0,0,2141,2144,
  	1,0,0,0,2142,2144,3,284,142,0,2143,2130,1,0,0,0,2143,2142,1,0,0,0,2144,
  	339,1,0,0,0,2145,2169,3,44,22,0,2146,2169,5,53,0,0,2147,2169,5,41,0,0,
  	2148,2169,5,23,0,0,2149,2169,5,34,0,0,2150,2169,3,380,190,0,2151,2169,
  	5,4,0,0,2152,2156,3,384,192,0,2153,2156,3,342,171,0,2154,2156,3,404,202,
  	0,2155,2152,1,0,0,0,2155,2153,1,0,0,0,2155,2154,1,0,0,0,2156,2169,1,0,
  	0,0,2157,2160,3,382,191,0,2158,2160,3,400,200,0,2159,2157,1,0,0,0,2159,
  	2158,1,0,0,0,2160,2169,1,0,0,0,2161,2166,3,388,194,0,2162,2166,3,386,
  	193,0,2163,2166,3,406,203,0,2164,2166,3,402,201,0,2165,2161,1,0,0,0,2165,
  	2162,1,0,0,0,2165,2163,1,0,0,0,2165,2164,1,0,0,0,2166,2169,1,0,0,0,2167,
  	2169,5,67,0,0,2168,2145,1,0,0,0,2168,2146,1,0,0,0,2168,2147,1,0,0,0,2168,
  	2148,1,0,0,0,2168,2149,1,0,0,0,2168,2150,1,0,0,0,2168,2151,1,0,0,0,2168,
  	2155,1,0,0,0,2168,2159,1,0,0,0,2168,2165,1,0,0,0,2168,2167,1,0,0,0,2169,
  	341,1,0,0,0,2170,2173,5,69,0,0,2171,2174,3,272,136,0,2172,2174,3,284,
  	142,0,2173,2171,1,0,0,0,2173,2172,1,0,0,0,2174,2175,1,0,0,0,2175,2176,
  	5,70,0,0,2176,343,1,0,0,0,2177,2179,5,32,0,0,2178,2180,3,346,173,0,2179,
  	2178,1,0,0,0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2182,5,72,0,0,2182,
  	2183,3,270,135,0,2183,345,1,0,0,0,2184,2185,3,348,174,0,2185,347,1,0,
  	0,0,2186,2190,3,350,175,0,2187,2189,3,358,179,0,2188,2187,1,0,0,0,2189,
  	2192,1,0,0,0,2190,2188,1,0,0,0,2190,2191,1,0,0,0,2191,2196,1,0,0,0,2192,
  	2190,1,0,0,0,2193,2195,3,360,180,0,2194,2193,1,0,0,0,2195,2198,1,0,0,
  	0,2196,2194,1,0,0,0,2196,2197,1,0,0,0,2197,2200,1,0,0,0,2198,2196,1,0,
  	0,0,2199,2201,3,354,177,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2236,
  	1,0,0,0,2202,2206,3,352,176,0,2203,2205,3,360,180,0,2204,2203,1,0,0,0,
  	2205,2208,1,0,0,0,2206,2204,1,0,0,0,2206,2207,1,0,0,0,2207,2210,1,0,0,
  	0,2208,2206,1,0,0,0,2209,2211,3,354,177,0,2210,2209,1,0,0,0,2210,2211,
  	1,0,0,0,2211,2236,1,0,0,0,2212,2214,3,358,179,0,2213,2212,1,0,0,0,2214,
  	2215,1,0,0,0,2215,2213,1,0,0,0,2215,2216,1,0,0,0,2216,2220,1,0,0,0,2217,
  	2219,3,360,180,0,2218,2217,1,0,0,0,2219,2222,1,0,0,0,2220,2218,1,0,0,
  	0,2220,2221,1,0,0,0,2221,2224,1,0,0,0,2222,2220,1,0,0,0,2223,2225,3,354,
  	177,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2236,1,0,0,0,2226,2228,
  	3,360,180,0,2227,2226,1,0,0,0,2228,2229,1,0,0,0,2229,2227,1,0,0,0,2229,
  	2230,1,0,0,0,2230,2232,1,0,0,0,2231,2233,3,354,177,0,2232,2231,1,0,0,
  	0,2232,2233,1,0,0,0,2233,2236,1,0,0,0,2234,2236,3,354,177,0,2235,2186,
  	1,0,0,0,2235,2202,1,0,0,0,2235,2213,1,0,0,0,2235,2227,1,0,0,0,2235,2234,
  	1,0,0,0,2236,349,1,0,0,0,2237,2239,3,358,179,0,2238,2237,1,0,0,0,2239,
  	2240,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,
  	2244,5,85,0,0,2243,2245,5,71,0,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,
  	2245,351,1,0,0,0,2246,2248,3,358,179,0,2247,2246,1,0,0,0,2248,2251,1,
  	0,0,0,2249,2247,1,0,0,0,2249,2250,1,0,0,0,2250,2253,1,0,0,0,2251,2249,
  	1,0,0,0,2252,2254,3,360,180,0,2253,2252,1,0,0,0,2254,2255,1,0,0,0,2255,
  	2253,1,0,0,0,2255,2256,1,0,0,0,2256,2257,1,0,0,0,2257,2259,5,85,0,0,2258,
  	2260,5,71,0,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,353,1,0,0,0,2261,
  	2262,5,68,0,0,2262,2266,3,358,179,0,2263,2265,3,362,181,0,2264,2263,1,
  	0,0,0,2265,2268,1,0,0,0,2266,2264,1,0,0,0,2266,2267,1,0,0,0,2267,2270,
  	1,0,0,0,2268,2266,1,0,0,0,2269,2271,3,356,178,0,2270,2269,1,0,0,0,2270,
  	2271,1,0,0,0,2271,2284,1,0,0,0,2272,2273,5,68,0,0,2273,2275,5,71,0,0,
  	2274,2276,3,362,181,0,2275,2274,1,0,0,0,2276,2277,1,0,0,0,2277,2275,1,
  	0,0,0,2277,2278,1,0,0,0,2278,2280,1,0,0,0,2279,2281,3,356,178,0,2280,
  	2279,1,0,0,0,2280,2281,1,0,0,0,2281,2284,1,0,0,0,2282,2284,3,356,178,
  	0,2283,2261,1,0,0,0,2283,2272,1,0,0,0,2283,2282,1,0,0,0,2284,355,1,0,
  	0,0,2285,2286,5,74,0,0,2286,2287,3,358,179,0,2287,357,1,0,0,0,2288,2290,
  	3,364,182,0,2289,2291,5,71,0,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,
  	359,1,0,0,0,2292,2293,3,364,182,0,2293,2295,3,162,81,0,2294,2296,5,71,
  	0,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,361,1,0,0,0,2297,2299,3,
  	364,182,0,2298,2300,3,162,81,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,2300,
  	2302,1,0,0,0,2301,2303,5,71,0,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,
  	363,1,0,0,0,2304,2305,5,53,0,0,2305,365,1,0,0,0,2306,2309,3,368,184,0,
  	2307,2309,5,118,0,0,2308,2306,1,0,0,0,2308,2307,1,0,0,0,2309,367,1,0,
  	0,0,2310,2313,5,89,0,0,2311,2314,3,272,136,0,2312,2314,3,274,137,0,2313,
  	2311,1,0,0,0,2313,2312,1,0,0,0,2314,2316,1,0,0,0,2315,2317,5,75,0,0,2316,
  	2315,1,0,0,0,2316,2317,1,0,0,0,2317,2319,1,0,0,0,2318,2320,3,370,185,
  	0,2319,2318,1,0,0,0,2319,2320,1,0,0,0,2320,2322,1,0,0,0,2321,2323,3,372,
  	186,0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2324,1,0,0,0,2324,2325,
  	5,90,0,0,2325,369,1,0,0,0,2326,2330,1,0,0,0,2327,2328,5,114,0,0,2328,
  	2330,5,53,0,0,2329,2326,1,0,0,0,2329,2327,1,0,0,0,2330,371,1,0,0,0,2331,
  	2335,5,72,0,0,2332,2334,3,374,187,0,2333,2332,1,0,0,0,2334,2337,1,0,0,
  	0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,373,1,0,0,0,2337,2335,1,0,
  	0,0,2338,2341,5,118,0,0,2339,2341,3,368,184,0,2340,2338,1,0,0,0,2340,
  	2339,1,0,0,0,2341,375,1,0,0,0,2342,2346,5,119,0,0,2343,2345,3,366,183,
  	0,2344,2343,1,0,0,0,2345,2348,1,0,0,0,2346,2344,1,0,0,0,2346,2347,1,0,
  	0,0,2347,2349,1,0,0,0,2348,2346,1,0,0,0,2349,2350,5,120,0,0,2350,377,
  	1,0,0,0,2351,2352,5,3,0,0,2352,379,1,0,0,0,2353,2356,3,376,188,0,2354,
  	2356,3,378,189,0,2355,2353,1,0,0,0,2355,2354,1,0,0,0,2356,2357,1,0,0,
  	0,2357,2355,1,0,0,0,2357,2358,1,0,0,0,2358,381,1,0,0,0,2359,2361,5,76,
  	0,0,2360,2362,3,278,139,0,2361,2360,1,0,0,0,2361,2362,1,0,0,0,2362,2363,
  	1,0,0,0,2363,2364,5,77,0,0,2364,383,1,0,0,0,2365,2370,5,69,0,0,2366,2367,
  	3,280,140,0,2367,2368,5,71,0,0,2368,2369,3,278,139,0,2369,2371,1,0,0,
  	0,2370,2366,1,0,0,0,2370,2371,1,0,0,0,2371,2372,1,0,0,0,2372,2373,5,70,
  	0,0,2373,385,1,0,0,0,2374,2375,5,89,0,0,2375,2376,3,278,139,0,2376,2377,
  	5,90,0,0,2377,387,1,0,0,0,2378,2380,5,89,0,0,2379,2381,3,390,195,0,2380,
  	2379,1,0,0,0,2380,2381,1,0,0,0,2381,2382,1,0,0,0,2382,2383,5,90,0,0,2383,
  	389,1,0,0,0,2384,2389,3,392,196,0,2385,2386,5,71,0,0,2386,2388,3,392,
  	196,0,2387,2385,1,0,0,0,2388,2391,1,0,0,0,2389,2387,1,0,0,0,2389,2390,
  	1,0,0,0,2390,2393,1,0,0,0,2391,2389,1,0,0,0,2392,2394,5,71,0,0,2393,2392,
  	1,0,0,0,2393,2394,1,0,0,0,2394,391,1,0,0,0,2395,2396,5,74,0,0,2396,2399,
  	3,316,158,0,2397,2399,3,394,197,0,2398,2395,1,0,0,0,2398,2397,1,0,0,0,
  	2399,393,1,0,0,0,2400,2401,3,270,135,0,2401,2402,5,72,0,0,2402,2403,3,
  	270,135,0,2403,395,1,0,0,0,2404,2406,3,398,199,0,2405,2404,1,0,0,0,2406,
  	2407,1,0,0,0,2407,2405,1,0,0,0,2407,2408,1,0,0,0,2408,397,1,0,0,0,2409,
  	2411,5,12,0,0,2410,2409,1,0,0,0,2410,2411,1,0,0,0,2411,2412,1,0,0,0,2412,
  	2413,5,25,0,0,2413,2414,3,422,211,0,2414,2415,5,30,0,0,2415,2420,3,286,
  	143,0,2416,2417,5,28,0,0,2417,2419,3,286,143,0,2418,2416,1,0,0,0,2419,
  	2422,1,0,0,0,2420,2418,1,0,0,0,2420,2421,1,0,0,0,2421,399,1,0,0,0,2422,
  	2420,1,0,0,0,2423,2424,5,76,0,0,2424,2425,3,284,142,0,2425,2426,3,396,
  	198,0,2426,2427,5,77,0,0,2427,401,1,0,0,0,2428,2429,5,89,0,0,2429,2430,
  	3,284,142,0,2430,2431,3,396,198,0,2431,2432,5,90,0,0,2432,403,1,0,0,0,
  	2433,2436,5,69,0,0,2434,2437,3,282,141,0,2435,2437,3,270,135,0,2436,2434,
  	1,0,0,0,2436,2435,1,0,0,0,2437,2438,1,0,0,0,2438,2439,3,396,198,0,2439,
  	2440,5,70,0,0,2440,405,1,0,0,0,2441,2442,5,89,0,0,2442,2443,3,394,197,
  	0,2443,2444,3,396,198,0,2444,2445,5,90,0,0,2445,407,1,0,0,0,2446,2448,
  	3,410,205,0,2447,2449,5,71,0,0,2448,2447,1,0,0,0,2448,2449,1,0,0,0,2449,
  	409,1,0,0,0,2450,2455,3,412,206,0,2451,2452,5,71,0,0,2452,2454,3,412,
  	206,0,2453,2451,1,0,0,0,2454,2457,1,0,0,0,2455,2453,1,0,0,0,2455,2456,
  	1,0,0,0,2456,2460,1,0,0,0,2457,2455,1,0,0,0,2458,2459,5,71,0,0,2459,2461,
  	3,414,207,0,2460,2458,1,0,0,0,2460,2461,1,0,0,0,2461,2464,1,0,0,0,2462,
  	2464,3,414,207,0,2463,2450,1,0,0,0,2463,2462,1,0,0,0,2464,411,1,0,0,0,
  	2465,2469,3,416,208,0,2466,2469,3,282,141,0,2467,2469,3,270,135,0,2468,
  	2465,1,0,0,0,2468,2466,1,0,0,0,2468,2467,1,0,0,0,2469,413,1,0,0,0,2470,
  	2475,3,418,209,0,2471,2472,5,71,0,0,2472,2474,3,418,209,0,2473,2471,1,
  	0,0,0,2474,2477,1,0,0,0,2475,2473,1,0,0,0,2475,2476,1,0,0,0,2476,2478,
  	1,0,0,0,2477,2475,1,0,0,0,2478,2479,5,71,0,0,2479,2484,3,420,210,0,2480,
  	2481,5,71,0,0,2481,2483,3,420,210,0,2482,2480,1,0,0,0,2483,2486,1,0,0,
  	0,2484,2482,1,0,0,0,2484,2485,1,0,0,0,2485,2504,1,0,0,0,2486,2484,1,0,
  	0,0,2487,2492,3,418,209,0,2488,2489,5,71,0,0,2489,2491,3,418,209,0,2490,
  	2488,1,0,0,0,2491,2494,1,0,0,0,2492,2490,1,0,0,0,2492,2493,1,0,0,0,2493,
  	2504,1,0,0,0,2494,2492,1,0,0,0,2495,2500,3,420,210,0,2496,2497,5,71,0,
  	0,2497,2499,3,420,210,0,2498,2496,1,0,0,0,2499,2502,1,0,0,0,2500,2498,
  	1,0,0,0,2500,2501,1,0,0,0,2501,2504,1,0,0,0,2502,2500,1,0,0,0,2503,2470,
  	1,0,0,0,2503,2487,1,0,0,0,2503,2495,1,0,0,0,2504,415,1,0,0,0,2505,2506,
  	5,68,0,0,2506,2507,3,270,135,0,2507,417,1,0,0,0,2508,2509,5,53,0,0,2509,
  	2510,5,75,0,0,2510,2513,3,270,135,0,2511,2513,3,416,208,0,2512,2508,1,
  	0,0,0,2512,2511,1,0,0,0,2513,419,1,0,0,0,2514,2515,5,53,0,0,2515,2516,
  	5,75,0,0,2516,2520,3,270,135,0,2517,2518,5,74,0,0,2518,2520,3,270,135,
  	0,2519,2514,1,0,0,0,2519,2517,1,0,0,0,2520,421,1,0,0,0,2521,2526,3,428,
  	214,0,2522,2523,5,71,0,0,2523,2525,3,428,214,0,2524,2522,1,0,0,0,2525,
  	2528,1,0,0,0,2526,2524,1,0,0,0,2526,2527,1,0,0,0,2527,2530,1,0,0,0,2528,
  	2526,1,0,0,0,2529,2531,5,71,0,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,
  	423,1,0,0,0,2532,2537,3,428,214,0,2533,2534,5,71,0,0,2534,2536,3,428,
  	214,0,2535,2533,1,0,0,0,2536,2539,1,0,0,0,2537,2535,1,0,0,0,2537,2538,
  	1,0,0,0,2538,2541,1,0,0,0,2539,2537,1,0,0,0,2540,2542,5,71,0,0,2541,2540,
  	1,0,0,0,2541,2542,1,0,0,0,2542,425,1,0,0,0,2543,2546,3,428,214,0,2544,
  	2545,5,71,0,0,2545,2547,3,428,214,0,2546,2544,1,0,0,0,2547,2548,1,0,0,
  	0,2548,2546,1,0,0,0,2548,2549,1,0,0,0,2549,2551,1,0,0,0,2550,2552,5,71,
  	0,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,2557,1,0,0,0,2553,2554,3,
  	428,214,0,2554,2555,5,71,0,0,2555,2557,1,0,0,0,2556,2543,1,0,0,0,2556,
  	2553,1,0,0,0,2557,427,1,0,0,0,2558,2559,5,68,0,0,2559,2562,3,428,214,
  	0,2560,2562,3,430,215,0,2561,2558,1,0,0,0,2561,2560,1,0,0,0,2562,429,
  	1,0,0,0,2563,2564,3,438,219,0,2564,2565,5,65,0,0,2565,2566,5,53,0,0,2566,
  	2574,1,0,0,0,2567,2568,3,438,219,0,2568,2569,5,76,0,0,2569,2570,3,336,
  	168,0,2570,2571,5,77,0,0,2571,2574,1,0,0,0,2572,2574,3,432,216,0,2573,
  	2563,1,0,0,0,2573,2567,1,0,0,0,2573,2572,1,0,0,0,2574,431,1,0,0,0,2575,
  	2591,5,53,0,0,2576,2577,5,69,0,0,2577,2578,3,430,215,0,2578,2579,5,70,
  	0,0,2579,2591,1,0,0,0,2580,2582,5,69,0,0,2581,2583,3,426,213,0,2582,2581,
  	1,0,0,0,2582,2583,1,0,0,0,2583,2584,1,0,0,0,2584,2591,5,70,0,0,2585,2587,
  	5,76,0,0,2586,2588,3,424,212,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,
  	2589,1,0,0,0,2589,2591,5,77,0,0,2590,2575,1,0,0,0,2590,2576,1,0,0,0,2590,
  	2580,1,0,0,0,2590,2585,1,0,0,0,2591,433,1,0,0,0,2592,2599,3,436,218,0,
  	2593,2599,5,53,0,0,2594,2595,5,69,0,0,2595,2596,3,434,217,0,2596,2597,
  	5,70,0,0,2597,2599,1,0,0,0,2598,2592,1,0,0,0,2598,2593,1,0,0,0,2598,2594,
  	1,0,0,0,2599,435,1,0,0,0,2600,2601,3,438,219,0,2601,2602,5,65,0,0,2602,
  	2603,5,53,0,0,2603,2610,1,0,0,0,2604,2605,3,438,219,0,2605,2606,5,76,
  	0,0,2606,2607,3,336,168,0,2607,2608,5,77,0,0,2608,2610,1,0,0,0,2609,2600,
  	1,0,0,0,2609,2604,1,0,0,0,2610,437,1,0,0,0,2611,2612,6,219,-1,0,2612,
  	2613,3,340,170,0,2613,2632,1,0,0,0,2614,2615,10,5,0,0,2615,2616,5,65,
  	0,0,2616,2631,5,53,0,0,2617,2618,10,4,0,0,2618,2619,5,76,0,0,2619,2620,
  	3,336,168,0,2620,2621,5,77,0,0,2621,2631,1,0,0,0,2622,2623,10,3,0,0,2623,
  	2631,3,404,202,0,2624,2625,10,2,0,0,2625,2627,5,69,0,0,2626,2628,3,408,
  	204,0,2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,2629,1,0,0,0,2629,2631,
  	5,70,0,0,2630,2614,1,0,0,0,2630,2617,1,0,0,0,2630,2622,1,0,0,0,2630,2624,
  	1,0,0,0,2631,2634,1,0,0,0,2632,2630,1,0,0,0,2632,2633,1,0,0,0,2633,439,
  	1,0,0,0,2634,2632,1,0,0,0,2635,2640,3,442,221,0,2636,2637,5,71,0,0,2637,
  	2639,3,442,221,0,2638,2636,1,0,0,0,2639,2642,1,0,0,0,2640,2638,1,0,0,
  	0,2640,2641,1,0,0,0,2641,2644,1,0,0,0,2642,2640,1,0,0,0,2643,2645,5,71,
  	0,0,2644,2643,1,0,0,0,2644,2645,1,0,0,0,2645,441,1,0,0,0,2646,2647,3,
  	438,219,0,2647,2648,5,65,0,0,2648,2649,5,53,0,0,2649,2657,1,0,0,0,2650,
  	2651,3,438,219,0,2651,2652,5,76,0,0,2652,2653,3,336,168,0,2653,2654,5,
  	77,0,0,2654,2657,1,0,0,0,2655,2657,3,444,222,0,2656,2646,1,0,0,0,2656,
  	2650,1,0,0,0,2656,2655,1,0,0,0,2657,443,1,0,0,0,2658,2670,5,53,0,0,2659,
  	2661,5,69,0,0,2660,2662,3,440,220,0,2661,2660,1,0,0,0,2661,2662,1,0,0,
  	0,2662,2663,1,0,0,0,2663,2670,5,70,0,0,2664,2666,5,76,0,0,2665,2667,3,
  	440,220,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,2667,2668,1,0,0,0,2668,
  	2670,5,77,0,0,2669,2658,1,0,0,0,2669,2659,1,0,0,0,2669,2664,1,0,0,0,2670,
  	445,1,0,0,0,2671,2676,3,270,135,0,2672,2673,5,71,0,0,2673,2675,3,270,
  	135,0,2674,2672,1,0,0,0,2675,2678,1,0,0,0,2676,2674,1,0,0,0,2676,2677,
  	1,0,0,0,2677,2679,1,0,0,0,2678,2676,1,0,0,0,2679,2680,5,71,0,0,2680,2681,
  	5,68,0,0,2681,2682,3,270,135,0,2682,2683,5,71,0,0,2683,2684,5,74,0,0,
  	2684,2685,3,270,135,0,2685,2729,1,0,0,0,2686,2691,3,270,135,0,2687,2688,
  	5,71,0,0,2688,2690,3,270,135,0,2689,2687,1,0,0,0,2690,2693,1,0,0,0,2691,
  	2689,1,0,0,0,2691,2692,1,0,0,0,2692,2694,1,0,0,0,2693,2691,1,0,0,0,2694,
  	2695,5,71,0,0,2695,2696,5,68,0,0,2696,2697,3,270,135,0,2697,2729,1,0,
  	0,0,2698,2703,3,270,135,0,2699,2700,5,71,0,0,2700,2702,3,270,135,0,2701,
  	2699,1,0,0,0,2702,2705,1,0,0,0,2703,2701,1,0,0,0,2703,2704,1,0,0,0,2704,
  	2706,1,0,0,0,2705,2703,1,0,0,0,2706,2707,5,71,0,0,2707,2708,5,74,0,0,
  	2708,2709,3,270,135,0,2709,2729,1,0,0,0,2710,2711,5,68,0,0,2711,2712,
  	3,270,135,0,2712,2713,5,71,0,0,2713,2714,5,74,0,0,2714,2715,3,270,135,
  	0,2715,2729,1,0,0,0,2716,2717,5,68,0,0,2717,2729,3,270,135,0,2718,2719,
  	5,74,0,0,2719,2729,3,270,135,0,2720,2725,3,270,135,0,2721,2722,5,71,0,
  	0,2722,2724,3,270,135,0,2723,2721,1,0,0,0,2724,2727,1,0,0,0,2725,2723,
  	1,0,0,0,2725,2726,1,0,0,0,2726,2729,1,0,0,0,2727,2725,1,0,0,0,2728,2671,
  	1,0,0,0,2728,2686,1,0,0,0,2728,2698,1,0,0,0,2728,2710,1,0,0,0,2728,2716,
  	1,0,0,0,2728,2718,1,0,0,0,2728,2720,1,0,0,0,2729,447,1,0,0,0,2730,2731,
  	5,115,0,0,2731,449,1,0,0,0,340,456,463,468,474,481,490,500,504,511,518,
  	526,545,549,553,558,570,575,594,597,599,604,624,629,637,642,648,666,671,
  	677,685,691,697,705,711,717,726,731,746,753,764,766,780,787,794,798,804,
  	811,815,819,823,826,830,834,836,840,845,852,856,859,867,871,875,883,887,
  	891,893,897,904,911,915,920,925,929,945,955,962,969,975,982,986,992,994,
  	998,1004,1010,1013,1021,1030,1042,1046,1055,1066,1070,1075,1081,1088,
  	1094,1101,1107,1117,1126,1134,1137,1144,1148,1151,1157,1162,1167,1171,
  	1176,1180,1190,1196,1200,1206,1210,1215,1220,1224,1229,1232,1235,1240,
  	1244,1249,1255,1259,1266,1270,1277,1281,1288,1291,1294,1303,1309,1318,
  	1322,1328,1330,1334,1359,1361,1374,1376,1387,1396,1406,1408,1417,1421,
  	1433,1447,1451,1464,1470,1477,1490,1493,1496,1504,1507,1510,1512,1518,
  	1526,1533,1550,1557,1560,1565,1575,1579,1590,1601,1609,1617,1627,1632,
  	1637,1663,1672,1677,1680,1685,1692,1696,1700,1706,1713,1722,1729,1733,
  	1740,1745,1761,1769,1779,1783,1790,1798,1808,1822,1826,1830,1836,1846,
  	1850,1860,1867,1869,1876,1880,1885,1892,1896,1901,1909,1916,1924,1930,
  	1936,1949,1991,2002,2013,2025,2027,2039,2041,2062,2064,2074,2081,2086,
  	2099,2107,2109,2114,2119,2123,2127,2130,2134,2138,2140,2143,2155,2159,
  	2165,2168,2173,2179,2190,2196,2200,2206,2210,2215,2220,2224,2229,2232,
  	2235,2240,2244,2249,2255,2259,2266,2270,2277,2280,2283,2290,2295,2299,
  	2302,2308,2313,2316,2319,2322,2329,2335,2340,2346,2355,2357,2361,2370,
  	2380,2389,2393,2398,2407,2410,2420,2436,2448,2455,2460,2463,2468,2475,
  	2484,2492,2500,2503,2512,2519,2526,2530,2537,2541,2548,2551,2556,2561,
  	2573,2582,2587,2590,2598,2609,2627,2630,2632,2640,2644,2656,2661,2666,
  	2669,2676,2691,2703,2725,2728
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fandangoparserParserStaticData = std::move(staticData);
}

}

FandangoParser::FandangoParser(TokenStream *input) : FandangoParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FandangoParser::FandangoParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FandangoParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *fandangoparserParserStaticData->atn, fandangoparserParserStaticData->decisionToDFA, fandangoparserParserStaticData->sharedContextCache, options);
}

FandangoParser::~FandangoParser() {
  delete _interpreter;
}

const atn::ATN& FandangoParser::getATN() const {
  return *fandangoparserParserStaticData->atn;
}

std::string FandangoParser::getGrammarFileName() const {
  return "FandangoParser.g4";
}

const std::vector<std::string>& FandangoParser::getRuleNames() const {
  return fandangoparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& FandangoParser::getVocabulary() const {
  return fandangoparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FandangoParser::getSerializedATN() const {
  return fandangoparserParserStaticData->serializedATN;
}


//----------------- FandangoContext ------------------------------------------------------------------

FandangoParser::FandangoContext::FandangoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProgramContext* FandangoParser::FandangoContext::program() {
  return getRuleContext<FandangoParser::ProgramContext>(0);
}

tree::TerminalNode* FandangoParser::FandangoContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::FandangoContext::getRuleIndex() const {
  return FandangoParser::RuleFandango;
}


std::any FandangoParser::FandangoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFandango(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FandangoContext* FandangoParser::fandango() {
  FandangoContext *_localctx = _tracker.createInstance<FandangoContext>(_ctx, getState());
  enterRule(_localctx, 0, FandangoParser::RuleFandango);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    program();
    setState(451);
    match(FandangoParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

FandangoParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::ProgramContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ProgramContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

std::vector<FandangoParser::StatementContext *> FandangoParser::ProgramContext::statement() {
  return getRuleContexts<FandangoParser::StatementContext>();
}

FandangoParser::StatementContext* FandangoParser::ProgramContext::statement(size_t i) {
  return getRuleContext<FandangoParser::StatementContext>(i);
}


size_t FandangoParser::ProgramContext::getRuleIndex() const {
  return FandangoParser::RuleProgram;
}


std::any FandangoParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProgramContext* FandangoParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, FandangoParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(456);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(453);
        match(FandangoParser::NEWLINE); 
      }
      setState(458);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
    }
    setState(468);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 17996665639106840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4785076758055431) != 0)) {
      setState(459);
      statement();
      setState(463);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(460);
          match(FandangoParser::NEWLINE); 
        }
        setState(465);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
      }
      setState(470);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

FandangoParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProductionContext* FandangoParser::StatementContext::production() {
  return getRuleContext<FandangoParser::ProductionContext>(0);
}

FandangoParser::ConstraintContext* FandangoParser::StatementContext::constraint() {
  return getRuleContext<FandangoParser::ConstraintContext>(0);
}

FandangoParser::PythonContext* FandangoParser::StatementContext::python() {
  return getRuleContext<FandangoParser::PythonContext>(0);
}


size_t FandangoParser::StatementContext::getRuleIndex() const {
  return FandangoParser::RuleStatement;
}


std::any FandangoParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementContext* FandangoParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, FandangoParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(474);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(471);
      production();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(472);
      constraint();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(473);
      python();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProductionContext ------------------------------------------------------------------

FandangoParser::ProductionContext::ProductionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ProductionContext::NONTERMINAL() {
  return getToken(FandangoParser::NONTERMINAL, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::GRAMMAR_ASSIGN() {
  return getToken(FandangoParser::GRAMMAR_ASSIGN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::ProductionContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ProductionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::ProductionContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::ProductionContext::getRuleIndex() const {
  return FandangoParser::RuleProduction;
}


std::any FandangoParser::ProductionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProduction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProductionContext* FandangoParser::production() {
  ProductionContext *_localctx = _tracker.createInstance<ProductionContext>(_ctx, getState());
  enterRule(_localctx, 6, FandangoParser::RuleProduction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(504);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(476);
      match(FandangoParser::NONTERMINAL);
      setState(477);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(478);
      alternative();
      setState(481);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::EXPR_ASSIGN) {
        setState(479);
        match(FandangoParser::EXPR_ASSIGN);
        setState(480);
        expression();
      }
      setState(483);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(485);
      match(FandangoParser::NONTERMINAL);
      setState(486);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(487);
      alternative();
      setState(490);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(488);
        match(FandangoParser::ASSIGN);
        setState(489);
        expression();
      }
      setState(492);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(494);
      match(FandangoParser::NONTERMINAL);
      setState(495);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(496);
      alternative();
      setState(500);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(497);
        match(FandangoParser::COLON);
        setState(498);
        match(FandangoParser::COLON);
        setState(499);
        expression();
      }
      setState(502);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlternativeContext ------------------------------------------------------------------

FandangoParser::AlternativeContext::AlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConcatenationContext *> FandangoParser::AlternativeContext::concatenation() {
  return getRuleContexts<FandangoParser::ConcatenationContext>();
}

FandangoParser::ConcatenationContext* FandangoParser::AlternativeContext::concatenation(size_t i) {
  return getRuleContext<FandangoParser::ConcatenationContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::AlternativeContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::AlternativeContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::AlternativeContext::getRuleIndex() const {
  return FandangoParser::RuleAlternative;
}


std::any FandangoParser::AlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAlternative(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AlternativeContext* FandangoParser::alternative() {
  AlternativeContext *_localctx = _tracker.createInstance<AlternativeContext>(_ctx, getState());
  enterRule(_localctx, 8, FandangoParser::RuleAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    concatenation();
    setState(511);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(507);
      match(FandangoParser::OR_OP);
      setState(508);
      concatenation();
      setState(513);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConcatenationContext ------------------------------------------------------------------

FandangoParser::ConcatenationContext::ConcatenationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::OperatorContext *> FandangoParser::ConcatenationContext::operator_() {
  return getRuleContexts<FandangoParser::OperatorContext>();
}

FandangoParser::OperatorContext* FandangoParser::ConcatenationContext::operator_(size_t i) {
  return getRuleContext<FandangoParser::OperatorContext>(i);
}


size_t FandangoParser::ConcatenationContext::getRuleIndex() const {
  return FandangoParser::RuleConcatenation;
}


std::any FandangoParser::ConcatenationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConcatenation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConcatenationContext* FandangoParser::concatenation() {
  ConcatenationContext *_localctx = _tracker.createInstance<ConcatenationContext>(_ctx, getState());
  enterRule(_localctx, 10, FandangoParser::RuleConcatenation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(514);
    operator_();
    setState(518);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(515);
        operator_(); 
      }
      setState(520);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorContext ------------------------------------------------------------------

FandangoParser::OperatorContext::OperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OperatorContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

FandangoParser::KleeneContext* FandangoParser::OperatorContext::kleene() {
  return getRuleContext<FandangoParser::KleeneContext>(0);
}

FandangoParser::PlusContext* FandangoParser::OperatorContext::plus() {
  return getRuleContext<FandangoParser::PlusContext>(0);
}

FandangoParser::OptionContext* FandangoParser::OperatorContext::option() {
  return getRuleContext<FandangoParser::OptionContext>(0);
}

FandangoParser::RepeatContext* FandangoParser::OperatorContext::repeat() {
  return getRuleContext<FandangoParser::RepeatContext>(0);
}


size_t FandangoParser::OperatorContext::getRuleIndex() const {
  return FandangoParser::RuleOperator;
}


std::any FandangoParser::OperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOperator(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OperatorContext* FandangoParser::operator_() {
  OperatorContext *_localctx = _tracker.createInstance<OperatorContext>(_ctx, getState());
  enterRule(_localctx, 12, FandangoParser::RuleOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(526);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(521);
      symbol();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(522);
      kleene();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(523);
      plus();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(524);
      option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(525);
      repeat();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KleeneContext ------------------------------------------------------------------

FandangoParser::KleeneContext::KleeneContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::KleeneContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::KleeneContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::KleeneContext::getRuleIndex() const {
  return FandangoParser::RuleKleene;
}


std::any FandangoParser::KleeneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKleene(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KleeneContext* FandangoParser::kleene() {
  KleeneContext *_localctx = _tracker.createInstance<KleeneContext>(_ctx, getState());
  enterRule(_localctx, 14, FandangoParser::RuleKleene);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(528);
    symbol();
    setState(529);
    match(FandangoParser::STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlusContext ------------------------------------------------------------------

FandangoParser::PlusContext::PlusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::PlusContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::PlusContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}


size_t FandangoParser::PlusContext::getRuleIndex() const {
  return FandangoParser::RulePlus;
}


std::any FandangoParser::PlusContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPlus(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PlusContext* FandangoParser::plus() {
  PlusContext *_localctx = _tracker.createInstance<PlusContext>(_ctx, getState());
  enterRule(_localctx, 16, FandangoParser::RulePlus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(531);
    symbol();
    setState(532);
    match(FandangoParser::ADD);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionContext ------------------------------------------------------------------

FandangoParser::OptionContext::OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OptionContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::OptionContext::QUESTION() {
  return getToken(FandangoParser::QUESTION, 0);
}


size_t FandangoParser::OptionContext::getRuleIndex() const {
  return FandangoParser::RuleOption;
}


std::any FandangoParser::OptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOption(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OptionContext* FandangoParser::option() {
  OptionContext *_localctx = _tracker.createInstance<OptionContext>(_ctx, getState());
  enterRule(_localctx, 18, FandangoParser::RuleOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(534);
    symbol();
    setState(535);
    match(FandangoParser::QUESTION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatContext ------------------------------------------------------------------

FandangoParser::RepeatContext::RepeatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::RepeatContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::RepeatContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::RepeatContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::RepeatContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::RepeatContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::RepeatContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::RepeatContext::getRuleIndex() const {
  return FandangoParser::RuleRepeat;
}


std::any FandangoParser::RepeatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRepeat(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::RepeatContext* FandangoParser::repeat() {
  RepeatContext *_localctx = _tracker.createInstance<RepeatContext>(_ctx, getState());
  enterRule(_localctx, 20, FandangoParser::RuleRepeat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(553);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(537);
      symbol();
      setState(538);
      match(FandangoParser::OPEN_BRACE);

      setState(539);
      expression();
      setState(540);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(542);
      symbol();
      setState(543);
      match(FandangoParser::OPEN_BRACE);
      setState(545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599633861125) != 0)) {
        setState(544);
        expression();
      }
      setState(547);
      match(FandangoParser::COMMA);
      setState(549);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599633861125) != 0)) {
        setState(548);
        expression();
      }
      setState(551);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolContext ------------------------------------------------------------------

FandangoParser::SymbolContext::SymbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SymbolContext::NONTERMINAL() {
  return getToken(FandangoParser::NONTERMINAL, 0);
}

tree::TerminalNode* FandangoParser::SymbolContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}

tree::TerminalNode* FandangoParser::SymbolContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::Generator_callContext* FandangoParser::SymbolContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

FandangoParser::Char_setContext* FandangoParser::SymbolContext::char_set() {
  return getRuleContext<FandangoParser::Char_setContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::SymbolContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::SymbolContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::SymbolContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::SymbolContext::getRuleIndex() const {
  return FandangoParser::RuleSymbol;
}


std::any FandangoParser::SymbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSymbol(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SymbolContext* FandangoParser::symbol() {
  SymbolContext *_localctx = _tracker.createInstance<SymbolContext>(_ctx, getState());
  enterRule(_localctx, 22, FandangoParser::RuleSymbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(558);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(555);
      match(FandangoParser::NEWLINE);
      setState(560);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(570);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NONTERMINAL: {
        setState(561);
        match(FandangoParser::NONTERMINAL);
        break;
      }

      case FandangoParser::STRING: {
        setState(562);
        match(FandangoParser::STRING);
        break;
      }

      case FandangoParser::NUMBER: {
        setState(563);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::NAME: {
        setState(564);
        generator_call(0);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        setState(565);
        char_set();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        setState(566);
        match(FandangoParser::OPEN_PAREN);
        setState(567);
        alternative();
        setState(568);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(575);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(572);
        match(FandangoParser::NEWLINE); 
      }
      setState(577);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generator_callContext ------------------------------------------------------------------

FandangoParser::Generator_callContext::Generator_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Generator_callContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Generator_callContext* FandangoParser::Generator_callContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Generator_callContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::Generator_callContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Generator_callContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Generator_callContext::getRuleIndex() const {
  return FandangoParser::RuleGenerator_call;
}


std::any FandangoParser::Generator_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenerator_call(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Generator_callContext* FandangoParser::generator_call() {
   return generator_call(0);
}

FandangoParser::Generator_callContext* FandangoParser::generator_call(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Generator_callContext *_localctx = _tracker.createInstance<Generator_callContext>(_ctx, parentState);
  FandangoParser::Generator_callContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 24;
  enterRecursionRule(_localctx, 24, FandangoParser::RuleGenerator_call, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(579);
    match(FandangoParser::NAME);
    _ctx->stop = _input->LT(-1);
    setState(599);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(597);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(581);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(582);
          match(FandangoParser::DOT);
          setState(583);
          match(FandangoParser::NAME);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(584);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(585);
          match(FandangoParser::OPEN_BRACK);
          setState(586);
          slices();
          setState(587);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(589);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(590);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(591);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(592);
          match(FandangoParser::OPEN_PAREN);
          setState(594);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 67)) & 4503599633861255) != 0)) {
            setState(593);
            arguments();
          }
          setState(596);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(601);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Char_setContext ------------------------------------------------------------------

FandangoParser::Char_setContext::Char_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Char_setContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Char_setContext::getRuleIndex() const {
  return FandangoParser::RuleChar_set;
}


std::any FandangoParser::Char_setContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitChar_set(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Char_setContext* FandangoParser::char_set() {
  Char_setContext *_localctx = _tracker.createInstance<Char_setContext>(_ctx, getState());
  enterRule(_localctx, 26, FandangoParser::RuleChar_set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    match(FandangoParser::OPEN_BRACK);
    setState(604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::XOR) {
      setState(603);
      match(FandangoParser::XOR);
    }
    setState(606);
    match(FandangoParser::STRING);
    setState(607);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

FandangoParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ConstraintContext::WHERE() {
  return getToken(FandangoParser::WHERE, 0);
}

FandangoParser::ImpliesContext* FandangoParser::ConstraintContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MINIMIZING() {
  return getToken(FandangoParser::MINIMIZING, 0);
}

FandangoParser::ExprContext* FandangoParser::ConstraintContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MAXIMIZING() {
  return getToken(FandangoParser::MAXIMIZING, 0);
}


size_t FandangoParser::ConstraintContext::getRuleIndex() const {
  return FandangoParser::RuleConstraint;
}


std::any FandangoParser::ConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConstraint(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConstraintContext* FandangoParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 28, FandangoParser::RuleConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(624);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::WHERE: {
        enterOuterAlt(_localctx, 1);
        setState(609);
        match(FandangoParser::WHERE);
        setState(610);
        implies();
        setState(611);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

        || _la == FandangoParser::NEWLINE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case FandangoParser::MINIMIZING: {
        enterOuterAlt(_localctx, 2);
        setState(613);
        match(FandangoParser::MINIMIZING);
        setState(614);
        expr();
        setState(615);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

        || _la == FandangoParser::NEWLINE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case FandangoParser::MAXIMIZING: {
        enterOuterAlt(_localctx, 3);
        setState(617);
        match(FandangoParser::MAXIMIZING);
        setState(618);
        expr();
        setState(619);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

        || _la == FandangoParser::NEWLINE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::NEWLINE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 4);
        setState(621);
        implies();
        setState(622);
        match(FandangoParser::SEMI_COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImpliesContext ------------------------------------------------------------------

FandangoParser::ImpliesContext::ImpliesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::QuantifierContext* FandangoParser::ImpliesContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ImpliesContext* FandangoParser::ImpliesContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::ImpliesContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ImpliesContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::ImpliesContext::getRuleIndex() const {
  return FandangoParser::RuleImplies;
}


std::any FandangoParser::ImpliesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImplies(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ImpliesContext* FandangoParser::implies() {
  ImpliesContext *_localctx = _tracker.createInstance<ImpliesContext>(_ctx, getState());
  enterRule(_localctx, 30, FandangoParser::RuleImplies);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(629);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(626);
        match(FandangoParser::NEWLINE); 
      }
      setState(631);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
    setState(637);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(632);
      quantifier();
      setState(633);
      match(FandangoParser::ARROW);
      setState(634);
      implies();
      break;
    }

    case 2: {
      setState(636);
      quantifier();
      break;
    }

    default:
      break;
    }
    setState(642);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(639);
        match(FandangoParser::NEWLINE); 
      }
      setState(644);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantifierContext ------------------------------------------------------------------

FandangoParser::QuantifierContext::QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::QuantifierContext::FORALL() {
  return getToken(FandangoParser::FORALL, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::NONTERMINAL() {
  return getToken(FandangoParser::NONTERMINAL, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::SelectorContext* FandangoParser::QuantifierContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::QuantifierContext* FandangoParser::QuantifierContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::EXISTS() {
  return getToken(FandangoParser::EXISTS, 0);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::QuantifierContext::formula_disjunction() {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::QuantifierContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::QuantifierContext::getRuleIndex() const {
  return FandangoParser::RuleQuantifier;
}


std::any FandangoParser::QuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitQuantifier(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::QuantifierContext* FandangoParser::quantifier() {
  QuantifierContext *_localctx = _tracker.createInstance<QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 32, FandangoParser::RuleQuantifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(648);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(645);
        match(FandangoParser::NEWLINE); 
      }
      setState(650);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    }
    setState(666);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FORALL: {
        setState(651);
        match(FandangoParser::FORALL);
        setState(652);
        match(FandangoParser::NONTERMINAL);
        setState(653);
        match(FandangoParser::IN);
        setState(654);
        selector(0);
        setState(655);
        match(FandangoParser::COLON);
        setState(656);
        quantifier();
        break;
      }

      case FandangoParser::EXISTS: {
        setState(658);
        match(FandangoParser::EXISTS);
        setState(659);
        match(FandangoParser::NONTERMINAL);
        setState(660);
        match(FandangoParser::IN);
        setState(661);
        selector(0);
        setState(662);
        match(FandangoParser::COLON);
        setState(663);
        quantifier();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::NEWLINE:
      case FandangoParser::FSTRING_START: {
        setState(665);
        formula_disjunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(671);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(668);
        match(FandangoParser::NEWLINE); 
      }
      setState(673);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_disjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_disjunctionContext::Formula_disjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_conjunctionContext *> FandangoParser::Formula_disjunctionContext::formula_conjunction() {
  return getRuleContexts<FandangoParser::Formula_conjunctionContext>();
}

FandangoParser::Formula_conjunctionContext* FandangoParser::Formula_disjunctionContext::formula_conjunction(size_t i) {
  return getRuleContext<FandangoParser::Formula_conjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_disjunctionContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Formula_disjunctionContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_disjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::Formula_disjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::Formula_disjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_disjunction;
}


std::any FandangoParser::Formula_disjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_disjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::formula_disjunction() {
  Formula_disjunctionContext *_localctx = _tracker.createInstance<Formula_disjunctionContext>(_ctx, getState());
  enterRule(_localctx, 34, FandangoParser::RuleFormula_disjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(677);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(674);
        match(FandangoParser::NEWLINE); 
      }
      setState(679);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    }

    setState(680);
    formula_conjunction();
    setState(685);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(681);
      match(FandangoParser::OR);
      setState(682);
      formula_conjunction();
      setState(687);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(691);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(688);
        match(FandangoParser::NEWLINE); 
      }
      setState(693);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_conjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_conjunctionContext::Formula_conjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_atomContext *> FandangoParser::Formula_conjunctionContext::formula_atom() {
  return getRuleContexts<FandangoParser::Formula_atomContext>();
}

FandangoParser::Formula_atomContext* FandangoParser::Formula_conjunctionContext::formula_atom(size_t i) {
  return getRuleContext<FandangoParser::Formula_atomContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_conjunctionContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Formula_conjunctionContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_conjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::Formula_conjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::Formula_conjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_conjunction;
}


std::any FandangoParser::Formula_conjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_conjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_conjunctionContext* FandangoParser::formula_conjunction() {
  Formula_conjunctionContext *_localctx = _tracker.createInstance<Formula_conjunctionContext>(_ctx, getState());
  enterRule(_localctx, 36, FandangoParser::RuleFormula_conjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(697);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(694);
        match(FandangoParser::NEWLINE); 
      }
      setState(699);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    }

    setState(700);
    formula_atom();
    setState(705);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(701);
      match(FandangoParser::AND);
      setState(702);
      formula_atom();
      setState(707);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(711);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(708);
        match(FandangoParser::NEWLINE); 
      }
      setState(713);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_atomContext ------------------------------------------------------------------

FandangoParser::Formula_atomContext::Formula_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Formula_comparisonContext* FandangoParser::Formula_atomContext::formula_comparison() {
  return getRuleContext<FandangoParser::Formula_comparisonContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::ImpliesContext* FandangoParser::Formula_atomContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ExprContext* FandangoParser::Formula_atomContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_atomContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Formula_atomContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_atom;
}


std::any FandangoParser::Formula_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_atomContext* FandangoParser::formula_atom() {
  Formula_atomContext *_localctx = _tracker.createInstance<Formula_atomContext>(_ctx, getState());
  enterRule(_localctx, 38, FandangoParser::RuleFormula_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(717);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(714);
      match(FandangoParser::NEWLINE);
      setState(719);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(726);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(720);
      formula_comparison();
      break;
    }

    case 2: {
      setState(721);
      match(FandangoParser::OPEN_PAREN);
      setState(722);
      implies();
      setState(723);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      setState(725);
      expr();
      break;
    }

    default:
      break;
    }
    setState(731);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(728);
        match(FandangoParser::NEWLINE); 
      }
      setState(733);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_comparisonContext ------------------------------------------------------------------

FandangoParser::Formula_comparisonContext::Formula_comparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExprContext *> FandangoParser::Formula_comparisonContext::expr() {
  return getRuleContexts<FandangoParser::ExprContext>();
}

FandangoParser::ExprContext* FandangoParser::Formula_comparisonContext::expr(size_t i) {
  return getRuleContext<FandangoParser::ExprContext>(i);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_1() {
  return getToken(FandangoParser::NOT_EQ_1, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}


size_t FandangoParser::Formula_comparisonContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_comparison;
}


std::any FandangoParser::Formula_comparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_comparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_comparisonContext* FandangoParser::formula_comparison() {
  Formula_comparisonContext *_localctx = _tracker.createInstance<Formula_comparisonContext>(_ctx, getState());
  enterRule(_localctx, 40, FandangoParser::RuleFormula_comparison);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(734);
    expr();
    setState(735);
    _la = _input->LA(1);
    if (!(((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(736);
    expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

FandangoParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::ExprContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ExprContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ExprContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

tree::TerminalNode* FandangoParser::ExprContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExprContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}


size_t FandangoParser::ExprContext::getRuleIndex() const {
  return FandangoParser::RuleExpr;
}


std::any FandangoParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExprContext* FandangoParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 42, FandangoParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(746);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(738);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(739);
      inversion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(740);
      inversion();
      setState(741);
      match(FandangoParser::IF);
      setState(742);
      inversion();
      setState(743);
      match(FandangoParser::ELSE);
      setState(744);
      inversion();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selector_lengthContext ------------------------------------------------------------------

FandangoParser::Selector_lengthContext::Selector_lengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Selector_lengthContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}

FandangoParser::SelectorContext* FandangoParser::Selector_lengthContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}


size_t FandangoParser::Selector_lengthContext::getRuleIndex() const {
  return FandangoParser::RuleSelector_length;
}


std::any FandangoParser::Selector_lengthContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelector_length(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Selector_lengthContext* FandangoParser::selector_length() {
  Selector_lengthContext *_localctx = _tracker.createInstance<Selector_lengthContext>(_ctx, getState());
  enterRule(_localctx, 44, FandangoParser::RuleSelector_length);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OR_OP: {
        enterOuterAlt(_localctx, 1);
        setState(748);
        match(FandangoParser::OR_OP);
        setState(749);
        selector(0);
        setState(750);
        match(FandangoParser::OR_OP);
        break;
      }

      case FandangoParser::NONTERMINAL:
      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(752);
        selector(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorContext ------------------------------------------------------------------

FandangoParser::SelectorContext::SelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SelectionContext* FandangoParser::SelectorContext::selection() {
  return getRuleContext<FandangoParser::SelectionContext>(0);
}

FandangoParser::SelectorContext* FandangoParser::SelectorContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}

tree::TerminalNode* FandangoParser::SelectorContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::SelectorContext::DOTDOT() {
  return getToken(FandangoParser::DOTDOT, 0);
}


size_t FandangoParser::SelectorContext::getRuleIndex() const {
  return FandangoParser::RuleSelector;
}


std::any FandangoParser::SelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelector(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::SelectorContext* FandangoParser::selector() {
   return selector(0);
}

FandangoParser::SelectorContext* FandangoParser::selector(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::SelectorContext *_localctx = _tracker.createInstance<SelectorContext>(_ctx, parentState);
  FandangoParser::SelectorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 46;
  enterRecursionRule(_localctx, 46, FandangoParser::RuleSelector, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(756);
    selection();
    _ctx->stop = _input->LT(-1);
    setState(766);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(764);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SelectorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSelector);
          setState(758);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(759);
          match(FandangoParser::DOT);
          setState(760);
          selection();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SelectorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSelector);
          setState(761);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(762);
          match(FandangoParser::DOTDOT);
          setState(763);
          selection();
          break;
        }

        default:
          break;
        } 
      }
      setState(768);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SelectionContext ------------------------------------------------------------------

FandangoParser::SelectionContext::SelectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Base_selectionContext* FandangoParser::SelectionContext::base_selection() {
  return getRuleContext<FandangoParser::Base_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Rs_slicesContext* FandangoParser::SelectionContext::rs_slices() {
  return getRuleContext<FandangoParser::Rs_slicesContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Rs_pairsContext* FandangoParser::SelectionContext::rs_pairs() {
  return getRuleContext<FandangoParser::Rs_pairsContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SelectionContext::getRuleIndex() const {
  return FandangoParser::RuleSelection;
}


std::any FandangoParser::SelectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SelectionContext* FandangoParser::selection() {
  SelectionContext *_localctx = _tracker.createInstance<SelectionContext>(_ctx, getState());
  enterRule(_localctx, 48, FandangoParser::RuleSelection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(780);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(769);
      base_selection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(770);
      base_selection();
      setState(771);
      match(FandangoParser::OPEN_BRACK);
      setState(772);
      rs_slices();
      setState(773);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(775);
      base_selection();
      setState(776);
      match(FandangoParser::OPEN_BRACE);
      setState(777);
      rs_pairs();
      setState(778);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_selectionContext ------------------------------------------------------------------

FandangoParser::Base_selectionContext::Base_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Base_selectionContext::NONTERMINAL() {
  return getToken(FandangoParser::NONTERMINAL, 0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::SelectorContext* FandangoParser::Base_selectionContext::selector() {
  return getRuleContext<FandangoParser::SelectorContext>(0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Base_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleBase_selection;
}


std::any FandangoParser::Base_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBase_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Base_selectionContext* FandangoParser::base_selection() {
  Base_selectionContext *_localctx = _tracker.createInstance<Base_selectionContext>(_ctx, getState());
  enterRule(_localctx, 50, FandangoParser::RuleBase_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(787);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NONTERMINAL: {
        enterOuterAlt(_localctx, 1);
        setState(782);
        match(FandangoParser::NONTERMINAL);
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(783);
        match(FandangoParser::OPEN_PAREN);
        setState(784);
        selector(0);
        setState(785);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairsContext ------------------------------------------------------------------

FandangoParser::Rs_pairsContext::Rs_pairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_pairContext *> FandangoParser::Rs_pairsContext::rs_pair() {
  return getRuleContexts<FandangoParser::Rs_pairContext>();
}

FandangoParser::Rs_pairContext* FandangoParser::Rs_pairsContext::rs_pair(size_t i) {
  return getRuleContext<FandangoParser::Rs_pairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_pairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_pairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_pairsContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pairs;
}


std::any FandangoParser::Rs_pairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairsContext* FandangoParser::rs_pairs() {
  Rs_pairsContext *_localctx = _tracker.createInstance<Rs_pairsContext>(_ctx, getState());
  enterRule(_localctx, 52, FandangoParser::RuleRs_pairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(789);
    rs_pair();
    setState(794);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(790);
        match(FandangoParser::COMMA);
        setState(791);
        rs_pair(); 
      }
      setState(796);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
    setState(798);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(797);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairContext ------------------------------------------------------------------

FandangoParser::Rs_pairContext::Rs_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Rs_pairContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Rs_pairContext::NONTERMINAL() {
  return getToken(FandangoParser::NONTERMINAL, 0);
}

tree::TerminalNode* FandangoParser::Rs_pairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_pairContext::rs_slice() {
  return getRuleContext<FandangoParser::Rs_sliceContext>(0);
}


size_t FandangoParser::Rs_pairContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pair;
}


std::any FandangoParser::Rs_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairContext* FandangoParser::rs_pair() {
  Rs_pairContext *_localctx = _tracker.createInstance<Rs_pairContext>(_ctx, getState());
  enterRule(_localctx, 54, FandangoParser::RuleRs_pair);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(800);
    match(FandangoParser::STAR);
    setState(801);
    match(FandangoParser::NONTERMINAL);
    setState(804);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(802);
      match(FandangoParser::COLON);
      setState(803);
      rs_slice();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_slicesContext ------------------------------------------------------------------

FandangoParser::Rs_slicesContext::Rs_slicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_sliceContext *> FandangoParser::Rs_slicesContext::rs_slice() {
  return getRuleContexts<FandangoParser::Rs_sliceContext>();
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_slicesContext::rs_slice(size_t i) {
  return getRuleContext<FandangoParser::Rs_sliceContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_slicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_slicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_slicesContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slices;
}


std::any FandangoParser::Rs_slicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_slicesContext* FandangoParser::rs_slices() {
  Rs_slicesContext *_localctx = _tracker.createInstance<Rs_slicesContext>(_ctx, getState());
  enterRule(_localctx, 56, FandangoParser::RuleRs_slices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(806);
    rs_slice();
    setState(811);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(807);
        match(FandangoParser::COMMA);
        setState(808);
        rs_slice(); 
      }
      setState(813);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
    setState(815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(814);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_sliceContext ------------------------------------------------------------------

FandangoParser::Rs_sliceContext::Rs_sliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::NUMBER() {
  return getTokens(FandangoParser::NUMBER);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::NUMBER(size_t i) {
  return getToken(FandangoParser::NUMBER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::Rs_sliceContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slice;
}


std::any FandangoParser::Rs_sliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_sliceContext* FandangoParser::rs_slice() {
  Rs_sliceContext *_localctx = _tracker.createInstance<Rs_sliceContext>(_ctx, getState());
  enterRule(_localctx, 58, FandangoParser::RuleRs_slice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(836);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(817);
      match(FandangoParser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(818);
        match(FandangoParser::NUMBER);
      }
      setState(821);
      match(FandangoParser::COLON);
      setState(823);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(822);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(826);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(825);
        match(FandangoParser::NUMBER);
      }
      setState(828);
      match(FandangoParser::COLON);
      setState(830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(829);
        match(FandangoParser::NUMBER);
      }
      setState(832);
      match(FandangoParser::COLON);
      setState(834);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(833);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PythonContext ------------------------------------------------------------------

FandangoParser::PythonContext::PythonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::PythonContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtContext* FandangoParser::PythonContext::simple_stmt() {
  return getRuleContext<FandangoParser::Simple_stmtContext>(0);
}


size_t FandangoParser::PythonContext::getRuleIndex() const {
  return FandangoParser::RulePython;
}


std::any FandangoParser::PythonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PythonContext* FandangoParser::python() {
  PythonContext *_localctx = _tracker.createInstance<PythonContext>(_ctx, getState());
  enterRule(_localctx, 60, FandangoParser::RulePython);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(840);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(838);
        compound_stmt();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(839);
        simple_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_tagContext ------------------------------------------------------------------

FandangoParser::Python_tagContext::Python_tagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StmtContext* FandangoParser::Python_tagContext::stmt() {
  return getRuleContext<FandangoParser::StmtContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Python_tagContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Python_tagContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Python_tagContext::getRuleIndex() const {
  return FandangoParser::RulePython_tag;
}


std::any FandangoParser::Python_tagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_tag(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_tagContext* FandangoParser::python_tag() {
  Python_tagContext *_localctx = _tracker.createInstance<Python_tagContext>(_ctx, getState());
  enterRule(_localctx, 62, FandangoParser::RulePython_tag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(845);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(842);
      match(FandangoParser::NEWLINE);
      setState(847);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(848);
    stmt();
    setState(852);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(849);
      match(FandangoParser::NEWLINE);
      setState(854);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_fileContext ------------------------------------------------------------------

FandangoParser::Python_fileContext::Python_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StatementsContext* FandangoParser::Python_fileContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::Python_fileContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Python_fileContext::getRuleIndex() const {
  return FandangoParser::RulePython_file;
}


std::any FandangoParser::Python_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_file(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_fileContext* FandangoParser::python_file() {
  Python_fileContext *_localctx = _tracker.createInstance<Python_fileContext>(_ctx, getState());
  enterRule(_localctx, 64, FandangoParser::RulePython_file);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(856);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9482047593609496) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4785076758055431) != 0)) {
      setState(855);
      statements();
    }
    setState(859);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(858);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InteractiveContext ------------------------------------------------------------------

FandangoParser::InteractiveContext::InteractiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Statement_newlineContext* FandangoParser::InteractiveContext::statement_newline() {
  return getRuleContext<FandangoParser::Statement_newlineContext>(0);
}


size_t FandangoParser::InteractiveContext::getRuleIndex() const {
  return FandangoParser::RuleInteractive;
}


std::any FandangoParser::InteractiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInteractive(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InteractiveContext* FandangoParser::interactive() {
  InteractiveContext *_localctx = _tracker.createInstance<InteractiveContext>(_ctx, getState());
  enterRule(_localctx, 66, FandangoParser::RuleInteractive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(861);
    statement_newline();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

FandangoParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionsContext* FandangoParser::EvalContext::expressions() {
  return getRuleContext<FandangoParser::ExpressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::EvalContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::EvalContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::EvalContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::EvalContext::getRuleIndex() const {
  return FandangoParser::RuleEval;
}


std::any FandangoParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::EvalContext* FandangoParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 68, FandangoParser::RuleEval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(863);
    expressions();
    setState(867);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(864);
      match(FandangoParser::NEWLINE);
      setState(869);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(871);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      setState(870);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_typeContext ------------------------------------------------------------------

FandangoParser::Func_typeContext::Func_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_typeContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Func_typeContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_expressionsContext* FandangoParser::Func_typeContext::type_expressions() {
  return getRuleContext<FandangoParser::Type_expressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Func_typeContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Func_typeContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::Func_typeContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Func_typeContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type;
}


std::any FandangoParser::Func_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_typeContext* FandangoParser::func_type() {
  Func_typeContext *_localctx = _tracker.createInstance<Func_typeContext>(_ctx, getState());
  enterRule(_localctx, 70, FandangoParser::RuleFunc_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(873);
    match(FandangoParser::OPEN_PAREN);
    setState(875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4503599633861255) != 0)) {
      setState(874);
      type_expressions();
    }
    setState(877);
    match(FandangoParser::CLOSE_PAREN);
    setState(878);
    match(FandangoParser::ARROW);
    setState(879);
    expression();
    setState(883);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(880);
      match(FandangoParser::NEWLINE);
      setState(885);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(887);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(886);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

FandangoParser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::StmtContext *> FandangoParser::StatementsContext::stmt() {
  return getRuleContexts<FandangoParser::StmtContext>();
}

FandangoParser::StmtContext* FandangoParser::StatementsContext::stmt(size_t i) {
  return getRuleContext<FandangoParser::StmtContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::StatementsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::StatementsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::StatementsContext::getRuleIndex() const {
  return FandangoParser::RuleStatements;
}


std::any FandangoParser::StatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatements(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementsContext* FandangoParser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 72, FandangoParser::RuleStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(891); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(891);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::NONTERMINAL:
        case FandangoParser::ASSERT:
        case FandangoParser::ASYNC:
        case FandangoParser::AWAIT:
        case FandangoParser::BREAK:
        case FandangoParser::CLASS:
        case FandangoParser::CONTINUE:
        case FandangoParser::DEF:
        case FandangoParser::DEL:
        case FandangoParser::FALSE:
        case FandangoParser::FOR:
        case FandangoParser::FROM:
        case FandangoParser::GLOBAL:
        case FandangoParser::IF:
        case FandangoParser::IMPORT:
        case FandangoParser::LAMBDA:
        case FandangoParser::MATCH:
        case FandangoParser::NONE:
        case FandangoParser::NONLOCAL:
        case FandangoParser::NOT:
        case FandangoParser::PASS:
        case FandangoParser::RAISE:
        case FandangoParser::RETURN:
        case FandangoParser::TRUE:
        case FandangoParser::TRY:
        case FandangoParser::TYPE:
        case FandangoParser::WHILE:
        case FandangoParser::WITH:
        case FandangoParser::YIELD:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::AT:
        case FandangoParser::FSTRING_START: {
          setState(889);
          stmt();
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(890);
          match(FandangoParser::NEWLINE);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(893); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9482047593609496) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4785076758055431) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

FandangoParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::StmtContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::StmtContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::StmtContext::getRuleIndex() const {
  return FandangoParser::RuleStmt;
}


std::any FandangoParser::StmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StmtContext* FandangoParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 74, FandangoParser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(897);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(895);
        compound_stmt();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(896);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_newlineContext ------------------------------------------------------------------

FandangoParser::Statement_newlineContext::Statement_newlineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::Statement_newlineContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Statement_newlineContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::Statement_newlineContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::Statement_newlineContext::getRuleIndex() const {
  return FandangoParser::RuleStatement_newline;
}


std::any FandangoParser::Statement_newlineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement_newline(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Statement_newlineContext* FandangoParser::statement_newline() {
  Statement_newlineContext *_localctx = _tracker.createInstance<Statement_newlineContext>(_ctx, getState());
  enterRule(_localctx, 76, FandangoParser::RuleStatement_newline);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(904);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(899);
        compound_stmt();
        setState(900);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(902);
        simple_stmts();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 3);
        setState(903);
        match(FandangoParser::NEWLINE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtsContext ------------------------------------------------------------------

FandangoParser::Simple_stmtsContext::Simple_stmtsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Simple_stmtContext *> FandangoParser::Simple_stmtsContext::simple_stmt() {
  return getRuleContexts<FandangoParser::Simple_stmtContext>();
}

FandangoParser::Simple_stmtContext* FandangoParser::Simple_stmtsContext::simple_stmt(size_t i) {
  return getRuleContext<FandangoParser::Simple_stmtContext>(i);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::SEMI_COLON() {
  return getTokens(FandangoParser::SEMI_COLON);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::SEMI_COLON(size_t i) {
  return getToken(FandangoParser::SEMI_COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Simple_stmtsContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmts;
}


std::any FandangoParser::Simple_stmtsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmts(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtsContext* FandangoParser::simple_stmts() {
  Simple_stmtsContext *_localctx = _tracker.createInstance<Simple_stmtsContext>(_ctx, getState());
  enterRule(_localctx, 78, FandangoParser::RuleSimple_stmts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(906);
    simple_stmt();
    setState(911);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(907);
        match(FandangoParser::SEMI_COLON);
        setState(908);
        simple_stmt(); 
      }
      setState(913);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    }
    setState(915);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::SEMI_COLON) {
      setState(914);
      match(FandangoParser::SEMI_COLON);
    }
    setState(929);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      setState(918); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(917);
                match(FandangoParser::NEWLINE);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(920); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(925);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NEWLINE) {
        setState(922);
        match(FandangoParser::NEWLINE);
        setState(927);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(928);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtContext ------------------------------------------------------------------

FandangoParser::Simple_stmtContext::Simple_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AssignmentContext* FandangoParser::Simple_stmtContext::assignment() {
  return getRuleContext<FandangoParser::AssignmentContext>(0);
}

FandangoParser::Type_aliasContext* FandangoParser::Simple_stmtContext::type_alias() {
  return getRuleContext<FandangoParser::Type_aliasContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Simple_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

FandangoParser::Return_stmtContext* FandangoParser::Simple_stmtContext::return_stmt() {
  return getRuleContext<FandangoParser::Return_stmtContext>(0);
}

FandangoParser::Import_stmtContext* FandangoParser::Simple_stmtContext::import_stmt() {
  return getRuleContext<FandangoParser::Import_stmtContext>(0);
}

FandangoParser::Raise_stmtContext* FandangoParser::Simple_stmtContext::raise_stmt() {
  return getRuleContext<FandangoParser::Raise_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::PASS() {
  return getToken(FandangoParser::PASS, 0);
}

FandangoParser::Del_stmtContext* FandangoParser::Simple_stmtContext::del_stmt() {
  return getRuleContext<FandangoParser::Del_stmtContext>(0);
}

FandangoParser::Yield_stmtContext* FandangoParser::Simple_stmtContext::yield_stmt() {
  return getRuleContext<FandangoParser::Yield_stmtContext>(0);
}

FandangoParser::Assert_stmtContext* FandangoParser::Simple_stmtContext::assert_stmt() {
  return getRuleContext<FandangoParser::Assert_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::BREAK() {
  return getToken(FandangoParser::BREAK, 0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::CONTINUE() {
  return getToken(FandangoParser::CONTINUE, 0);
}

FandangoParser::Global_stmtContext* FandangoParser::Simple_stmtContext::global_stmt() {
  return getRuleContext<FandangoParser::Global_stmtContext>(0);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::Simple_stmtContext::nonlocal_stmt() {
  return getRuleContext<FandangoParser::Nonlocal_stmtContext>(0);
}


size_t FandangoParser::Simple_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmt;
}


std::any FandangoParser::Simple_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtContext* FandangoParser::simple_stmt() {
  Simple_stmtContext *_localctx = _tracker.createInstance<Simple_stmtContext>(_ctx, getState());
  enterRule(_localctx, 80, FandangoParser::RuleSimple_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(945);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(931);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(932);
      type_alias();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(933);
      star_expressions();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(934);
      return_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(935);
      import_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(936);
      raise_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(937);
      match(FandangoParser::PASS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(938);
      del_stmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(939);
      yield_stmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(940);
      assert_stmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(941);
      match(FandangoParser::BREAK);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(942);
      match(FandangoParser::CONTINUE);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(943);
      global_stmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(944);
      nonlocal_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_stmtContext ------------------------------------------------------------------

FandangoParser::Compound_stmtContext::Compound_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_defContext* FandangoParser::Compound_stmtContext::function_def() {
  return getRuleContext<FandangoParser::Function_defContext>(0);
}

FandangoParser::If_stmtContext* FandangoParser::Compound_stmtContext::if_stmt() {
  return getRuleContext<FandangoParser::If_stmtContext>(0);
}

FandangoParser::Class_defContext* FandangoParser::Compound_stmtContext::class_def() {
  return getRuleContext<FandangoParser::Class_defContext>(0);
}

FandangoParser::With_stmtContext* FandangoParser::Compound_stmtContext::with_stmt() {
  return getRuleContext<FandangoParser::With_stmtContext>(0);
}

FandangoParser::For_stmtContext* FandangoParser::Compound_stmtContext::for_stmt() {
  return getRuleContext<FandangoParser::For_stmtContext>(0);
}

FandangoParser::Try_stmtContext* FandangoParser::Compound_stmtContext::try_stmt() {
  return getRuleContext<FandangoParser::Try_stmtContext>(0);
}

FandangoParser::While_stmtContext* FandangoParser::Compound_stmtContext::while_stmt() {
  return getRuleContext<FandangoParser::While_stmtContext>(0);
}

FandangoParser::Match_stmtContext* FandangoParser::Compound_stmtContext::match_stmt() {
  return getRuleContext<FandangoParser::Match_stmtContext>(0);
}


size_t FandangoParser::Compound_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleCompound_stmt;
}


std::any FandangoParser::Compound_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompound_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compound_stmtContext* FandangoParser::compound_stmt() {
  Compound_stmtContext *_localctx = _tracker.createInstance<Compound_stmtContext>(_ctx, getState());
  enterRule(_localctx, 82, FandangoParser::RuleCompound_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(947);
      function_def();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(948);
      if_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(949);
      class_def();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(950);
      with_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(951);
      for_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(952);
      try_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(953);
      while_stmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(954);
      match_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

FandangoParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AssignmentContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AssignmentContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::AssignmentContext::ASSIGN() {
  return getTokens(FandangoParser::ASSIGN);
}

tree::TerminalNode* FandangoParser::AssignmentContext::ASSIGN(size_t i) {
  return getToken(FandangoParser::ASSIGN, i);
}

FandangoParser::Annotated_rhsContext* FandangoParser::AssignmentContext::annotated_rhs() {
  return getRuleContext<FandangoParser::Annotated_rhsContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::AssignmentContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::AssignmentContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

FandangoParser::Yield_exprContext* FandangoParser::AssignmentContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::AssignmentContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

std::vector<FandangoParser::Star_targetsContext *> FandangoParser::AssignmentContext::star_targets() {
  return getRuleContexts<FandangoParser::Star_targetsContext>();
}

FandangoParser::Star_targetsContext* FandangoParser::AssignmentContext::star_targets(size_t i) {
  return getRuleContext<FandangoParser::Star_targetsContext>(i);
}

FandangoParser::AugassignContext* FandangoParser::AssignmentContext::augassign() {
  return getRuleContext<FandangoParser::AugassignContext>(0);
}


size_t FandangoParser::AssignmentContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment;
}


std::any FandangoParser::AssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AssignmentContext* FandangoParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 84, FandangoParser::RuleAssignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(994);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(957);
      match(FandangoParser::NAME);
      setState(958);
      match(FandangoParser::COLON);
      setState(959);
      expression();
      setState(962);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(960);
        match(FandangoParser::ASSIGN);
        setState(961);
        annotated_rhs();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(969);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
      case 1: {
        setState(964);
        match(FandangoParser::OPEN_PAREN);
        setState(965);
        single_target();
        setState(966);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case 2: {
        setState(968);
        single_subscript_attribute_target();
        break;
      }

      default:
        break;
      }
      setState(971);
      match(FandangoParser::COLON);
      setState(972);
      expression();
      setState(975);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(973);
        match(FandangoParser::ASSIGN);
        setState(974);
        annotated_rhs();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(980); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(977);
                star_targets();
                setState(978);
                match(FandangoParser::ASSIGN);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(982); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(986);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(984);
          yield_expr();
          break;
        }

        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::NONTERMINAL:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::FSTRING_START: {
          setState(985);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(988);
      single_target();
      setState(989);
      augassign();
      setState(992);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(990);
          yield_expr();
          break;
        }

        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::NONTERMINAL:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::FSTRING_START: {
          setState(991);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotated_rhsContext ------------------------------------------------------------------

FandangoParser::Annotated_rhsContext::Annotated_rhsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Annotated_rhsContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Annotated_rhsContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Annotated_rhsContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotated_rhs;
}


std::any FandangoParser::Annotated_rhsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotated_rhs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Annotated_rhsContext* FandangoParser::annotated_rhs() {
  Annotated_rhsContext *_localctx = _tracker.createInstance<Annotated_rhsContext>(_ctx, getState());
  enterRule(_localctx, 86, FandangoParser::RuleAnnotated_rhs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(998);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        enterOuterAlt(_localctx, 1);
        setState(996);
        yield_expr();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(997);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AugassignContext ------------------------------------------------------------------

FandangoParser::AugassignContext::AugassignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AugassignContext::ADD_ASSIGN() {
  return getToken(FandangoParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::SUB_ASSIGN() {
  return getToken(FandangoParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MULT_ASSIGN() {
  return getToken(FandangoParser::MULT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AT_ASSIGN() {
  return getToken(FandangoParser::AT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::DIV_ASSIGN() {
  return getToken(FandangoParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MOD_ASSIGN() {
  return getToken(FandangoParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AND_ASSIGN() {
  return getToken(FandangoParser::AND_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::OR_ASSIGN() {
  return getToken(FandangoParser::OR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::XOR_ASSIGN() {
  return getToken(FandangoParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::LEFT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::LEFT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::RIGHT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::RIGHT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::POWER_ASSIGN() {
  return getToken(FandangoParser::POWER_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::IDIV_ASSIGN() {
  return getToken(FandangoParser::IDIV_ASSIGN, 0);
}


size_t FandangoParser::AugassignContext::getRuleIndex() const {
  return FandangoParser::RuleAugassign;
}


std::any FandangoParser::AugassignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAugassign(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AugassignContext* FandangoParser::augassign() {
  AugassignContext *_localctx = _tracker.createInstance<AugassignContext>(_ctx, getState());
  enterRule(_localctx, 88, FandangoParser::RuleAugassign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    _la = _input->LA(1);
    if (!(((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & 8191) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_stmtContext ------------------------------------------------------------------

FandangoParser::Return_stmtContext::Return_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Return_stmtContext::RETURN() {
  return getToken(FandangoParser::RETURN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Return_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Return_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleReturn_stmt;
}


std::any FandangoParser::Return_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReturn_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Return_stmtContext* FandangoParser::return_stmt() {
  Return_stmtContext *_localctx = _tracker.createInstance<Return_stmtContext>(_ctx, getState());
  enterRule(_localctx, 90, FandangoParser::RuleReturn_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1002);
    match(FandangoParser::RETURN);
    setState(1004);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      setState(1003);
      star_expressions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raise_stmtContext ------------------------------------------------------------------

FandangoParser::Raise_stmtContext::Raise_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::RAISE() {
  return getToken(FandangoParser::RAISE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Raise_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Raise_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}


size_t FandangoParser::Raise_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleRaise_stmt;
}


std::any FandangoParser::Raise_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRaise_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Raise_stmtContext* FandangoParser::raise_stmt() {
  Raise_stmtContext *_localctx = _tracker.createInstance<Raise_stmtContext>(_ctx, getState());
  enterRule(_localctx, 92, FandangoParser::RuleRaise_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1013);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1006);
      match(FandangoParser::RAISE);
      setState(1007);
      expression();
      setState(1010);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(1008);
        match(FandangoParser::FROM);
        setState(1009);
        expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1012);
      match(FandangoParser::RAISE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_stmtContext ------------------------------------------------------------------

FandangoParser::Global_stmtContext::Global_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Global_stmtContext::GLOBAL() {
  return getToken(FandangoParser::GLOBAL, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Global_stmtContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Global_stmtContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Global_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Global_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Global_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleGlobal_stmt;
}


std::any FandangoParser::Global_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Global_stmtContext* FandangoParser::global_stmt() {
  Global_stmtContext *_localctx = _tracker.createInstance<Global_stmtContext>(_ctx, getState());
  enterRule(_localctx, 94, FandangoParser::RuleGlobal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    match(FandangoParser::GLOBAL);
    setState(1016);
    match(FandangoParser::NAME);
    setState(1021);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1017);
      match(FandangoParser::COMMA);
      setState(1018);
      match(FandangoParser::NAME);
      setState(1023);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonlocal_stmtContext ------------------------------------------------------------------

FandangoParser::Nonlocal_stmtContext::Nonlocal_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::NONLOCAL() {
  return getToken(FandangoParser::NONLOCAL, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonlocal_stmtContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonlocal_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Nonlocal_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleNonlocal_stmt;
}


std::any FandangoParser::Nonlocal_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonlocal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::nonlocal_stmt() {
  Nonlocal_stmtContext *_localctx = _tracker.createInstance<Nonlocal_stmtContext>(_ctx, getState());
  enterRule(_localctx, 96, FandangoParser::RuleNonlocal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1024);
    match(FandangoParser::NONLOCAL);
    setState(1025);
    match(FandangoParser::NAME);
    setState(1030);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1026);
      match(FandangoParser::COMMA);
      setState(1027);
      match(FandangoParser::NAME);
      setState(1032);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_stmtContext ------------------------------------------------------------------

FandangoParser::Del_stmtContext::Del_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Del_stmtContext::DEL() {
  return getToken(FandangoParser::DEL, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_stmtContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}


size_t FandangoParser::Del_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleDel_stmt;
}


std::any FandangoParser::Del_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_stmtContext* FandangoParser::del_stmt() {
  Del_stmtContext *_localctx = _tracker.createInstance<Del_stmtContext>(_ctx, getState());
  enterRule(_localctx, 98, FandangoParser::RuleDel_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1033);
    match(FandangoParser::DEL);
    setState(1034);
    del_targets();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_stmtContext ------------------------------------------------------------------

FandangoParser::Yield_stmtContext::Yield_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Yield_stmtContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}


size_t FandangoParser::Yield_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleYield_stmt;
}


std::any FandangoParser::Yield_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_stmtContext* FandangoParser::yield_stmt() {
  Yield_stmtContext *_localctx = _tracker.createInstance<Yield_stmtContext>(_ctx, getState());
  enterRule(_localctx, 100, FandangoParser::RuleYield_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1036);
    yield_expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assert_stmtContext ------------------------------------------------------------------

FandangoParser::Assert_stmtContext::Assert_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::ASSERT() {
  return getToken(FandangoParser::ASSERT, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Assert_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Assert_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Assert_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleAssert_stmt;
}


std::any FandangoParser::Assert_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssert_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assert_stmtContext* FandangoParser::assert_stmt() {
  Assert_stmtContext *_localctx = _tracker.createInstance<Assert_stmtContext>(_ctx, getState());
  enterRule(_localctx, 102, FandangoParser::RuleAssert_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    match(FandangoParser::ASSERT);
    setState(1039);
    expression();
    setState(1042);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1040);
      match(FandangoParser::COMMA);
      setState(1041);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_stmtContext ------------------------------------------------------------------

FandangoParser::Import_stmtContext::Import_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Import_nameContext* FandangoParser::Import_stmtContext::import_name() {
  return getRuleContext<FandangoParser::Import_nameContext>(0);
}

FandangoParser::Import_fromContext* FandangoParser::Import_stmtContext::import_from() {
  return getRuleContext<FandangoParser::Import_fromContext>(0);
}


size_t FandangoParser::Import_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleImport_stmt;
}


std::any FandangoParser::Import_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_stmtContext* FandangoParser::import_stmt() {
  Import_stmtContext *_localctx = _tracker.createInstance<Import_stmtContext>(_ctx, getState());
  enterRule(_localctx, 104, FandangoParser::RuleImport_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1046);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::IMPORT: {
        enterOuterAlt(_localctx, 1);
        setState(1044);
        import_name();
        break;
      }

      case FandangoParser::FROM: {
        enterOuterAlt(_localctx, 2);
        setState(1045);
        import_from();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_nameContext ------------------------------------------------------------------

FandangoParser::Import_nameContext::Import_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_nameContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::Import_nameContext::dotted_as_names() {
  return getRuleContext<FandangoParser::Dotted_as_namesContext>(0);
}


size_t FandangoParser::Import_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_name;
}


std::any FandangoParser::Import_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_nameContext* FandangoParser::import_name() {
  Import_nameContext *_localctx = _tracker.createInstance<Import_nameContext>(_ctx, getState());
  enterRule(_localctx, 106, FandangoParser::RuleImport_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    match(FandangoParser::IMPORT);
    setState(1049);
    dotted_as_names();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_fromContext ------------------------------------------------------------------

FandangoParser::Import_fromContext::Import_fromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_fromContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Import_fromContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Import_fromContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Import_from_targetsContext* FandangoParser::Import_fromContext::import_from_targets() {
  return getRuleContext<FandangoParser::Import_from_targetsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::DOT() {
  return getTokens(FandangoParser::DOT);
}

tree::TerminalNode* FandangoParser::Import_fromContext::DOT(size_t i) {
  return getToken(FandangoParser::DOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::ELLIPSIS() {
  return getTokens(FandangoParser::ELLIPSIS);
}

tree::TerminalNode* FandangoParser::Import_fromContext::ELLIPSIS(size_t i) {
  return getToken(FandangoParser::ELLIPSIS, i);
}


size_t FandangoParser::Import_fromContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from;
}


std::any FandangoParser::Import_fromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_fromContext* FandangoParser::import_from() {
  Import_fromContext *_localctx = _tracker.createInstance<Import_fromContext>(_ctx, getState());
  enterRule(_localctx, 108, FandangoParser::RuleImport_from);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1070);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1051);
      match(FandangoParser::FROM);
      setState(1055);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DOT

      || _la == FandangoParser::ELLIPSIS) {
        setState(1052);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::DOT

        || _la == FandangoParser::ELLIPSIS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1057);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1058);
      dotted_name(0);
      setState(1059);
      match(FandangoParser::IMPORT);
      setState(1060);
      import_from_targets();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1062);
      match(FandangoParser::FROM);
      setState(1064); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1063);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::DOT

        || _la == FandangoParser::ELLIPSIS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1066); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::DOT

      || _la == FandangoParser::ELLIPSIS);
      setState(1068);
      match(FandangoParser::IMPORT);
      setState(1069);
      import_from_targets();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_targetsContext ------------------------------------------------------------------

FandangoParser::Import_from_targetsContext::Import_from_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::Import_from_targetsContext::import_from_as_names() {
  return getRuleContext<FandangoParser::Import_from_as_namesContext>(0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::Import_from_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_targets;
}


std::any FandangoParser::Import_from_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_targetsContext* FandangoParser::import_from_targets() {
  Import_from_targetsContext *_localctx = _tracker.createInstance<Import_from_targetsContext>(_ctx, getState());
  enterRule(_localctx, 110, FandangoParser::RuleImport_from_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1081);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1072);
        match(FandangoParser::OPEN_PAREN);
        setState(1073);
        import_from_as_names();
        setState(1075);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COMMA) {
          setState(1074);
          match(FandangoParser::COMMA);
        }
        setState(1077);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(1079);
        import_from_as_names();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 3);
        setState(1080);
        match(FandangoParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_namesContext ------------------------------------------------------------------

FandangoParser::Import_from_as_namesContext::Import_from_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Import_from_as_nameContext *> FandangoParser::Import_from_as_namesContext::import_from_as_name() {
  return getRuleContexts<FandangoParser::Import_from_as_nameContext>();
}

FandangoParser::Import_from_as_nameContext* FandangoParser::Import_from_as_namesContext::import_from_as_name(size_t i) {
  return getRuleContext<FandangoParser::Import_from_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_from_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Import_from_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Import_from_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_names;
}


std::any FandangoParser::Import_from_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::import_from_as_names() {
  Import_from_as_namesContext *_localctx = _tracker.createInstance<Import_from_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 112, FandangoParser::RuleImport_from_as_names);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1083);
    import_from_as_name();
    setState(1088);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1084);
        match(FandangoParser::COMMA);
        setState(1085);
        import_from_as_name(); 
      }
      setState(1090);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_nameContext ------------------------------------------------------------------

FandangoParser::Import_from_as_nameContext::Import_from_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Import_from_as_nameContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Import_from_as_nameContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

tree::TerminalNode* FandangoParser::Import_from_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}


size_t FandangoParser::Import_from_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_name;
}


std::any FandangoParser::Import_from_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_nameContext* FandangoParser::import_from_as_name() {
  Import_from_as_nameContext *_localctx = _tracker.createInstance<Import_from_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 114, FandangoParser::RuleImport_from_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1091);
    match(FandangoParser::NAME);
    setState(1094);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1092);
      match(FandangoParser::AS);
      setState(1093);
      match(FandangoParser::NAME);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_namesContext ------------------------------------------------------------------

FandangoParser::Dotted_as_namesContext::Dotted_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Dotted_as_nameContext *> FandangoParser::Dotted_as_namesContext::dotted_as_name() {
  return getRuleContexts<FandangoParser::Dotted_as_nameContext>();
}

FandangoParser::Dotted_as_nameContext* FandangoParser::Dotted_as_namesContext::dotted_as_name(size_t i) {
  return getRuleContext<FandangoParser::Dotted_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Dotted_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Dotted_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Dotted_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_names;
}


std::any FandangoParser::Dotted_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::dotted_as_names() {
  Dotted_as_namesContext *_localctx = _tracker.createInstance<Dotted_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 116, FandangoParser::RuleDotted_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1096);
    dotted_as_name();
    setState(1101);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1097);
      match(FandangoParser::COMMA);
      setState(1098);
      dotted_as_name();
      setState(1103);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_as_nameContext::Dotted_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_as_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

tree::TerminalNode* FandangoParser::Dotted_as_nameContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Dotted_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_name;
}


std::any FandangoParser::Dotted_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_nameContext* FandangoParser::dotted_as_name() {
  Dotted_as_nameContext *_localctx = _tracker.createInstance<Dotted_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 118, FandangoParser::RuleDotted_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1104);
    dotted_name(0);
    setState(1107);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1105);
      match(FandangoParser::AS);
      setState(1106);
      match(FandangoParser::NAME);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_nameContext::Dotted_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Dotted_nameContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_nameContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Dotted_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_name;
}


std::any FandangoParser::Dotted_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_name(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Dotted_nameContext* FandangoParser::dotted_name() {
   return dotted_name(0);
}

FandangoParser::Dotted_nameContext* FandangoParser::dotted_name(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Dotted_nameContext *_localctx = _tracker.createInstance<Dotted_nameContext>(_ctx, parentState);
  FandangoParser::Dotted_nameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 120;
  enterRecursionRule(_localctx, 120, FandangoParser::RuleDotted_name, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1110);
    match(FandangoParser::NAME);
    _ctx->stop = _input->LT(-1);
    setState(1117);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Dotted_nameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDotted_name);
        setState(1112);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1113);
        match(FandangoParser::DOT);
        setState(1114);
        match(FandangoParser::NAME); 
      }
      setState(1119);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

FandangoParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::BlockContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::BlockContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::StatementsContext* FandangoParser::BlockContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::BlockContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::BlockContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::BlockContext::getRuleIndex() const {
  return FandangoParser::RuleBlock;
}


std::any FandangoParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::BlockContext* FandangoParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 122, FandangoParser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1126);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 1);
        setState(1120);
        match(FandangoParser::NEWLINE);
        setState(1121);
        match(FandangoParser::INDENT);
        setState(1122);
        statements();
        setState(1123);
        match(FandangoParser::DEDENT);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1125);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratorsContext ------------------------------------------------------------------

FandangoParser::DecoratorsContext::DecoratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::AT() {
  return getTokens(FandangoParser::AT);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::AT(size_t i) {
  return getToken(FandangoParser::AT, i);
}

std::vector<FandangoParser::Named_expressionContext *> FandangoParser::DecoratorsContext::named_expression() {
  return getRuleContexts<FandangoParser::Named_expressionContext>();
}

FandangoParser::Named_expressionContext* FandangoParser::DecoratorsContext::named_expression(size_t i) {
  return getRuleContext<FandangoParser::Named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::DecoratorsContext::getRuleIndex() const {
  return FandangoParser::RuleDecorators;
}


std::any FandangoParser::DecoratorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDecorators(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DecoratorsContext* FandangoParser::decorators() {
  DecoratorsContext *_localctx = _tracker.createInstance<DecoratorsContext>(_ctx, getState());
  enterRule(_localctx, 124, FandangoParser::RuleDecorators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1132); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1128);
      match(FandangoParser::AT);
      setState(1129);
      named_expression();
      setState(1130);
      match(FandangoParser::NEWLINE);
      setState(1134); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::AT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_defContext ------------------------------------------------------------------

FandangoParser::Class_defContext::Class_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Class_def_rawContext* FandangoParser::Class_defContext::class_def_raw() {
  return getRuleContext<FandangoParser::Class_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Class_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Class_defContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def;
}


std::any FandangoParser::Class_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_defContext* FandangoParser::class_def() {
  Class_defContext *_localctx = _tracker.createInstance<Class_defContext>(_ctx, getState());
  enterRule(_localctx, 126, FandangoParser::RuleClass_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1136);
      decorators();
    }
    setState(1139);
    class_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_def_rawContext ------------------------------------------------------------------

FandangoParser::Class_def_rawContext::Class_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLASS() {
  return getToken(FandangoParser::CLASS, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Class_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Class_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Class_def_rawContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Class_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def_raw;
}


std::any FandangoParser::Class_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_def_rawContext* FandangoParser::class_def_raw() {
  Class_def_rawContext *_localctx = _tracker.createInstance<Class_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 128, FandangoParser::RuleClass_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1141);
    match(FandangoParser::CLASS);
    setState(1142);
    match(FandangoParser::NAME);
    setState(1144);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1143);
      type_params();
    }
    setState(1151);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_PAREN) {
      setState(1146);
      match(FandangoParser::OPEN_PAREN);
      setState(1148);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599633861255) != 0)) {
        setState(1147);
        arguments();
      }
      setState(1150);
      match(FandangoParser::CLOSE_PAREN);
    }
    setState(1153);
    match(FandangoParser::COLON);
    setState(1154);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_defContext ------------------------------------------------------------------

FandangoParser::Function_defContext::Function_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_def_rawContext* FandangoParser::Function_defContext::function_def_raw() {
  return getRuleContext<FandangoParser::Function_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Function_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Function_defContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def;
}


std::any FandangoParser::Function_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_defContext* FandangoParser::function_def() {
  Function_defContext *_localctx = _tracker.createInstance<Function_defContext>(_ctx, getState());
  enterRule(_localctx, 130, FandangoParser::RuleFunction_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1156);
      decorators();
    }
    setState(1159);
    function_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_def_rawContext ------------------------------------------------------------------

FandangoParser::Function_def_rawContext::Function_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::DEF() {
  return getToken(FandangoParser::DEF, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Function_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

FandangoParser::Type_paramsContext* FandangoParser::Function_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

FandangoParser::ParamsContext* FandangoParser::Function_def_rawContext::params() {
  return getRuleContext<FandangoParser::ParamsContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Function_def_rawContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Func_type_commentContext* FandangoParser::Function_def_rawContext::func_type_comment() {
  return getRuleContext<FandangoParser::Func_type_commentContext>(0);
}


size_t FandangoParser::Function_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def_raw;
}


std::any FandangoParser::Function_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_def_rawContext* FandangoParser::function_def_raw() {
  Function_def_rawContext *_localctx = _tracker.createInstance<Function_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 132, FandangoParser::RuleFunction_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(1161);
      match(FandangoParser::ASYNC);
    }
    setState(1164);
    match(FandangoParser::DEF);
    setState(1165);
    match(FandangoParser::NAME);
    setState(1167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1166);
      type_params();
    }
    setState(1169);
    match(FandangoParser::OPEN_PAREN);
    setState(1171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 2129921) != 0)) {
      setState(1170);
      params();
    }
    setState(1173);
    match(FandangoParser::CLOSE_PAREN);
    setState(1176);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ARROW) {
      setState(1174);
      match(FandangoParser::ARROW);
      setState(1175);
      expression();
    }
    setState(1178);
    match(FandangoParser::COLON);
    setState(1180);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      setState(1179);
      func_type_comment();
      break;
    }

    default:
      break;
    }
    setState(1182);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

FandangoParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParametersContext* FandangoParser::ParamsContext::parameters() {
  return getRuleContext<FandangoParser::ParametersContext>(0);
}


size_t FandangoParser::ParamsContext::getRuleIndex() const {
  return FandangoParser::RuleParams;
}


std::any FandangoParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamsContext* FandangoParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 134, FandangoParser::RuleParams);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1184);
    parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

FandangoParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Slash_no_defaultContext* FandangoParser::ParametersContext::slash_no_default() {
  return getRuleContext<FandangoParser::Slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::ParametersContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::ParametersContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::ParametersContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::ParametersContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

FandangoParser::Star_etcContext* FandangoParser::ParametersContext::star_etc() {
  return getRuleContext<FandangoParser::Star_etcContext>(0);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::ParametersContext::slash_with_default() {
  return getRuleContext<FandangoParser::Slash_with_defaultContext>(0);
}


size_t FandangoParser::ParametersContext::getRuleIndex() const {
  return FandangoParser::RuleParameters;
}


std::any FandangoParser::ParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParametersContext* FandangoParser::parameters() {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
  enterRule(_localctx, 136, FandangoParser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1235);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1186);
      slash_no_default();
      setState(1190);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1187);
          param_no_default(); 
        }
        setState(1192);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
      }
      setState(1196);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1193);
        param_with_default();
        setState(1198);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1200);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1199);
        star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1202);
      slash_with_default();
      setState(1206);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1203);
        param_with_default();
        setState(1208);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1210);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1209);
        star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1213); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1212);
                param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1215); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1220);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1217);
        param_with_default();
        setState(1222);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1224);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1223);
        star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1227); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1226);
        param_with_default();
        setState(1229); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(1232);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1231);
        star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1234);
      star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_no_defaultContext::Slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_no_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_no_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_no_default;
}


std::any FandangoParser::Slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_no_defaultContext* FandangoParser::slash_no_default() {
  Slash_no_defaultContext *_localctx = _tracker.createInstance<Slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 138, FandangoParser::RuleSlash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1238); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1237);
      param_no_default();
      setState(1240); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(1242);
    match(FandangoParser::DIV);
    setState(1244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1243);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_with_defaultContext::Slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_with_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_with_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::Slash_with_defaultContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::Slash_with_defaultContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_with_default;
}


std::any FandangoParser::Slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::slash_with_default() {
  Slash_with_defaultContext *_localctx = _tracker.createInstance<Slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 140, FandangoParser::RuleSlash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1249);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1246);
        param_no_default(); 
      }
      setState(1251);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
    }
    setState(1253); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1252);
      param_with_default();
      setState(1255); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(1257);
    match(FandangoParser::DIV);
    setState(1259);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1258);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_etcContext ------------------------------------------------------------------

FandangoParser::Star_etcContext::Star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::Star_etcContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_maybe_defaultContext *> FandangoParser::Star_etcContext::param_maybe_default() {
  return getRuleContexts<FandangoParser::Param_maybe_defaultContext>();
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::Star_etcContext::param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Param_maybe_defaultContext>(i);
}

FandangoParser::KwdsContext* FandangoParser::Star_etcContext::kwds() {
  return getRuleContext<FandangoParser::KwdsContext>(0);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::Star_etcContext::param_no_default_star_annotation() {
  return getRuleContext<FandangoParser::Param_no_default_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleStar_etc;
}


std::any FandangoParser::Star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_etcContext* FandangoParser::star_etc() {
  Star_etcContext *_localctx = _tracker.createInstance<Star_etcContext>(_ctx, getState());
  enterRule(_localctx, 142, FandangoParser::RuleStar_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1294);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1261);
      match(FandangoParser::STAR);
      setState(1262);
      param_no_default();
      setState(1266);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1263);
        param_maybe_default();
        setState(1268);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1270);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1269);
        kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1272);
      match(FandangoParser::STAR);
      setState(1273);
      param_no_default_star_annotation();
      setState(1277);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(1274);
        param_maybe_default();
        setState(1279);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1281);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1280);
        kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1283);
      match(FandangoParser::STAR);
      setState(1284);
      match(FandangoParser::COMMA);
      setState(1286); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1285);
        param_maybe_default();
        setState(1288); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(1291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1290);
        kwds();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1293);
      kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwdsContext ------------------------------------------------------------------

FandangoParser::KwdsContext::KwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::KwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::KwdsContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}


size_t FandangoParser::KwdsContext::getRuleIndex() const {
  return FandangoParser::RuleKwds;
}


std::any FandangoParser::KwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwdsContext* FandangoParser::kwds() {
  KwdsContext *_localctx = _tracker.createInstance<KwdsContext>(_ctx, getState());
  enterRule(_localctx, 144, FandangoParser::RuleKwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1296);
    match(FandangoParser::POWER);
    setState(1297);
    param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Param_no_defaultContext::Param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_no_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default;
}


std::any FandangoParser::Param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_defaultContext* FandangoParser::param_no_default() {
  Param_no_defaultContext *_localctx = _tracker.createInstance<Param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 146, FandangoParser::RuleParam_no_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1303);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1299);
      param();
      setState(1300);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1302);
      param();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_default_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_no_default_star_annotationContext::Param_no_default_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Param_star_annotationContext* FandangoParser::Param_no_default_star_annotationContext::param_star_annotation() {
  return getRuleContext<FandangoParser::Param_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_default_star_annotationContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_default_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default_star_annotation;
}


std::any FandangoParser::Param_no_default_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::param_no_default_star_annotation() {
  Param_no_default_star_annotationContext *_localctx = _tracker.createInstance<Param_no_default_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 148, FandangoParser::RuleParam_no_default_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1309);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1305);
      param_star_annotation();
      setState(1306);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1308);
      param_star_annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Param_with_defaultContext::Param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_with_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_with_default;
}


std::any FandangoParser::Param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_with_defaultContext* FandangoParser::param_with_default() {
  Param_with_defaultContext *_localctx = _tracker.createInstance<Param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 150, FandangoParser::RuleParam_with_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1318);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1311);
      param();
      setState(1312);
      default_();
      setState(1313);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1315);
      param();
      setState(1316);
      default_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Param_maybe_defaultContext::Param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_maybe_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::DefaultContext* FandangoParser::Param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}


size_t FandangoParser::Param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_maybe_default;
}


std::any FandangoParser::Param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::param_maybe_default() {
  Param_maybe_defaultContext *_localctx = _tracker.createInstance<Param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 152, FandangoParser::RuleParam_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1330);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1320);
      param();
      setState(1322);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1321);
        default_();
      }
      setState(1324);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1326);
      param();
      setState(1328);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1327);
        default_();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

FandangoParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ParamContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::AnnotationContext* FandangoParser::ParamContext::annotation() {
  return getRuleContext<FandangoParser::AnnotationContext>(0);
}


size_t FandangoParser::ParamContext::getRuleIndex() const {
  return FandangoParser::RuleParam;
}


std::any FandangoParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamContext* FandangoParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 154, FandangoParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1332);
    match(FandangoParser::NAME);
    setState(1334);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(1333);
      annotation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_star_annotationContext::Param_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Param_star_annotationContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Star_annotationContext* FandangoParser::Param_star_annotationContext::star_annotation() {
  return getRuleContext<FandangoParser::Star_annotationContext>(0);
}


size_t FandangoParser::Param_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_star_annotation;
}


std::any FandangoParser::Param_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_star_annotationContext* FandangoParser::param_star_annotation() {
  Param_star_annotationContext *_localctx = _tracker.createInstance<Param_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 156, FandangoParser::RuleParam_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    match(FandangoParser::NAME);
    setState(1337);
    star_annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

FandangoParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AnnotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AnnotationContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::AnnotationContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotation;
}


std::any FandangoParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AnnotationContext* FandangoParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 158, FandangoParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1339);
    match(FandangoParser::COLON);
    setState(1340);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_annotationContext ------------------------------------------------------------------

FandangoParser::Star_annotationContext::Star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_annotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Star_expressionContext* FandangoParser::Star_annotationContext::star_expression() {
  return getRuleContext<FandangoParser::Star_expressionContext>(0);
}


size_t FandangoParser::Star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleStar_annotation;
}


std::any FandangoParser::Star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_annotationContext* FandangoParser::star_annotation() {
  Star_annotationContext *_localctx = _tracker.createInstance<Star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 160, FandangoParser::RuleStar_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1342);
    match(FandangoParser::COLON);
    setState(1343);
    star_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultContext ------------------------------------------------------------------

FandangoParser::DefaultContext::DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DefaultContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::DefaultContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::DefaultContext::getRuleIndex() const {
  return FandangoParser::RuleDefault;
}


std::any FandangoParser::DefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDefault(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DefaultContext* FandangoParser::default_() {
  DefaultContext *_localctx = _tracker.createInstance<DefaultContext>(_ctx, getState());
  enterRule(_localctx, 162, FandangoParser::RuleDefault);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1345);
    match(FandangoParser::ASSIGN);
    setState(1346);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_stmtContext ------------------------------------------------------------------

FandangoParser::If_stmtContext::If_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::If_stmtContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::If_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::If_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::If_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::If_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::If_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::If_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleIf_stmt;
}


std::any FandangoParser::If_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIf_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::If_stmtContext* FandangoParser::if_stmt() {
  If_stmtContext *_localctx = _tracker.createInstance<If_stmtContext>(_ctx, getState());
  enterRule(_localctx, 164, FandangoParser::RuleIf_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1361);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1348);
      match(FandangoParser::IF);
      setState(1349);
      named_expression();
      setState(1350);
      match(FandangoParser::COLON);
      setState(1351);
      block();
      setState(1352);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1354);
      match(FandangoParser::IF);
      setState(1355);
      named_expression();
      setState(1356);
      match(FandangoParser::COLON);
      setState(1357);
      block();
      setState(1359);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1358);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elif_stmtContext ------------------------------------------------------------------

FandangoParser::Elif_stmtContext::Elif_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::ELIF() {
  return getToken(FandangoParser::ELIF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::Elif_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Elif_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::Elif_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::Elif_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::Elif_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleElif_stmt;
}


std::any FandangoParser::Elif_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElif_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Elif_stmtContext* FandangoParser::elif_stmt() {
  Elif_stmtContext *_localctx = _tracker.createInstance<Elif_stmtContext>(_ctx, getState());
  enterRule(_localctx, 166, FandangoParser::RuleElif_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1376);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1363);
      match(FandangoParser::ELIF);
      setState(1364);
      named_expression();
      setState(1365);
      match(FandangoParser::COLON);
      setState(1366);
      block();
      setState(1367);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1369);
      match(FandangoParser::ELIF);
      setState(1370);
      named_expression();
      setState(1371);
      match(FandangoParser::COLON);
      setState(1372);
      block();
      setState(1374);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1373);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Else_blockContext ------------------------------------------------------------------

FandangoParser::Else_blockContext::Else_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Else_blockContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

tree::TerminalNode* FandangoParser::Else_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Else_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Else_blockContext::getRuleIndex() const {
  return FandangoParser::RuleElse_block;
}


std::any FandangoParser::Else_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElse_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Else_blockContext* FandangoParser::else_block() {
  Else_blockContext *_localctx = _tracker.createInstance<Else_blockContext>(_ctx, getState());
  enterRule(_localctx, 168, FandangoParser::RuleElse_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1378);
    match(FandangoParser::ELSE);
    setState(1379);
    match(FandangoParser::COLON);
    setState(1380);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_stmtContext ------------------------------------------------------------------

FandangoParser::While_stmtContext::While_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::While_stmtContext::WHILE() {
  return getToken(FandangoParser::WHILE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::While_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::While_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::While_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::While_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::While_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWhile_stmt;
}


std::any FandangoParser::While_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWhile_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::While_stmtContext* FandangoParser::while_stmt() {
  While_stmtContext *_localctx = _tracker.createInstance<While_stmtContext>(_ctx, getState());
  enterRule(_localctx, 170, FandangoParser::RuleWhile_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1382);
    match(FandangoParser::WHILE);
    setState(1383);
    named_expression();
    setState(1384);
    match(FandangoParser::COLON);
    setState(1385);
    block();
    setState(1387);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ELSE) {
      setState(1386);
      else_block();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_stmtContext ------------------------------------------------------------------

FandangoParser::For_stmtContext::For_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_stmtContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_stmtContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::For_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::For_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::For_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::For_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleFor_stmt;
}


std::any FandangoParser::For_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_stmtContext* FandangoParser::for_stmt() {
  For_stmtContext *_localctx = _tracker.createInstance<For_stmtContext>(_ctx, getState());
  enterRule(_localctx, 172, FandangoParser::RuleFor_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1408);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(1389);
        match(FandangoParser::FOR);
        setState(1390);
        star_targets();
        setState(1391);
        match(FandangoParser::IN);
        setState(1392);
        star_expressions();
        setState(1393);
        match(FandangoParser::COLON);
        setState(1394);
        block();
        setState(1396);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1395);
          else_block();
        }
        break;
      }

      case FandangoParser::ASYNC: {
        enterOuterAlt(_localctx, 2);
        setState(1398);
        match(FandangoParser::ASYNC);
        setState(1399);
        match(FandangoParser::FOR);
        setState(1400);
        star_targets();
        setState(1401);
        match(FandangoParser::IN);
        setState(1402);
        star_expressions();
        setState(1403);
        match(FandangoParser::COLON);
        setState(1404);
        block();
        setState(1406);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1405);
          else_block();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_stmtContext ------------------------------------------------------------------

FandangoParser::With_stmtContext::With_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::With_stmtContext::WITH() {
  return getToken(FandangoParser::WITH, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

std::vector<FandangoParser::With_itemContext *> FandangoParser::With_stmtContext::with_item() {
  return getRuleContexts<FandangoParser::With_itemContext>();
}

FandangoParser::With_itemContext* FandangoParser::With_stmtContext::with_item(size_t i) {
  return getRuleContext<FandangoParser::With_itemContext>(i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::With_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::With_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::With_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWith_stmt;
}


std::any FandangoParser::With_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_stmtContext* FandangoParser::with_stmt() {
  With_stmtContext *_localctx = _tracker.createInstance<With_stmtContext>(_ctx, getState());
  enterRule(_localctx, 174, FandangoParser::RuleWith_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1470);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1410);
      match(FandangoParser::WITH);
      setState(1411);
      match(FandangoParser::OPEN_PAREN);
      setState(1412);
      with_item();
      setState(1417);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1413);
          match(FandangoParser::COMMA);
          setState(1414);
          with_item(); 
        }
        setState(1419);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
      }
      setState(1421);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1420);
        match(FandangoParser::COMMA);
      }
      setState(1423);
      match(FandangoParser::CLOSE_PAREN);
      setState(1424);
      match(FandangoParser::COLON);
      setState(1425);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1427);
      match(FandangoParser::WITH);
      setState(1428);
      with_item();
      setState(1433);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1429);
        match(FandangoParser::COMMA);
        setState(1430);
        with_item();
        setState(1435);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1436);
      match(FandangoParser::COLON);
      setState(1437);
      block();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1439);
      match(FandangoParser::ASYNC);
      setState(1440);
      match(FandangoParser::WITH);
      setState(1441);
      match(FandangoParser::OPEN_PAREN);
      setState(1442);
      with_item();
      setState(1447);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1443);
          match(FandangoParser::COMMA);
          setState(1444);
          with_item(); 
        }
        setState(1449);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
      }
      setState(1451);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1450);
        match(FandangoParser::COMMA);
      }
      setState(1453);
      match(FandangoParser::CLOSE_PAREN);
      setState(1454);
      match(FandangoParser::COLON);
      setState(1455);
      block();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1457);
      match(FandangoParser::ASYNC);
      setState(1458);
      match(FandangoParser::WITH);
      setState(1459);
      with_item();
      setState(1464);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1460);
        match(FandangoParser::COMMA);
        setState(1461);
        with_item();
        setState(1466);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1467);
      match(FandangoParser::COLON);
      setState(1468);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_itemContext ------------------------------------------------------------------

FandangoParser::With_itemContext::With_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionContext* FandangoParser::With_itemContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::With_itemContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Star_targetContext* FandangoParser::With_itemContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}


size_t FandangoParser::With_itemContext::getRuleIndex() const {
  return FandangoParser::RuleWith_item;
}


std::any FandangoParser::With_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_item(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_itemContext* FandangoParser::with_item() {
  With_itemContext *_localctx = _tracker.createInstance<With_itemContext>(_ctx, getState());
  enterRule(_localctx, 176, FandangoParser::RuleWith_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1477);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1472);
      expression();
      setState(1473);
      match(FandangoParser::AS);
      setState(1474);
      star_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1476);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_stmtContext ------------------------------------------------------------------

FandangoParser::Try_stmtContext::Try_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Try_stmtContext::TRY() {
  return getToken(FandangoParser::TRY, 0);
}

tree::TerminalNode* FandangoParser::Try_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Try_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Finally_blockContext* FandangoParser::Try_stmtContext::finally_block() {
  return getRuleContext<FandangoParser::Finally_blockContext>(0);
}

std::vector<FandangoParser::Except_blockContext *> FandangoParser::Try_stmtContext::except_block() {
  return getRuleContexts<FandangoParser::Except_blockContext>();
}

FandangoParser::Except_blockContext* FandangoParser::Try_stmtContext::except_block(size_t i) {
  return getRuleContext<FandangoParser::Except_blockContext>(i);
}

FandangoParser::Else_blockContext* FandangoParser::Try_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

std::vector<FandangoParser::Except_star_blockContext *> FandangoParser::Try_stmtContext::except_star_block() {
  return getRuleContexts<FandangoParser::Except_star_blockContext>();
}

FandangoParser::Except_star_blockContext* FandangoParser::Try_stmtContext::except_star_block(size_t i) {
  return getRuleContext<FandangoParser::Except_star_blockContext>(i);
}


size_t FandangoParser::Try_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleTry_stmt;
}


std::any FandangoParser::Try_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTry_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Try_stmtContext* FandangoParser::try_stmt() {
  Try_stmtContext *_localctx = _tracker.createInstance<Try_stmtContext>(_ctx, getState());
  enterRule(_localctx, 178, FandangoParser::RuleTry_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1512);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1479);
      match(FandangoParser::TRY);
      setState(1480);
      match(FandangoParser::COLON);
      setState(1481);
      block();
      setState(1482);
      finally_block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1484);
      match(FandangoParser::TRY);
      setState(1485);
      match(FandangoParser::COLON);
      setState(1486);
      block();
      setState(1488); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1487);
        except_block();
        setState(1490); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1493);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1492);
        else_block();
      }
      setState(1496);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1495);
        finally_block();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1498);
      match(FandangoParser::TRY);
      setState(1499);
      match(FandangoParser::COLON);
      setState(1500);
      block();
      setState(1502); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1501);
        except_star_block();
        setState(1504); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1507);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1506);
        else_block();
      }
      setState(1510);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1509);
        finally_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_blockContext ------------------------------------------------------------------

FandangoParser::Except_blockContext::Except_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Except_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_block;
}


std::any FandangoParser::Except_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_blockContext* FandangoParser::except_block() {
  Except_blockContext *_localctx = _tracker.createInstance<Except_blockContext>(_ctx, getState());
  enterRule(_localctx, 180, FandangoParser::RuleExcept_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1526);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1514);
      match(FandangoParser::EXCEPT);
      setState(1515);
      expression();
      setState(1518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::AS) {
        setState(1516);
        match(FandangoParser::AS);
        setState(1517);
        match(FandangoParser::NAME);
      }
      setState(1520);
      match(FandangoParser::COLON);
      setState(1521);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1523);
      match(FandangoParser::EXCEPT);
      setState(1524);
      match(FandangoParser::COLON);
      setState(1525);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_star_blockContext ------------------------------------------------------------------

FandangoParser::Except_star_blockContext::Except_star_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_star_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_star_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Except_star_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_star_block;
}


std::any FandangoParser::Except_star_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_star_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_star_blockContext* FandangoParser::except_star_block() {
  Except_star_blockContext *_localctx = _tracker.createInstance<Except_star_blockContext>(_ctx, getState());
  enterRule(_localctx, 182, FandangoParser::RuleExcept_star_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1528);
    match(FandangoParser::EXCEPT);
    setState(1529);
    match(FandangoParser::STAR);
    setState(1530);
    expression();
    setState(1533);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1531);
      match(FandangoParser::AS);
      setState(1532);
      match(FandangoParser::NAME);
    }
    setState(1535);
    match(FandangoParser::COLON);
    setState(1536);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_blockContext ------------------------------------------------------------------

FandangoParser::Finally_blockContext::Finally_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Finally_blockContext::FINALLY() {
  return getToken(FandangoParser::FINALLY, 0);
}

tree::TerminalNode* FandangoParser::Finally_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Finally_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Finally_blockContext::getRuleIndex() const {
  return FandangoParser::RuleFinally_block;
}


std::any FandangoParser::Finally_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFinally_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Finally_blockContext* FandangoParser::finally_block() {
  Finally_blockContext *_localctx = _tracker.createInstance<Finally_blockContext>(_ctx, getState());
  enterRule(_localctx, 184, FandangoParser::RuleFinally_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    match(FandangoParser::FINALLY);
    setState(1539);
    match(FandangoParser::COLON);
    setState(1540);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Match_stmtContext ------------------------------------------------------------------

FandangoParser::Match_stmtContext::Match_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Match_stmtContext::MATCH() {
  return getToken(FandangoParser::MATCH, 0);
}

FandangoParser::Subject_exprContext* FandangoParser::Match_stmtContext::subject_expr() {
  return getRuleContext<FandangoParser::Subject_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

std::vector<FandangoParser::Case_blockContext *> FandangoParser::Match_stmtContext::case_block() {
  return getRuleContexts<FandangoParser::Case_blockContext>();
}

FandangoParser::Case_blockContext* FandangoParser::Match_stmtContext::case_block(size_t i) {
  return getRuleContext<FandangoParser::Case_blockContext>(i);
}


size_t FandangoParser::Match_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleMatch_stmt;
}


std::any FandangoParser::Match_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMatch_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Match_stmtContext* FandangoParser::match_stmt() {
  Match_stmtContext *_localctx = _tracker.createInstance<Match_stmtContext>(_ctx, getState());
  enterRule(_localctx, 186, FandangoParser::RuleMatch_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1542);
    match(FandangoParser::MATCH);
    setState(1543);
    subject_expr();
    setState(1544);
    match(FandangoParser::COLON);
    setState(1545);
    match(FandangoParser::NEWLINE);
    setState(1546);
    match(FandangoParser::INDENT);
    setState(1548); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1547);
      case_block();
      setState(1550); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::CASE);
    setState(1552);
    match(FandangoParser::DEDENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subject_exprContext ------------------------------------------------------------------

FandangoParser::Subject_exprContext::Subject_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_named_expressionContext* FandangoParser::Subject_exprContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Subject_exprContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::Subject_exprContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Subject_exprContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Subject_exprContext::getRuleIndex() const {
  return FandangoParser::RuleSubject_expr;
}


std::any FandangoParser::Subject_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSubject_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Subject_exprContext* FandangoParser::subject_expr() {
  Subject_exprContext *_localctx = _tracker.createInstance<Subject_exprContext>(_ctx, getState());
  enterRule(_localctx, 188, FandangoParser::RuleSubject_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1560);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1554);
      star_named_expression();
      setState(1555);
      match(FandangoParser::COMMA);
      setState(1557);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599633861127) != 0)) {
        setState(1556);
        star_named_expressions();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1559);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_blockContext ------------------------------------------------------------------

FandangoParser::Case_blockContext::Case_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Case_blockContext::CASE() {
  return getToken(FandangoParser::CASE, 0);
}

FandangoParser::PatternsContext* FandangoParser::Case_blockContext::patterns() {
  return getRuleContext<FandangoParser::PatternsContext>(0);
}

tree::TerminalNode* FandangoParser::Case_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Case_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::GuardContext* FandangoParser::Case_blockContext::guard() {
  return getRuleContext<FandangoParser::GuardContext>(0);
}


size_t FandangoParser::Case_blockContext::getRuleIndex() const {
  return FandangoParser::RuleCase_block;
}


std::any FandangoParser::Case_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCase_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Case_blockContext* FandangoParser::case_block() {
  Case_blockContext *_localctx = _tracker.createInstance<Case_blockContext>(_ctx, getState());
  enterRule(_localctx, 190, FandangoParser::RuleCase_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1562);
    match(FandangoParser::CASE);
    setState(1563);
    patterns();
    setState(1565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::IF) {
      setState(1564);
      guard();
    }
    setState(1567);
    match(FandangoParser::COLON);
    setState(1568);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardContext ------------------------------------------------------------------

FandangoParser::GuardContext::GuardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GuardContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::GuardContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GuardContext::getRuleIndex() const {
  return FandangoParser::RuleGuard;
}


std::any FandangoParser::GuardContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGuard(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GuardContext* FandangoParser::guard() {
  GuardContext *_localctx = _tracker.createInstance<GuardContext>(_ctx, getState());
  enterRule(_localctx, 192, FandangoParser::RuleGuard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1570);
    match(FandangoParser::IF);
    setState(1571);
    named_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternsContext ------------------------------------------------------------------

FandangoParser::PatternsContext::PatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Open_sequence_patternContext* FandangoParser::PatternsContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::PatternsContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::PatternsContext::getRuleIndex() const {
  return FandangoParser::RulePatterns;
}


std::any FandangoParser::PatternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPatterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternsContext* FandangoParser::patterns() {
  PatternsContext *_localctx = _tracker.createInstance<PatternsContext>(_ctx, getState());
  enterRule(_localctx, 194, FandangoParser::RulePatterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1575);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1573);
      open_sequence_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1574);
      pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

FandangoParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::As_patternContext* FandangoParser::PatternContext::as_pattern() {
  return getRuleContext<FandangoParser::As_patternContext>(0);
}

FandangoParser::Or_patternContext* FandangoParser::PatternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}


size_t FandangoParser::PatternContext::getRuleIndex() const {
  return FandangoParser::RulePattern;
}


std::any FandangoParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternContext* FandangoParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 196, FandangoParser::RulePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1579);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1577);
      as_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1578);
      or_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- As_patternContext ------------------------------------------------------------------

FandangoParser::As_patternContext::As_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Or_patternContext* FandangoParser::As_patternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}

tree::TerminalNode* FandangoParser::As_patternContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::As_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::As_patternContext::getRuleIndex() const {
  return FandangoParser::RuleAs_pattern;
}


std::any FandangoParser::As_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAs_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::As_patternContext* FandangoParser::as_pattern() {
  As_patternContext *_localctx = _tracker.createInstance<As_patternContext>(_ctx, getState());
  enterRule(_localctx, 198, FandangoParser::RuleAs_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1581);
    or_pattern();
    setState(1582);
    match(FandangoParser::AS);
    setState(1583);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Or_patternContext ------------------------------------------------------------------

FandangoParser::Or_patternContext::Or_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Closed_patternContext *> FandangoParser::Or_patternContext::closed_pattern() {
  return getRuleContexts<FandangoParser::Closed_patternContext>();
}

FandangoParser::Closed_patternContext* FandangoParser::Or_patternContext::closed_pattern(size_t i) {
  return getRuleContext<FandangoParser::Closed_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Or_patternContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Or_patternContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::Or_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOr_pattern;
}


std::any FandangoParser::Or_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOr_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Or_patternContext* FandangoParser::or_pattern() {
  Or_patternContext *_localctx = _tracker.createInstance<Or_patternContext>(_ctx, getState());
  enterRule(_localctx, 200, FandangoParser::RuleOr_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1585);
    closed_pattern();
    setState(1590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(1586);
      match(FandangoParser::OR_OP);
      setState(1587);
      closed_pattern();
      setState(1592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Closed_patternContext ------------------------------------------------------------------

FandangoParser::Closed_patternContext::Closed_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Literal_patternContext* FandangoParser::Closed_patternContext::literal_pattern() {
  return getRuleContext<FandangoParser::Literal_patternContext>(0);
}

FandangoParser::Capture_patternContext* FandangoParser::Closed_patternContext::capture_pattern() {
  return getRuleContext<FandangoParser::Capture_patternContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Closed_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}

FandangoParser::Value_patternContext* FandangoParser::Closed_patternContext::value_pattern() {
  return getRuleContext<FandangoParser::Value_patternContext>(0);
}

FandangoParser::Group_patternContext* FandangoParser::Closed_patternContext::group_pattern() {
  return getRuleContext<FandangoParser::Group_patternContext>(0);
}

FandangoParser::Sequence_patternContext* FandangoParser::Closed_patternContext::sequence_pattern() {
  return getRuleContext<FandangoParser::Sequence_patternContext>(0);
}

FandangoParser::Mapping_patternContext* FandangoParser::Closed_patternContext::mapping_pattern() {
  return getRuleContext<FandangoParser::Mapping_patternContext>(0);
}

FandangoParser::Class_patternContext* FandangoParser::Closed_patternContext::class_pattern() {
  return getRuleContext<FandangoParser::Class_patternContext>(0);
}


size_t FandangoParser::Closed_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClosed_pattern;
}


std::any FandangoParser::Closed_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClosed_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Closed_patternContext* FandangoParser::closed_pattern() {
  Closed_patternContext *_localctx = _tracker.createInstance<Closed_patternContext>(_ctx, getState());
  enterRule(_localctx, 202, FandangoParser::RuleClosed_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1601);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1593);
      literal_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1594);
      capture_pattern();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1595);
      wildcard_pattern();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1596);
      value_pattern();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1597);
      group_pattern();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1598);
      sequence_pattern();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1599);
      mapping_pattern();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1600);
      class_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_patternContext ------------------------------------------------------------------

FandangoParser::Literal_patternContext::Literal_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_patternContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_patternContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_patternContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_patternContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_pattern;
}


std::any FandangoParser::Literal_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_patternContext* FandangoParser::literal_pattern() {
  Literal_patternContext *_localctx = _tracker.createInstance<Literal_patternContext>(_ctx, getState());
  enterRule(_localctx, 204, FandangoParser::RuleLiteral_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1609);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1603);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1604);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1605);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1606);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1607);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1608);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_exprContext ------------------------------------------------------------------

FandangoParser::Literal_exprContext::Literal_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_exprContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_exprContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_exprContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_exprContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_expr;
}


std::any FandangoParser::Literal_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_exprContext* FandangoParser::literal_expr() {
  Literal_exprContext *_localctx = _tracker.createInstance<Literal_exprContext>(_ctx, getState());
  enterRule(_localctx, 206, FandangoParser::RuleLiteral_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1617);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1611);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1612);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1613);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1614);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1615);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1616);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Complex_numberContext ------------------------------------------------------------------

FandangoParser::Complex_numberContext::Complex_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_real_numberContext* FandangoParser::Complex_numberContext::signed_real_number() {
  return getRuleContext<FandangoParser::Signed_real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::Imaginary_numberContext* FandangoParser::Complex_numberContext::imaginary_number() {
  return getRuleContext<FandangoParser::Imaginary_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Complex_numberContext::getRuleIndex() const {
  return FandangoParser::RuleComplex_number;
}


std::any FandangoParser::Complex_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComplex_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Complex_numberContext* FandangoParser::complex_number() {
  Complex_numberContext *_localctx = _tracker.createInstance<Complex_numberContext>(_ctx, getState());
  enterRule(_localctx, 208, FandangoParser::RuleComplex_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1627);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1619);
      signed_real_number();
      setState(1620);
      match(FandangoParser::ADD);
      setState(1621);
      imaginary_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1623);
      signed_real_number();
      setState(1624);
      match(FandangoParser::MINUS);
      setState(1625);
      imaginary_number();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_numberContext ------------------------------------------------------------------

FandangoParser::Signed_numberContext::Signed_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Signed_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

tree::TerminalNode* FandangoParser::Signed_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_number;
}


std::any FandangoParser::Signed_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_numberContext* FandangoParser::signed_number() {
  Signed_numberContext *_localctx = _tracker.createInstance<Signed_numberContext>(_ctx, getState());
  enterRule(_localctx, 210, FandangoParser::RuleSigned_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1632);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(1629);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(1630);
        match(FandangoParser::MINUS);
        setState(1631);
        match(FandangoParser::NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_real_numberContext ------------------------------------------------------------------

FandangoParser::Signed_real_numberContext::Signed_real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Real_numberContext* FandangoParser::Signed_real_numberContext::real_number() {
  return getRuleContext<FandangoParser::Real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Signed_real_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_real_number;
}


std::any FandangoParser::Signed_real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_real_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_real_numberContext* FandangoParser::signed_real_number() {
  Signed_real_numberContext *_localctx = _tracker.createInstance<Signed_real_numberContext>(_ctx, getState());
  enterRule(_localctx, 212, FandangoParser::RuleSigned_real_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1637);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(1634);
        real_number();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(1635);
        match(FandangoParser::MINUS);
        setState(1636);
        real_number();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_numberContext ------------------------------------------------------------------

FandangoParser::Real_numberContext::Real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Real_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleReal_number;
}


std::any FandangoParser::Real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReal_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Real_numberContext* FandangoParser::real_number() {
  Real_numberContext *_localctx = _tracker.createInstance<Real_numberContext>(_ctx, getState());
  enterRule(_localctx, 214, FandangoParser::RuleReal_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1639);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Imaginary_numberContext ------------------------------------------------------------------

FandangoParser::Imaginary_numberContext::Imaginary_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Imaginary_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Imaginary_numberContext::getRuleIndex() const {
  return FandangoParser::RuleImaginary_number;
}


std::any FandangoParser::Imaginary_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImaginary_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Imaginary_numberContext* FandangoParser::imaginary_number() {
  Imaginary_numberContext *_localctx = _tracker.createInstance<Imaginary_numberContext>(_ctx, getState());
  enterRule(_localctx, 216, FandangoParser::RuleImaginary_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1641);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Capture_patternContext ------------------------------------------------------------------

FandangoParser::Capture_patternContext::Capture_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Capture_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Capture_patternContext::getRuleIndex() const {
  return FandangoParser::RuleCapture_pattern;
}


std::any FandangoParser::Capture_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCapture_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Capture_patternContext* FandangoParser::capture_pattern() {
  Capture_patternContext *_localctx = _tracker.createInstance<Capture_patternContext>(_ctx, getState());
  enterRule(_localctx, 218, FandangoParser::RuleCapture_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1643);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pattern_capture_targetContext ------------------------------------------------------------------

FandangoParser::Pattern_capture_targetContext::Pattern_capture_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Pattern_capture_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Pattern_capture_targetContext::getRuleIndex() const {
  return FandangoParser::RulePattern_capture_target;
}


std::any FandangoParser::Pattern_capture_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern_capture_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::pattern_capture_target() {
  Pattern_capture_targetContext *_localctx = _tracker.createInstance<Pattern_capture_targetContext>(_ctx, getState());
  enterRule(_localctx, 220, FandangoParser::RulePattern_capture_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1645);
    match(FandangoParser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wildcard_patternContext ------------------------------------------------------------------

FandangoParser::Wildcard_patternContext::Wildcard_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Wildcard_patternContext::UNDERSCORE() {
  return getToken(FandangoParser::UNDERSCORE, 0);
}


size_t FandangoParser::Wildcard_patternContext::getRuleIndex() const {
  return FandangoParser::RuleWildcard_pattern;
}


std::any FandangoParser::Wildcard_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWildcard_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Wildcard_patternContext* FandangoParser::wildcard_pattern() {
  Wildcard_patternContext *_localctx = _tracker.createInstance<Wildcard_patternContext>(_ctx, getState());
  enterRule(_localctx, 222, FandangoParser::RuleWildcard_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1647);
    match(FandangoParser::UNDERSCORE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_patternContext ------------------------------------------------------------------

FandangoParser::Value_patternContext::Value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AttrContext* FandangoParser::Value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleValue_pattern;
}


std::any FandangoParser::Value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitValue_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Value_patternContext* FandangoParser::value_pattern() {
  Value_patternContext *_localctx = _tracker.createInstance<Value_patternContext>(_ctx, getState());
  enterRule(_localctx, 224, FandangoParser::RuleValue_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1649);
    attr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrContext ------------------------------------------------------------------

FandangoParser::AttrContext::AttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::AttrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::AttrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::AttrContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::AttrContext::getRuleIndex() const {
  return FandangoParser::RuleAttr;
}


std::any FandangoParser::AttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAttr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AttrContext* FandangoParser::attr() {
  AttrContext *_localctx = _tracker.createInstance<AttrContext>(_ctx, getState());
  enterRule(_localctx, 226, FandangoParser::RuleAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1651);
    name_or_attr(0);
    setState(1652);
    match(FandangoParser::DOT);
    setState(1653);
    match(FandangoParser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Name_or_attrContext ------------------------------------------------------------------

FandangoParser::Name_or_attrContext::Name_or_attrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Name_or_attrContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Name_or_attrContext* FandangoParser::Name_or_attrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Name_or_attrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Name_or_attrContext::getRuleIndex() const {
  return FandangoParser::RuleName_or_attr;
}


std::any FandangoParser::Name_or_attrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitName_or_attr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr() {
   return name_or_attr(0);
}

FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Name_or_attrContext *_localctx = _tracker.createInstance<Name_or_attrContext>(_ctx, parentState);
  FandangoParser::Name_or_attrContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 228;
  enterRecursionRule(_localctx, 228, FandangoParser::RuleName_or_attr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1656);
    match(FandangoParser::NAME);
    _ctx->stop = _input->LT(-1);
    setState(1663);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Name_or_attrContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleName_or_attr);
        setState(1658);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1659);
        match(FandangoParser::DOT);
        setState(1660);
        match(FandangoParser::NAME); 
      }
      setState(1665);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Group_patternContext ------------------------------------------------------------------

FandangoParser::Group_patternContext::Group_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Group_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::PatternContext* FandangoParser::Group_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

tree::TerminalNode* FandangoParser::Group_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Group_patternContext::getRuleIndex() const {
  return FandangoParser::RuleGroup_pattern;
}


std::any FandangoParser::Group_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Group_patternContext* FandangoParser::group_pattern() {
  Group_patternContext *_localctx = _tracker.createInstance<Group_patternContext>(_ctx, getState());
  enterRule(_localctx, 230, FandangoParser::RuleGroup_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1666);
    match(FandangoParser::OPEN_PAREN);
    setState(1667);
    pattern();
    setState(1668);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_patternContext ------------------------------------------------------------------

FandangoParser::Sequence_patternContext::Sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::Sequence_patternContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}


size_t FandangoParser::Sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleSequence_pattern;
}


std::any FandangoParser::Sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Sequence_patternContext* FandangoParser::sequence_pattern() {
  Sequence_patternContext *_localctx = _tracker.createInstance<Sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 232, FandangoParser::RuleSequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1680);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 1);
        setState(1670);
        match(FandangoParser::OPEN_BRACK);
        setState(1672);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 9027007652298776) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 2251799815848195) != 0)) {
          setState(1671);
          maybe_sequence_pattern();
        }
        setState(1674);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1675);
        match(FandangoParser::OPEN_PAREN);
        setState(1677);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 9027007652298776) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 2251799815848195) != 0)) {
          setState(1676);
          open_sequence_pattern();
        }
        setState(1679);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Open_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Open_sequence_patternContext::Open_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Open_sequence_patternContext::maybe_star_pattern() {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Open_sequence_patternContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Open_sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}


size_t FandangoParser::Open_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOpen_sequence_pattern;
}


std::any FandangoParser::Open_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOpen_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::open_sequence_pattern() {
  Open_sequence_patternContext *_localctx = _tracker.createInstance<Open_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 234, FandangoParser::RuleOpen_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1682);
    maybe_star_pattern();
    setState(1683);
    match(FandangoParser::COMMA);
    setState(1685);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9027007652298776) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2251799815848195) != 0)) {
      setState(1684);
      maybe_sequence_pattern();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_sequence_patternContext::Maybe_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Maybe_star_patternContext *> FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern() {
  return getRuleContexts<FandangoParser::Maybe_star_patternContext>();
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern(size_t i) {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Maybe_sequence_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Maybe_sequence_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Maybe_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_sequence_pattern;
}


std::any FandangoParser::Maybe_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::maybe_sequence_pattern() {
  Maybe_sequence_patternContext *_localctx = _tracker.createInstance<Maybe_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 236, FandangoParser::RuleMaybe_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1687);
    maybe_star_pattern();
    setState(1692);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1688);
        match(FandangoParser::COMMA);
        setState(1689);
        maybe_star_pattern(); 
      }
      setState(1694);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
    }
    setState(1696);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1695);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_star_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_star_patternContext::Maybe_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_patternContext* FandangoParser::Maybe_star_patternContext::star_pattern() {
  return getRuleContext<FandangoParser::Star_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::Maybe_star_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Maybe_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_star_pattern;
}


std::any FandangoParser::Maybe_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_star_patternContext* FandangoParser::maybe_star_pattern() {
  Maybe_star_patternContext *_localctx = _tracker.createInstance<Maybe_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 238, FandangoParser::RuleMaybe_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1700);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1698);
        star_pattern();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::UNDERSCORE:
      case FandangoParser::NAME:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::MINUS:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1699);
        pattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_patternContext ------------------------------------------------------------------

FandangoParser::Star_patternContext::Star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_patternContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Star_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}


size_t FandangoParser::Star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleStar_pattern;
}


std::any FandangoParser::Star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_patternContext* FandangoParser::star_pattern() {
  Star_patternContext *_localctx = _tracker.createInstance<Star_patternContext>(_ctx, getState());
  enterRule(_localctx, 240, FandangoParser::RuleStar_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1706);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1702);
      match(FandangoParser::STAR);
      setState(1703);
      pattern_capture_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1704);
      match(FandangoParser::STAR);
      setState(1705);
      wildcard_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mapping_patternContext ------------------------------------------------------------------

FandangoParser::Mapping_patternContext::Mapping_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_star_patternContext* FandangoParser::Mapping_patternContext::double_star_pattern() {
  return getRuleContext<FandangoParser::Double_star_patternContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Mapping_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Items_patternContext* FandangoParser::Mapping_patternContext::items_pattern() {
  return getRuleContext<FandangoParser::Items_patternContext>(0);
}


size_t FandangoParser::Mapping_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMapping_pattern;
}


std::any FandangoParser::Mapping_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMapping_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Mapping_patternContext* FandangoParser::mapping_pattern() {
  Mapping_patternContext *_localctx = _tracker.createInstance<Mapping_patternContext>(_ctx, getState());
  enterRule(_localctx, 242, FandangoParser::RuleMapping_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1733);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1708);
      match(FandangoParser::OPEN_BRACE);
      setState(1709);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1710);
      match(FandangoParser::OPEN_BRACE);
      setState(1711);
      double_star_pattern();
      setState(1713);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1712);
        match(FandangoParser::COMMA);
      }
      setState(1715);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1717);
      match(FandangoParser::OPEN_BRACE);
      setState(1718);
      items_pattern();
      setState(1719);
      match(FandangoParser::COMMA);
      setState(1720);
      double_star_pattern();
      setState(1722);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1721);
        match(FandangoParser::COMMA);
      }
      setState(1724);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1726);
      match(FandangoParser::OPEN_BRACE);
      setState(1727);
      items_pattern();
      setState(1729);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1728);
        match(FandangoParser::COMMA);
      }
      setState(1731);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Items_patternContext ------------------------------------------------------------------

FandangoParser::Items_patternContext::Items_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Key_value_patternContext *> FandangoParser::Items_patternContext::key_value_pattern() {
  return getRuleContexts<FandangoParser::Key_value_patternContext>();
}

FandangoParser::Key_value_patternContext* FandangoParser::Items_patternContext::key_value_pattern(size_t i) {
  return getRuleContext<FandangoParser::Key_value_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Items_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Items_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Items_patternContext::getRuleIndex() const {
  return FandangoParser::RuleItems_pattern;
}


std::any FandangoParser::Items_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitItems_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Items_patternContext* FandangoParser::items_pattern() {
  Items_patternContext *_localctx = _tracker.createInstance<Items_patternContext>(_ctx, getState());
  enterRule(_localctx, 244, FandangoParser::RuleItems_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1735);
    key_value_pattern();
    setState(1740);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1736);
        match(FandangoParser::COMMA);
        setState(1737);
        key_value_pattern(); 
      }
      setState(1742);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Key_value_patternContext ------------------------------------------------------------------

FandangoParser::Key_value_patternContext::Key_value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Key_value_patternContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::PatternContext* FandangoParser::Key_value_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

FandangoParser::Literal_exprContext* FandangoParser::Key_value_patternContext::literal_expr() {
  return getRuleContext<FandangoParser::Literal_exprContext>(0);
}

FandangoParser::AttrContext* FandangoParser::Key_value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Key_value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKey_value_pattern;
}


std::any FandangoParser::Key_value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKey_value_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Key_value_patternContext* FandangoParser::key_value_pattern() {
  Key_value_patternContext *_localctx = _tracker.createInstance<Key_value_patternContext>(_ctx, getState());
  enterRule(_localctx, 246, FandangoParser::RuleKey_value_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1745);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::MINUS:
      case FandangoParser::FSTRING_START: {
        setState(1743);
        literal_expr();
        break;
      }

      case FandangoParser::NAME: {
        setState(1744);
        attr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1747);
    match(FandangoParser::COLON);
    setState(1748);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_star_patternContext ------------------------------------------------------------------

FandangoParser::Double_star_patternContext::Double_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_star_patternContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Double_star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Double_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_star_pattern;
}


std::any FandangoParser::Double_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_star_patternContext* FandangoParser::double_star_pattern() {
  Double_star_patternContext *_localctx = _tracker.createInstance<Double_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 248, FandangoParser::RuleDouble_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1750);
    match(FandangoParser::POWER);
    setState(1751);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_patternContext ------------------------------------------------------------------

FandangoParser::Class_patternContext::Class_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::Class_patternContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Positional_patternsContext* FandangoParser::Class_patternContext::positional_patterns() {
  return getRuleContext<FandangoParser::Positional_patternsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Class_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Class_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Keyword_patternsContext* FandangoParser::Class_patternContext::keyword_patterns() {
  return getRuleContext<FandangoParser::Keyword_patternsContext>(0);
}


size_t FandangoParser::Class_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClass_pattern;
}


std::any FandangoParser::Class_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_patternContext* FandangoParser::class_pattern() {
  Class_patternContext *_localctx = _tracker.createInstance<Class_patternContext>(_ctx, getState());
  enterRule(_localctx, 250, FandangoParser::RuleClass_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1783);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1753);
      name_or_attr(0);
      setState(1754);
      match(FandangoParser::OPEN_PAREN);
      setState(1755);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1757);
      name_or_attr(0);
      setState(1758);
      match(FandangoParser::OPEN_PAREN);
      setState(1759);
      positional_patterns();
      setState(1761);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1760);
        match(FandangoParser::COMMA);
      }
      setState(1763);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1765);
      name_or_attr(0);
      setState(1766);
      match(FandangoParser::OPEN_PAREN);
      setState(1767);
      keyword_patterns();
      setState(1769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1768);
        match(FandangoParser::COMMA);
      }
      setState(1771);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1773);
      name_or_attr(0);
      setState(1774);
      match(FandangoParser::OPEN_PAREN);
      setState(1775);
      positional_patterns();
      setState(1776);
      match(FandangoParser::COMMA);
      setState(1777);
      keyword_patterns();
      setState(1779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1778);
        match(FandangoParser::COMMA);
      }
      setState(1781);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_patternsContext ------------------------------------------------------------------

FandangoParser::Positional_patternsContext::Positional_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::PatternContext *> FandangoParser::Positional_patternsContext::pattern() {
  return getRuleContexts<FandangoParser::PatternContext>();
}

FandangoParser::PatternContext* FandangoParser::Positional_patternsContext::pattern(size_t i) {
  return getRuleContext<FandangoParser::PatternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Positional_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Positional_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Positional_patternsContext::getRuleIndex() const {
  return FandangoParser::RulePositional_patterns;
}


std::any FandangoParser::Positional_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPositional_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Positional_patternsContext* FandangoParser::positional_patterns() {
  Positional_patternsContext *_localctx = _tracker.createInstance<Positional_patternsContext>(_ctx, getState());
  enterRule(_localctx, 252, FandangoParser::RulePositional_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1785);
    pattern();
    setState(1790);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1786);
        match(FandangoParser::COMMA);
        setState(1787);
        pattern(); 
      }
      setState(1792);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternsContext ------------------------------------------------------------------

FandangoParser::Keyword_patternsContext::Keyword_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Keyword_patternContext *> FandangoParser::Keyword_patternsContext::keyword_pattern() {
  return getRuleContexts<FandangoParser::Keyword_patternContext>();
}

FandangoParser::Keyword_patternContext* FandangoParser::Keyword_patternsContext::keyword_pattern(size_t i) {
  return getRuleContext<FandangoParser::Keyword_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Keyword_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Keyword_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Keyword_patternsContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_patterns;
}


std::any FandangoParser::Keyword_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternsContext* FandangoParser::keyword_patterns() {
  Keyword_patternsContext *_localctx = _tracker.createInstance<Keyword_patternsContext>(_ctx, getState());
  enterRule(_localctx, 254, FandangoParser::RuleKeyword_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1793);
    keyword_pattern();
    setState(1798);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1794);
        match(FandangoParser::COMMA);
        setState(1795);
        keyword_pattern(); 
      }
      setState(1800);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternContext ------------------------------------------------------------------

FandangoParser::Keyword_patternContext::Keyword_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Keyword_patternContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Keyword_patternContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::PatternContext* FandangoParser::Keyword_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Keyword_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_pattern;
}


std::any FandangoParser::Keyword_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternContext* FandangoParser::keyword_pattern() {
  Keyword_patternContext *_localctx = _tracker.createInstance<Keyword_patternContext>(_ctx, getState());
  enterRule(_localctx, 256, FandangoParser::RuleKeyword_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1801);
    match(FandangoParser::NAME);
    setState(1802);
    match(FandangoParser::ASSIGN);
    setState(1803);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_aliasContext ------------------------------------------------------------------

FandangoParser::Type_aliasContext::Type_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_aliasContext::TYPE() {
  return getToken(FandangoParser::TYPE, 0);
}

tree::TerminalNode* FandangoParser::Type_aliasContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Type_aliasContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_aliasContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Type_aliasContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}


size_t FandangoParser::Type_aliasContext::getRuleIndex() const {
  return FandangoParser::RuleType_alias;
}


std::any FandangoParser::Type_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_alias(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_aliasContext* FandangoParser::type_alias() {
  Type_aliasContext *_localctx = _tracker.createInstance<Type_aliasContext>(_ctx, getState());
  enterRule(_localctx, 258, FandangoParser::RuleType_alias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1805);
    match(FandangoParser::TYPE);
    setState(1806);
    match(FandangoParser::NAME);
    setState(1808);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1807);
      type_params();
    }
    setState(1810);
    match(FandangoParser::ASSIGN);
    setState(1811);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramsContext ------------------------------------------------------------------

FandangoParser::Type_paramsContext::Type_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_paramsContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Type_param_seqContext* FandangoParser::Type_paramsContext::type_param_seq() {
  return getRuleContext<FandangoParser::Type_param_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramsContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Type_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleType_params;
}


std::any FandangoParser::Type_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramsContext* FandangoParser::type_params() {
  Type_paramsContext *_localctx = _tracker.createInstance<Type_paramsContext>(_ctx, getState());
  enterRule(_localctx, 260, FandangoParser::RuleType_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1813);
    match(FandangoParser::OPEN_BRACK);
    setState(1814);
    type_param_seq();
    setState(1815);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_seqContext ------------------------------------------------------------------

FandangoParser::Type_param_seqContext::Type_param_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Type_paramContext *> FandangoParser::Type_param_seqContext::type_param() {
  return getRuleContexts<FandangoParser::Type_paramContext>();
}

FandangoParser::Type_paramContext* FandangoParser::Type_param_seqContext::type_param(size_t i) {
  return getRuleContext<FandangoParser::Type_paramContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_param_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_param_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Type_param_seqContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_seq;
}


std::any FandangoParser::Type_param_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_seqContext* FandangoParser::type_param_seq() {
  Type_param_seqContext *_localctx = _tracker.createInstance<Type_param_seqContext>(_ctx, getState());
  enterRule(_localctx, 262, FandangoParser::RuleType_param_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1817);
    type_param();
    setState(1822);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1818);
        match(FandangoParser::COMMA);
        setState(1819);
        type_param(); 
      }
      setState(1824);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    }
    setState(1826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1825);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramContext ------------------------------------------------------------------

FandangoParser::Type_paramContext::Type_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_paramContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::Type_param_boundContext* FandangoParser::Type_paramContext::type_param_bound() {
  return getRuleContext<FandangoParser::Type_param_boundContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_paramContext::getRuleIndex() const {
  return FandangoParser::RuleType_param;
}


std::any FandangoParser::Type_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramContext* FandangoParser::type_param() {
  Type_paramContext *_localctx = _tracker.createInstance<Type_paramContext>(_ctx, getState());
  enterRule(_localctx, 264, FandangoParser::RuleType_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1836);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1828);
        match(FandangoParser::NAME);
        setState(1830);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COLON) {
          setState(1829);
          type_param_bound();
        }
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(1832);
        match(FandangoParser::STAR);
        setState(1833);
        match(FandangoParser::NAME);
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 3);
        setState(1834);
        match(FandangoParser::POWER);
        setState(1835);
        match(FandangoParser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_boundContext ------------------------------------------------------------------

FandangoParser::Type_param_boundContext::Type_param_boundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_param_boundContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_param_boundContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Type_param_boundContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_bound;
}


std::any FandangoParser::Type_param_boundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_bound(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_boundContext* FandangoParser::type_param_bound() {
  Type_param_boundContext *_localctx = _tracker.createInstance<Type_param_boundContext>(_ctx, getState());
  enterRule(_localctx, 266, FandangoParser::RuleType_param_bound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1838);
    match(FandangoParser::COLON);
    setState(1839);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsContext ------------------------------------------------------------------

FandangoParser::ExpressionsContext::ExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::ExpressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ExpressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ExpressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::ExpressionsContext::getRuleIndex() const {
  return FandangoParser::RuleExpressions;
}


std::any FandangoParser::ExpressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionsContext* FandangoParser::expressions() {
  ExpressionsContext *_localctx = _tracker.createInstance<ExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 268, FandangoParser::RuleExpressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1841);
    expression();
    setState(1846);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1842);
        match(FandangoParser::COMMA);
        setState(1843);
        expression(); 
      }
      setState(1848);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    }
    setState(1850);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1849);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

FandangoParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::ExpressionContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::ExpressionContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::ExpressionContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExpressionContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::LambdefContext* FandangoParser::ExpressionContext::lambdef() {
  return getRuleContext<FandangoParser::LambdefContext>(0);
}


size_t FandangoParser::ExpressionContext::getRuleIndex() const {
  return FandangoParser::RuleExpression;
}


std::any FandangoParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionContext* FandangoParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 270, FandangoParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1860);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1852);
      disjunction();
      setState(1853);
      match(FandangoParser::IF);
      setState(1854);
      disjunction();
      setState(1855);
      match(FandangoParser::ELSE);
      setState(1856);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1858);
      disjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1859);
      lambdef();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_exprContext ------------------------------------------------------------------

FandangoParser::Yield_exprContext::Yield_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Yield_exprContext::YIELD() {
  return getToken(FandangoParser::YIELD, 0);
}

tree::TerminalNode* FandangoParser::Yield_exprContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Yield_exprContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Yield_exprContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Yield_exprContext::getRuleIndex() const {
  return FandangoParser::RuleYield_expr;
}


std::any FandangoParser::Yield_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_exprContext* FandangoParser::yield_expr() {
  Yield_exprContext *_localctx = _tracker.createInstance<Yield_exprContext>(_ctx, getState());
  enterRule(_localctx, 272, FandangoParser::RuleYield_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1869);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1862);
      match(FandangoParser::YIELD);
      setState(1863);
      match(FandangoParser::FROM);
      setState(1864);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1865);
      match(FandangoParser::YIELD);
      setState(1867);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
      case 1: {
        setState(1866);
        star_expressions();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_expressionsContext::Star_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_expressionContext *> FandangoParser::Star_expressionsContext::star_expression() {
  return getRuleContexts<FandangoParser::Star_expressionContext>();
}

FandangoParser::Star_expressionContext* FandangoParser::Star_expressionsContext::star_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expressions;
}


std::any FandangoParser::Star_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionsContext* FandangoParser::star_expressions() {
  Star_expressionsContext *_localctx = _tracker.createInstance<Star_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 274, FandangoParser::RuleStar_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1871);
    star_expression();
    setState(1876);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1872);
        match(FandangoParser::COMMA);
        setState(1873);
        star_expression(); 
      }
      setState(1878);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
    }
    setState(1880);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1879);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionContext ------------------------------------------------------------------

FandangoParser::Star_expressionContext::Star_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Star_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Star_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expression;
}


std::any FandangoParser::Star_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionContext* FandangoParser::star_expression() {
  Star_expressionContext *_localctx = _tracker.createInstance<Star_expressionContext>(_ctx, getState());
  enterRule(_localctx, 276, FandangoParser::RuleStar_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1885);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1882);
        match(FandangoParser::STAR);
        setState(1883);
        bitwise_or(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1884);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionsContext::Star_named_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_named_expressionContext *> FandangoParser::Star_named_expressionsContext::star_named_expression() {
  return getRuleContexts<FandangoParser::Star_named_expressionContext>();
}

FandangoParser::Star_named_expressionContext* FandangoParser::Star_named_expressionsContext::star_named_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_named_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_named_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_named_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expressions;
}


std::any FandangoParser::Star_named_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::star_named_expressions() {
  Star_named_expressionsContext *_localctx = _tracker.createInstance<Star_named_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 278, FandangoParser::RuleStar_named_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1887);
    star_named_expression();
    setState(1892);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1888);
        match(FandangoParser::COMMA);
        setState(1889);
        star_named_expression(); 
      }
      setState(1894);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    }
    setState(1896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1895);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionContext::Star_named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_named_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_named_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Star_named_expressionContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Star_named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expression;
}


std::any FandangoParser::Star_named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionContext* FandangoParser::star_named_expression() {
  Star_named_expressionContext *_localctx = _tracker.createInstance<Star_named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 280, FandangoParser::RuleStar_named_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1901);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1898);
        match(FandangoParser::STAR);
        setState(1899);
        bitwise_or(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1900);
        named_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_expressionContext ------------------------------------------------------------------

FandangoParser::Assignment_expressionContext::Assignment_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Assignment_expressionContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Assignment_expressionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Assignment_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Assignment_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment_expression;
}


std::any FandangoParser::Assignment_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assignment_expressionContext* FandangoParser::assignment_expression() {
  Assignment_expressionContext *_localctx = _tracker.createInstance<Assignment_expressionContext>(_ctx, getState());
  enterRule(_localctx, 282, FandangoParser::RuleAssignment_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1903);
    match(FandangoParser::NAME);
    setState(1904);
    match(FandangoParser::EXPR_ASSIGN);
    setState(1905);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_expressionContext ------------------------------------------------------------------

FandangoParser::Named_expressionContext::Named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Assignment_expressionContext* FandangoParser::Named_expressionContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Named_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleNamed_expression;
}


std::any FandangoParser::Named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNamed_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Named_expressionContext* FandangoParser::named_expression() {
  Named_expressionContext *_localctx = _tracker.createInstance<Named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 284, FandangoParser::RuleNamed_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1909);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1907);
      assignment_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1908);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjunctionContext ------------------------------------------------------------------

FandangoParser::DisjunctionContext::DisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConjunctionContext *> FandangoParser::DisjunctionContext::conjunction() {
  return getRuleContexts<FandangoParser::ConjunctionContext>();
}

FandangoParser::ConjunctionContext* FandangoParser::DisjunctionContext::conjunction(size_t i) {
  return getRuleContext<FandangoParser::ConjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DisjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::DisjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::DisjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleDisjunction;
}


std::any FandangoParser::DisjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDisjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DisjunctionContext* FandangoParser::disjunction() {
  DisjunctionContext *_localctx = _tracker.createInstance<DisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 286, FandangoParser::RuleDisjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1911);
    conjunction();
    setState(1916);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(1912);
      match(FandangoParser::OR);
      setState(1913);
      conjunction();
      setState(1918);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

FandangoParser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ConjunctionContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ConjunctionContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ConjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::ConjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::ConjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleConjunction;
}


std::any FandangoParser::ConjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConjunctionContext* FandangoParser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 288, FandangoParser::RuleConjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1919);
    inversion();
    setState(1924);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(1920);
      match(FandangoParser::AND);
      setState(1921);
      inversion();
      setState(1926);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InversionContext ------------------------------------------------------------------

FandangoParser::InversionContext::InversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::InversionContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::InversionContext* FandangoParser::InversionContext::inversion() {
  return getRuleContext<FandangoParser::InversionContext>(0);
}

FandangoParser::ComparisonContext* FandangoParser::InversionContext::comparison() {
  return getRuleContext<FandangoParser::ComparisonContext>(0);
}


size_t FandangoParser::InversionContext::getRuleIndex() const {
  return FandangoParser::RuleInversion;
}


std::any FandangoParser::InversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InversionContext* FandangoParser::inversion() {
  InversionContext *_localctx = _tracker.createInstance<InversionContext>(_ctx, getState());
  enterRule(_localctx, 290, FandangoParser::RuleInversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1930);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NOT: {
        enterOuterAlt(_localctx, 1);
        setState(1927);
        match(FandangoParser::NOT);
        setState(1928);
        inversion();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1929);
        comparison();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonContext ------------------------------------------------------------------

FandangoParser::ComparisonContext::ComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_orContext* FandangoParser::ComparisonContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

std::vector<FandangoParser::Compare_op_bitwise_or_pairContext *> FandangoParser::ComparisonContext::compare_op_bitwise_or_pair() {
  return getRuleContexts<FandangoParser::Compare_op_bitwise_or_pairContext>();
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::ComparisonContext::compare_op_bitwise_or_pair(size_t i) {
  return getRuleContext<FandangoParser::Compare_op_bitwise_or_pairContext>(i);
}


size_t FandangoParser::ComparisonContext::getRuleIndex() const {
  return FandangoParser::RuleComparison;
}


std::any FandangoParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ComparisonContext* FandangoParser::comparison() {
  ComparisonContext *_localctx = _tracker.createInstance<ComparisonContext>(_ctx, getState());
  enterRule(_localctx, 292, FandangoParser::RuleComparison);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1932);
    bitwise_or(0);
    setState(1936);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1933);
        compare_op_bitwise_or_pair(); 
      }
      setState(1938);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compare_op_bitwise_or_pairContext ------------------------------------------------------------------

FandangoParser::Compare_op_bitwise_or_pairContext::Compare_op_bitwise_or_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::eq_bitwise_or() {
  return getRuleContext<FandangoParser::Eq_bitwise_orContext>(0);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::noteq_bitwise_or() {
  return getRuleContext<FandangoParser::Noteq_bitwise_orContext>(0);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lte_bitwise_or() {
  return getRuleContext<FandangoParser::Lte_bitwise_orContext>(0);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lt_bitwise_or() {
  return getRuleContext<FandangoParser::Lt_bitwise_orContext>(0);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gte_bitwise_or() {
  return getRuleContext<FandangoParser::Gte_bitwise_orContext>(0);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gt_bitwise_or() {
  return getRuleContext<FandangoParser::Gt_bitwise_orContext>(0);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::notin_bitwise_or() {
  return getRuleContext<FandangoParser::Notin_bitwise_orContext>(0);
}

FandangoParser::In_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::in_bitwise_or() {
  return getRuleContext<FandangoParser::In_bitwise_orContext>(0);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::isnot_bitwise_or() {
  return getRuleContext<FandangoParser::Isnot_bitwise_orContext>(0);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::is_bitwise_or() {
  return getRuleContext<FandangoParser::Is_bitwise_orContext>(0);
}


size_t FandangoParser::Compare_op_bitwise_or_pairContext::getRuleIndex() const {
  return FandangoParser::RuleCompare_op_bitwise_or_pair;
}


std::any FandangoParser::Compare_op_bitwise_or_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompare_op_bitwise_or_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::compare_op_bitwise_or_pair() {
  Compare_op_bitwise_or_pairContext *_localctx = _tracker.createInstance<Compare_op_bitwise_or_pairContext>(_ctx, getState());
  enterRule(_localctx, 294, FandangoParser::RuleCompare_op_bitwise_or_pair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1949);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1939);
      eq_bitwise_or();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1940);
      noteq_bitwise_or();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1941);
      lte_bitwise_or();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1942);
      lt_bitwise_or();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1943);
      gte_bitwise_or();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1944);
      gt_bitwise_or();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1945);
      notin_bitwise_or();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1946);
      in_bitwise_or();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1947);
      isnot_bitwise_or();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1948);
      is_bitwise_or();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Eq_bitwise_orContext::Eq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Eq_bitwise_orContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Eq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Eq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleEq_bitwise_or;
}


std::any FandangoParser::Eq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::eq_bitwise_or() {
  Eq_bitwise_orContext *_localctx = _tracker.createInstance<Eq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 296, FandangoParser::RuleEq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1951);
    match(FandangoParser::EQUALS);
    setState(1952);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noteq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Noteq_bitwise_orContext::Noteq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Noteq_bitwise_orContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Noteq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Noteq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNoteq_bitwise_or;
}


std::any FandangoParser::Noteq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNoteq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::noteq_bitwise_or() {
  Noteq_bitwise_orContext *_localctx = _tracker.createInstance<Noteq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 298, FandangoParser::RuleNoteq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1954);
    match(FandangoParser::NOT_EQ_2);
    setState(1955);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lte_bitwise_orContext::Lte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lte_bitwise_orContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLte_bitwise_or;
}


std::any FandangoParser::Lte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::lte_bitwise_or() {
  Lte_bitwise_orContext *_localctx = _tracker.createInstance<Lte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 300, FandangoParser::RuleLte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1957);
    match(FandangoParser::LT_EQ);
    setState(1958);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lt_bitwise_orContext::Lt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lt_bitwise_orContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLt_bitwise_or;
}


std::any FandangoParser::Lt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::lt_bitwise_or() {
  Lt_bitwise_orContext *_localctx = _tracker.createInstance<Lt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 302, FandangoParser::RuleLt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1960);
    match(FandangoParser::LESS_THAN);
    setState(1961);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gte_bitwise_orContext::Gte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gte_bitwise_orContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGte_bitwise_or;
}


std::any FandangoParser::Gte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::gte_bitwise_or() {
  Gte_bitwise_orContext *_localctx = _tracker.createInstance<Gte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 304, FandangoParser::RuleGte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1963);
    match(FandangoParser::GT_EQ);
    setState(1964);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gt_bitwise_orContext::Gt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gt_bitwise_orContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGt_bitwise_or;
}


std::any FandangoParser::Gt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::gt_bitwise_or() {
  Gt_bitwise_orContext *_localctx = _tracker.createInstance<Gt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 306, FandangoParser::RuleGt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1966);
    match(FandangoParser::GREATER_THAN);
    setState(1967);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Notin_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Notin_bitwise_orContext::Notin_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Notin_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Notin_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNotin_bitwise_or;
}


std::any FandangoParser::Notin_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNotin_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::notin_bitwise_or() {
  Notin_bitwise_orContext *_localctx = _tracker.createInstance<Notin_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 308, FandangoParser::RuleNotin_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1969);
    match(FandangoParser::NOT);
    setState(1970);
    match(FandangoParser::IN);
    setState(1971);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- In_bitwise_orContext ------------------------------------------------------------------

FandangoParser::In_bitwise_orContext::In_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::In_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::In_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::In_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIn_bitwise_or;
}


std::any FandangoParser::In_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIn_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::In_bitwise_orContext* FandangoParser::in_bitwise_or() {
  In_bitwise_orContext *_localctx = _tracker.createInstance<In_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 310, FandangoParser::RuleIn_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1973);
    match(FandangoParser::IN);
    setState(1974);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Isnot_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Isnot_bitwise_orContext::Isnot_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Isnot_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Isnot_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIsnot_bitwise_or;
}


std::any FandangoParser::Isnot_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIsnot_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::isnot_bitwise_or() {
  Isnot_bitwise_orContext *_localctx = _tracker.createInstance<Isnot_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 312, FandangoParser::RuleIsnot_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1976);
    match(FandangoParser::IS);
    setState(1977);
    match(FandangoParser::NOT);
    setState(1978);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Is_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Is_bitwise_orContext::Is_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Is_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Is_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Is_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIs_bitwise_or;
}


std::any FandangoParser::Is_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIs_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::is_bitwise_or() {
  Is_bitwise_orContext *_localctx = _tracker.createInstance<Is_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 314, FandangoParser::RuleIs_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1980);
    match(FandangoParser::IS);
    setState(1981);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_orContext ------------------------------------------------------------------

FandangoParser::Bitwise_orContext::Bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_orContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_orContext::OR_OP() {
  return getToken(FandangoParser::OR_OP, 0);
}


size_t FandangoParser::Bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_or;
}


std::any FandangoParser::Bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_or(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or() {
   return bitwise_or(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_orContext *_localctx = _tracker.createInstance<Bitwise_orContext>(_ctx, parentState);
  FandangoParser::Bitwise_orContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 316;
  enterRecursionRule(_localctx, 316, FandangoParser::RuleBitwise_or, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1984);
    bitwise_xor(0);
    _ctx->stop = _input->LT(-1);
    setState(1991);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_orContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_or);
        setState(1986);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1987);
        match(FandangoParser::OR_OP);
        setState(1988);
        bitwise_xor(0); 
      }
      setState(1993);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_xorContext ------------------------------------------------------------------

FandangoParser::Bitwise_xorContext::Bitwise_xorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_xorContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_xorContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_xorContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Bitwise_xorContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_xor;
}


std::any FandangoParser::Bitwise_xorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_xor(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor() {
   return bitwise_xor(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_xorContext *_localctx = _tracker.createInstance<Bitwise_xorContext>(_ctx, parentState);
  FandangoParser::Bitwise_xorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 318;
  enterRecursionRule(_localctx, 318, FandangoParser::RuleBitwise_xor, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1995);
    bitwise_and(0);
    _ctx->stop = _input->LT(-1);
    setState(2002);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_xorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_xor);
        setState(1997);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1998);
        match(FandangoParser::XOR);
        setState(1999);
        bitwise_and(0); 
      }
      setState(2004);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_andContext ------------------------------------------------------------------

FandangoParser::Bitwise_andContext::Bitwise_andContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Shift_exprContext* FandangoParser::Bitwise_andContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_andContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_andContext::AND_OP() {
  return getToken(FandangoParser::AND_OP, 0);
}


size_t FandangoParser::Bitwise_andContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_and;
}


std::any FandangoParser::Bitwise_andContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_and(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and() {
   return bitwise_and(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_andContext *_localctx = _tracker.createInstance<Bitwise_andContext>(_ctx, parentState);
  FandangoParser::Bitwise_andContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 320;
  enterRecursionRule(_localctx, 320, FandangoParser::RuleBitwise_and, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2006);
    shift_expr(0);
    _ctx->stop = _input->LT(-1);
    setState(2013);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_andContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_and);
        setState(2008);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2009);
        match(FandangoParser::AND_OP);
        setState(2010);
        shift_expr(0); 
      }
      setState(2015);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Shift_exprContext ------------------------------------------------------------------

FandangoParser::Shift_exprContext::Shift_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SumContext* FandangoParser::Shift_exprContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

FandangoParser::Shift_exprContext* FandangoParser::Shift_exprContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::LEFT_SHIFT() {
  return getToken(FandangoParser::LEFT_SHIFT, 0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::RIGHT_SHIFT() {
  return getToken(FandangoParser::RIGHT_SHIFT, 0);
}


size_t FandangoParser::Shift_exprContext::getRuleIndex() const {
  return FandangoParser::RuleShift_expr;
}


std::any FandangoParser::Shift_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitShift_expr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Shift_exprContext* FandangoParser::shift_expr() {
   return shift_expr(0);
}

FandangoParser::Shift_exprContext* FandangoParser::shift_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Shift_exprContext *_localctx = _tracker.createInstance<Shift_exprContext>(_ctx, parentState);
  FandangoParser::Shift_exprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 322;
  enterRecursionRule(_localctx, 322, FandangoParser::RuleShift_expr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2017);
    sum(0);
    _ctx->stop = _input->LT(-1);
    setState(2027);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2025);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2019);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2020);
          match(FandangoParser::LEFT_SHIFT);
          setState(2021);
          sum(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2022);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2023);
          match(FandangoParser::RIGHT_SHIFT);
          setState(2024);
          sum(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2029);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SumContext ------------------------------------------------------------------

FandangoParser::SumContext::SumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::TermContext* FandangoParser::SumContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

FandangoParser::SumContext* FandangoParser::SumContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

tree::TerminalNode* FandangoParser::SumContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

tree::TerminalNode* FandangoParser::SumContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::SumContext::getRuleIndex() const {
  return FandangoParser::RuleSum;
}


std::any FandangoParser::SumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSum(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::SumContext* FandangoParser::sum() {
   return sum(0);
}

FandangoParser::SumContext* FandangoParser::sum(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::SumContext *_localctx = _tracker.createInstance<SumContext>(_ctx, parentState);
  FandangoParser::SumContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 324;
  enterRecursionRule(_localctx, 324, FandangoParser::RuleSum, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2031);
    term(0);
    _ctx->stop = _input->LT(-1);
    setState(2041);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2039);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2033);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2034);
          match(FandangoParser::ADD);
          setState(2035);
          term(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2036);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2037);
          match(FandangoParser::MINUS);
          setState(2038);
          term(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2043);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

FandangoParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::FactorContext* FandangoParser::TermContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

FandangoParser::TermContext* FandangoParser::TermContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

tree::TerminalNode* FandangoParser::TermContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::TermContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::IDIV() {
  return getToken(FandangoParser::IDIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::MOD() {
  return getToken(FandangoParser::MOD, 0);
}

tree::TerminalNode* FandangoParser::TermContext::AT() {
  return getToken(FandangoParser::AT, 0);
}


size_t FandangoParser::TermContext::getRuleIndex() const {
  return FandangoParser::RuleTerm;
}


std::any FandangoParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::TermContext* FandangoParser::term() {
   return term(0);
}

FandangoParser::TermContext* FandangoParser::term(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, parentState);
  FandangoParser::TermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 326;
  enterRecursionRule(_localctx, 326, FandangoParser::RuleTerm, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2045);
    factor();
    _ctx->stop = _input->LT(-1);
    setState(2064);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2062);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2047);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(2048);
          match(FandangoParser::STAR);
          setState(2049);
          factor();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2050);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2051);
          match(FandangoParser::DIV);
          setState(2052);
          factor();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2053);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2054);
          match(FandangoParser::IDIV);
          setState(2055);
          factor();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2056);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2057);
          match(FandangoParser::MOD);
          setState(2058);
          factor();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2059);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2060);
          match(FandangoParser::AT);
          setState(2061);
          factor();
          break;
        }

        default:
          break;
        } 
      }
      setState(2066);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

FandangoParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FactorContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::FactorContext* FandangoParser::FactorContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

tree::TerminalNode* FandangoParser::FactorContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}

tree::TerminalNode* FandangoParser::FactorContext::NOT_OP() {
  return getToken(FandangoParser::NOT_OP, 0);
}

FandangoParser::PowerContext* FandangoParser::FactorContext::power() {
  return getRuleContext<FandangoParser::PowerContext>(0);
}


size_t FandangoParser::FactorContext::getRuleIndex() const {
  return FandangoParser::RuleFactor;
}


std::any FandangoParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FactorContext* FandangoParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 328, FandangoParser::RuleFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2074);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ADD: {
        enterOuterAlt(_localctx, 1);
        setState(2067);
        match(FandangoParser::ADD);
        setState(2068);
        factor();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2069);
        match(FandangoParser::MINUS);
        setState(2070);
        factor();
        break;
      }

      case FandangoParser::NOT_OP: {
        enterOuterAlt(_localctx, 3);
        setState(2071);
        match(FandangoParser::NOT_OP);
        setState(2072);
        factor();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 4);
        setState(2073);
        power();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerContext ------------------------------------------------------------------

FandangoParser::PowerContext::PowerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Await_primaryContext* FandangoParser::PowerContext::await_primary() {
  return getRuleContext<FandangoParser::Await_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::PowerContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::FactorContext* FandangoParser::PowerContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}


size_t FandangoParser::PowerContext::getRuleIndex() const {
  return FandangoParser::RulePower;
}


std::any FandangoParser::PowerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPower(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PowerContext* FandangoParser::power() {
  PowerContext *_localctx = _tracker.createInstance<PowerContext>(_ctx, getState());
  enterRule(_localctx, 330, FandangoParser::RulePower);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2081);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2076);
      await_primary();
      setState(2077);
      match(FandangoParser::POWER);
      setState(2078);
      factor();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2080);
      await_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Await_primaryContext ------------------------------------------------------------------

FandangoParser::Await_primaryContext::Await_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Await_primaryContext::AWAIT() {
  return getToken(FandangoParser::AWAIT, 0);
}

FandangoParser::PrimaryContext* FandangoParser::Await_primaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}


size_t FandangoParser::Await_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleAwait_primary;
}


std::any FandangoParser::Await_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAwait_primary(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Await_primaryContext* FandangoParser::await_primary() {
  Await_primaryContext *_localctx = _tracker.createInstance<Await_primaryContext>(_ctx, getState());
  enterRule(_localctx, 332, FandangoParser::RuleAwait_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2086);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::AWAIT: {
        enterOuterAlt(_localctx, 1);
        setState(2083);
        match(FandangoParser::AWAIT);
        setState(2084);
        primary(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2085);
        primary(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

FandangoParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::PrimaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::PrimaryContext* FandangoParser::PrimaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

FandangoParser::GenexpContext* FandangoParser::PrimaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::PrimaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::PrimaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::PrimaryContext::getRuleIndex() const {
  return FandangoParser::RulePrimary;
}


std::any FandangoParser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::PrimaryContext* FandangoParser::primary() {
   return primary(0);
}

FandangoParser::PrimaryContext* FandangoParser::primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, parentState);
  FandangoParser::PrimaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 334;
  enterRecursionRule(_localctx, 334, FandangoParser::RulePrimary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2089);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(2109);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2107);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2091);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2092);
          match(FandangoParser::DOT);
          setState(2093);
          match(FandangoParser::NAME);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2094);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2095);
          genexp();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2096);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2097);
          match(FandangoParser::OPEN_PAREN);
          setState(2099);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 67)) & 4503599633861255) != 0)) {
            setState(2098);
            arguments();
          }
          setState(2101);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2102);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2103);
          match(FandangoParser::OPEN_BRACK);
          setState(2104);
          slices();
          setState(2105);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        default:
          break;
        } 
      }
      setState(2111);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SlicesContext ------------------------------------------------------------------

FandangoParser::SlicesContext::SlicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::SliceContext *> FandangoParser::SlicesContext::slice() {
  return getRuleContexts<FandangoParser::SliceContext>();
}

FandangoParser::SliceContext* FandangoParser::SlicesContext::slice(size_t i) {
  return getRuleContext<FandangoParser::SliceContext>(i);
}

std::vector<FandangoParser::Starred_expressionContext *> FandangoParser::SlicesContext::starred_expression() {
  return getRuleContexts<FandangoParser::Starred_expressionContext>();
}

FandangoParser::Starred_expressionContext* FandangoParser::SlicesContext::starred_expression(size_t i) {
  return getRuleContext<FandangoParser::Starred_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::SlicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::SlicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::SlicesContext::getRuleIndex() const {
  return FandangoParser::RuleSlices;
}


std::any FandangoParser::SlicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SlicesContext* FandangoParser::slices() {
  SlicesContext *_localctx = _tracker.createInstance<SlicesContext>(_ctx, getState());
  enterRule(_localctx, 336, FandangoParser::RuleSlices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2114);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::COLON:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        setState(2112);
        slice();
        break;
      }

      case FandangoParser::STAR: {
        setState(2113);
        starred_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2123);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2116);
        match(FandangoParser::COMMA);
        setState(2119);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FandangoParser::STRING:
          case FandangoParser::NUMBER:
          case FandangoParser::NONTERMINAL:
          case FandangoParser::AWAIT:
          case FandangoParser::FALSE:
          case FandangoParser::LAMBDA:
          case FandangoParser::NONE:
          case FandangoParser::NOT:
          case FandangoParser::TRUE:
          case FandangoParser::NAME:
          case FandangoParser::ELLIPSIS:
          case FandangoParser::OPEN_PAREN:
          case FandangoParser::COLON:
          case FandangoParser::OPEN_BRACK:
          case FandangoParser::OR_OP:
          case FandangoParser::ADD:
          case FandangoParser::MINUS:
          case FandangoParser::NOT_OP:
          case FandangoParser::OPEN_BRACE:
          case FandangoParser::FSTRING_START: {
            setState(2117);
            slice();
            break;
          }

          case FandangoParser::STAR: {
            setState(2118);
            starred_expression();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2125);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx);
    }
    setState(2127);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2126);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SliceContext ------------------------------------------------------------------

FandangoParser::SliceContext::SliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::SliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::SliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::SliceContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::SliceContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

FandangoParser::Named_expressionContext* FandangoParser::SliceContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::SliceContext::getRuleIndex() const {
  return FandangoParser::RuleSlice;
}


std::any FandangoParser::SliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SliceContext* FandangoParser::slice() {
  SliceContext *_localctx = _tracker.createInstance<SliceContext>(_ctx, getState());
  enterRule(_localctx, 338, FandangoParser::RuleSlice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2143);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2130);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599633861125) != 0)) {
        setState(2129);
        expression();
      }
      setState(2132);
      match(FandangoParser::COLON);
      setState(2134);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599633861125) != 0)) {
        setState(2133);
        expression();
      }
      setState(2140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(2136);
        match(FandangoParser::COLON);
        setState(2138);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 4503599633861125) != 0)) {
          setState(2137);
          expression();
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2142);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

FandangoParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::AtomContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

FandangoParser::StringsContext* FandangoParser::AtomContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::TupleContext* FandangoParser::AtomContext::tuple() {
  return getRuleContext<FandangoParser::TupleContext>(0);
}

FandangoParser::GroupContext* FandangoParser::AtomContext::group() {
  return getRuleContext<FandangoParser::GroupContext>(0);
}

FandangoParser::GenexpContext* FandangoParser::AtomContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

FandangoParser::ListContext* FandangoParser::AtomContext::list() {
  return getRuleContext<FandangoParser::ListContext>(0);
}

FandangoParser::ListcompContext* FandangoParser::AtomContext::listcomp() {
  return getRuleContext<FandangoParser::ListcompContext>(0);
}

FandangoParser::DictContext* FandangoParser::AtomContext::dict() {
  return getRuleContext<FandangoParser::DictContext>(0);
}

FandangoParser::SetContext* FandangoParser::AtomContext::set() {
  return getRuleContext<FandangoParser::SetContext>(0);
}

FandangoParser::DictcompContext* FandangoParser::AtomContext::dictcomp() {
  return getRuleContext<FandangoParser::DictcompContext>(0);
}

FandangoParser::SetcompContext* FandangoParser::AtomContext::setcomp() {
  return getRuleContext<FandangoParser::SetcompContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::ELLIPSIS() {
  return getToken(FandangoParser::ELLIPSIS, 0);
}


size_t FandangoParser::AtomContext::getRuleIndex() const {
  return FandangoParser::RuleAtom;
}


std::any FandangoParser::AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAtom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AtomContext* FandangoParser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 340, FandangoParser::RuleAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2168);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2145);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2146);
      match(FandangoParser::NAME);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2147);
      match(FandangoParser::TRUE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2148);
      match(FandangoParser::FALSE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2149);
      match(FandangoParser::NONE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2150);
      strings();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2151);
      match(FandangoParser::NUMBER);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2155);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
      case 1: {
        setState(2152);
        tuple();
        break;
      }

      case 2: {
        setState(2153);
        group();
        break;
      }

      case 3: {
        setState(2154);
        genexp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2159);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
      case 1: {
        setState(2157);
        list();
        break;
      }

      case 2: {
        setState(2158);
        listcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2165);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
      case 1: {
        setState(2161);
        dict();
        break;
      }

      case 2: {
        setState(2162);
        set();
        break;
      }

      case 3: {
        setState(2163);
        dictcomp();
        break;
      }

      case 4: {
        setState(2164);
        setcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2167);
      match(FandangoParser::ELLIPSIS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupContext ------------------------------------------------------------------

FandangoParser::GroupContext::GroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GroupContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::GroupContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::GroupContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::GroupContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GroupContext::getRuleIndex() const {
  return FandangoParser::RuleGroup;
}


std::any FandangoParser::GroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GroupContext* FandangoParser::group() {
  GroupContext *_localctx = _tracker.createInstance<GroupContext>(_ctx, getState());
  enterRule(_localctx, 342, FandangoParser::RuleGroup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2170);
    match(FandangoParser::OPEN_PAREN);
    setState(2173);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2171);
        yield_expr();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        setState(2172);
        named_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2175);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdefContext ------------------------------------------------------------------

FandangoParser::LambdefContext::LambdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::LambdefContext::LAMBDA() {
  return getToken(FandangoParser::LAMBDA, 0);
}

tree::TerminalNode* FandangoParser::LambdefContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::LambdefContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Lambda_paramsContext* FandangoParser::LambdefContext::lambda_params() {
  return getRuleContext<FandangoParser::Lambda_paramsContext>(0);
}


size_t FandangoParser::LambdefContext::getRuleIndex() const {
  return FandangoParser::RuleLambdef;
}


std::any FandangoParser::LambdefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambdef(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::LambdefContext* FandangoParser::lambdef() {
  LambdefContext *_localctx = _tracker.createInstance<LambdefContext>(_ctx, getState());
  enterRule(_localctx, 344, FandangoParser::RuleLambdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2177);
    match(FandangoParser::LAMBDA);
    setState(2179);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 2129921) != 0)) {
      setState(2178);
      lambda_params();
    }
    setState(2181);
    match(FandangoParser::COLON);
    setState(2182);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramsContext ------------------------------------------------------------------

FandangoParser::Lambda_paramsContext::Lambda_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_parametersContext* FandangoParser::Lambda_paramsContext::lambda_parameters() {
  return getRuleContext<FandangoParser::Lambda_parametersContext>(0);
}


size_t FandangoParser::Lambda_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_params;
}


std::any FandangoParser::Lambda_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramsContext* FandangoParser::lambda_params() {
  Lambda_paramsContext *_localctx = _tracker.createInstance<Lambda_paramsContext>(_ctx, getState());
  enterRule(_localctx, 346, FandangoParser::RuleLambda_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2184);
    lambda_parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_parametersContext ------------------------------------------------------------------

FandangoParser::Lambda_parametersContext::Lambda_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_no_default() {
  return getRuleContext<FandangoParser::Lambda_slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::Lambda_parametersContext::lambda_star_etc() {
  return getRuleContext<FandangoParser::Lambda_star_etcContext>(0);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_with_default() {
  return getRuleContext<FandangoParser::Lambda_slash_with_defaultContext>(0);
}


size_t FandangoParser::Lambda_parametersContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_parameters;
}


std::any FandangoParser::Lambda_parametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_parameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_parametersContext* FandangoParser::lambda_parameters() {
  Lambda_parametersContext *_localctx = _tracker.createInstance<Lambda_parametersContext>(_ctx, getState());
  enterRule(_localctx, 348, FandangoParser::RuleLambda_parameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2235);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2186);
      lambda_slash_no_default();
      setState(2190);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2187);
          lambda_param_no_default(); 
        }
        setState(2192);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
      }
      setState(2196);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2193);
        lambda_param_with_default();
        setState(2198);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2200);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2199);
        lambda_star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2202);
      lambda_slash_with_default();
      setState(2206);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2203);
        lambda_param_with_default();
        setState(2208);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2210);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2209);
        lambda_star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2213); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2212);
                lambda_param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2215); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2220);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2217);
        lambda_param_with_default();
        setState(2222);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2224);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2223);
        lambda_star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2227); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2226);
        lambda_param_with_default();
        setState(2229); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(2232);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2231);
        lambda_star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2234);
      lambda_star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_no_defaultContext::Lambda_slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_no_default;
}


std::any FandangoParser::Lambda_slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::lambda_slash_no_default() {
  Lambda_slash_no_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 350, FandangoParser::RuleLambda_slash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2238); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2237);
      lambda_param_no_default();
      setState(2240); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(2242);
    match(FandangoParser::DIV);
    setState(2244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2243);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_with_defaultContext::Lambda_slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_with_default;
}


std::any FandangoParser::Lambda_slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::lambda_slash_with_default() {
  Lambda_slash_with_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 352, FandangoParser::RuleLambda_slash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2249);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2246);
        lambda_param_no_default(); 
      }
      setState(2251);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx);
    }
    setState(2253); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2252);
      lambda_param_with_default();
      setState(2255); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::NAME);
    setState(2257);
    match(FandangoParser::DIV);
    setState(2259);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2258);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_star_etcContext ------------------------------------------------------------------

FandangoParser::Lambda_star_etcContext::Lambda_star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_maybe_defaultContext *> FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default() {
  return getRuleContexts<FandangoParser::Lambda_param_maybe_defaultContext>();
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_maybe_defaultContext>(i);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::Lambda_star_etcContext::lambda_kwds() {
  return getRuleContext<FandangoParser::Lambda_kwdsContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_star_etc;
}


std::any FandangoParser::Lambda_star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_star_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::lambda_star_etc() {
  Lambda_star_etcContext *_localctx = _tracker.createInstance<Lambda_star_etcContext>(_ctx, getState());
  enterRule(_localctx, 354, FandangoParser::RuleLambda_star_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2283);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2261);
      match(FandangoParser::STAR);
      setState(2262);
      lambda_param_no_default();
      setState(2266);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NAME) {
        setState(2263);
        lambda_param_maybe_default();
        setState(2268);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2270);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2269);
        lambda_kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2272);
      match(FandangoParser::STAR);
      setState(2273);
      match(FandangoParser::COMMA);
      setState(2275); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2274);
        lambda_param_maybe_default();
        setState(2277); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::NAME);
      setState(2280);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2279);
        lambda_kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2282);
      lambda_kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_kwdsContext ------------------------------------------------------------------

FandangoParser::Lambda_kwdsContext::Lambda_kwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_kwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_kwdsContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}


size_t FandangoParser::Lambda_kwdsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_kwds;
}


std::any FandangoParser::Lambda_kwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_kwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::lambda_kwds() {
  Lambda_kwdsContext *_localctx = _tracker.createInstance<Lambda_kwdsContext>(_ctx, getState());
  enterRule(_localctx, 356, FandangoParser::RuleLambda_kwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2285);
    match(FandangoParser::POWER);
    setState(2286);
    lambda_param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_no_defaultContext::Lambda_param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_no_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_no_default;
}


std::any FandangoParser::Lambda_param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::lambda_param_no_default() {
  Lambda_param_no_defaultContext *_localctx = _tracker.createInstance<Lambda_param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 358, FandangoParser::RuleLambda_param_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2288);
    lambda_param();
    setState(2290);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2289);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_with_defaultContext::Lambda_param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_with_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_with_default;
}


std::any FandangoParser::Lambda_param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::lambda_param_with_default() {
  Lambda_param_with_defaultContext *_localctx = _tracker.createInstance<Lambda_param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 360, FandangoParser::RuleLambda_param_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2292);
    lambda_param();
    setState(2293);
    default_();
    setState(2295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2294);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_maybe_defaultContext::Lambda_param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_maybe_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_maybe_default;
}


std::any FandangoParser::Lambda_param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::lambda_param_maybe_default() {
  Lambda_param_maybe_defaultContext *_localctx = _tracker.createInstance<Lambda_param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 362, FandangoParser::RuleLambda_param_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2297);
    lambda_param();
    setState(2299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2298);
      default_();
    }
    setState(2302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2301);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramContext ------------------------------------------------------------------

FandangoParser::Lambda_paramContext::Lambda_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_paramContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Lambda_paramContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param;
}


std::any FandangoParser::Lambda_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramContext* FandangoParser::lambda_param() {
  Lambda_paramContext *_localctx = _tracker.createInstance<Lambda_paramContext>(_ctx, getState());
  enterRule(_localctx, 364, FandangoParser::RuleLambda_param);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2304);
    match(FandangoParser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middleContext ------------------------------------------------------------------

FandangoParser::Fstring_middleContext::Fstring_middleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middleContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_middleContext::FSTRING_MIDDLE() {
  return getToken(FandangoParser::FSTRING_MIDDLE, 0);
}


size_t FandangoParser::Fstring_middleContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle;
}


std::any FandangoParser::Fstring_middleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middleContext* FandangoParser::fstring_middle() {
  Fstring_middleContext *_localctx = _tracker.createInstance<Fstring_middleContext>(_ctx, getState());
  enterRule(_localctx, 366, FandangoParser::RuleFstring_middle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2308);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(2306);
        fstring_replacement_field();
        break;
      }

      case FandangoParser::FSTRING_MIDDLE: {
        enterOuterAlt(_localctx, 2);
        setState(2307);
        match(FandangoParser::FSTRING_MIDDLE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_replacement_fieldContext ------------------------------------------------------------------

FandangoParser::Fstring_replacement_fieldContext::Fstring_replacement_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::Fstring_replacement_fieldContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Fstring_replacement_fieldContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::Fstring_conversionContext* FandangoParser::Fstring_replacement_fieldContext::fstring_conversion() {
  return getRuleContext<FandangoParser::Fstring_conversionContext>(0);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::Fstring_replacement_fieldContext::fstring_full_format_spec() {
  return getRuleContext<FandangoParser::Fstring_full_format_specContext>(0);
}


size_t FandangoParser::Fstring_replacement_fieldContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_replacement_field;
}


std::any FandangoParser::Fstring_replacement_fieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_replacement_field(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::fstring_replacement_field() {
  Fstring_replacement_fieldContext *_localctx = _tracker.createInstance<Fstring_replacement_fieldContext>(_ctx, getState());
  enterRule(_localctx, 368, FandangoParser::RuleFstring_replacement_field);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2310);
    match(FandangoParser::OPEN_BRACE);
    setState(2313);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2311);
        yield_expr();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        setState(2312);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2315);
      match(FandangoParser::ASSIGN);
    }
    setState(2319);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx)) {
    case 1: {
      setState(2318);
      fstring_conversion();
      break;
    }

    default:
      break;
    }
    setState(2322);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(2321);
      fstring_full_format_spec();
    }
    setState(2324);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_conversionContext ------------------------------------------------------------------

FandangoParser::Fstring_conversionContext::Fstring_conversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_conversionContext::EXCL() {
  return getToken(FandangoParser::EXCL, 0);
}

tree::TerminalNode* FandangoParser::Fstring_conversionContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}


size_t FandangoParser::Fstring_conversionContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_conversion;
}


std::any FandangoParser::Fstring_conversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_conversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_conversionContext* FandangoParser::fstring_conversion() {
  Fstring_conversionContext *_localctx = _tracker.createInstance<Fstring_conversionContext>(_ctx, getState());
  enterRule(_localctx, 370, FandangoParser::RuleFstring_conversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2329);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::COLON:
      case FandangoParser::CLOSE_BRACE: {
        enterOuterAlt(_localctx, 1);

        break;
      }

      case FandangoParser::EXCL: {
        enterOuterAlt(_localctx, 2);
        setState(2327);
        match(FandangoParser::EXCL);
        setState(2328);
        match(FandangoParser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_full_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_full_format_specContext::Fstring_full_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_full_format_specContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

std::vector<FandangoParser::Fstring_format_specContext *> FandangoParser::Fstring_full_format_specContext::fstring_format_spec() {
  return getRuleContexts<FandangoParser::Fstring_format_specContext>();
}

FandangoParser::Fstring_format_specContext* FandangoParser::Fstring_full_format_specContext::fstring_format_spec(size_t i) {
  return getRuleContext<FandangoParser::Fstring_format_specContext>(i);
}


size_t FandangoParser::Fstring_full_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_full_format_spec;
}


std::any FandangoParser::Fstring_full_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_full_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::fstring_full_format_spec() {
  Fstring_full_format_specContext *_localctx = _tracker.createInstance<Fstring_full_format_specContext>(_ctx, getState());
  enterRule(_localctx, 372, FandangoParser::RuleFstring_full_format_spec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2331);
    match(FandangoParser::COLON);
    setState(2335);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OPEN_BRACE

    || _la == FandangoParser::FSTRING_MIDDLE) {
      setState(2332);
      fstring_format_spec();
      setState(2337);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_format_specContext::Fstring_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_format_specContext::FSTRING_MIDDLE() {
  return getToken(FandangoParser::FSTRING_MIDDLE, 0);
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_format_specContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}


size_t FandangoParser::Fstring_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_format_spec;
}


std::any FandangoParser::Fstring_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_format_specContext* FandangoParser::fstring_format_spec() {
  Fstring_format_specContext *_localctx = _tracker.createInstance<Fstring_format_specContext>(_ctx, getState());
  enterRule(_localctx, 374, FandangoParser::RuleFstring_format_spec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2340);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FSTRING_MIDDLE: {
        enterOuterAlt(_localctx, 1);
        setState(2338);
        match(FandangoParser::FSTRING_MIDDLE);
        break;
      }

      case FandangoParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(2339);
        fstring_replacement_field();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FstringContext ------------------------------------------------------------------

FandangoParser::FstringContext::FstringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START() {
  return getToken(FandangoParser::FSTRING_START, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END() {
  return getToken(FandangoParser::FSTRING_END, 0);
}

std::vector<FandangoParser::Fstring_middleContext *> FandangoParser::FstringContext::fstring_middle() {
  return getRuleContexts<FandangoParser::Fstring_middleContext>();
}

FandangoParser::Fstring_middleContext* FandangoParser::FstringContext::fstring_middle(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middleContext>(i);
}


size_t FandangoParser::FstringContext::getRuleIndex() const {
  return FandangoParser::RuleFstring;
}


std::any FandangoParser::FstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FstringContext* FandangoParser::fstring() {
  FstringContext *_localctx = _tracker.createInstance<FstringContext>(_ctx, getState());
  enterRule(_localctx, 376, FandangoParser::RuleFstring);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2342);
    match(FandangoParser::FSTRING_START);
    setState(2346);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OPEN_BRACE

    || _la == FandangoParser::FSTRING_MIDDLE) {
      setState(2343);
      fstring_middle();
      setState(2348);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2349);
    match(FandangoParser::FSTRING_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

FandangoParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::StringContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}


size_t FandangoParser::StringContext::getRuleIndex() const {
  return FandangoParser::RuleString;
}


std::any FandangoParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringContext* FandangoParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 378, FandangoParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2351);
    match(FandangoParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringsContext ------------------------------------------------------------------

FandangoParser::StringsContext::StringsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::FstringContext *> FandangoParser::StringsContext::fstring() {
  return getRuleContexts<FandangoParser::FstringContext>();
}

FandangoParser::FstringContext* FandangoParser::StringsContext::fstring(size_t i) {
  return getRuleContext<FandangoParser::FstringContext>(i);
}

std::vector<FandangoParser::StringContext *> FandangoParser::StringsContext::string() {
  return getRuleContexts<FandangoParser::StringContext>();
}

FandangoParser::StringContext* FandangoParser::StringsContext::string(size_t i) {
  return getRuleContext<FandangoParser::StringContext>(i);
}


size_t FandangoParser::StringsContext::getRuleIndex() const {
  return FandangoParser::RuleStrings;
}


std::any FandangoParser::StringsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStrings(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringsContext* FandangoParser::strings() {
  StringsContext *_localctx = _tracker.createInstance<StringsContext>(_ctx, getState());
  enterRule(_localctx, 380, FandangoParser::RuleStrings);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2355); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2355);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FandangoParser::FSTRING_START: {
                  setState(2353);
                  fstring();
                  break;
                }

                case FandangoParser::STRING: {
                  setState(2354);
                  string();
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2357); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListContext ------------------------------------------------------------------

FandangoParser::ListContext::ListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::ListContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::ListContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::ListContext::getRuleIndex() const {
  return FandangoParser::RuleList;
}


std::any FandangoParser::ListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitList(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListContext* FandangoParser::list() {
  ListContext *_localctx = _tracker.createInstance<ListContext>(_ctx, getState());
  enterRule(_localctx, 382, FandangoParser::RuleList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2359);
    match(FandangoParser::OPEN_BRACK);
    setState(2361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4503599633861127) != 0)) {
      setState(2360);
      star_named_expressions();
    }
    setState(2363);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleContext ------------------------------------------------------------------

FandangoParser::TupleContext::TupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::TupleContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::TupleContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_named_expressionContext* FandangoParser::TupleContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::TupleContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::TupleContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::TupleContext::getRuleIndex() const {
  return FandangoParser::RuleTuple;
}


std::any FandangoParser::TupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTuple(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::TupleContext* FandangoParser::tuple() {
  TupleContext *_localctx = _tracker.createInstance<TupleContext>(_ctx, getState());
  enterRule(_localctx, 384, FandangoParser::RuleTuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2365);
    match(FandangoParser::OPEN_PAREN);
    setState(2370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4503599633861127) != 0)) {
      setState(2366);
      star_named_expression();
      setState(2367);
      match(FandangoParser::COMMA);

      setState(2368);
      star_named_expressions();
    }
    setState(2372);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetContext ------------------------------------------------------------------

FandangoParser::SetContext::SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::SetContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::SetContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetContext::getRuleIndex() const {
  return FandangoParser::RuleSet;
}


std::any FandangoParser::SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSet(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetContext* FandangoParser::set() {
  SetContext *_localctx = _tracker.createInstance<SetContext>(_ctx, getState());
  enterRule(_localctx, 386, FandangoParser::RuleSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2374);
    match(FandangoParser::OPEN_BRACE);
    setState(2375);
    star_named_expressions();
    setState(2376);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictContext ------------------------------------------------------------------

FandangoParser::DictContext::DictContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::DictContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::DictContext::double_starred_kvpairs() {
  return getRuleContext<FandangoParser::Double_starred_kvpairsContext>(0);
}


size_t FandangoParser::DictContext::getRuleIndex() const {
  return FandangoParser::RuleDict;
}


std::any FandangoParser::DictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDict(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictContext* FandangoParser::dict() {
  DictContext *_localctx = _tracker.createInstance<DictContext>(_ctx, getState());
  enterRule(_localctx, 388, FandangoParser::RuleDict);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2378);
    match(FandangoParser::OPEN_BRACE);
    setState(2380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 4503599633861253) != 0)) {
      setState(2379);
      double_starred_kvpairs();
    }
    setState(2382);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairsContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairsContext::Double_starred_kvpairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Double_starred_kvpairContext *> FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair() {
  return getRuleContexts<FandangoParser::Double_starred_kvpairContext>();
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair(size_t i) {
  return getRuleContext<FandangoParser::Double_starred_kvpairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Double_starred_kvpairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Double_starred_kvpairsContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpairs;
}


std::any FandangoParser::Double_starred_kvpairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::double_starred_kvpairs() {
  Double_starred_kvpairsContext *_localctx = _tracker.createInstance<Double_starred_kvpairsContext>(_ctx, getState());
  enterRule(_localctx, 390, FandangoParser::RuleDouble_starred_kvpairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2384);
    double_starred_kvpair();
    setState(2389);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2385);
        match(FandangoParser::COMMA);
        setState(2386);
        double_starred_kvpair(); 
      }
      setState(2391);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
    }
    setState(2393);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2392);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairContext::Double_starred_kvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Double_starred_kvpairContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::KvpairContext* FandangoParser::Double_starred_kvpairContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}


size_t FandangoParser::Double_starred_kvpairContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpair;
}


std::any FandangoParser::Double_starred_kvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::double_starred_kvpair() {
  Double_starred_kvpairContext *_localctx = _tracker.createInstance<Double_starred_kvpairContext>(_ctx, getState());
  enterRule(_localctx, 392, FandangoParser::RuleDouble_starred_kvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2398);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 1);
        setState(2395);
        match(FandangoParser::POWER);
        setState(2396);
        bitwise_or(0);
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2397);
        kvpair();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvpairContext ------------------------------------------------------------------

FandangoParser::KvpairContext::KvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::KvpairContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::KvpairContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::KvpairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}


size_t FandangoParser::KvpairContext::getRuleIndex() const {
  return FandangoParser::RuleKvpair;
}


std::any FandangoParser::KvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KvpairContext* FandangoParser::kvpair() {
  KvpairContext *_localctx = _tracker.createInstance<KvpairContext>(_ctx, getState());
  enterRule(_localctx, 394, FandangoParser::RuleKvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2400);
    expression();
    setState(2401);
    match(FandangoParser::COLON);
    setState(2402);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clausesContext ------------------------------------------------------------------

FandangoParser::For_if_clausesContext::For_if_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::For_if_clauseContext *> FandangoParser::For_if_clausesContext::for_if_clause() {
  return getRuleContexts<FandangoParser::For_if_clauseContext>();
}

FandangoParser::For_if_clauseContext* FandangoParser::For_if_clausesContext::for_if_clause(size_t i) {
  return getRuleContext<FandangoParser::For_if_clauseContext>(i);
}


size_t FandangoParser::For_if_clausesContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clauses;
}


std::any FandangoParser::For_if_clausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clauses(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clausesContext* FandangoParser::for_if_clauses() {
  For_if_clausesContext *_localctx = _tracker.createInstance<For_if_clausesContext>(_ctx, getState());
  enterRule(_localctx, 396, FandangoParser::RuleFor_if_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2405); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2404);
      for_if_clause();
      setState(2407); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::ASYNC

    || _la == FandangoParser::FOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clauseContext ------------------------------------------------------------------

FandangoParser::For_if_clauseContext::For_if_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_if_clauseContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::For_if_clauseContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::For_if_clauseContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::For_if_clauseContext::IF() {
  return getTokens(FandangoParser::IF);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IF(size_t i) {
  return getToken(FandangoParser::IF, i);
}


size_t FandangoParser::For_if_clauseContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clause;
}


std::any FandangoParser::For_if_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clause(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clauseContext* FandangoParser::for_if_clause() {
  For_if_clauseContext *_localctx = _tracker.createInstance<For_if_clauseContext>(_ctx, getState());
  enterRule(_localctx, 398, FandangoParser::RuleFor_if_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2410);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(2409);
      match(FandangoParser::ASYNC);
    }
    setState(2412);
    match(FandangoParser::FOR);
    setState(2413);
    star_targets();
    setState(2414);
    match(FandangoParser::IN);
    setState(2415);
    disjunction();
    setState(2420);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::IF) {
      setState(2416);
      match(FandangoParser::IF);
      setState(2417);
      disjunction();
      setState(2422);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListcompContext ------------------------------------------------------------------

FandangoParser::ListcompContext::ListcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListcompContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::ListcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::ListcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::ListcompContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::ListcompContext::getRuleIndex() const {
  return FandangoParser::RuleListcomp;
}


std::any FandangoParser::ListcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitListcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListcompContext* FandangoParser::listcomp() {
  ListcompContext *_localctx = _tracker.createInstance<ListcompContext>(_ctx, getState());
  enterRule(_localctx, 400, FandangoParser::RuleListcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2423);
    match(FandangoParser::OPEN_BRACK);
    setState(2424);
    named_expression();
    setState(2425);
    for_if_clauses();
    setState(2426);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetcompContext ------------------------------------------------------------------

FandangoParser::SetcompContext::SetcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::SetcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::SetcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::SetcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetcompContext::getRuleIndex() const {
  return FandangoParser::RuleSetcomp;
}


std::any FandangoParser::SetcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSetcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetcompContext* FandangoParser::setcomp() {
  SetcompContext *_localctx = _tracker.createInstance<SetcompContext>(_ctx, getState());
  enterRule(_localctx, 402, FandangoParser::RuleSetcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2428);
    match(FandangoParser::OPEN_BRACE);
    setState(2429);
    named_expression();
    setState(2430);
    for_if_clauses();
    setState(2431);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenexpContext ------------------------------------------------------------------

FandangoParser::GenexpContext::GenexpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GenexpContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::For_if_clausesContext* FandangoParser::GenexpContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::GenexpContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::GenexpContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::GenexpContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::GenexpContext::getRuleIndex() const {
  return FandangoParser::RuleGenexp;
}


std::any FandangoParser::GenexpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenexp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GenexpContext* FandangoParser::genexp() {
  GenexpContext *_localctx = _tracker.createInstance<GenexpContext>(_ctx, getState());
  enterRule(_localctx, 404, FandangoParser::RuleGenexp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2433);
    match(FandangoParser::OPEN_PAREN);
    setState(2436);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      setState(2434);
      assignment_expression();
      break;
    }

    case 2: {
      setState(2435);
      expression();
      break;
    }

    default:
      break;
    }
    setState(2438);
    for_if_clauses();
    setState(2439);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictcompContext ------------------------------------------------------------------

FandangoParser::DictcompContext::DictcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::KvpairContext* FandangoParser::DictcompContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::DictcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::DictcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::DictcompContext::getRuleIndex() const {
  return FandangoParser::RuleDictcomp;
}


std::any FandangoParser::DictcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDictcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictcompContext* FandangoParser::dictcomp() {
  DictcompContext *_localctx = _tracker.createInstance<DictcompContext>(_ctx, getState());
  enterRule(_localctx, 406, FandangoParser::RuleDictcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2441);
    match(FandangoParser::OPEN_BRACE);
    setState(2442);
    kvpair();
    setState(2443);
    for_if_clauses();
    setState(2444);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

FandangoParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ArgsContext* FandangoParser::ArgumentsContext::args() {
  return getRuleContext<FandangoParser::ArgsContext>(0);
}

tree::TerminalNode* FandangoParser::ArgumentsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::ArgumentsContext::getRuleIndex() const {
  return FandangoParser::RuleArguments;
}


std::any FandangoParser::ArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArguments(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgumentsContext* FandangoParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 408, FandangoParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2446);
    args();
    setState(2448);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2447);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

FandangoParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ArgContext *> FandangoParser::ArgsContext::arg() {
  return getRuleContexts<FandangoParser::ArgContext>();
}

FandangoParser::ArgContext* FandangoParser::ArgsContext::arg(size_t i) {
  return getRuleContext<FandangoParser::ArgContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ArgsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ArgsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::KwargsContext* FandangoParser::ArgsContext::kwargs() {
  return getRuleContext<FandangoParser::KwargsContext>(0);
}


size_t FandangoParser::ArgsContext::getRuleIndex() const {
  return FandangoParser::RuleArgs;
}


std::any FandangoParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgsContext* FandangoParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 410, FandangoParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2463);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2450);
      arg();
      setState(2455);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2451);
          match(FandangoParser::COMMA);
          setState(2452);
          arg(); 
        }
        setState(2457);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
      }
      setState(2460);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
      case 1: {
        setState(2458);
        match(FandangoParser::COMMA);
        setState(2459);
        kwargs();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2462);
      kwargs();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

FandangoParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Starred_expressionContext* FandangoParser::ArgContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::ArgContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::ArgContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::ArgContext::getRuleIndex() const {
  return FandangoParser::RuleArg;
}


std::any FandangoParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgContext* FandangoParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 412, FandangoParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2468);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2465);
      starred_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2466);
      assignment_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2467);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwargsContext ------------------------------------------------------------------

FandangoParser::KwargsContext::KwargsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Kwarg_or_starredContext *> FandangoParser::KwargsContext::kwarg_or_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_starredContext>();
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::KwargsContext::kwarg_or_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_starredContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::KwargsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::KwargsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

std::vector<FandangoParser::Kwarg_or_double_starredContext *> FandangoParser::KwargsContext::kwarg_or_double_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_double_starredContext>();
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::KwargsContext::kwarg_or_double_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_double_starredContext>(i);
}


size_t FandangoParser::KwargsContext::getRuleIndex() const {
  return FandangoParser::RuleKwargs;
}


std::any FandangoParser::KwargsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwargs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwargsContext* FandangoParser::kwargs() {
  KwargsContext *_localctx = _tracker.createInstance<KwargsContext>(_ctx, getState());
  enterRule(_localctx, 414, FandangoParser::RuleKwargs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2503);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2470);
      kwarg_or_starred();
      setState(2475);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2471);
          match(FandangoParser::COMMA);
          setState(2472);
          kwarg_or_starred(); 
        }
        setState(2477);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
      }
      setState(2478);
      match(FandangoParser::COMMA);
      setState(2479);
      kwarg_or_double_starred();
      setState(2484);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2480);
          match(FandangoParser::COMMA);
          setState(2481);
          kwarg_or_double_starred(); 
        }
        setState(2486);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2487);
      kwarg_or_starred();
      setState(2492);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2488);
          match(FandangoParser::COMMA);
          setState(2489);
          kwarg_or_starred(); 
        }
        setState(2494);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2495);
      kwarg_or_double_starred();
      setState(2500);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2496);
          match(FandangoParser::COMMA);
          setState(2497);
          kwarg_or_double_starred(); 
        }
        setState(2502);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Starred_expressionContext ------------------------------------------------------------------

FandangoParser::Starred_expressionContext::Starred_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Starred_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Starred_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Starred_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStarred_expression;
}


std::any FandangoParser::Starred_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStarred_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Starred_expressionContext* FandangoParser::starred_expression() {
  Starred_expressionContext *_localctx = _tracker.createInstance<Starred_expressionContext>(_ctx, getState());
  enterRule(_localctx, 416, FandangoParser::RuleStarred_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2505);
    match(FandangoParser::STAR);
    setState(2506);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_starredContext::Kwarg_or_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Kwarg_or_starredContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Starred_expressionContext* FandangoParser::Kwarg_or_starredContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}


size_t FandangoParser::Kwarg_or_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_starred;
}


std::any FandangoParser::Kwarg_or_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::kwarg_or_starred() {
  Kwarg_or_starredContext *_localctx = _tracker.createInstance<Kwarg_or_starredContext>(_ctx, getState());
  enterRule(_localctx, 418, FandangoParser::RuleKwarg_or_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2512);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2508);
        match(FandangoParser::NAME);
        setState(2509);
        match(FandangoParser::ASSIGN);
        setState(2510);
        expression();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(2511);
        starred_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_double_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_double_starredContext::Kwarg_or_double_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_double_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Kwarg_or_double_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_double_starred;
}


std::any FandangoParser::Kwarg_or_double_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_double_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::kwarg_or_double_starred() {
  Kwarg_or_double_starredContext *_localctx = _tracker.createInstance<Kwarg_or_double_starredContext>(_ctx, getState());
  enterRule(_localctx, 420, FandangoParser::RuleKwarg_or_double_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2519);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2514);
        match(FandangoParser::NAME);
        setState(2515);
        match(FandangoParser::ASSIGN);
        setState(2516);
        expression();
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(2517);
        match(FandangoParser::POWER);
        setState(2518);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetsContext ------------------------------------------------------------------

FandangoParser::Star_targetsContext::Star_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targetsContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetsContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets;
}


std::any FandangoParser::Star_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetsContext* FandangoParser::star_targets() {
  Star_targetsContext *_localctx = _tracker.createInstance<Star_targetsContext>(_ctx, getState());
  enterRule(_localctx, 422, FandangoParser::RuleStar_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2521);
    star_target();
    setState(2526);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2522);
        match(FandangoParser::COMMA);
        setState(2523);
        star_target(); 
      }
      setState(2528);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx);
    }
    setState(2530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2529);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_list_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_list_seqContext::Star_targets_list_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_list_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_list_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_list_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_list_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_list_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_list_seq;
}


std::any FandangoParser::Star_targets_list_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_list_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::star_targets_list_seq() {
  Star_targets_list_seqContext *_localctx = _tracker.createInstance<Star_targets_list_seqContext>(_ctx, getState());
  enterRule(_localctx, 424, FandangoParser::RuleStar_targets_list_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2532);
    star_target();
    setState(2537);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2533);
        match(FandangoParser::COMMA);
        setState(2534);
        star_target(); 
      }
      setState(2539);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    }
    setState(2541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2540);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_tuple_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_tuple_seqContext::Star_targets_tuple_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_tuple_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_tuple_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_tuple_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_tuple_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_tuple_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_tuple_seq;
}


std::any FandangoParser::Star_targets_tuple_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_tuple_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::star_targets_tuple_seq() {
  Star_targets_tuple_seqContext *_localctx = _tracker.createInstance<Star_targets_tuple_seqContext>(_ctx, getState());
  enterRule(_localctx, 426, FandangoParser::RuleStar_targets_tuple_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2556);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2543);
      star_target();
      setState(2546); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2544);
                match(FandangoParser::COMMA);
                setState(2545);
                star_target();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2548); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2551);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2550);
        match(FandangoParser::COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2553);
      star_target();
      setState(2554);
      match(FandangoParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetContext ------------------------------------------------------------------

FandangoParser::Star_targetContext::Star_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_targetContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_targetContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}


size_t FandangoParser::Star_targetContext::getRuleIndex() const {
  return FandangoParser::RuleStar_target;
}


std::any FandangoParser::Star_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetContext* FandangoParser::star_target() {
  Star_targetContext *_localctx = _tracker.createInstance<Star_targetContext>(_ctx, getState());
  enterRule(_localctx, 428, FandangoParser::RuleStar_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2561);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(2558);
        match(FandangoParser::STAR);
        setState(2559);
        star_target();
        break;
      }

      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::NONTERMINAL:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::FSTRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2560);
        target_with_star_atom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_with_star_atomContext ------------------------------------------------------------------

FandangoParser::Target_with_star_atomContext::Target_with_star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Target_with_star_atomContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Target_with_star_atomContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_atomContext* FandangoParser::Target_with_star_atomContext::star_atom() {
  return getRuleContext<FandangoParser::Star_atomContext>(0);
}


size_t FandangoParser::Target_with_star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleTarget_with_star_atom;
}


std::any FandangoParser::Target_with_star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTarget_with_star_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::target_with_star_atom() {
  Target_with_star_atomContext *_localctx = _tracker.createInstance<Target_with_star_atomContext>(_ctx, getState());
  enterRule(_localctx, 430, FandangoParser::RuleTarget_with_star_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2573);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2563);
      t_primary(0);
      setState(2564);
      match(FandangoParser::DOT);
      setState(2565);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2567);
      t_primary(0);
      setState(2568);
      match(FandangoParser::OPEN_BRACK);
      setState(2569);
      slices();
      setState(2570);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2572);
      star_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_atomContext ------------------------------------------------------------------

FandangoParser::Star_atomContext::Star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_atomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_atomContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::Star_atomContext::star_targets_tuple_seq() {
  return getRuleContext<FandangoParser::Star_targets_tuple_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::Star_atomContext::star_targets_list_seq() {
  return getRuleContext<FandangoParser::Star_targets_list_seqContext>(0);
}


size_t FandangoParser::Star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleStar_atom;
}


std::any FandangoParser::Star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_atomContext* FandangoParser::star_atom() {
  Star_atomContext *_localctx = _tracker.createInstance<Star_atomContext>(_ctx, getState());
  enterRule(_localctx, 432, FandangoParser::RuleStar_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2590);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2575);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2576);
      match(FandangoParser::OPEN_PAREN);
      setState(2577);
      target_with_star_atom();
      setState(2578);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2580);
      match(FandangoParser::OPEN_PAREN);
      setState(2582);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009415466254616) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599631567367) != 0)) {
        setState(2581);
        star_targets_tuple_seq();
      }
      setState(2584);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2585);
      match(FandangoParser::OPEN_BRACK);
      setState(2587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9009415466254616) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 4503599631567367) != 0)) {
        setState(2586);
        star_targets_list_seq();
      }
      setState(2589);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_targetContext ------------------------------------------------------------------

FandangoParser::Single_targetContext::Single_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::Single_targetContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::Single_targetContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Single_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_target;
}


std::any FandangoParser::Single_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_targetContext* FandangoParser::single_target() {
  Single_targetContext *_localctx = _tracker.createInstance<Single_targetContext>(_ctx, getState());
  enterRule(_localctx, 434, FandangoParser::RuleSingle_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2598);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2592);
      single_subscript_attribute_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2593);
      match(FandangoParser::NAME);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2594);
      match(FandangoParser::OPEN_PAREN);
      setState(2595);
      single_target();
      setState(2596);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_subscript_attribute_targetContext ------------------------------------------------------------------

FandangoParser::Single_subscript_attribute_targetContext::Single_subscript_attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Single_subscript_attribute_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Single_subscript_attribute_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Single_subscript_attribute_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_subscript_attribute_target;
}


std::any FandangoParser::Single_subscript_attribute_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_subscript_attribute_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::single_subscript_attribute_target() {
  Single_subscript_attribute_targetContext *_localctx = _tracker.createInstance<Single_subscript_attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 436, FandangoParser::RuleSingle_subscript_attribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2609);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2600);
      t_primary(0);
      setState(2601);
      match(FandangoParser::DOT);
      setState(2602);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2604);
      t_primary(0);
      setState(2605);
      match(FandangoParser::OPEN_BRACK);
      setState(2606);
      slices();
      setState(2607);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- T_primaryContext ------------------------------------------------------------------

FandangoParser::T_primaryContext::T_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::T_primaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::T_primaryContext* FandangoParser::T_primaryContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::T_primaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::T_primaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::T_primaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::T_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleT_primary;
}


std::any FandangoParser::T_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitT_primary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::T_primaryContext* FandangoParser::t_primary() {
   return t_primary(0);
}

FandangoParser::T_primaryContext* FandangoParser::t_primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::T_primaryContext *_localctx = _tracker.createInstance<T_primaryContext>(_ctx, parentState);
  FandangoParser::T_primaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 438;
  enterRecursionRule(_localctx, 438, FandangoParser::RuleT_primary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2612);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(2632);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2630);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2614);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2615);
          match(FandangoParser::DOT);
          setState(2616);
          match(FandangoParser::NAME);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2617);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2618);
          match(FandangoParser::OPEN_BRACK);
          setState(2619);
          slices();
          setState(2620);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2622);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2623);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(2624);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2625);
          match(FandangoParser::OPEN_PAREN);
          setState(2627);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 9009488480706840) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 67)) & 4503599633861255) != 0)) {
            setState(2626);
            arguments();
          }
          setState(2629);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(2634);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Del_targetsContext ------------------------------------------------------------------

FandangoParser::Del_targetsContext::Del_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Del_targetContext *> FandangoParser::Del_targetsContext::del_target() {
  return getRuleContexts<FandangoParser::Del_targetContext>();
}

FandangoParser::Del_targetContext* FandangoParser::Del_targetsContext::del_target(size_t i) {
  return getRuleContext<FandangoParser::Del_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Del_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Del_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Del_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleDel_targets;
}


std::any FandangoParser::Del_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetsContext* FandangoParser::del_targets() {
  Del_targetsContext *_localctx = _tracker.createInstance<Del_targetsContext>(_ctx, getState());
  enterRule(_localctx, 440, FandangoParser::RuleDel_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2635);
    del_target();
    setState(2640);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2636);
        match(FandangoParser::COMMA);
        setState(2637);
        del_target(); 
      }
      setState(2642);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
    }
    setState(2644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2643);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_targetContext ------------------------------------------------------------------

FandangoParser::Del_targetContext::Del_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Del_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Del_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Del_t_atomContext* FandangoParser::Del_targetContext::del_t_atom() {
  return getRuleContext<FandangoParser::Del_t_atomContext>(0);
}


size_t FandangoParser::Del_targetContext::getRuleIndex() const {
  return FandangoParser::RuleDel_target;
}


std::any FandangoParser::Del_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetContext* FandangoParser::del_target() {
  Del_targetContext *_localctx = _tracker.createInstance<Del_targetContext>(_ctx, getState());
  enterRule(_localctx, 442, FandangoParser::RuleDel_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2656);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2646);
      t_primary(0);
      setState(2647);
      match(FandangoParser::DOT);
      setState(2648);
      match(FandangoParser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2650);
      t_primary(0);
      setState(2651);
      match(FandangoParser::OPEN_BRACK);
      setState(2652);
      slices();
      setState(2653);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2655);
      del_t_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_t_atomContext ------------------------------------------------------------------

FandangoParser::Del_t_atomContext::Del_t_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_t_atomContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Del_t_atomContext::getRuleIndex() const {
  return FandangoParser::RuleDel_t_atom;
}


std::any FandangoParser::Del_t_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_t_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_t_atomContext* FandangoParser::del_t_atom() {
  Del_t_atomContext *_localctx = _tracker.createInstance<Del_t_atomContext>(_ctx, getState());
  enterRule(_localctx, 444, FandangoParser::RuleDel_t_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2669);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2658);
        match(FandangoParser::NAME);
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2659);
        match(FandangoParser::OPEN_PAREN);
        setState(2661);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 9009415466254616) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 4503599631567365) != 0)) {
          setState(2660);
          del_targets();
        }
        setState(2663);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 3);
        setState(2664);
        match(FandangoParser::OPEN_BRACK);
        setState(2666);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 9009415466254616) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 4503599631567365) != 0)) {
          setState(2665);
          del_targets();
        }
        setState(2668);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_expressionsContext ------------------------------------------------------------------

FandangoParser::Type_expressionsContext::Type_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Type_expressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Type_expressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleType_expressions;
}


std::any FandangoParser::Type_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_expressionsContext* FandangoParser::type_expressions() {
  Type_expressionsContext *_localctx = _tracker.createInstance<Type_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 446, FandangoParser::RuleType_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2728);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2671);
      expression();
      setState(2676);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2672);
          match(FandangoParser::COMMA);
          setState(2673);
          expression(); 
        }
        setState(2678);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
      }
      setState(2679);
      match(FandangoParser::COMMA);
      setState(2680);
      match(FandangoParser::STAR);
      setState(2681);
      expression();
      setState(2682);
      match(FandangoParser::COMMA);
      setState(2683);
      match(FandangoParser::POWER);
      setState(2684);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2686);
      expression();
      setState(2691);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2687);
          match(FandangoParser::COMMA);
          setState(2688);
          expression(); 
        }
        setState(2693);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
      }
      setState(2694);
      match(FandangoParser::COMMA);
      setState(2695);
      match(FandangoParser::STAR);
      setState(2696);
      expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2698);
      expression();
      setState(2703);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2699);
          match(FandangoParser::COMMA);
          setState(2700);
          expression(); 
        }
        setState(2705);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx);
      }
      setState(2706);
      match(FandangoParser::COMMA);
      setState(2707);
      match(FandangoParser::POWER);
      setState(2708);
      expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2710);
      match(FandangoParser::STAR);
      setState(2711);
      expression();
      setState(2712);
      match(FandangoParser::COMMA);
      setState(2713);
      match(FandangoParser::POWER);
      setState(2714);
      expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2716);
      match(FandangoParser::STAR);
      setState(2717);
      expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2718);
      match(FandangoParser::POWER);
      setState(2719);
      expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2720);
      expression();
      setState(2725);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(2721);
        match(FandangoParser::COMMA);
        setState(2722);
        expression();
        setState(2727);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_type_commentContext ------------------------------------------------------------------

FandangoParser::Func_type_commentContext::Func_type_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_type_commentContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}


size_t FandangoParser::Func_type_commentContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type_comment;
}


std::any FandangoParser::Func_type_commentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type_comment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_type_commentContext* FandangoParser::func_type_comment() {
  Func_type_commentContext *_localctx = _tracker.createInstance<Func_type_commentContext>(_ctx, getState());
  enterRule(_localctx, 448, FandangoParser::RuleFunc_type_comment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2730);
    match(FandangoParser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool FandangoParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 12: return generator_callSempred(antlrcpp::downCast<Generator_callContext *>(context), predicateIndex);
    case 23: return selectorSempred(antlrcpp::downCast<SelectorContext *>(context), predicateIndex);
    case 60: return dotted_nameSempred(antlrcpp::downCast<Dotted_nameContext *>(context), predicateIndex);
    case 114: return name_or_attrSempred(antlrcpp::downCast<Name_or_attrContext *>(context), predicateIndex);
    case 158: return bitwise_orSempred(antlrcpp::downCast<Bitwise_orContext *>(context), predicateIndex);
    case 159: return bitwise_xorSempred(antlrcpp::downCast<Bitwise_xorContext *>(context), predicateIndex);
    case 160: return bitwise_andSempred(antlrcpp::downCast<Bitwise_andContext *>(context), predicateIndex);
    case 161: return shift_exprSempred(antlrcpp::downCast<Shift_exprContext *>(context), predicateIndex);
    case 162: return sumSempred(antlrcpp::downCast<SumContext *>(context), predicateIndex);
    case 163: return termSempred(antlrcpp::downCast<TermContext *>(context), predicateIndex);
    case 167: return primarySempred(antlrcpp::downCast<PrimaryContext *>(context), predicateIndex);
    case 219: return t_primarySempred(antlrcpp::downCast<T_primaryContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool FandangoParser::generator_callSempred(Generator_callContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);
    case 1: return precpred(_ctx, 3);
    case 2: return precpred(_ctx, 2);
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::selectorSempred(SelectorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::dotted_nameSempred(Dotted_nameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::name_or_attrSempred(Name_or_attrContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_orSempred(Bitwise_orContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_xorSempred(Bitwise_xorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_andSempred(Bitwise_andContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::shift_exprSempred(Shift_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 3);
    case 12: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::sumSempred(SumContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::termSempred(TermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 6);
    case 16: return precpred(_ctx, 5);
    case 17: return precpred(_ctx, 4);
    case 18: return precpred(_ctx, 3);
    case 19: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::primarySempred(PrimaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 5);
    case 21: return precpred(_ctx, 4);
    case 22: return precpred(_ctx, 3);
    case 23: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::t_primarySempred(T_primaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 24: return precpred(_ctx, 5);
    case 25: return precpred(_ctx, 4);
    case 26: return precpred(_ctx, 3);
    case 27: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void FandangoParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fandangoparserParserInitialize();
#else
  ::antlr4::internal::call_once(fandangoparserParserOnceFlag, fandangoparserParserInitialize);
#endif
}
